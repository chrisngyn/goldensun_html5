!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=32)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.mount_collision_polygon=e.hsv2rgb=e.rgb2hsv=e.change_brightness=e.capitalize=e.get_directions=e.get_surroundings=e.kill_all_sprites=e.get_text_width=e.get_transition_directions=e.get_opposite_direction=e.transitions=e.is_close=e.is_inside_sector=e.range_360=e.variation=e.join_directions=e.split_direction=e.map_directions=e.directions_angles=e.action_inputs=e.base_actions=e.reverse_directions=e.directions_count=e.directions=e.element_names=e.ordered_elements=e.elements=void 0;const s=i(1),n=i(3);function a(t){return t=(t%=s.degree360)<0?t+s.degree360:t}function r(t,e,i,n,r,o,_){const h=e*i*(e*i),c=Math.pow(o-n,2)+Math.pow(_-r,2),l=a(Math.atan2(r-_,o-n)),d=[0,s.degree90,Math.PI,s.degree270,s.degree360];let p=!1;for(let e=0;e<t.length;++e){let i=t[e],s=d[i-1];if(p=d[i]>=l&&l>=s,p)break}return c<=h&&p}function o(t,e,i){let s=Math.max(t,e,i),n=s-Math.min(t,e,i),a=n&&(s===t?(e-i)/n:s===e?2+(i-t)/n:4+(t-e)/n);return[60*(a<0?a+6:a),s&&n/s,s]}function _(t,e,i){let s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}e.elements={VENUS:"venus",MERCURY:"mercury",MARS:"mars",JUPITER:"jupiter",NO_ELEMENT:"no_element"},e.ordered_elements=[e.elements.VENUS,e.elements.MERCURY,e.elements.MARS,e.elements.JUPITER],e.element_names={[e.elements.VENUS]:"Earth",[e.elements.MERCURY]:"Water",[e.elements.MARS]:"Fire",[e.elements.JUPITER]:"Wind"},e.directions={right:0,down_right:1,down:2,down_left:3,left:4,up_left:5,up:6,up_right:7},e.directions_count=Object.keys(e.directions).length,e.reverse_directions={[e.directions.right]:"right",[e.directions.up_right]:"up_right",[e.directions.up]:"up",[e.directions.up_left]:"up_left",[e.directions.left]:"left",[e.directions.down_left]:"down_left",[e.directions.down]:"down",[e.directions.down_right]:"down_right"},e.base_actions={IDLE:"idle",WALK:"walk",DASH:"dash",PUSH:"push",CLIMB:"climb",CAST:"cast",JUMP:"jump"},e.action_inputs={SPACEBAR:"spacebar",ENTER:"enter",SHIFT:"shift",ESC:"esc"},e.directions_angles=function(t){return t*Math.PI/4},e.map_directions=function(t){return void 0===t?t:(t=Array.isArray(t)?t:[t]).map(t=>e.directions[t])},e.split_direction=function(t){if(t%2==0)return[t];let i=new Array(2);return i[0]=t===e.directions.right?t.up_right:t-1,i[1]=t===e.directions.up_right?e.directions.right:t+1,i},e.join_directions=function(t,i){return i=t===e.directions.up&&i===e.directions.right?e.directions_count:i,Math.min(t,i)+1},e.variation=function(){return n.random(0,4)},e.range_360=a,e.is_inside_sector=r,e.is_close=function(t,i,n,a,o,_){switch(t){case e.directions.up:return r([1,2],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.up_right:return r([1],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.right:return r([1,4],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.down_right:return r([4],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.down:return r([3,4],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.down_left:return r([3],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.left:return r([2,3],s.HERO_BODY_RADIUS,_,i,n,a,o);case e.directions.up_left:return r([2],s.HERO_BODY_RADIUS,_,i,n,a,o)}},e.transitions={[e.directions.up]:{[e.directions.up]:e.directions.up,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up},[e.directions.down]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.right},[e.directions.down_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down_left,[e.directions.down_right]:e.directions.down,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.up},[e.directions.down_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.down_left,[e.directions.right]:e.directions.down_right,[e.directions.down_left]:e.directions.down,[e.directions.down_right]:e.directions.down_right,[e.directions.up_left]:e.directions.left,[e.directions.up_right]:e.directions.right},[e.directions.up_left]:{[e.directions.up]:e.directions.up_left,[e.directions.down]:e.directions.down_left,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up_left,[e.directions.up_right]:e.directions.up},[e.directions.up_right]:{[e.directions.up]:e.directions.up_right,[e.directions.down]:e.directions.down_right,[e.directions.left]:e.directions.up_left,[e.directions.right]:e.directions.up_right,[e.directions.down_left]:e.directions.left,[e.directions.down_right]:e.directions.right,[e.directions.up_left]:e.directions.up,[e.directions.up_right]:e.directions.up_right}},e.get_opposite_direction=function(t){switch(t){case e.directions.up:return e.directions.down;case e.directions.down:return e.directions.up;case e.directions.left:return e.directions.right;case e.directions.right:return e.directions.left}},e.get_transition_directions=function(t,i){return e.transitions[i][t]},e.get_text_width=function(t,e,i=!1){const n=i?"gs-italic-bmp-font":"gs-bmp-font";let a=t.add.bitmapText(0,0,n,e,s.FONT_SIZE);const r=a.width;return a.destroy(),r},e.kill_all_sprites=function(t,e=!1){t.children.forEach(t=>{e?t.parent.remove(t,!0):t.kill()})},e.get_surroundings=function(t,i,s=!1,n=1){let a=[{x:t-n,y:i,diag:!1,direction:e.directions.left},{x:t+n,y:i,diag:!1,direction:e.directions.right},{x:t,y:i-n,diag:!1,direction:e.directions.up},{x:t,y:i+n,diag:!1,direction:e.directions.down}];return s&&(a=a.concat([{x:t-n,y:i-n,diag:!0,direction:e.directions.up_left},{x:t+n,y:i-n,diag:!0,direction:e.directions.up_right},{x:t-n,y:i+n,diag:!0,direction:e.directions.down_left},{x:t+n,y:i+n,diag:!0,direction:e.directions.down_right}])),a},e.get_directions=function(t=!1){let i=[e.directions.up,e.directions.down,e.directions.left,e.directions.right];return t&&i.push(e.directions.up_left,e.directions.up_right,e.directions.down_left,e.directions.down_right),i},e.capitalize=function(t,e=!1){return(e?t.toLowerCase():t).replace(/(?:^|\s|["'([{])+\S/g,t=>t.toUpperCase())},e.change_brightness=function(t,e){t=3==(t="string"==typeof t?t.replace(/^\s*#|\s*$/g,""):t.toString(16)).length?t.replace(/(.)/g,"$1$1"):("000000"+t).slice(-6);let i,s,n,a=parseInt(t.substr(0,2),16),r=parseInt(t.substr(2,2),16),h=parseInt(t.substr(4,2),16);return[i,s,n]=o(a,r,h),n=n*e|0,[a,r,h]=_(i,s,n),t=((1<<24)+(a<<16)+(r<<8)+h).toString(16).slice(1),parseInt(t,16)},e.rgb2hsv=o,e.hsv2rgb=_,e.mount_collision_polygon=function(t,e,i){return void 0===i&&(i=0),[[i+e,e],...0===i?[]:[[t-i+e,e]],[t+e,i+e],...0===i?[]:[[t+e,t-i+e]],[t-i+e,t+e],...0===i?[]:[[i+e,t+e]],[e,t-i+e],...0===i?[]:[[e,i+e]]]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AVATAR_SIZE=e.ELEM_ATTR_MAX=e.ELEM_ATTR_MIN=e.CAMERA_LERP=e.degree540=e.degree360=e.degree270=e.degree180=e.degree90=e.degree60=e.degree30=e.degree15=e.ICON_HEIGHT=e.ICON_WIDTH=e.PUSH_TIME=e.MAX_DIAG_WIN_HEIGHT=e.MAX_LINES_PER_DIAG_WIN=e.MAX_DIAG_WIN_WIDTH=e.SPACE_BETWEEN_LINES=e.WINDOW_PADDING_BOTTOM=e.WINDOW_PADDING_TOP=e.WINDOW_PADDING_H=e.OUTSIDE_BORDER_WIDTH=e.INSIDE_BORDER_WIDTH=e.FONT_SIZE=e.PURPLE_FONT_COLOR=e.BLUE_FONT_COLOR=e.RED_FONT_COLOR=e.YELLOW_FONT_COLOR=e.DEFAULT_FONT_COLOR=e.DEFAULT_WINDOW_COLOR=e.MAP_DAMPING=e.DELTA_TIME_FACTOR=e.INV_SQRT2=e.HERO_BODY_RADIUS=e.TARGET_FPS=e.GAME_HEIGHT=e.GAME_WIDTH=void 0,e.GAME_WIDTH=240,e.GAME_HEIGHT=160,e.TARGET_FPS=60,e.HERO_BODY_RADIUS=7,e.INV_SQRT2=1/Math.sqrt(2),e.DELTA_TIME_FACTOR=50/3,e.MAP_DAMPING=1,e.DEFAULT_WINDOW_COLOR=24704,e.DEFAULT_FONT_COLOR=16316664,e.YELLOW_FONT_COLOR=16316480,e.RED_FONT_COLOR=16252928,e.BLUE_FONT_COLOR=248,e.PURPLE_FONT_COLOR=14708912,e.FONT_SIZE=8,e.INSIDE_BORDER_WIDTH=3,e.OUTSIDE_BORDER_WIDTH=1,e.WINDOW_PADDING_H=4,e.WINDOW_PADDING_TOP=8,e.WINDOW_PADDING_BOTTOM=4,e.SPACE_BETWEEN_LINES=8,e.MAX_DIAG_WIN_WIDTH=180,e.MAX_LINES_PER_DIAG_WIN=3,e.MAX_DIAG_WIN_HEIGHT=e.FONT_SIZE*e.MAX_LINES_PER_DIAG_WIN+e.SPACE_BETWEEN_LINES*(e.MAX_LINES_PER_DIAG_WIN-1)+e.WINDOW_PADDING_TOP+e.WINDOW_PADDING_BOTTOM,e.PUSH_TIME=850,e.ICON_WIDTH=14,e.ICON_HEIGHT=14,e.degree15=15*Math.PI/180,e.degree30=30*Math.PI/180,e.degree60=60*Math.PI/180,e.degree90=Math.PI/2,e.degree180=Math.PI,e.degree270=3*Math.PI/2,e.degree360=2*Math.PI,e.degree540=3*Math.PI,e.CAMERA_LERP=.15,e.ELEM_ATTR_MIN=-200,e.ELEM_ATTR_MAX=200,e.AVATAR_SIZE=32},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Window=void 0;const s=i(1),n=i(0),a=Phaser.Timer.QUARTER>>2;e.Window=class{constructor(t,e,i,n,a,r=!0,o=s.DEFAULT_WINDOW_COLOR,_=s.DEFAULT_FONT_COLOR){this.game=t,this.group=t.add.group(),this.x=e,this.y=i,this.width=n,this.height=a,this.color=o,this.font_color=_,this.graphics=this.game.add.graphics(0,0),this.separators_graphics=this.game.add.graphics(0,0),this.draw_background(),this.draw_borders(),this.group.add(this.graphics),this.group.add(this.separators_graphics),this.group.alpha=0,this.group.width=0,this.group.height=0,this.need_pos_update=r,this.open=!1,this.lines_sprites=[],this.extra_sprites=[],this.internal_groups={}}get real_x(){return this.group.x}get real_y(){return this.group.y}clear_separators(){this.separators_graphics.clear()}draw_separator(t,e,i,s,a=!0){const r=n.change_brightness(this.color,1.3),o=n.change_brightness(this.color,.8),_=[n.change_brightness(this.color,.9),o,r];for(let n=0;n<_.length;++n){const r=_[n],o=n-1;this.separators_graphics.lineStyle(1,r),this.separators_graphics.moveTo(t+o*+a,e+o*+!a),this.separators_graphics.lineTo(i+o*+a,s+o*+!a)}}draw_background(){this.graphics.beginFill(this.color,1),this.graphics.drawRect(2,2,this.width,this.height),this.graphics.endFill()}draw_borders(){this.graphics.lineStyle(1,5395026),this.graphics.moveTo(0,1),this.graphics.lineTo(0,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(1,1),this.graphics.lineTo(1,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,1),this.graphics.lineTo(2,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(3,this.height-1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width,2),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(this.width+1,1),this.graphics.lineTo(this.width+1,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width+3,1),this.graphics.lineTo(this.width+3,this.height+1),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(2,0),this.graphics.lineTo(this.width+2,0),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,1),this.graphics.lineTo(this.width+2,1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(3,2),this.graphics.lineTo(this.width+1,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(3,3),this.graphics.lineTo(this.width,3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,this.height),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,16777215),this.graphics.moveTo(2,this.height+1),this.graphics.lineTo(this.width+2,this.height+1),this.graphics.lineStyle(1,10855845),this.graphics.moveTo(2,this.height+2),this.graphics.lineTo(this.width+2,this.height+2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(2,this.height+3),this.graphics.lineTo(this.width+2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,1),this.graphics.lineTo(2,2),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(1,this.height+2),this.graphics.lineTo(2,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,this.height+2),this.graphics.lineTo(this.width+3,this.height+3),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width+2,1),this.graphics.lineTo(this.width+3,2),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,4),this.graphics.lineTo(5,5),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(3,3),this.graphics.lineTo(4,4),this.graphics.lineStyle(1,5395026),this.graphics.moveTo(this.width-1,this.height-1),this.graphics.lineTo(this.width,this.height),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(this.width-1,4),this.graphics.lineTo(this.width,5),this.graphics.lineStyle(1,1118481),this.graphics.moveTo(4,this.height-1),this.graphics.lineTo(5,this.height)}update_size(t){void 0!==t.width&&(this.width=t.width),void 0!==t.height&&(this.height=t.height),this.graphics.clear(),this.draw_background(),this.draw_borders()}update_position(t,e=!0){void 0!==t.x&&(this.x=t.x),void 0!==t.y&&(this.y=t.y),this.group.x=(e?this.game.camera.x:0)+this.x,this.group.y=(e?this.game.camera.y:0)+this.y}define_internal_group(t,e={}){let i=this.game.add.group();return this.destroy_internal_group(t),this.internal_groups[t]=i,void 0!==e.x&&(i.x=e.x),void 0!==e.y&&(i.y=e.y),this.group.add(i),i}get_internal_group(t){return this.internal_groups[t]}add_to_internal_group(t,e){return t in this.internal_groups&&(this.internal_groups[t].add(e),!0)}destroy_internal_group(t){t in this.internal_groups&&this.internal_groups[t]&&this.internal_groups[t].destroy()}show(t,e=!0,i){this.group.alpha=1,this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.open=!0,this.close_callback=i,this.page_indicator_is_set=!1,e?this.game.add.tween(this.group).to({width:this.graphics.width,height:this.graphics.height},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{void 0!==t&&t()}):(this.group.width=this.graphics.width,this.group.height=this.graphics.height,void 0!==t&&t())}update(t=!1){(this.need_pos_update||t)&&(this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y)}add_sprite_to_group(t,e){let i=this.group;if(void 0!==e){const t=this.get_internal_group(e);t&&(i=t)}i.add(t),this.extra_sprites.push(t)}create_at_group(t,e,i,s,n,a){let r=this.group;if(void 0!==a){const t=this.get_internal_group(a);t&&(r=t)}let o=r.create(t,e,i,n);return void 0!==s&&(o.tint=s),this.extra_sprites.push(o),o}send_to_front(){this.group.parent.bringToTop(this.group)}remove_from_group(t,e=!0){if(void 0!==t)this.group.remove(t,e);else for(let t=0;t<this.extra_sprites.length;++t)this.group.remove(this.extra_sprites[t],e)}remove_smooth(t){t.smoothed=!1,t.autoRound=!0}set_text(t,e,i,n,a=!1,r=!1){for(let t=0;t<this.lines_sprites.length;++t)this.lines_sprites[t].text.destroy(),this.lines_sprites[t].shadow.destroy();this.lines_sprites=[];const o=a?-2:0,_=void 0===e?s.WINDOW_PADDING_H+4:e;let h=void 0===i?s.WINDOW_PADDING_TOP+o:i;const c=a?"gs-italic-bmp-font":"gs-bmp-font";let l,d,p=[];r&&(l=new Promise(t=>d=t));for(let e=0;e<t.length;++e){let i=t[e],a=this.game.add.bitmapText(_,h,c,r?"":i,s.FONT_SIZE),o=this.game.add.bitmapText(_+1,h+1,c,r?"":i,s.FONT_SIZE);if(h+=s.FONT_SIZE+(void 0===n?s.SPACE_BETWEEN_LINES:n),this.remove_smooth(a),a.tint=this.font_color,this.remove_smooth(o),o.tint=0,r){const t=i.split(" ");let e,s=0;const n=()=>{this.game.time.events.repeat(25,t.length,()=>{a.text+=t[s]+" ",o.text+=t[s]+" ",++s,s===t.length&&e()})};p.length?p.pop().then(n):n(),p.push(new Promise(t=>e=t))}this.group.add(o),this.group.add(a),this.lines_sprites.push({text:a,shadow:o})}return Promise.all(p).then(d),l}set_single_line_text(t,e=!1,i=!1){const n=i?s.WINDOW_PADDING_H+2:s.WINDOW_PADDING_H+4;let a=i?s.WINDOW_PADDING_TOP-2:s.WINDOW_PADDING_TOP;const r=i?"gs-italic-bmp-font":"gs-bmp-font";let o=this.game.add.bitmapText(n,a,r,t,s.FONT_SIZE),_=this.game.add.bitmapText(n+1,a+1,r,t,s.FONT_SIZE);return e&&(o.x-=o.width,_.x-=_.width),this.remove_smooth(o),o.tint=this.font_color,this.remove_smooth(_),_.tint=0,this.group.add(_),this.group.add(o),{text:o,shadow:_,right_align:e,initial_x:n}}set_text_in_position(t,e,i,n=!1,a=!1,r=this.font_color,o=!1,_,h=!1){const c=h?"gs-italic-bmp-font":"gs-bmp-font";let l,d=this.game.add.bitmapText(e,i,c,t,s.FONT_SIZE),p=this.game.add.bitmapText(e+1,i+1,c,t,s.FONT_SIZE);a&&(d.centerX=e,d.centerY=i,p.centerX=e+1,p.centerY=i+1),n&&(d.x-=d.width,p.x-=p.width),o&&(l=this.game.add.graphics(d.x-1,d.y),l.beginFill(this.color,1),l.drawRect(0,0,d.width+3,s.FONT_SIZE),l.endFill(),void 0!==_&&this.add_to_internal_group(_,l)||this.group.add(l)),this.remove_smooth(d),d.tint=r,this.remove_smooth(p),p.tint=0;let u=!1;return void 0!==_&&(u=this.add_to_internal_group(_,p)&&this.add_to_internal_group(_,d)),u||(this.group.add(p),this.group.add(d)),{text:d,shadow:p,right_align:n,initial_x:e,text_bg:l}}update_text(t,e,i,s){e.text.setText(t),e.shadow.setText(t),this.update_text_position({x:i,y:s},e)}update_text_position(t,e){void 0!==t.x&&(e.text.x=t.x,e.shadow.x=t.x+1,e.initial_x=t.x,e.text_bg&&(e.text_bg.x=e.text.x-1)),void 0!==t.y&&(e.text.y=t.y,e.shadow.y=t.y+1,e.text_bg&&(e.text_bg.y=e.text.y)),e.right_align&&(e.text.x=e.initial_x-e.text.width,e.shadow.x=e.initial_x-e.shadow.width+1,e.text_bg&&(e.text_bg.x=e.text.x-1))}update_text_color(t,e){e.text.tint=t}remove_text(t){t.text.destroy(),t.shadow.destroy(),t.text_bg&&t.text_bg.destroy()}close(t,e=!0){e?this.game.add.tween(this.group).to({width:0,height:0},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback()}):(this.group.alpha=0,this.open=!1,this.page_indicator_is_set&&this.unset_page_indicator(),this.group.width=0,this.group.height=0,void 0!==t&&t(),void 0!==this.close_callback&&this.close_callback())}destroy(t,e){let i=()=>{this.page_indicator_is_set&&this.unset_page_indicator(),this.group.destroy(),this.internal_groups={},void 0!==e&&e()};t?this.game.add.tween(this.group).to({width:0,height:0},a,Phaser.Easing.Linear.None,!0).onComplete.addOnce(i):i()}init_page_indicator_bar(){this.page_number_bar=this.game.add.graphics(0,0),this.page_number_bar.alpha=0,this.add_sprite_to_group(this.page_number_bar),this.page_number_bar.beginFill(this.color,1),this.page_number_bar.drawRect(0,0,8,8),this.page_number_bar.endFill(),this.page_number_bar_highlight=this.game.add.graphics(0,0),this.page_number_bar_highlight.blendMode=PIXI.blendModes.SCREEN,this.page_number_bar_highlight.alpha=0,this.add_sprite_to_group(this.page_number_bar_highlight),this.page_number_bar_highlight.beginFill(this.color,1),this.page_number_bar_highlight.drawRect(0,0,8,8),this.page_number_bar_highlight.endFill(),this.page_indicators=[],this.page_indicator_arrow_timer=this.game.time.create(!1),this.page_indicator_right_arrow=this.create_at_group(this.width-3,0,"page_arrow"),this.page_indicator_right_arrow.scale.x=-1,this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width,this.page_indicator_right_arrow.alpha=0,this.page_indicator_left_arrow=this.create_at_group(0,0,"page_arrow"),this.page_indicator_left_arrow.alpha=0}set_page_indicator(t,e){if(!(t<=1)){this.page_number_bar.width=8*t,this.page_number_bar.x=this.width-this.page_number_bar.width-5,this.page_number_bar.alpha=1;for(let e=1;e<=t;++e){const t=this.page_number_bar.x+8*(e-1)+4,i=4;this.page_indicators.push(this.set_text_in_position(e.toString(),t,i,!1,!0))}this.page_number_bar_highlight.alpha=1,this.set_page_indicator_highlight(t,e),this.set_page_indicator_arrow(t)}}set_page_indicator_highlight(t,e){this.page_number_bar_highlight.x=this.width-5-8*(t-e)}set_page_indicator_arrow(t){this.page_indicator_left_arrow.alpha=1,this.page_indicator_right_arrow.alpha=1,this.calculated_arrow_left_x=this.width-5-8*t-this.page_indicator_left_arrow.width-2,this.page_indicator_left_arrow.x=this.calculated_arrow_left_x,this.page_indicator_arrow_timer.running&&this.page_indicator_arrow_timer.paused?this.page_indicator_arrow_timer.resume():(this.page_indicator_arrow_timer.loop(Phaser.Timer.QUARTER>>1,()=>{this.page_indicator_left_arrow.x=this.calculated_arrow_left_x+~(-this.page_indicator_left_arrow.x%2),this.page_indicator_right_arrow.x=this.width-3-~(-this.page_indicator_right_arrow.x%2),this.page_indicator_right_arrow.x-=this.page_indicator_right_arrow.width}),this.page_indicator_arrow_timer.start())}unset_page_indicator(){this.page_number_bar.alpha=0,this.page_number_bar_highlight.alpha=0,this.page_indicator_left_arrow.alpha=0,this.page_indicator_right_arrow.alpha=0;for(let t=0;t<this.page_indicators.length;++t)this.remove_text(this.page_indicators[t]);this.page_indicators=[],this.page_indicator_arrow_timer.pause()}}},function(t,e,i){(function(t,s){var n;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a="Expected a function",r="__lodash_placeholder__",o=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],_="[object Arguments]",h="[object Array]",c="[object Boolean]",l="[object Date]",d="[object Error]",p="[object Function]",u="[object GeneratorFunction]",g="[object Map]",m="[object Number]",y="[object Object]",b="[object RegExp]",f="[object Set]",w="[object String]",v="[object Symbol]",x="[object WeakMap]",k="[object ArrayBuffer]",E="[object DataView]",j="[object Float32Array]",T="[object Float64Array]",A="[object Int8Array]",S="[object Int16Array]",I="[object Int32Array]",O="[object Uint8Array]",P="[object Uint16Array]",M="[object Uint32Array]",N=/\b__p \+= '';/g,R=/\b(__p \+=) '' \+/g,D=/(__e\(.*?\)|\b__t\)) \+\n'';/g,C=/&(?:amp|lt|gt|quot|#39);/g,L=/[&<>"']/g,q=RegExp(C.source),W=RegExp(L.source),H=/<%-([\s\S]+?)%>/g,U=/<%([\s\S]+?)%>/g,G=/<%=([\s\S]+?)%>/g,F=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,B=/^\w*$/,z=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,K=/[\\^$.*+?()[\]{}|]/g,Y=RegExp(K.source),$=/^\s+|\s+$/g,X=/^\s+/,J=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,V=/\{\n\/\* \[wrapped with (.+)\] \*/,Q=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,it=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,st=/\w*$/,nt=/^[-+]0x[0-9a-f]+$/i,at=/^0b[01]+$/i,rt=/^\[object .+?Constructor\]$/,ot=/^0o[0-7]+$/i,_t=/^(?:0|[1-9]\d*)$/,ht=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,dt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ut="[\\ud800-\\udfff]",gt="["+pt+"]",mt="["+dt+"]",yt="\\d+",bt="[\\u2700-\\u27bf]",ft="[a-z\\xdf-\\xf6\\xf8-\\xff]",wt="[^\\ud800-\\udfff"+pt+yt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",vt="\\ud83c[\\udffb-\\udfff]",xt="[^\\ud800-\\udfff]",kt="(?:\\ud83c[\\udde6-\\uddff]){2}",Et="[\\ud800-\\udbff][\\udc00-\\udfff]",jt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Tt="(?:"+ft+"|"+wt+")",At="(?:"+jt+"|"+wt+")",St="(?:"+mt+"|"+vt+")"+"?",It="[\\ufe0e\\ufe0f]?"+St+("(?:\\u200d(?:"+[xt,kt,Et].join("|")+")[\\ufe0e\\ufe0f]?"+St+")*"),Ot="(?:"+[bt,kt,Et].join("|")+")"+It,Pt="(?:"+[xt+mt+"?",mt,kt,Et,ut].join("|")+")",Mt=RegExp("['’]","g"),Nt=RegExp(mt,"g"),Rt=RegExp(vt+"(?="+vt+")|"+Pt+It,"g"),Dt=RegExp([jt+"?"+ft+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[gt,jt,"$"].join("|")+")",At+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[gt,jt+Tt,"$"].join("|")+")",jt+"?"+Tt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",jt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",yt,Ot].join("|"),"g"),Ct=RegExp("[\\u200d\\ud800-\\udfff"+dt+"\\ufe0e\\ufe0f]"),Lt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,qt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Wt=-1,Ht={};Ht[j]=Ht[T]=Ht[A]=Ht[S]=Ht[I]=Ht[O]=Ht["[object Uint8ClampedArray]"]=Ht[P]=Ht[M]=!0,Ht[_]=Ht[h]=Ht[k]=Ht[c]=Ht[E]=Ht[l]=Ht[d]=Ht[p]=Ht[g]=Ht[m]=Ht[y]=Ht[b]=Ht[f]=Ht[w]=Ht[x]=!1;var Ut={};Ut[_]=Ut[h]=Ut[k]=Ut[E]=Ut[c]=Ut[l]=Ut[j]=Ut[T]=Ut[A]=Ut[S]=Ut[I]=Ut[g]=Ut[m]=Ut[y]=Ut[b]=Ut[f]=Ut[w]=Ut[v]=Ut[O]=Ut["[object Uint8ClampedArray]"]=Ut[P]=Ut[M]=!0,Ut[d]=Ut[p]=Ut[x]=!1;var Gt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ft=parseFloat,Bt=parseInt,zt="object"==typeof t&&t&&t.Object===Object&&t,Kt="object"==typeof self&&self&&self.Object===Object&&self,Yt=zt||Kt||Function("return this")(),$t=e&&!e.nodeType&&e,Xt=$t&&"object"==typeof s&&s&&!s.nodeType&&s,Jt=Xt&&Xt.exports===$t,Zt=Jt&&zt.process,Vt=function(){try{var t=Xt&&Xt.require&&Xt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),Qt=Vt&&Vt.isArrayBuffer,te=Vt&&Vt.isDate,ee=Vt&&Vt.isMap,ie=Vt&&Vt.isRegExp,se=Vt&&Vt.isSet,ne=Vt&&Vt.isTypedArray;function ae(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function re(t,e,i,s){for(var n=-1,a=null==t?0:t.length;++n<a;){var r=t[n];e(s,r,i(r),t)}return s}function oe(t,e){for(var i=-1,s=null==t?0:t.length;++i<s&&!1!==e(t[i],i,t););return t}function _e(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function he(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(!e(t[i],i,t))return!1;return!0}function ce(t,e){for(var i=-1,s=null==t?0:t.length,n=0,a=[];++i<s;){var r=t[i];e(r,i,t)&&(a[n++]=r)}return a}function le(t,e){return!!(null==t?0:t.length)&&ve(t,e,0)>-1}function de(t,e,i){for(var s=-1,n=null==t?0:t.length;++s<n;)if(i(e,t[s]))return!0;return!1}function pe(t,e){for(var i=-1,s=null==t?0:t.length,n=Array(s);++i<s;)n[i]=e(t[i],i,t);return n}function ue(t,e){for(var i=-1,s=e.length,n=t.length;++i<s;)t[n+i]=e[i];return t}function ge(t,e,i,s){var n=-1,a=null==t?0:t.length;for(s&&a&&(i=t[++n]);++n<a;)i=e(i,t[n],n,t);return i}function me(t,e,i,s){var n=null==t?0:t.length;for(s&&n&&(i=t[--n]);n--;)i=e(i,t[n],n,t);return i}function ye(t,e){for(var i=-1,s=null==t?0:t.length;++i<s;)if(e(t[i],i,t))return!0;return!1}var be=je("length");function fe(t,e,i){var s;return i(t,(function(t,i,n){if(e(t,i,n))return s=i,!1})),s}function we(t,e,i,s){for(var n=t.length,a=i+(s?1:-1);s?a--:++a<n;)if(e(t[a],a,t))return a;return-1}function ve(t,e,i){return e==e?function(t,e,i){var s=i-1,n=t.length;for(;++s<n;)if(t[s]===e)return s;return-1}(t,e,i):we(t,ke,i)}function xe(t,e,i,s){for(var n=i-1,a=t.length;++n<a;)if(s(t[n],e))return n;return-1}function ke(t){return t!=t}function Ee(t,e){var i=null==t?0:t.length;return i?Se(t,e)/i:NaN}function je(t){return function(e){return null==e?void 0:e[t]}}function Te(t){return function(e){return null==t?void 0:t[e]}}function Ae(t,e,i,s,n){return n(t,(function(t,n,a){i=s?(s=!1,t):e(i,t,n,a)})),i}function Se(t,e){for(var i,s=-1,n=t.length;++s<n;){var a=e(t[s]);void 0!==a&&(i=void 0===i?a:i+a)}return i}function Ie(t,e){for(var i=-1,s=Array(t);++i<t;)s[i]=e(i);return s}function Oe(t){return function(e){return t(e)}}function Pe(t,e){return pe(e,(function(e){return t[e]}))}function Me(t,e){return t.has(e)}function Ne(t,e){for(var i=-1,s=t.length;++i<s&&ve(e,t[i],0)>-1;);return i}function Re(t,e){for(var i=t.length;i--&&ve(e,t[i],0)>-1;);return i}function De(t,e){for(var i=t.length,s=0;i--;)t[i]===e&&++s;return s}var Ce=Te({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Le=Te({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function qe(t){return"\\"+Gt[t]}function We(t){return Ct.test(t)}function He(t){var e=-1,i=Array(t.size);return t.forEach((function(t,s){i[++e]=[s,t]})),i}function Ue(t,e){return function(i){return t(e(i))}}function Ge(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var o=t[i];o!==e&&o!==r||(t[i]=r,a[n++]=i)}return a}function Fe(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function Be(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function ze(t){return We(t)?function(t){var e=Rt.lastIndex=0;for(;Rt.test(t);)++e;return e}(t):be(t)}function Ke(t){return We(t)?function(t){return t.match(Rt)||[]}(t):function(t){return t.split("")}(t)}var Ye=Te({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $e=function t(e){var i,s=(e=null==e?Yt:$e.defaults(Yt.Object(),e,$e.pick(Yt,qt))).Array,n=e.Date,dt=e.Error,pt=e.Function,ut=e.Math,gt=e.Object,mt=e.RegExp,yt=e.String,bt=e.TypeError,ft=s.prototype,wt=pt.prototype,vt=gt.prototype,xt=e["__core-js_shared__"],kt=wt.toString,Et=vt.hasOwnProperty,jt=0,Tt=(i=/[^.]+$/.exec(xt&&xt.keys&&xt.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",At=vt.toString,St=kt.call(gt),It=Yt._,Ot=mt("^"+kt.call(Et).replace(K,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pt=Jt?e.Buffer:void 0,Rt=e.Symbol,Ct=e.Uint8Array,Gt=Pt?Pt.allocUnsafe:void 0,zt=Ue(gt.getPrototypeOf,gt),Kt=gt.create,$t=vt.propertyIsEnumerable,Xt=ft.splice,Zt=Rt?Rt.isConcatSpreadable:void 0,Vt=Rt?Rt.iterator:void 0,be=Rt?Rt.toStringTag:void 0,Te=function(){try{var t=Qn(gt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Xe=e.clearTimeout!==Yt.clearTimeout&&e.clearTimeout,Je=n&&n.now!==Yt.Date.now&&n.now,Ze=e.setTimeout!==Yt.setTimeout&&e.setTimeout,Ve=ut.ceil,Qe=ut.floor,ti=gt.getOwnPropertySymbols,ei=Pt?Pt.isBuffer:void 0,ii=e.isFinite,si=ft.join,ni=Ue(gt.keys,gt),ai=ut.max,ri=ut.min,oi=n.now,_i=e.parseInt,hi=ut.random,ci=ft.reverse,li=Qn(e,"DataView"),di=Qn(e,"Map"),pi=Qn(e,"Promise"),ui=Qn(e,"Set"),gi=Qn(e,"WeakMap"),mi=Qn(gt,"create"),yi=gi&&new gi,bi={},fi=Ta(li),wi=Ta(di),vi=Ta(pi),xi=Ta(ui),ki=Ta(gi),Ei=Rt?Rt.prototype:void 0,ji=Ei?Ei.valueOf:void 0,Ti=Ei?Ei.toString:void 0;function Ai(t){if(Fr(t)&&!Mr(t)&&!(t instanceof Pi)){if(t instanceof Oi)return t;if(Et.call(t,"__wrapped__"))return Aa(t)}return new Oi(t)}var Si=function(){function t(){}return function(e){if(!Gr(e))return{};if(Kt)return Kt(e);t.prototype=e;var i=new t;return t.prototype=void 0,i}}();function Ii(){}function Oi(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pi(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Mi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Ni(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Ri(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var s=t[e];this.set(s[0],s[1])}}function Di(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Ri;++e<i;)this.add(t[e])}function Ci(t){var e=this.__data__=new Ni(t);this.size=e.size}function Li(t,e){var i=Mr(t),s=!i&&Pr(t),n=!i&&!s&&Cr(t),a=!i&&!s&&!n&&Zr(t),r=i||s||n||a,o=r?Ie(t.length,yt):[],_=o.length;for(var h in t)!e&&!Et.call(t,h)||r&&("length"==h||n&&("offset"==h||"parent"==h)||a&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||ra(h,_))||o.push(h);return o}function qi(t){var e=t.length;return e?t[Ds(0,e-1)]:void 0}function Wi(t,e){return ka(yn(t),$i(e,0,t.length))}function Hi(t){return ka(yn(t))}function Ui(t,e,i){(void 0!==i&&!Sr(t[e],i)||void 0===i&&!(e in t))&&Ki(t,e,i)}function Gi(t,e,i){var s=t[e];Et.call(t,e)&&Sr(s,i)&&(void 0!==i||e in t)||Ki(t,e,i)}function Fi(t,e){for(var i=t.length;i--;)if(Sr(t[i][0],e))return i;return-1}function Bi(t,e,i,s){return Qi(t,(function(t,n,a){e(s,t,i(t),a)})),s}function zi(t,e){return t&&bn(e,wo(e),t)}function Ki(t,e,i){"__proto__"==e&&Te?Te(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function Yi(t,e){for(var i=-1,n=e.length,a=s(n),r=null==t;++i<n;)a[i]=r?void 0:go(t,e[i]);return a}function $i(t,e,i){return t==t&&(void 0!==i&&(t=t<=i?t:i),void 0!==e&&(t=t>=e?t:e)),t}function Xi(t,e,i,s,n,a){var r,o=1&e,h=2&e,d=4&e;if(i&&(r=n?i(t,s,n,a):i(t)),void 0!==r)return r;if(!Gr(t))return t;var x=Mr(t);if(x){if(r=function(t){var e=t.length,i=new t.constructor(e);e&&"string"==typeof t[0]&&Et.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!o)return yn(t,r)}else{var N=ia(t),R=N==p||N==u;if(Cr(t))return ln(t,o);if(N==y||N==_||R&&!n){if(r=h||R?{}:na(t),!o)return h?function(t,e){return bn(t,ea(t),e)}(t,function(t,e){return t&&bn(e,vo(e),t)}(r,t)):function(t,e){return bn(t,ta(t),e)}(t,zi(r,t))}else{if(!Ut[N])return n?t:{};r=function(t,e,i){var s=t.constructor;switch(e){case k:return dn(t);case c:case l:return new s(+t);case E:return function(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case j:case T:case A:case S:case I:case O:case"[object Uint8ClampedArray]":case P:case M:return pn(t,i);case g:return new s;case m:case w:return new s(t);case b:return function(t){var e=new t.constructor(t.source,st.exec(t));return e.lastIndex=t.lastIndex,e}(t);case f:return new s;case v:return n=t,ji?gt(ji.call(n)):{}}var n}(t,N,o)}}a||(a=new Ci);var D=a.get(t);if(D)return D;a.set(t,r),$r(t)?t.forEach((function(s){r.add(Xi(s,e,i,s,t,a))})):Br(t)&&t.forEach((function(s,n){r.set(n,Xi(s,e,i,n,t,a))}));var C=x?void 0:(d?h?Kn:zn:h?vo:wo)(t);return oe(C||t,(function(s,n){C&&(s=t[n=s]),Gi(r,n,Xi(s,e,i,n,t,a))})),r}function Ji(t,e,i){var s=i.length;if(null==t)return!s;for(t=gt(t);s--;){var n=i[s],a=e[n],r=t[n];if(void 0===r&&!(n in t)||!a(r))return!1}return!0}function Zi(t,e,i){if("function"!=typeof t)throw new bt(a);return fa((function(){t.apply(void 0,i)}),e)}function Vi(t,e,i,s){var n=-1,a=le,r=!0,o=t.length,_=[],h=e.length;if(!o)return _;i&&(e=pe(e,Oe(i))),s?(a=de,r=!1):e.length>=200&&(a=Me,r=!1,e=new Di(e));t:for(;++n<o;){var c=t[n],l=null==i?c:i(c);if(c=s||0!==c?c:0,r&&l==l){for(var d=h;d--;)if(e[d]===l)continue t;_.push(c)}else a(e,l,s)||_.push(c)}return _}Ai.templateSettings={escape:H,evaluate:U,interpolate:G,variable:"",imports:{_:Ai}},Ai.prototype=Ii.prototype,Ai.prototype.constructor=Ai,Oi.prototype=Si(Ii.prototype),Oi.prototype.constructor=Oi,Pi.prototype=Si(Ii.prototype),Pi.prototype.constructor=Pi,Mi.prototype.clear=function(){this.__data__=mi?mi(null):{},this.size=0},Mi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Mi.prototype.get=function(t){var e=this.__data__;if(mi){var i=e[t];return"__lodash_hash_undefined__"===i?void 0:i}return Et.call(e,t)?e[t]:void 0},Mi.prototype.has=function(t){var e=this.__data__;return mi?void 0!==e[t]:Et.call(e,t)},Mi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=mi&&void 0===e?"__lodash_hash_undefined__":e,this},Ni.prototype.clear=function(){this.__data__=[],this.size=0},Ni.prototype.delete=function(t){var e=this.__data__,i=Fi(e,t);return!(i<0)&&(i==e.length-1?e.pop():Xt.call(e,i,1),--this.size,!0)},Ni.prototype.get=function(t){var e=this.__data__,i=Fi(e,t);return i<0?void 0:e[i][1]},Ni.prototype.has=function(t){return Fi(this.__data__,t)>-1},Ni.prototype.set=function(t,e){var i=this.__data__,s=Fi(i,t);return s<0?(++this.size,i.push([t,e])):i[s][1]=e,this},Ri.prototype.clear=function(){this.size=0,this.__data__={hash:new Mi,map:new(di||Ni),string:new Mi}},Ri.prototype.delete=function(t){var e=Zn(this,t).delete(t);return this.size-=e?1:0,e},Ri.prototype.get=function(t){return Zn(this,t).get(t)},Ri.prototype.has=function(t){return Zn(this,t).has(t)},Ri.prototype.set=function(t,e){var i=Zn(this,t),s=i.size;return i.set(t,e),this.size+=i.size==s?0:1,this},Di.prototype.add=Di.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Di.prototype.has=function(t){return this.__data__.has(t)},Ci.prototype.clear=function(){this.__data__=new Ni,this.size=0},Ci.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},Ci.prototype.get=function(t){return this.__data__.get(t)},Ci.prototype.has=function(t){return this.__data__.has(t)},Ci.prototype.set=function(t,e){var i=this.__data__;if(i instanceof Ni){var s=i.__data__;if(!di||s.length<199)return s.push([t,e]),this.size=++i.size,this;i=this.__data__=new Ri(s)}return i.set(t,e),this.size=i.size,this};var Qi=vn(os),ts=vn(_s,!0);function es(t,e){var i=!0;return Qi(t,(function(t,s,n){return i=!!e(t,s,n)})),i}function is(t,e,i){for(var s=-1,n=t.length;++s<n;){var a=t[s],r=e(a);if(null!=r&&(void 0===o?r==r&&!Jr(r):i(r,o)))var o=r,_=a}return _}function ss(t,e){var i=[];return Qi(t,(function(t,s,n){e(t,s,n)&&i.push(t)})),i}function ns(t,e,i,s,n){var a=-1,r=t.length;for(i||(i=aa),n||(n=[]);++a<r;){var o=t[a];e>0&&i(o)?e>1?ns(o,e-1,i,s,n):ue(n,o):s||(n[n.length]=o)}return n}var as=xn(),rs=xn(!0);function os(t,e){return t&&as(t,e,wo)}function _s(t,e){return t&&rs(t,e,wo)}function hs(t,e){return ce(e,(function(e){return Wr(t[e])}))}function cs(t,e){for(var i=0,s=(e=on(e,t)).length;null!=t&&i<s;)t=t[ja(e[i++])];return i&&i==s?t:void 0}function ls(t,e,i){var s=e(t);return Mr(t)?s:ue(s,i(t))}function ds(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":be&&be in gt(t)?function(t){var e=Et.call(t,be),i=t[be];try{t[be]=void 0;var s=!0}catch(t){}var n=At.call(t);s&&(e?t[be]=i:delete t[be]);return n}(t):function(t){return At.call(t)}(t)}function ps(t,e){return t>e}function us(t,e){return null!=t&&Et.call(t,e)}function gs(t,e){return null!=t&&e in gt(t)}function ms(t,e,i){for(var n=i?de:le,a=t[0].length,r=t.length,o=r,_=s(r),h=1/0,c=[];o--;){var l=t[o];o&&e&&(l=pe(l,Oe(e))),h=ri(l.length,h),_[o]=!i&&(e||a>=120&&l.length>=120)?new Di(o&&l):void 0}l=t[0];var d=-1,p=_[0];t:for(;++d<a&&c.length<h;){var u=l[d],g=e?e(u):u;if(u=i||0!==u?u:0,!(p?Me(p,g):n(c,g,i))){for(o=r;--o;){var m=_[o];if(!(m?Me(m,g):n(t[o],g,i)))continue t}p&&p.push(g),c.push(u)}}return c}function ys(t,e,i){var s=null==(t=ga(t,e=on(e,t)))?t:t[ja(qa(e))];return null==s?void 0:ae(s,t,i)}function bs(t){return Fr(t)&&ds(t)==_}function fs(t,e,i,s,n){return t===e||(null==t||null==e||!Fr(t)&&!Fr(e)?t!=t&&e!=e:function(t,e,i,s,n,a){var r=Mr(t),o=Mr(e),p=r?h:ia(t),u=o?h:ia(e),x=(p=p==_?y:p)==y,j=(u=u==_?y:u)==y,T=p==u;if(T&&Cr(t)){if(!Cr(e))return!1;r=!0,x=!1}if(T&&!x)return a||(a=new Ci),r||Zr(t)?Fn(t,e,i,s,n,a):function(t,e,i,s,n,a,r){switch(i){case E:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case k:return!(t.byteLength!=e.byteLength||!a(new Ct(t),new Ct(e)));case c:case l:case m:return Sr(+t,+e);case d:return t.name==e.name&&t.message==e.message;case b:case w:return t==e+"";case g:var o=He;case f:var _=1&s;if(o||(o=Fe),t.size!=e.size&&!_)return!1;var h=r.get(t);if(h)return h==e;s|=2,r.set(t,e);var p=Fn(o(t),o(e),s,n,a,r);return r.delete(t),p;case v:if(ji)return ji.call(t)==ji.call(e)}return!1}(t,e,p,i,s,n,a);if(!(1&i)){var A=x&&Et.call(t,"__wrapped__"),S=j&&Et.call(e,"__wrapped__");if(A||S){var I=A?t.value():t,O=S?e.value():e;return a||(a=new Ci),n(I,O,i,s,a)}}if(!T)return!1;return a||(a=new Ci),function(t,e,i,s,n,a){var r=1&i,o=zn(t),_=o.length,h=zn(e).length;if(_!=h&&!r)return!1;var c=_;for(;c--;){var l=o[c];if(!(r?l in e:Et.call(e,l)))return!1}var d=a.get(t),p=a.get(e);if(d&&p)return d==e&&p==t;var u=!0;a.set(t,e),a.set(e,t);var g=r;for(;++c<_;){l=o[c];var m=t[l],y=e[l];if(s)var b=r?s(y,m,l,e,t,a):s(m,y,l,t,e,a);if(!(void 0===b?m===y||n(m,y,i,s,a):b)){u=!1;break}g||(g="constructor"==l)}if(u&&!g){var f=t.constructor,w=e.constructor;f==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof f&&f instanceof f&&"function"==typeof w&&w instanceof w||(u=!1)}return a.delete(t),a.delete(e),u}(t,e,i,s,n,a)}(t,e,i,s,fs,n))}function ws(t,e,i,s){var n=i.length,a=n,r=!s;if(null==t)return!a;for(t=gt(t);n--;){var o=i[n];if(r&&o[2]?o[1]!==t[o[0]]:!(o[0]in t))return!1}for(;++n<a;){var _=(o=i[n])[0],h=t[_],c=o[1];if(r&&o[2]){if(void 0===h&&!(_ in t))return!1}else{var l=new Ci;if(s)var d=s(h,c,_,t,e,l);if(!(void 0===d?fs(c,h,3,s,l):d))return!1}}return!0}function vs(t){return!(!Gr(t)||(e=t,Tt&&Tt in e))&&(Wr(t)?Ot:rt).test(Ta(t));var e}function xs(t){return"function"==typeof t?t:null==t?Ko:"object"==typeof t?Mr(t)?Ss(t[0],t[1]):As(t):e_(t)}function ks(t){if(!la(t))return ni(t);var e=[];for(var i in gt(t))Et.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Es(t){if(!Gr(t))return function(t){var e=[];if(null!=t)for(var i in gt(t))e.push(i);return e}(t);var e=la(t),i=[];for(var s in t)("constructor"!=s||!e&&Et.call(t,s))&&i.push(s);return i}function js(t,e){return t<e}function Ts(t,e){var i=-1,n=Rr(t)?s(t.length):[];return Qi(t,(function(t,s,a){n[++i]=e(t,s,a)})),n}function As(t){var e=Vn(t);return 1==e.length&&e[0][2]?pa(e[0][0],e[0][1]):function(i){return i===t||ws(i,t,e)}}function Ss(t,e){return _a(t)&&da(e)?pa(ja(t),e):function(i){var s=go(i,t);return void 0===s&&s===e?mo(i,t):fs(e,s,3)}}function Is(t,e,i,s,n){t!==e&&as(e,(function(a,r){if(n||(n=new Ci),Gr(a))!function(t,e,i,s,n,a,r){var o=ya(t,i),_=ya(e,i),h=r.get(_);if(h)return void Ui(t,i,h);var c=a?a(o,_,i+"",t,e,r):void 0,l=void 0===c;if(l){var d=Mr(_),p=!d&&Cr(_),u=!d&&!p&&Zr(_);c=_,d||p||u?Mr(o)?c=o:Dr(o)?c=yn(o):p?(l=!1,c=ln(_,!0)):u?(l=!1,c=pn(_,!0)):c=[]:Kr(_)||Pr(_)?(c=o,Pr(o)?c=ao(o):Gr(o)&&!Wr(o)||(c=na(_))):l=!1}l&&(r.set(_,c),n(c,_,s,a,r),r.delete(_));Ui(t,i,c)}(t,e,r,i,Is,s,n);else{var o=s?s(ya(t,r),a,r+"",t,e,n):void 0;void 0===o&&(o=a),Ui(t,r,o)}}),vo)}function Os(t,e){var i=t.length;if(i)return ra(e+=e<0?i:0,i)?t[e]:void 0}function Ps(t,e,i){e=e.length?pe(e,(function(t){return Mr(t)?function(e){return cs(e,1===t.length?t[0]:t)}:t})):[Ko];var s=-1;return e=pe(e,Oe(Jn())),function(t,e){var i=t.length;for(t.sort(e);i--;)t[i]=t[i].value;return t}(Ts(t,(function(t,i,n){return{criteria:pe(e,(function(e){return e(t)})),index:++s,value:t}})),(function(t,e){return function(t,e,i){var s=-1,n=t.criteria,a=e.criteria,r=n.length,o=i.length;for(;++s<r;){var _=un(n[s],a[s]);if(_){if(s>=o)return _;var h=i[s];return _*("desc"==h?-1:1)}}return t.index-e.index}(t,e,i)}))}function Ms(t,e,i){for(var s=-1,n=e.length,a={};++s<n;){var r=e[s],o=cs(t,r);i(o,r)&&Hs(a,on(r,t),o)}return a}function Ns(t,e,i,s){var n=s?xe:ve,a=-1,r=e.length,o=t;for(t===e&&(e=yn(e)),i&&(o=pe(t,Oe(i)));++a<r;)for(var _=0,h=e[a],c=i?i(h):h;(_=n(o,c,_,s))>-1;)o!==t&&Xt.call(o,_,1),Xt.call(t,_,1);return t}function Rs(t,e){for(var i=t?e.length:0,s=i-1;i--;){var n=e[i];if(i==s||n!==a){var a=n;ra(n)?Xt.call(t,n,1):Vs(t,n)}}return t}function Ds(t,e){return t+Qe(hi()*(e-t+1))}function Cs(t,e){var i="";if(!t||e<1||e>9007199254740991)return i;do{e%2&&(i+=t),(e=Qe(e/2))&&(t+=t)}while(e);return i}function Ls(t,e){return wa(ua(t,e,Ko),t+"")}function qs(t){return qi(Io(t))}function Ws(t,e){var i=Io(t);return ka(i,$i(e,0,i.length))}function Hs(t,e,i,s){if(!Gr(t))return t;for(var n=-1,a=(e=on(e,t)).length,r=a-1,o=t;null!=o&&++n<a;){var _=ja(e[n]),h=i;if("__proto__"===_||"constructor"===_||"prototype"===_)return t;if(n!=r){var c=o[_];void 0===(h=s?s(c,_,o):void 0)&&(h=Gr(c)?c:ra(e[n+1])?[]:{})}Gi(o,_,h),o=o[_]}return t}var Us=yi?function(t,e){return yi.set(t,e),t}:Ko,Gs=Te?function(t,e){return Te(t,"toString",{configurable:!0,enumerable:!1,value:Fo(e),writable:!0})}:Ko;function Fs(t){return ka(Io(t))}function Bs(t,e,i){var n=-1,a=t.length;e<0&&(e=-e>a?0:a+e),(i=i>a?a:i)<0&&(i+=a),a=e>i?0:i-e>>>0,e>>>=0;for(var r=s(a);++n<a;)r[n]=t[n+e];return r}function zs(t,e){var i;return Qi(t,(function(t,s,n){return!(i=e(t,s,n))})),!!i}function Ks(t,e,i){var s=0,n=null==t?s:t.length;if("number"==typeof e&&e==e&&n<=2147483647){for(;s<n;){var a=s+n>>>1,r=t[a];null!==r&&!Jr(r)&&(i?r<=e:r<e)?s=a+1:n=a}return n}return Ys(t,e,Ko,i)}function Ys(t,e,i,s){var n=0,a=null==t?0:t.length;if(0===a)return 0;for(var r=(e=i(e))!=e,o=null===e,_=Jr(e),h=void 0===e;n<a;){var c=Qe((n+a)/2),l=i(t[c]),d=void 0!==l,p=null===l,u=l==l,g=Jr(l);if(r)var m=s||u;else m=h?u&&(s||d):o?u&&d&&(s||!p):_?u&&d&&!p&&(s||!g):!p&&!g&&(s?l<=e:l<e);m?n=c+1:a=c}return ri(a,4294967294)}function $s(t,e){for(var i=-1,s=t.length,n=0,a=[];++i<s;){var r=t[i],o=e?e(r):r;if(!i||!Sr(o,_)){var _=o;a[n++]=0===r?0:r}}return a}function Xs(t){return"number"==typeof t?t:Jr(t)?NaN:+t}function Js(t){if("string"==typeof t)return t;if(Mr(t))return pe(t,Js)+"";if(Jr(t))return Ti?Ti.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Zs(t,e,i){var s=-1,n=le,a=t.length,r=!0,o=[],_=o;if(i)r=!1,n=de;else if(a>=200){var h=e?null:Ln(t);if(h)return Fe(h);r=!1,n=Me,_=new Di}else _=e?[]:o;t:for(;++s<a;){var c=t[s],l=e?e(c):c;if(c=i||0!==c?c:0,r&&l==l){for(var d=_.length;d--;)if(_[d]===l)continue t;e&&_.push(l),o.push(c)}else n(_,l,i)||(_!==o&&_.push(l),o.push(c))}return o}function Vs(t,e){return null==(t=ga(t,e=on(e,t)))||delete t[ja(qa(e))]}function Qs(t,e,i,s){return Hs(t,e,i(cs(t,e)),s)}function tn(t,e,i,s){for(var n=t.length,a=s?n:-1;(s?a--:++a<n)&&e(t[a],a,t););return i?Bs(t,s?0:a,s?a+1:n):Bs(t,s?a+1:0,s?n:a)}function en(t,e){var i=t;return i instanceof Pi&&(i=i.value()),ge(e,(function(t,e){return e.func.apply(e.thisArg,ue([t],e.args))}),i)}function sn(t,e,i){var n=t.length;if(n<2)return n?Zs(t[0]):[];for(var a=-1,r=s(n);++a<n;)for(var o=t[a],_=-1;++_<n;)_!=a&&(r[a]=Vi(r[a]||o,t[_],e,i));return Zs(ns(r,1),e,i)}function nn(t,e,i){for(var s=-1,n=t.length,a=e.length,r={};++s<n;){var o=s<a?e[s]:void 0;i(r,t[s],o)}return r}function an(t){return Dr(t)?t:[]}function rn(t){return"function"==typeof t?t:Ko}function on(t,e){return Mr(t)?t:_a(t,e)?[t]:Ea(ro(t))}var _n=Ls;function hn(t,e,i){var s=t.length;return i=void 0===i?s:i,!e&&i>=s?t:Bs(t,e,i)}var cn=Xe||function(t){return Yt.clearTimeout(t)};function ln(t,e){if(e)return t.slice();var i=t.length,s=Gt?Gt(i):new t.constructor(i);return t.copy(s),s}function dn(t){var e=new t.constructor(t.byteLength);return new Ct(e).set(new Ct(t)),e}function pn(t,e){var i=e?dn(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function un(t,e){if(t!==e){var i=void 0!==t,s=null===t,n=t==t,a=Jr(t),r=void 0!==e,o=null===e,_=e==e,h=Jr(e);if(!o&&!h&&!a&&t>e||a&&r&&_&&!o&&!h||s&&r&&_||!i&&_||!n)return 1;if(!s&&!a&&!h&&t<e||h&&i&&n&&!s&&!a||o&&i&&n||!r&&n||!_)return-1}return 0}function gn(t,e,i,n){for(var a=-1,r=t.length,o=i.length,_=-1,h=e.length,c=ai(r-o,0),l=s(h+c),d=!n;++_<h;)l[_]=e[_];for(;++a<o;)(d||a<r)&&(l[i[a]]=t[a]);for(;c--;)l[_++]=t[a++];return l}function mn(t,e,i,n){for(var a=-1,r=t.length,o=-1,_=i.length,h=-1,c=e.length,l=ai(r-_,0),d=s(l+c),p=!n;++a<l;)d[a]=t[a];for(var u=a;++h<c;)d[u+h]=e[h];for(;++o<_;)(p||a<r)&&(d[u+i[o]]=t[a++]);return d}function yn(t,e){var i=-1,n=t.length;for(e||(e=s(n));++i<n;)e[i]=t[i];return e}function bn(t,e,i,s){var n=!i;i||(i={});for(var a=-1,r=e.length;++a<r;){var o=e[a],_=s?s(i[o],t[o],o,i,t):void 0;void 0===_&&(_=t[o]),n?Ki(i,o,_):Gi(i,o,_)}return i}function fn(t,e){return function(i,s){var n=Mr(i)?re:Bi,a=e?e():{};return n(i,t,Jn(s,2),a)}}function wn(t){return Ls((function(e,i){var s=-1,n=i.length,a=n>1?i[n-1]:void 0,r=n>2?i[2]:void 0;for(a=t.length>3&&"function"==typeof a?(n--,a):void 0,r&&oa(i[0],i[1],r)&&(a=n<3?void 0:a,n=1),e=gt(e);++s<n;){var o=i[s];o&&t(e,o,s,a)}return e}))}function vn(t,e){return function(i,s){if(null==i)return i;if(!Rr(i))return t(i,s);for(var n=i.length,a=e?n:-1,r=gt(i);(e?a--:++a<n)&&!1!==s(r[a],a,r););return i}}function xn(t){return function(e,i,s){for(var n=-1,a=gt(e),r=s(e),o=r.length;o--;){var _=r[t?o:++n];if(!1===i(a[_],_,a))break}return e}}function kn(t){return function(e){var i=We(e=ro(e))?Ke(e):void 0,s=i?i[0]:e.charAt(0),n=i?hn(i,1).join(""):e.slice(1);return s[t]()+n}}function En(t){return function(e){return ge(Ho(Mo(e).replace(Mt,"")),t,"")}}function jn(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Si(t.prototype),s=t.apply(i,e);return Gr(s)?s:i}}function Tn(t){return function(e,i,s){var n=gt(e);if(!Rr(e)){var a=Jn(i,3);e=wo(e),i=function(t){return a(n[t],t,n)}}var r=t(e,i,s);return r>-1?n[a?e[r]:r]:void 0}}function An(t){return Bn((function(e){var i=e.length,s=i,n=Oi.prototype.thru;for(t&&e.reverse();s--;){var r=e[s];if("function"!=typeof r)throw new bt(a);if(n&&!o&&"wrapper"==$n(r))var o=new Oi([],!0)}for(s=o?s:i;++s<i;){var _=$n(r=e[s]),h="wrapper"==_?Yn(r):void 0;o=h&&ha(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?o[$n(h[0])].apply(o,h[3]):1==r.length&&ha(r)?o[_]():o.thru(r)}return function(){var t=arguments,s=t[0];if(o&&1==t.length&&Mr(s))return o.plant(s).value();for(var n=0,a=i?e[n].apply(this,t):s;++n<i;)a=e[n].call(this,a);return a}}))}function Sn(t,e,i,n,a,r,o,_,h,c){var l=128&e,d=1&e,p=2&e,u=24&e,g=512&e,m=p?void 0:jn(t);return function y(){for(var b=arguments.length,f=s(b),w=b;w--;)f[w]=arguments[w];if(u)var v=Xn(y),x=De(f,v);if(n&&(f=gn(f,n,a,u)),r&&(f=mn(f,r,o,u)),b-=x,u&&b<c){var k=Ge(f,v);return Dn(t,e,Sn,y.placeholder,i,f,k,_,h,c-b)}var E=d?i:this,j=p?E[t]:t;return b=f.length,_?f=ma(f,_):g&&b>1&&f.reverse(),l&&h<b&&(f.length=h),this&&this!==Yt&&this instanceof y&&(j=m||jn(j)),j.apply(E,f)}}function In(t,e){return function(i,s){return function(t,e,i,s){return os(t,(function(t,n,a){e(s,i(t),n,a)})),s}(i,t,e(s),{})}}function On(t,e){return function(i,s){var n;if(void 0===i&&void 0===s)return e;if(void 0!==i&&(n=i),void 0!==s){if(void 0===n)return s;"string"==typeof i||"string"==typeof s?(i=Js(i),s=Js(s)):(i=Xs(i),s=Xs(s)),n=t(i,s)}return n}}function Pn(t){return Bn((function(e){return e=pe(e,Oe(Jn())),Ls((function(i){var s=this;return t(e,(function(t){return ae(t,s,i)}))}))}))}function Mn(t,e){var i=(e=void 0===e?" ":Js(e)).length;if(i<2)return i?Cs(e,t):e;var s=Cs(e,Ve(t/ze(e)));return We(e)?hn(Ke(s),0,t).join(""):s.slice(0,t)}function Nn(t){return function(e,i,n){return n&&"number"!=typeof n&&oa(e,i,n)&&(i=n=void 0),e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i,n){for(var a=-1,r=ai(Ve((e-t)/(i||1)),0),o=s(r);r--;)o[n?r:++a]=t,t+=i;return o}(e,i,n=void 0===n?e<i?1:-1:eo(n),t)}}function Rn(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=no(e),i=no(i)),t(e,i)}}function Dn(t,e,i,s,n,a,r,o,_,h){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var l=[t,e,n,c?a:void 0,c?r:void 0,c?void 0:a,c?void 0:r,o,_,h],d=i.apply(void 0,l);return ha(t)&&ba(d,l),d.placeholder=s,va(d,t,e)}function Cn(t){var e=ut[t];return function(t,i){if(t=no(t),(i=null==i?0:ri(io(i),292))&&ii(t)){var s=(ro(t)+"e").split("e");return+((s=(ro(e(s[0]+"e"+(+s[1]+i)))+"e").split("e"))[0]+"e"+(+s[1]-i))}return e(t)}}var Ln=ui&&1/Fe(new ui([,-0]))[1]==1/0?function(t){return new ui(t)}:Zo;function qn(t){return function(e){var i=ia(e);return i==g?He(e):i==f?Be(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Wn(t,e,i,n,o,_,h,c){var l=2&e;if(!l&&"function"!=typeof t)throw new bt(a);var d=n?n.length:0;if(d||(e&=-97,n=o=void 0),h=void 0===h?h:ai(io(h),0),c=void 0===c?c:io(c),d-=o?o.length:0,64&e){var p=n,u=o;n=o=void 0}var g=l?void 0:Yn(t),m=[t,e,i,n,o,p,u,_,h,c];if(g&&function(t,e){var i=t[1],s=e[1],n=i|s,a=n<131,o=128==s&&8==i||128==s&&256==i&&t[7].length<=e[8]||384==s&&e[7].length<=e[8]&&8==i;if(!a&&!o)return t;1&s&&(t[2]=e[2],n|=1&i?0:4);var _=e[3];if(_){var h=t[3];t[3]=h?gn(h,_,e[4]):_,t[4]=h?Ge(t[3],r):e[4]}(_=e[5])&&(h=t[5],t[5]=h?mn(h,_,e[6]):_,t[6]=h?Ge(t[5],r):e[6]);(_=e[7])&&(t[7]=_);128&s&&(t[8]=null==t[8]?e[8]:ri(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=n}(m,g),t=m[0],e=m[1],i=m[2],n=m[3],o=m[4],!(c=m[9]=void 0===m[9]?l?0:t.length:ai(m[9]-d,0))&&24&e&&(e&=-25),e&&1!=e)y=8==e||16==e?function(t,e,i){var n=jn(t);return function a(){for(var r=arguments.length,o=s(r),_=r,h=Xn(a);_--;)o[_]=arguments[_];var c=r<3&&o[0]!==h&&o[r-1]!==h?[]:Ge(o,h);if((r-=c.length)<i)return Dn(t,e,Sn,a.placeholder,void 0,o,c,void 0,void 0,i-r);var l=this&&this!==Yt&&this instanceof a?n:t;return ae(l,this,o)}}(t,e,c):32!=e&&33!=e||o.length?Sn.apply(void 0,m):function(t,e,i,n){var a=1&e,r=jn(t);return function e(){for(var o=-1,_=arguments.length,h=-1,c=n.length,l=s(c+_),d=this&&this!==Yt&&this instanceof e?r:t;++h<c;)l[h]=n[h];for(;_--;)l[h++]=arguments[++o];return ae(d,a?i:this,l)}}(t,e,i,n);else var y=function(t,e,i){var s=1&e,n=jn(t);return function e(){var a=this&&this!==Yt&&this instanceof e?n:t;return a.apply(s?i:this,arguments)}}(t,e,i);return va((g?Us:ba)(y,m),t,e)}function Hn(t,e,i,s){return void 0===t||Sr(t,vt[i])&&!Et.call(s,i)?e:t}function Un(t,e,i,s,n,a){return Gr(t)&&Gr(e)&&(a.set(e,t),Is(t,e,void 0,Un,a),a.delete(e)),t}function Gn(t){return Kr(t)?void 0:t}function Fn(t,e,i,s,n,a){var r=1&i,o=t.length,_=e.length;if(o!=_&&!(r&&_>o))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var l=-1,d=!0,p=2&i?new Di:void 0;for(a.set(t,e),a.set(e,t);++l<o;){var u=t[l],g=e[l];if(s)var m=r?s(g,u,l,e,t,a):s(u,g,l,t,e,a);if(void 0!==m){if(m)continue;d=!1;break}if(p){if(!ye(e,(function(t,e){if(!Me(p,e)&&(u===t||n(u,t,i,s,a)))return p.push(e)}))){d=!1;break}}else if(u!==g&&!n(u,g,i,s,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function Bn(t){return wa(ua(t,void 0,Na),t+"")}function zn(t){return ls(t,wo,ta)}function Kn(t){return ls(t,vo,ea)}var Yn=yi?function(t){return yi.get(t)}:Zo;function $n(t){for(var e=t.name+"",i=bi[e],s=Et.call(bi,e)?i.length:0;s--;){var n=i[s],a=n.func;if(null==a||a==t)return n.name}return e}function Xn(t){return(Et.call(Ai,"placeholder")?Ai:t).placeholder}function Jn(){var t=Ai.iteratee||Yo;return t=t===Yo?xs:t,arguments.length?t(arguments[0],arguments[1]):t}function Zn(t,e){var i,s,n=t.__data__;return("string"==(s=typeof(i=e))||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==i:null===i)?n["string"==typeof e?"string":"hash"]:n.map}function Vn(t){for(var e=wo(t),i=e.length;i--;){var s=e[i],n=t[s];e[i]=[s,n,da(n)]}return e}function Qn(t,e){var i=function(t,e){return null==t?void 0:t[e]}(t,e);return vs(i)?i:void 0}var ta=ti?function(t){return null==t?[]:(t=gt(t),ce(ti(t),(function(e){return $t.call(t,e)})))}:n_,ea=ti?function(t){for(var e=[];t;)ue(e,ta(t)),t=zt(t);return e}:n_,ia=ds;function sa(t,e,i){for(var s=-1,n=(e=on(e,t)).length,a=!1;++s<n;){var r=ja(e[s]);if(!(a=null!=t&&i(t,r)))break;t=t[r]}return a||++s!=n?a:!!(n=null==t?0:t.length)&&Ur(n)&&ra(r,n)&&(Mr(t)||Pr(t))}function na(t){return"function"!=typeof t.constructor||la(t)?{}:Si(zt(t))}function aa(t){return Mr(t)||Pr(t)||!!(Zt&&t&&t[Zt])}function ra(t,e){var i=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==i||"symbol"!=i&&_t.test(t))&&t>-1&&t%1==0&&t<e}function oa(t,e,i){if(!Gr(i))return!1;var s=typeof e;return!!("number"==s?Rr(i)&&ra(e,i.length):"string"==s&&e in i)&&Sr(i[e],t)}function _a(t,e){if(Mr(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!Jr(t))||(B.test(t)||!F.test(t)||null!=e&&t in gt(e))}function ha(t){var e=$n(t),i=Ai[e];if("function"!=typeof i||!(e in Pi.prototype))return!1;if(t===i)return!0;var s=Yn(i);return!!s&&t===s[0]}(li&&ia(new li(new ArrayBuffer(1)))!=E||di&&ia(new di)!=g||pi&&"[object Promise]"!=ia(pi.resolve())||ui&&ia(new ui)!=f||gi&&ia(new gi)!=x)&&(ia=function(t){var e=ds(t),i=e==y?t.constructor:void 0,s=i?Ta(i):"";if(s)switch(s){case fi:return E;case wi:return g;case vi:return"[object Promise]";case xi:return f;case ki:return x}return e});var ca=xt?Wr:a_;function la(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||vt)}function da(t){return t==t&&!Gr(t)}function pa(t,e){return function(i){return null!=i&&(i[t]===e&&(void 0!==e||t in gt(i)))}}function ua(t,e,i){return e=ai(void 0===e?t.length-1:e,0),function(){for(var n=arguments,a=-1,r=ai(n.length-e,0),o=s(r);++a<r;)o[a]=n[e+a];a=-1;for(var _=s(e+1);++a<e;)_[a]=n[a];return _[e]=i(o),ae(t,this,_)}}function ga(t,e){return e.length<2?t:cs(t,Bs(e,0,-1))}function ma(t,e){for(var i=t.length,s=ri(e.length,i),n=yn(t);s--;){var a=e[s];t[s]=ra(a,i)?n[a]:void 0}return t}function ya(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var ba=xa(Us),fa=Ze||function(t,e){return Yt.setTimeout(t,e)},wa=xa(Gs);function va(t,e,i){var s=e+"";return wa(t,function(t,e){var i=e.length;if(!i)return t;var s=i-1;return e[s]=(i>1?"& ":"")+e[s],e=e.join(i>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(s,function(t,e){return oe(o,(function(i){var s="_."+i[0];e&i[1]&&!le(t,s)&&t.push(s)})),t.sort()}(function(t){var e=t.match(V);return e?e[1].split(Q):[]}(s),i)))}function xa(t){var e=0,i=0;return function(){var s=oi(),n=16-(s-i);if(i=s,n>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function ka(t,e){var i=-1,s=t.length,n=s-1;for(e=void 0===e?s:e;++i<e;){var a=Ds(i,n),r=t[a];t[a]=t[i],t[i]=r}return t.length=e,t}var Ea=function(t){var e=xr(t,(function(t){return 500===i.size&&i.clear(),t})),i=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(z,(function(t,i,s,n){e.push(s?n.replace(et,"$1"):i||t)})),e}));function ja(t){if("string"==typeof t||Jr(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Ta(t){if(null!=t){try{return kt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Aa(t){if(t instanceof Pi)return t.clone();var e=new Oi(t.__wrapped__,t.__chain__);return e.__actions__=yn(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Sa=Ls((function(t,e){return Dr(t)?Vi(t,ns(e,1,Dr,!0)):[]})),Ia=Ls((function(t,e){var i=qa(e);return Dr(i)&&(i=void 0),Dr(t)?Vi(t,ns(e,1,Dr,!0),Jn(i,2)):[]})),Oa=Ls((function(t,e){var i=qa(e);return Dr(i)&&(i=void 0),Dr(t)?Vi(t,ns(e,1,Dr,!0),void 0,i):[]}));function Pa(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),we(t,Jn(e,3),n)}function Ma(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s-1;return void 0!==i&&(n=io(i),n=i<0?ai(s+n,0):ri(n,s-1)),we(t,Jn(e,3),n,!0)}function Na(t){return(null==t?0:t.length)?ns(t,1):[]}function Ra(t){return t&&t.length?t[0]:void 0}var Da=Ls((function(t){var e=pe(t,an);return e.length&&e[0]===t[0]?ms(e):[]})),Ca=Ls((function(t){var e=qa(t),i=pe(t,an);return e===qa(i)?e=void 0:i.pop(),i.length&&i[0]===t[0]?ms(i,Jn(e,2)):[]})),La=Ls((function(t){var e=qa(t),i=pe(t,an);return(e="function"==typeof e?e:void 0)&&i.pop(),i.length&&i[0]===t[0]?ms(i,void 0,e):[]}));function qa(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Wa=Ls(Ha);function Ha(t,e){return t&&t.length&&e&&e.length?Ns(t,e):t}var Ua=Bn((function(t,e){var i=null==t?0:t.length,s=Yi(t,e);return Rs(t,pe(e,(function(t){return ra(t,i)?+t:t})).sort(un)),s}));function Ga(t){return null==t?t:ci.call(t)}var Fa=Ls((function(t){return Zs(ns(t,1,Dr,!0))})),Ba=Ls((function(t){var e=qa(t);return Dr(e)&&(e=void 0),Zs(ns(t,1,Dr,!0),Jn(e,2))})),za=Ls((function(t){var e=qa(t);return e="function"==typeof e?e:void 0,Zs(ns(t,1,Dr,!0),void 0,e)}));function Ka(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(Dr(t))return e=ai(t.length,e),!0})),Ie(e,(function(e){return pe(t,je(e))}))}function Ya(t,e){if(!t||!t.length)return[];var i=Ka(t);return null==e?i:pe(i,(function(t){return ae(e,void 0,t)}))}var $a=Ls((function(t,e){return Dr(t)?Vi(t,e):[]})),Xa=Ls((function(t){return sn(ce(t,Dr))})),Ja=Ls((function(t){var e=qa(t);return Dr(e)&&(e=void 0),sn(ce(t,Dr),Jn(e,2))})),Za=Ls((function(t){var e=qa(t);return e="function"==typeof e?e:void 0,sn(ce(t,Dr),void 0,e)})),Va=Ls(Ka);var Qa=Ls((function(t){var e=t.length,i=e>1?t[e-1]:void 0;return i="function"==typeof i?(t.pop(),i):void 0,Ya(t,i)}));function tr(t){var e=Ai(t);return e.__chain__=!0,e}function er(t,e){return e(t)}var ir=Bn((function(t){var e=t.length,i=e?t[0]:0,s=this.__wrapped__,n=function(e){return Yi(e,t)};return!(e>1||this.__actions__.length)&&s instanceof Pi&&ra(i)?((s=s.slice(i,+i+(e?1:0))).__actions__.push({func:er,args:[n],thisArg:void 0}),new Oi(s,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(n)}));var sr=fn((function(t,e,i){Et.call(t,i)?++t[i]:Ki(t,i,1)}));var nr=Tn(Pa),ar=Tn(Ma);function rr(t,e){return(Mr(t)?oe:Qi)(t,Jn(e,3))}function or(t,e){return(Mr(t)?_e:ts)(t,Jn(e,3))}var _r=fn((function(t,e,i){Et.call(t,i)?t[i].push(e):Ki(t,i,[e])}));var hr=Ls((function(t,e,i){var n=-1,a="function"==typeof e,r=Rr(t)?s(t.length):[];return Qi(t,(function(t){r[++n]=a?ae(e,t,i):ys(t,e,i)})),r})),cr=fn((function(t,e,i){Ki(t,i,e)}));function lr(t,e){return(Mr(t)?pe:Ts)(t,Jn(e,3))}var dr=fn((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]}));var pr=Ls((function(t,e){if(null==t)return[];var i=e.length;return i>1&&oa(t,e[0],e[1])?e=[]:i>2&&oa(e[0],e[1],e[2])&&(e=[e[0]]),Ps(t,ns(e,1),[])})),ur=Je||function(){return Yt.Date.now()};function gr(t,e,i){return e=i?void 0:e,Wn(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function mr(t,e){var i;if("function"!=typeof e)throw new bt(a);return t=io(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=void 0),i}}var yr=Ls((function(t,e,i){var s=1;if(i.length){var n=Ge(i,Xn(yr));s|=32}return Wn(t,s,e,i,n)})),br=Ls((function(t,e,i){var s=3;if(i.length){var n=Ge(i,Xn(br));s|=32}return Wn(e,s,t,i,n)}));function fr(t,e,i){var s,n,r,o,_,h,c=0,l=!1,d=!1,p=!0;if("function"!=typeof t)throw new bt(a);function u(e){var i=s,a=n;return s=n=void 0,c=e,o=t.apply(a,i)}function g(t){return c=t,_=fa(y,e),l?u(t):o}function m(t){var i=t-h;return void 0===h||i>=e||i<0||d&&t-c>=r}function y(){var t=ur();if(m(t))return b(t);_=fa(y,function(t){var i=e-(t-h);return d?ri(i,r-(t-c)):i}(t))}function b(t){return _=void 0,p&&s?u(t):(s=n=void 0,o)}function f(){var t=ur(),i=m(t);if(s=arguments,n=this,h=t,i){if(void 0===_)return g(h);if(d)return cn(_),_=fa(y,e),u(h)}return void 0===_&&(_=fa(y,e)),o}return e=no(e)||0,Gr(i)&&(l=!!i.leading,r=(d="maxWait"in i)?ai(no(i.maxWait)||0,e):r,p="trailing"in i?!!i.trailing:p),f.cancel=function(){void 0!==_&&cn(_),c=0,s=h=n=_=void 0},f.flush=function(){return void 0===_?o:b(ur())},f}var wr=Ls((function(t,e){return Zi(t,1,e)})),vr=Ls((function(t,e,i){return Zi(t,no(e)||0,i)}));function xr(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new bt(a);var i=function(){var s=arguments,n=e?e.apply(this,s):s[0],a=i.cache;if(a.has(n))return a.get(n);var r=t.apply(this,s);return i.cache=a.set(n,r)||a,r};return i.cache=new(xr.Cache||Ri),i}function kr(t){if("function"!=typeof t)throw new bt(a);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}xr.Cache=Ri;var Er=_n((function(t,e){var i=(e=1==e.length&&Mr(e[0])?pe(e[0],Oe(Jn())):pe(ns(e,1),Oe(Jn()))).length;return Ls((function(s){for(var n=-1,a=ri(s.length,i);++n<a;)s[n]=e[n].call(this,s[n]);return ae(t,this,s)}))})),jr=Ls((function(t,e){return Wn(t,32,void 0,e,Ge(e,Xn(jr)))})),Tr=Ls((function(t,e){return Wn(t,64,void 0,e,Ge(e,Xn(Tr)))})),Ar=Bn((function(t,e){return Wn(t,256,void 0,void 0,void 0,e)}));function Sr(t,e){return t===e||t!=t&&e!=e}var Ir=Rn(ps),Or=Rn((function(t,e){return t>=e})),Pr=bs(function(){return arguments}())?bs:function(t){return Fr(t)&&Et.call(t,"callee")&&!$t.call(t,"callee")},Mr=s.isArray,Nr=Qt?Oe(Qt):function(t){return Fr(t)&&ds(t)==k};function Rr(t){return null!=t&&Ur(t.length)&&!Wr(t)}function Dr(t){return Fr(t)&&Rr(t)}var Cr=ei||a_,Lr=te?Oe(te):function(t){return Fr(t)&&ds(t)==l};function qr(t){if(!Fr(t))return!1;var e=ds(t);return e==d||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Kr(t)}function Wr(t){if(!Gr(t))return!1;var e=ds(t);return e==p||e==u||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Hr(t){return"number"==typeof t&&t==io(t)}function Ur(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Gr(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Fr(t){return null!=t&&"object"==typeof t}var Br=ee?Oe(ee):function(t){return Fr(t)&&ia(t)==g};function zr(t){return"number"==typeof t||Fr(t)&&ds(t)==m}function Kr(t){if(!Fr(t)||ds(t)!=y)return!1;var e=zt(t);if(null===e)return!0;var i=Et.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&kt.call(i)==St}var Yr=ie?Oe(ie):function(t){return Fr(t)&&ds(t)==b};var $r=se?Oe(se):function(t){return Fr(t)&&ia(t)==f};function Xr(t){return"string"==typeof t||!Mr(t)&&Fr(t)&&ds(t)==w}function Jr(t){return"symbol"==typeof t||Fr(t)&&ds(t)==v}var Zr=ne?Oe(ne):function(t){return Fr(t)&&Ur(t.length)&&!!Ht[ds(t)]};var Vr=Rn(js),Qr=Rn((function(t,e){return t<=e}));function to(t){if(!t)return[];if(Rr(t))return Xr(t)?Ke(t):yn(t);if(Vt&&t[Vt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Vt]());var e=ia(t);return(e==g?He:e==f?Fe:Io)(t)}function eo(t){return t?(t=no(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function io(t){var e=eo(t),i=e%1;return e==e?i?e-i:e:0}function so(t){return t?$i(io(t),0,4294967295):0}function no(t){if("number"==typeof t)return t;if(Jr(t))return NaN;if(Gr(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Gr(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace($,"");var i=at.test(t);return i||ot.test(t)?Bt(t.slice(2),i?2:8):nt.test(t)?NaN:+t}function ao(t){return bn(t,vo(t))}function ro(t){return null==t?"":Js(t)}var oo=wn((function(t,e){if(la(e)||Rr(e))bn(e,wo(e),t);else for(var i in e)Et.call(e,i)&&Gi(t,i,e[i])})),_o=wn((function(t,e){bn(e,vo(e),t)})),ho=wn((function(t,e,i,s){bn(e,vo(e),t,s)})),co=wn((function(t,e,i,s){bn(e,wo(e),t,s)})),lo=Bn(Yi);var po=Ls((function(t,e){t=gt(t);var i=-1,s=e.length,n=s>2?e[2]:void 0;for(n&&oa(e[0],e[1],n)&&(s=1);++i<s;)for(var a=e[i],r=vo(a),o=-1,_=r.length;++o<_;){var h=r[o],c=t[h];(void 0===c||Sr(c,vt[h])&&!Et.call(t,h))&&(t[h]=a[h])}return t})),uo=Ls((function(t){return t.push(void 0,Un),ae(ko,void 0,t)}));function go(t,e,i){var s=null==t?void 0:cs(t,e);return void 0===s?i:s}function mo(t,e){return null!=t&&sa(t,e,gs)}var yo=In((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=At.call(e)),t[e]=i}),Fo(Ko)),bo=In((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=At.call(e)),Et.call(t,e)?t[e].push(i):t[e]=[i]}),Jn),fo=Ls(ys);function wo(t){return Rr(t)?Li(t):ks(t)}function vo(t){return Rr(t)?Li(t,!0):Es(t)}var xo=wn((function(t,e,i){Is(t,e,i)})),ko=wn((function(t,e,i,s){Is(t,e,i,s)})),Eo=Bn((function(t,e){var i={};if(null==t)return i;var s=!1;e=pe(e,(function(e){return e=on(e,t),s||(s=e.length>1),e})),bn(t,Kn(t),i),s&&(i=Xi(i,7,Gn));for(var n=e.length;n--;)Vs(i,e[n]);return i}));var jo=Bn((function(t,e){return null==t?{}:function(t,e){return Ms(t,e,(function(e,i){return mo(t,i)}))}(t,e)}));function To(t,e){if(null==t)return{};var i=pe(Kn(t),(function(t){return[t]}));return e=Jn(e),Ms(t,i,(function(t,i){return e(t,i[0])}))}var Ao=qn(wo),So=qn(vo);function Io(t){return null==t?[]:Pe(t,wo(t))}var Oo=En((function(t,e,i){return e=e.toLowerCase(),t+(i?Po(e):e)}));function Po(t){return Wo(ro(t).toLowerCase())}function Mo(t){return(t=ro(t))&&t.replace(ht,Ce).replace(Nt,"")}var No=En((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Ro=En((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Do=kn("toLowerCase");var Co=En((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()}));var Lo=En((function(t,e,i){return t+(i?" ":"")+Wo(e)}));var qo=En((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Wo=kn("toUpperCase");function Ho(t,e,i){return t=ro(t),void 0===(e=i?void 0:e)?function(t){return Lt.test(t)}(t)?function(t){return t.match(Dt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Uo=Ls((function(t,e){try{return ae(t,void 0,e)}catch(t){return qr(t)?t:new dt(t)}})),Go=Bn((function(t,e){return oe(e,(function(e){e=ja(e),Ki(t,e,yr(t[e],t))})),t}));function Fo(t){return function(){return t}}var Bo=An(),zo=An(!0);function Ko(t){return t}function Yo(t){return xs("function"==typeof t?t:Xi(t,1))}var $o=Ls((function(t,e){return function(i){return ys(i,t,e)}})),Xo=Ls((function(t,e){return function(i){return ys(t,i,e)}}));function Jo(t,e,i){var s=wo(e),n=hs(e,s);null!=i||Gr(e)&&(n.length||!s.length)||(i=e,e=t,t=this,n=hs(e,wo(e)));var a=!(Gr(i)&&"chain"in i&&!i.chain),r=Wr(t);return oe(n,(function(i){var s=e[i];t[i]=s,r&&(t.prototype[i]=function(){var e=this.__chain__;if(a||e){var i=t(this.__wrapped__),n=i.__actions__=yn(this.__actions__);return n.push({func:s,args:arguments,thisArg:t}),i.__chain__=e,i}return s.apply(t,ue([this.value()],arguments))})})),t}function Zo(){}var Vo=Pn(pe),Qo=Pn(he),t_=Pn(ye);function e_(t){return _a(t)?je(ja(t)):function(t){return function(e){return cs(e,t)}}(t)}var i_=Nn(),s_=Nn(!0);function n_(){return[]}function a_(){return!1}var r_=On((function(t,e){return t+e}),0),o_=Cn("ceil"),__=On((function(t,e){return t/e}),1),h_=Cn("floor");var c_,l_=On((function(t,e){return t*e}),1),d_=Cn("round"),p_=On((function(t,e){return t-e}),0);return Ai.after=function(t,e){if("function"!=typeof e)throw new bt(a);return t=io(t),function(){if(--t<1)return e.apply(this,arguments)}},Ai.ary=gr,Ai.assign=oo,Ai.assignIn=_o,Ai.assignInWith=ho,Ai.assignWith=co,Ai.at=lo,Ai.before=mr,Ai.bind=yr,Ai.bindAll=Go,Ai.bindKey=br,Ai.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Mr(t)?t:[t]},Ai.chain=tr,Ai.chunk=function(t,e,i){e=(i?oa(t,e,i):void 0===e)?1:ai(io(e),0);var n=null==t?0:t.length;if(!n||e<1)return[];for(var a=0,r=0,o=s(Ve(n/e));a<n;)o[r++]=Bs(t,a,a+=e);return o},Ai.compact=function(t){for(var e=-1,i=null==t?0:t.length,s=0,n=[];++e<i;){var a=t[e];a&&(n[s++]=a)}return n},Ai.concat=function(){var t=arguments.length;if(!t)return[];for(var e=s(t-1),i=arguments[0],n=t;n--;)e[n-1]=arguments[n];return ue(Mr(i)?yn(i):[i],ns(e,1))},Ai.cond=function(t){var e=null==t?0:t.length,i=Jn();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new bt(a);return[i(t[0]),t[1]]})):[],Ls((function(i){for(var s=-1;++s<e;){var n=t[s];if(ae(n[0],this,i))return ae(n[1],this,i)}}))},Ai.conforms=function(t){return function(t){var e=wo(t);return function(i){return Ji(i,t,e)}}(Xi(t,1))},Ai.constant=Fo,Ai.countBy=sr,Ai.create=function(t,e){var i=Si(t);return null==e?i:zi(i,e)},Ai.curry=function t(e,i,s){var n=Wn(e,8,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ai.curryRight=function t(e,i,s){var n=Wn(e,16,void 0,void 0,void 0,void 0,void 0,i=s?void 0:i);return n.placeholder=t.placeholder,n},Ai.debounce=fr,Ai.defaults=po,Ai.defaultsDeep=uo,Ai.defer=wr,Ai.delay=vr,Ai.difference=Sa,Ai.differenceBy=Ia,Ai.differenceWith=Oa,Ai.drop=function(t,e,i){var s=null==t?0:t.length;return s?Bs(t,(e=i||void 0===e?1:io(e))<0?0:e,s):[]},Ai.dropRight=function(t,e,i){var s=null==t?0:t.length;return s?Bs(t,0,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e):[]},Ai.dropRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0,!0):[]},Ai.dropWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!0):[]},Ai.fill=function(t,e,i,s){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&oa(t,e,i)&&(i=0,s=n),function(t,e,i,s){var n=t.length;for((i=io(i))<0&&(i=-i>n?0:n+i),(s=void 0===s||s>n?n:io(s))<0&&(s+=n),s=i>s?0:so(s);i<s;)t[i++]=e;return t}(t,e,i,s)):[]},Ai.filter=function(t,e){return(Mr(t)?ce:ss)(t,Jn(e,3))},Ai.flatMap=function(t,e){return ns(lr(t,e),1)},Ai.flatMapDeep=function(t,e){return ns(lr(t,e),1/0)},Ai.flatMapDepth=function(t,e,i){return i=void 0===i?1:io(i),ns(lr(t,e),i)},Ai.flatten=Na,Ai.flattenDeep=function(t){return(null==t?0:t.length)?ns(t,1/0):[]},Ai.flattenDepth=function(t,e){return(null==t?0:t.length)?ns(t,e=void 0===e?1:io(e)):[]},Ai.flip=function(t){return Wn(t,512)},Ai.flow=Bo,Ai.flowRight=zo,Ai.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,s={};++e<i;){var n=t[e];s[n[0]]=n[1]}return s},Ai.functions=function(t){return null==t?[]:hs(t,wo(t))},Ai.functionsIn=function(t){return null==t?[]:hs(t,vo(t))},Ai.groupBy=_r,Ai.initial=function(t){return(null==t?0:t.length)?Bs(t,0,-1):[]},Ai.intersection=Da,Ai.intersectionBy=Ca,Ai.intersectionWith=La,Ai.invert=yo,Ai.invertBy=bo,Ai.invokeMap=hr,Ai.iteratee=Yo,Ai.keyBy=cr,Ai.keys=wo,Ai.keysIn=vo,Ai.map=lr,Ai.mapKeys=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Ki(i,e(t,s,n),t)})),i},Ai.mapValues=function(t,e){var i={};return e=Jn(e,3),os(t,(function(t,s,n){Ki(i,s,e(t,s,n))})),i},Ai.matches=function(t){return As(Xi(t,1))},Ai.matchesProperty=function(t,e){return Ss(t,Xi(e,1))},Ai.memoize=xr,Ai.merge=xo,Ai.mergeWith=ko,Ai.method=$o,Ai.methodOf=Xo,Ai.mixin=Jo,Ai.negate=kr,Ai.nthArg=function(t){return t=io(t),Ls((function(e){return Os(e,t)}))},Ai.omit=Eo,Ai.omitBy=function(t,e){return To(t,kr(Jn(e)))},Ai.once=function(t){return mr(2,t)},Ai.orderBy=function(t,e,i,s){return null==t?[]:(Mr(e)||(e=null==e?[]:[e]),Mr(i=s?void 0:i)||(i=null==i?[]:[i]),Ps(t,e,i))},Ai.over=Vo,Ai.overArgs=Er,Ai.overEvery=Qo,Ai.overSome=t_,Ai.partial=jr,Ai.partialRight=Tr,Ai.partition=dr,Ai.pick=jo,Ai.pickBy=To,Ai.property=e_,Ai.propertyOf=function(t){return function(e){return null==t?void 0:cs(t,e)}},Ai.pull=Wa,Ai.pullAll=Ha,Ai.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?Ns(t,e,Jn(i,2)):t},Ai.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?Ns(t,e,void 0,i):t},Ai.pullAt=Ua,Ai.range=i_,Ai.rangeRight=s_,Ai.rearg=Ar,Ai.reject=function(t,e){return(Mr(t)?ce:ss)(t,kr(Jn(e,3)))},Ai.remove=function(t,e){var i=[];if(!t||!t.length)return i;var s=-1,n=[],a=t.length;for(e=Jn(e,3);++s<a;){var r=t[s];e(r,s,t)&&(i.push(r),n.push(s))}return Rs(t,n),i},Ai.rest=function(t,e){if("function"!=typeof t)throw new bt(a);return Ls(t,e=void 0===e?e:io(e))},Ai.reverse=Ga,Ai.sampleSize=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),(Mr(t)?Wi:Ws)(t,e)},Ai.set=function(t,e,i){return null==t?t:Hs(t,e,i)},Ai.setWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Hs(t,e,i,s)},Ai.shuffle=function(t){return(Mr(t)?Hi:Fs)(t)},Ai.slice=function(t,e,i){var s=null==t?0:t.length;return s?(i&&"number"!=typeof i&&oa(t,e,i)?(e=0,i=s):(e=null==e?0:io(e),i=void 0===i?s:io(i)),Bs(t,e,i)):[]},Ai.sortBy=pr,Ai.sortedUniq=function(t){return t&&t.length?$s(t):[]},Ai.sortedUniqBy=function(t,e){return t&&t.length?$s(t,Jn(e,2)):[]},Ai.split=function(t,e,i){return i&&"number"!=typeof i&&oa(t,e,i)&&(e=i=void 0),(i=void 0===i?4294967295:i>>>0)?(t=ro(t))&&("string"==typeof e||null!=e&&!Yr(e))&&!(e=Js(e))&&We(t)?hn(Ke(t),0,i):t.split(e,i):[]},Ai.spread=function(t,e){if("function"!=typeof t)throw new bt(a);return e=null==e?0:ai(io(e),0),Ls((function(i){var s=i[e],n=hn(i,0,e);return s&&ue(n,s),ae(t,this,n)}))},Ai.tail=function(t){var e=null==t?0:t.length;return e?Bs(t,1,e):[]},Ai.take=function(t,e,i){return t&&t.length?Bs(t,0,(e=i||void 0===e?1:io(e))<0?0:e):[]},Ai.takeRight=function(t,e,i){var s=null==t?0:t.length;return s?Bs(t,(e=s-(e=i||void 0===e?1:io(e)))<0?0:e,s):[]},Ai.takeRightWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3),!1,!0):[]},Ai.takeWhile=function(t,e){return t&&t.length?tn(t,Jn(e,3)):[]},Ai.tap=function(t,e){return e(t),t},Ai.throttle=function(t,e,i){var s=!0,n=!0;if("function"!=typeof t)throw new bt(a);return Gr(i)&&(s="leading"in i?!!i.leading:s,n="trailing"in i?!!i.trailing:n),fr(t,e,{leading:s,maxWait:e,trailing:n})},Ai.thru=er,Ai.toArray=to,Ai.toPairs=Ao,Ai.toPairsIn=So,Ai.toPath=function(t){return Mr(t)?pe(t,ja):Jr(t)?[t]:yn(Ea(ro(t)))},Ai.toPlainObject=ao,Ai.transform=function(t,e,i){var s=Mr(t),n=s||Cr(t)||Zr(t);if(e=Jn(e,4),null==i){var a=t&&t.constructor;i=n?s?new a:[]:Gr(t)&&Wr(a)?Si(zt(t)):{}}return(n?oe:os)(t,(function(t,s,n){return e(i,t,s,n)})),i},Ai.unary=function(t){return gr(t,1)},Ai.union=Fa,Ai.unionBy=Ba,Ai.unionWith=za,Ai.uniq=function(t){return t&&t.length?Zs(t):[]},Ai.uniqBy=function(t,e){return t&&t.length?Zs(t,Jn(e,2)):[]},Ai.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Zs(t,void 0,e):[]},Ai.unset=function(t,e){return null==t||Vs(t,e)},Ai.unzip=Ka,Ai.unzipWith=Ya,Ai.update=function(t,e,i){return null==t?t:Qs(t,e,rn(i))},Ai.updateWith=function(t,e,i,s){return s="function"==typeof s?s:void 0,null==t?t:Qs(t,e,rn(i),s)},Ai.values=Io,Ai.valuesIn=function(t){return null==t?[]:Pe(t,vo(t))},Ai.without=$a,Ai.words=Ho,Ai.wrap=function(t,e){return jr(rn(e),t)},Ai.xor=Xa,Ai.xorBy=Ja,Ai.xorWith=Za,Ai.zip=Va,Ai.zipObject=function(t,e){return nn(t||[],e||[],Gi)},Ai.zipObjectDeep=function(t,e){return nn(t||[],e||[],Hs)},Ai.zipWith=Qa,Ai.entries=Ao,Ai.entriesIn=So,Ai.extend=_o,Ai.extendWith=ho,Jo(Ai,Ai),Ai.add=r_,Ai.attempt=Uo,Ai.camelCase=Oo,Ai.capitalize=Po,Ai.ceil=o_,Ai.clamp=function(t,e,i){return void 0===i&&(i=e,e=void 0),void 0!==i&&(i=(i=no(i))==i?i:0),void 0!==e&&(e=(e=no(e))==e?e:0),$i(no(t),e,i)},Ai.clone=function(t){return Xi(t,4)},Ai.cloneDeep=function(t){return Xi(t,5)},Ai.cloneDeepWith=function(t,e){return Xi(t,5,e="function"==typeof e?e:void 0)},Ai.cloneWith=function(t,e){return Xi(t,4,e="function"==typeof e?e:void 0)},Ai.conformsTo=function(t,e){return null==e||Ji(t,e,wo(e))},Ai.deburr=Mo,Ai.defaultTo=function(t,e){return null==t||t!=t?e:t},Ai.divide=__,Ai.endsWith=function(t,e,i){t=ro(t),e=Js(e);var s=t.length,n=i=void 0===i?s:$i(io(i),0,s);return(i-=e.length)>=0&&t.slice(i,n)==e},Ai.eq=Sr,Ai.escape=function(t){return(t=ro(t))&&W.test(t)?t.replace(L,Le):t},Ai.escapeRegExp=function(t){return(t=ro(t))&&Y.test(t)?t.replace(K,"\\$&"):t},Ai.every=function(t,e,i){var s=Mr(t)?he:es;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ai.find=nr,Ai.findIndex=Pa,Ai.findKey=function(t,e){return fe(t,Jn(e,3),os)},Ai.findLast=ar,Ai.findLastIndex=Ma,Ai.findLastKey=function(t,e){return fe(t,Jn(e,3),_s)},Ai.floor=h_,Ai.forEach=rr,Ai.forEachRight=or,Ai.forIn=function(t,e){return null==t?t:as(t,Jn(e,3),vo)},Ai.forInRight=function(t,e){return null==t?t:rs(t,Jn(e,3),vo)},Ai.forOwn=function(t,e){return t&&os(t,Jn(e,3))},Ai.forOwnRight=function(t,e){return t&&_s(t,Jn(e,3))},Ai.get=go,Ai.gt=Ir,Ai.gte=Or,Ai.has=function(t,e){return null!=t&&sa(t,e,us)},Ai.hasIn=mo,Ai.head=Ra,Ai.identity=Ko,Ai.includes=function(t,e,i,s){t=Rr(t)?t:Io(t),i=i&&!s?io(i):0;var n=t.length;return i<0&&(i=ai(n+i,0)),Xr(t)?i<=n&&t.indexOf(e,i)>-1:!!n&&ve(t,e,i)>-1},Ai.indexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=null==i?0:io(i);return n<0&&(n=ai(s+n,0)),ve(t,e,n)},Ai.inRange=function(t,e,i){return e=eo(e),void 0===i?(i=e,e=0):i=eo(i),function(t,e,i){return t>=ri(e,i)&&t<ai(e,i)}(t=no(t),e,i)},Ai.invoke=fo,Ai.isArguments=Pr,Ai.isArray=Mr,Ai.isArrayBuffer=Nr,Ai.isArrayLike=Rr,Ai.isArrayLikeObject=Dr,Ai.isBoolean=function(t){return!0===t||!1===t||Fr(t)&&ds(t)==c},Ai.isBuffer=Cr,Ai.isDate=Lr,Ai.isElement=function(t){return Fr(t)&&1===t.nodeType&&!Kr(t)},Ai.isEmpty=function(t){if(null==t)return!0;if(Rr(t)&&(Mr(t)||"string"==typeof t||"function"==typeof t.splice||Cr(t)||Zr(t)||Pr(t)))return!t.length;var e=ia(t);if(e==g||e==f)return!t.size;if(la(t))return!ks(t).length;for(var i in t)if(Et.call(t,i))return!1;return!0},Ai.isEqual=function(t,e){return fs(t,e)},Ai.isEqualWith=function(t,e,i){var s=(i="function"==typeof i?i:void 0)?i(t,e):void 0;return void 0===s?fs(t,e,void 0,i):!!s},Ai.isError=qr,Ai.isFinite=function(t){return"number"==typeof t&&ii(t)},Ai.isFunction=Wr,Ai.isInteger=Hr,Ai.isLength=Ur,Ai.isMap=Br,Ai.isMatch=function(t,e){return t===e||ws(t,e,Vn(e))},Ai.isMatchWith=function(t,e,i){return i="function"==typeof i?i:void 0,ws(t,e,Vn(e),i)},Ai.isNaN=function(t){return zr(t)&&t!=+t},Ai.isNative=function(t){if(ca(t))throw new dt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return vs(t)},Ai.isNil=function(t){return null==t},Ai.isNull=function(t){return null===t},Ai.isNumber=zr,Ai.isObject=Gr,Ai.isObjectLike=Fr,Ai.isPlainObject=Kr,Ai.isRegExp=Yr,Ai.isSafeInteger=function(t){return Hr(t)&&t>=-9007199254740991&&t<=9007199254740991},Ai.isSet=$r,Ai.isString=Xr,Ai.isSymbol=Jr,Ai.isTypedArray=Zr,Ai.isUndefined=function(t){return void 0===t},Ai.isWeakMap=function(t){return Fr(t)&&ia(t)==x},Ai.isWeakSet=function(t){return Fr(t)&&"[object WeakSet]"==ds(t)},Ai.join=function(t,e){return null==t?"":si.call(t,e)},Ai.kebabCase=No,Ai.last=qa,Ai.lastIndexOf=function(t,e,i){var s=null==t?0:t.length;if(!s)return-1;var n=s;return void 0!==i&&(n=(n=io(i))<0?ai(s+n,0):ri(n,s-1)),e==e?function(t,e,i){for(var s=i+1;s--;)if(t[s]===e)return s;return s}(t,e,n):we(t,ke,n,!0)},Ai.lowerCase=Ro,Ai.lowerFirst=Do,Ai.lt=Vr,Ai.lte=Qr,Ai.max=function(t){return t&&t.length?is(t,Ko,ps):void 0},Ai.maxBy=function(t,e){return t&&t.length?is(t,Jn(e,2),ps):void 0},Ai.mean=function(t){return Ee(t,Ko)},Ai.meanBy=function(t,e){return Ee(t,Jn(e,2))},Ai.min=function(t){return t&&t.length?is(t,Ko,js):void 0},Ai.minBy=function(t,e){return t&&t.length?is(t,Jn(e,2),js):void 0},Ai.stubArray=n_,Ai.stubFalse=a_,Ai.stubObject=function(){return{}},Ai.stubString=function(){return""},Ai.stubTrue=function(){return!0},Ai.multiply=l_,Ai.nth=function(t,e){return t&&t.length?Os(t,io(e)):void 0},Ai.noConflict=function(){return Yt._===this&&(Yt._=It),this},Ai.noop=Zo,Ai.now=ur,Ai.pad=function(t,e,i){t=ro(t);var s=(e=io(e))?ze(t):0;if(!e||s>=e)return t;var n=(e-s)/2;return Mn(Qe(n),i)+t+Mn(Ve(n),i)},Ai.padEnd=function(t,e,i){t=ro(t);var s=(e=io(e))?ze(t):0;return e&&s<e?t+Mn(e-s,i):t},Ai.padStart=function(t,e,i){t=ro(t);var s=(e=io(e))?ze(t):0;return e&&s<e?Mn(e-s,i)+t:t},Ai.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),_i(ro(t).replace(X,""),e||0)},Ai.random=function(t,e,i){if(i&&"boolean"!=typeof i&&oa(t,e,i)&&(e=i=void 0),void 0===i&&("boolean"==typeof e?(i=e,e=void 0):"boolean"==typeof t&&(i=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=eo(t),void 0===e?(e=t,t=0):e=eo(e)),t>e){var s=t;t=e,e=s}if(i||t%1||e%1){var n=hi();return ri(t+n*(e-t+Ft("1e-"+((n+"").length-1))),e)}return Ds(t,e)},Ai.reduce=function(t,e,i){var s=Mr(t)?ge:Ae,n=arguments.length<3;return s(t,Jn(e,4),i,n,Qi)},Ai.reduceRight=function(t,e,i){var s=Mr(t)?me:Ae,n=arguments.length<3;return s(t,Jn(e,4),i,n,ts)},Ai.repeat=function(t,e,i){return e=(i?oa(t,e,i):void 0===e)?1:io(e),Cs(ro(t),e)},Ai.replace=function(){var t=arguments,e=ro(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ai.result=function(t,e,i){var s=-1,n=(e=on(e,t)).length;for(n||(n=1,t=void 0);++s<n;){var a=null==t?void 0:t[ja(e[s])];void 0===a&&(s=n,a=i),t=Wr(a)?a.call(t):a}return t},Ai.round=d_,Ai.runInContext=t,Ai.sample=function(t){return(Mr(t)?qi:qs)(t)},Ai.size=function(t){if(null==t)return 0;if(Rr(t))return Xr(t)?ze(t):t.length;var e=ia(t);return e==g||e==f?t.size:ks(t).length},Ai.snakeCase=Co,Ai.some=function(t,e,i){var s=Mr(t)?ye:zs;return i&&oa(t,e,i)&&(e=void 0),s(t,Jn(e,3))},Ai.sortedIndex=function(t,e){return Ks(t,e)},Ai.sortedIndexBy=function(t,e,i){return Ys(t,e,Jn(i,2))},Ai.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var s=Ks(t,e);if(s<i&&Sr(t[s],e))return s}return-1},Ai.sortedLastIndex=function(t,e){return Ks(t,e,!0)},Ai.sortedLastIndexBy=function(t,e,i){return Ys(t,e,Jn(i,2),!0)},Ai.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var i=Ks(t,e,!0)-1;if(Sr(t[i],e))return i}return-1},Ai.startCase=Lo,Ai.startsWith=function(t,e,i){return t=ro(t),i=null==i?0:$i(io(i),0,t.length),e=Js(e),t.slice(i,i+e.length)==e},Ai.subtract=p_,Ai.sum=function(t){return t&&t.length?Se(t,Ko):0},Ai.sumBy=function(t,e){return t&&t.length?Se(t,Jn(e,2)):0},Ai.template=function(t,e,i){var s=Ai.templateSettings;i&&oa(t,e,i)&&(e=void 0),t=ro(t),e=ho({},e,s,Hn);var n,a,r=ho({},e.imports,s.imports,Hn),o=wo(r),_=Pe(r,o),h=0,c=e.interpolate||ct,l="__p += '",d=mt((e.escape||ct).source+"|"+c.source+"|"+(c===G?it:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),p="//# sourceURL="+(Et.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Wt+"]")+"\n";t.replace(d,(function(e,i,s,r,o,_){return s||(s=r),l+=t.slice(h,_).replace(lt,qe),i&&(n=!0,l+="' +\n__e("+i+") +\n'"),o&&(a=!0,l+="';\n"+o+";\n__p += '"),s&&(l+="' +\n((__t = ("+s+")) == null ? '' : __t) +\n'"),h=_+e.length,e})),l+="';\n";var u=Et.call(e,"variable")&&e.variable;u||(l="with (obj) {\n"+l+"\n}\n"),l=(a?l.replace(N,""):l).replace(R,"$1").replace(D,"$1;"),l="function("+(u||"obj")+") {\n"+(u?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var g=Uo((function(){return pt(o,p+"return "+l).apply(void 0,_)}));if(g.source=l,qr(g))throw g;return g},Ai.times=function(t,e){if((t=io(t))<1||t>9007199254740991)return[];var i=4294967295,s=ri(t,4294967295);t-=4294967295;for(var n=Ie(s,e=Jn(e));++i<t;)e(i);return n},Ai.toFinite=eo,Ai.toInteger=io,Ai.toLength=so,Ai.toLower=function(t){return ro(t).toLowerCase()},Ai.toNumber=no,Ai.toSafeInteger=function(t){return t?$i(io(t),-9007199254740991,9007199254740991):0===t?t:0},Ai.toString=ro,Ai.toUpper=function(t){return ro(t).toUpperCase()},Ai.trim=function(t,e,i){if((t=ro(t))&&(i||void 0===e))return t.replace($,"");if(!t||!(e=Js(e)))return t;var s=Ke(t),n=Ke(e);return hn(s,Ne(s,n),Re(s,n)+1).join("")},Ai.trimEnd=function(t,e,i){if((t=ro(t))&&(i||void 0===e))return t.replace(J,"");if(!t||!(e=Js(e)))return t;var s=Ke(t);return hn(s,0,Re(s,Ke(e))+1).join("")},Ai.trimStart=function(t,e,i){if((t=ro(t))&&(i||void 0===e))return t.replace(X,"");if(!t||!(e=Js(e)))return t;var s=Ke(t);return hn(s,Ne(s,Ke(e))).join("")},Ai.truncate=function(t,e){var i=30,s="...";if(Gr(e)){var n="separator"in e?e.separator:n;i="length"in e?io(e.length):i,s="omission"in e?Js(e.omission):s}var a=(t=ro(t)).length;if(We(t)){var r=Ke(t);a=r.length}if(i>=a)return t;var o=i-ze(s);if(o<1)return s;var _=r?hn(r,0,o).join(""):t.slice(0,o);if(void 0===n)return _+s;if(r&&(o+=_.length-o),Yr(n)){if(t.slice(o).search(n)){var h,c=_;for(n.global||(n=mt(n.source,ro(st.exec(n))+"g")),n.lastIndex=0;h=n.exec(c);)var l=h.index;_=_.slice(0,void 0===l?o:l)}}else if(t.indexOf(Js(n),o)!=o){var d=_.lastIndexOf(n);d>-1&&(_=_.slice(0,d))}return _+s},Ai.unescape=function(t){return(t=ro(t))&&q.test(t)?t.replace(C,Ye):t},Ai.uniqueId=function(t){var e=++jt;return ro(t)+e},Ai.upperCase=qo,Ai.upperFirst=Wo,Ai.each=rr,Ai.eachRight=or,Ai.first=Ra,Jo(Ai,(c_={},os(Ai,(function(t,e){Et.call(Ai.prototype,e)||(c_[e]=t)})),c_),{chain:!1}),Ai.VERSION="4.17.20",oe(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ai[t].placeholder=Ai})),oe(["drop","take"],(function(t,e){Pi.prototype[t]=function(i){i=void 0===i?1:ai(io(i),0);var s=this.__filtered__&&!e?new Pi(this):this.clone();return s.__filtered__?s.__takeCount__=ri(i,s.__takeCount__):s.__views__.push({size:ri(i,4294967295),type:t+(s.__dir__<0?"Right":"")}),s},Pi.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),oe(["filter","map","takeWhile"],(function(t,e){var i=e+1,s=1==i||3==i;Pi.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Jn(t,3),type:i}),e.__filtered__=e.__filtered__||s,e}})),oe(["head","last"],(function(t,e){var i="take"+(e?"Right":"");Pi.prototype[t]=function(){return this[i](1).value()[0]}})),oe(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");Pi.prototype[t]=function(){return this.__filtered__?new Pi(this):this[i](1)}})),Pi.prototype.compact=function(){return this.filter(Ko)},Pi.prototype.find=function(t){return this.filter(t).head()},Pi.prototype.findLast=function(t){return this.reverse().find(t)},Pi.prototype.invokeMap=Ls((function(t,e){return"function"==typeof t?new Pi(this):this.map((function(i){return ys(i,t,e)}))})),Pi.prototype.reject=function(t){return this.filter(kr(Jn(t)))},Pi.prototype.slice=function(t,e){t=io(t);var i=this;return i.__filtered__&&(t>0||e<0)?new Pi(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),void 0!==e&&(i=(e=io(e))<0?i.dropRight(-e):i.take(e-t)),i)},Pi.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pi.prototype.toArray=function(){return this.take(4294967295)},os(Pi.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),s=/^(?:head|last)$/.test(e),n=Ai[s?"take"+("last"==e?"Right":""):e],a=s||/^find/.test(e);n&&(Ai.prototype[e]=function(){var e=this.__wrapped__,r=s?[1]:arguments,o=e instanceof Pi,_=r[0],h=o||Mr(e),c=function(t){var e=n.apply(Ai,ue([t],r));return s&&l?e[0]:e};h&&i&&"function"==typeof _&&1!=_.length&&(o=h=!1);var l=this.__chain__,d=!!this.__actions__.length,p=a&&!l,u=o&&!d;if(!a&&h){e=u?e:new Pi(this);var g=t.apply(e,r);return g.__actions__.push({func:er,args:[c],thisArg:void 0}),new Oi(g,l)}return p&&u?t.apply(this,r):(g=this.thru(c),p?s?g.value()[0]:g.value():g)})})),oe(["pop","push","shift","sort","splice","unshift"],(function(t){var e=ft[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",s=/^(?:pop|shift)$/.test(t);Ai.prototype[t]=function(){var t=arguments;if(s&&!this.__chain__){var n=this.value();return e.apply(Mr(n)?n:[],t)}return this[i]((function(i){return e.apply(Mr(i)?i:[],t)}))}})),os(Pi.prototype,(function(t,e){var i=Ai[e];if(i){var s=i.name+"";Et.call(bi,s)||(bi[s]=[]),bi[s].push({name:e,func:i})}})),bi[Sn(void 0,2).name]=[{name:"wrapper",func:void 0}],Pi.prototype.clone=function(){var t=new Pi(this.__wrapped__);return t.__actions__=yn(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=yn(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=yn(this.__views__),t},Pi.prototype.reverse=function(){if(this.__filtered__){var t=new Pi(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pi.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=Mr(t),s=e<0,n=i?t.length:0,a=function(t,e,i){var s=-1,n=i.length;for(;++s<n;){var a=i[s],r=a.size;switch(a.type){case"drop":t+=r;break;case"dropRight":e-=r;break;case"take":e=ri(e,t+r);break;case"takeRight":t=ai(t,e-r)}}return{start:t,end:e}}(0,n,this.__views__),r=a.start,o=a.end,_=o-r,h=s?o:r-1,c=this.__iteratees__,l=c.length,d=0,p=ri(_,this.__takeCount__);if(!i||!s&&n==_&&p==_)return en(t,this.__actions__);var u=[];t:for(;_--&&d<p;){for(var g=-1,m=t[h+=e];++g<l;){var y=c[g],b=y.iteratee,f=y.type,w=b(m);if(2==f)m=w;else if(!w){if(1==f)continue t;break t}}u[d++]=m}return u},Ai.prototype.at=ir,Ai.prototype.chain=function(){return tr(this)},Ai.prototype.commit=function(){return new Oi(this.value(),this.__chain__)},Ai.prototype.next=function(){void 0===this.__values__&&(this.__values__=to(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Ai.prototype.plant=function(t){for(var e,i=this;i instanceof Ii;){var s=Aa(i);s.__index__=0,s.__values__=void 0,e?n.__wrapped__=s:e=s;var n=s;i=i.__wrapped__}return n.__wrapped__=t,e},Ai.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pi){var e=t;return this.__actions__.length&&(e=new Pi(this)),(e=e.reverse()).__actions__.push({func:er,args:[Ga],thisArg:void 0}),new Oi(e,this.__chain__)}return this.thru(Ga)},Ai.prototype.toJSON=Ai.prototype.valueOf=Ai.prototype.value=function(){return en(this.__wrapped__,this.__actions__)},Ai.prototype.first=Ai.prototype.head,Vt&&(Ai.prototype[Vt]=function(){return this}),Ai}();Yt._=$e,void 0===(n=function(){return $e}.call(e,i,e,s))||(s.exports=n)}).call(this)}).call(this,i(33),i(34)(t))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEvent=e.event_types=void 0;const s=i(0),n=i(3);e.event_types={CLIMB:"climb",SPEED:"speed",TELEPORT:"teleport",JUMP:"jump",STEP:"step",COLLISION:"collision",SLIDER:"slider"};class a{constructor(t,e,i,n,r,o,_,h,c,l){this.game=t,this.data=e,this.type=i,this.x=n,this.y=r,this.location_key=a.get_location_key(this.x,this.y),this.id=a.id_incrementer++,this.activation_collision_layers=Array.isArray(_)?_:[_],void 0===o&&(o=s.get_directions(!0)),this.activation_directions=Array.isArray(o)?o:[o],this.dynamic=h,this.active=Array.isArray(c)?c:new Array(this.activation_directions.length).fill(c),this.origin_interactable_object=void 0===l?null:l,a.events[this.id]=this}is_active(t){const e=s.split_direction(t);for(let t=0;t<e.length;++t)if(this.active[this.activation_directions.indexOf(e[t])])return!0;return!1}activate_at(t){this.active[this.activation_directions.indexOf(t)]=!0}deactivate_at(t){this.active[this.activation_directions.indexOf(t)]=!1}activate(){this.active=this.active.map(()=>!0)}deactivate(){this.active=this.active.map(()=>!1)}check_position(){return this.data.hero.tile_x_pos===this.x&&this.data.hero.tile_y_pos===this.y}static get_location_key(t,e){return t.toString()+"_"+e.toString()}static get_event_by_id(t,e){return n.find(t,{id:e})}static get_event(t){return a.events[t]}static reset(){a.id_incrementer=0,a.events={}}}e.TileEvent=a,a.reset()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Djinn=e.djinn_font_colors=e.djinn_status=void 0;const s=i(1),n=i(0),a=i(3);e.djinn_status={SET:"set",STANDBY:"standby",RECOVERY:"recovery"},e.djinn_font_colors={[e.djinn_status.RECOVERY]:s.YELLOW_FONT_COLOR,[e.djinn_status.STANDBY]:s.RED_FONT_COLOR,[e.djinn_status.SET]:s.DEFAULT_FONT_COLOR};e.Djinn=class{constructor(t,i,s,n,a,r,o,_,h,c,l,d){this.key_name=t,this.name=i,this.description=s,this.element=n,this.ability_key_name=a,this.hp_boost=r,this.pp_boost=o,this.atk_boost=_,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.status=e.djinn_status.SET,this.index=d,this.recovery_turn=0}set_status(t,e){this.status=t,e.update_elemental_attributes(),e.update_class(),e.update_attributes(),e.update_abilities()}static has_standby_djinn(t,i){return a.some(i.map(t=>t.djinni).map(i=>i.filter(i=>t[i].status===e.djinn_status.STANDBY).length))}static get_standby_djinni(t,i){let s=a.mapValues(a.groupBy(i.map(t=>t.djinni).flat(),e=>t[e].element),i=>i.filter(i=>t[i].status===e.djinn_status.STANDBY).length);for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];e in s||(s[e]=0)}return s}static set_to_recovery(t,i,s){let n=Object.assign({},s),r=!1;for(let s=0;s<i.length;++s){const o=i[s],_=o.djinni;let h=1;for(let i=0;i<_.length;++i){const s=t[_[i]];if(s.status===e.djinn_status.STANDBY&&(n[s.element]>0&&(s.recovery_turn=h,++h,s.set_status(e.djinn_status.RECOVERY,o),--n[s.element],!a.some(n,Boolean)))){r=!0;break}}if(r)break}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CursorControl=void 0;const s=Phaser.Timer.QUARTER>>1,n=Phaser.Timer.QUARTER>>1;e.CursorControl=class{constructor(t,e,i,s,n,a,r,o,_,h,c,l,d,p,u,g){this.game=t,this.is_right_left=e,this.is_up_down=i,this.max_right_left_getter=s,this.max_up_down_getter=n,this.base_group=a,this.on_right_left_change=void 0===r?()=>{}:r,this.on_up_down_change=void 0===o?()=>{}:o,this.right_left_index_getter=_,this.right_left_index_setter=h,this.up_down_index_getter=c,this.up_down_index_setter=l,this.open_checker=d,this.active_checker=p,this.cursor_base_x_getter=u,this.cursor_base_y_getter=g,this.right_pressed=!1,this.left_pressed=!1,this.up_pressed=!1,this.down_pressed=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.init_cursor(),this.init_cursor_tween(),this.signal_bindings=this.set_control()}set_control(){return[this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.right_pressed&&this.is_right_left&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_right_left&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1,!0))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.left_pressed&&this.is_right_left&&(this.left_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.down_pressed&&(this.down_pressed=!1,this.stop_timers()),this.up_pressed=!0,this.set_change_timers(-1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.up_pressed&&this.is_up_down&&(this.up_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.open_checker()&&this.active_checker()&&this.is_up_down&&(this.up_pressed&&(this.up_pressed=!1,this.stop_timers()),this.down_pressed=!0,this.set_change_timers(1,!1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onUp.add(()=>{this.open_checker()&&this.active_checker()&&this.down_pressed&&this.is_up_down&&(this.down_pressed=!1,this.stop_timers())})]}set_change_timers(t,e){this.change_index(t,e),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(s,this.change_index.bind(this,t,e)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_index(t,e){const i=e?this.right_left_index_getter:this.up_down_index_getter,s=e?this.right_left_index_setter:this.up_down_index_setter,n=e?this.on_right_left_change:this.on_up_down_change,a=e?this.max_right_left_getter:this.max_up_down_getter,r=i();s((i()+t)%a()),i()<0&&s(a()-1),this.set_cursor_position(),n(r,i())}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}init_cursor(){this.cursor_group=this.game.add.group(),this.cursor=this.cursor_group.create(0,0,"cursor"),this.cursor_group.alpha=0,this.base_group.add(this.cursor_group),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter(),this.cursor_tween=this.game.tweens.create(this.cursor)}init_cursor_tween(){this.cursor_tween.to({x:this.cursor.x-4,y:this.cursor.y+4},n,Phaser.Easing.Linear.None,!1,0,-1,!0)}set_cursor_position(){this.cursor_tween.isRunning&&this.cursor_tween.isPaused?this.cursor_tween.resume():this.cursor_tween.isRunning||(this.cursor_tween.start(),this.cursor_tween.isPaused&&this.cursor_tween.resume()),this.cursor_group.x=this.cursor_base_x_getter(),this.cursor_group.y=this.cursor_base_y_getter()}activate(){this.up_pressed=!1,this.down_pressed=!1,this.cursor_group.alpha=1,this.set_cursor_position()}deactivate(){this.stop_timers(),this.cursor_group.alpha=0,this.cursor_tween.pause()}destroy(){this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()}),this.cursor_tween.stop(),this.cursor_group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Player=e.on_remove_status_msg=e.on_catch_status_msg=e.permanent_status=e.temporary_status=e.fighter_types=void 0;const s=i(8),n=i(0);e.fighter_types={ALLY:1,ENEMY:2},e.temporary_status={DELUSION:"delusion",STUN:"stun",SLEEP:"sleep",SEAL:"seal",DEATH_CURSE:"death_curse"},e.permanent_status={DOWNED:"downed",POISON:"poison",VENOM:"venom",EQUIP_CURSE:"equip_curse",HAUNT:"haunt"},e.on_catch_status_msg={[e.temporary_status.DELUSION]:t=>t.name+" is wrapped in delusion!",[e.temporary_status.STUN]:t=>t.name+" has been stunned!",[e.temporary_status.SLEEP]:t=>t.name+" falls asleep!",[e.temporary_status.SEAL]:t=>t.name+"'s Psynergy has been sealed!",[e.temporary_status.DEATH_CURSE]:t=>`The Spirit of Death embraces ${t.name}!`,[e.permanent_status.DOWNED]:t=>t.fighter_type===e.fighter_types.ALLY?t.name+" was downed...":`You felled ${t.name}!`,[e.permanent_status.POISON]:t=>t.name+" is infected with poison!",[e.permanent_status.VENOM]:t=>t.name+" is infected with deadly poison!",[e.permanent_status.HAUNT]:t=>`An evil spirit grips ${t.name}!`},e.on_remove_status_msg={[e.temporary_status.DELUSION]:t=>t.name+" sees clearly once again!",[e.temporary_status.STUN]:t=>t.name+" is no longer stunned!",[e.temporary_status.SLEEP]:t=>t.name+" wakes from slumber!",[e.temporary_status.SEAL]:t=>t.name+"'s Psynergy seal is gone!",[e.permanent_status.DOWNED]:t=>t.name+"'s has been revived!",[e.permanent_status.POISON]:t=>`The poison is purged from ${t.name}!`,[e.permanent_status.VENOM]:t=>`The venom is purged from ${t.name}!`};e.Player=class{constructor(t,e){this.key_name=t,this.name=e,this.temporary_status=new Set,this.permanent_status=new Set,this.effects=[],this.init_effect_turns_count()}init_effect_turns_count(){this.effect_turns_count={[e.temporary_status.DELUSION]:0,[e.temporary_status.STUN]:0,[e.temporary_status.SLEEP]:0,[e.temporary_status.SEAL]:0,[e.temporary_status.DEATH_CURSE]:0,[s.effect_types.MAX_HP]:0,[s.effect_types.MAX_PP]:0,[s.effect_types.ATTACK]:0,[s.effect_types.DEFENSE]:0,[s.effect_types.AGILITY]:0,[s.effect_types.LUCK]:0,[s.effect_types.POWER]:{},[s.effect_types.RESIST]:{}};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.effect_turns_count[s.effect_types.POWER][e]=0,this.effect_turns_count[s.effect_types.RESIST][e]=0}}get_effect_turns_key(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return t.status_key_name;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return t.type;case s.effect_types.POWER:case s.effect_types.RESIST:return t.type+"_"+t.attribute}return null}get_effect_turns_count(t){switch(t.type){case s.effect_types.TEMPORARY_STATUS:return this.effect_turns_count[t.status_key_name];case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type];case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]}return null}set_effect_turns_count(t,e=-1,i=!0){switch(t.type){case s.effect_types.TEMPORARY_STATUS:this.effect_turns_count[t.status_key_name]=i?this.effect_turns_count[t.status_key_name]+e:e;case s.effect_types.MAX_HP:case s.effect_types.MAX_PP:case s.effect_types.ATTACK:case s.effect_types.DEFENSE:case s.effect_types.AGILITY:case s.effect_types.LUCK:return this.effect_turns_count[t.type]=i?this.effect_turns_count[t.type]+e:e;case s.effect_types.POWER:case s.effect_types.RESIST:return this.effect_turns_count[t.type][t.attribute]=i?this.effect_turns_count[t.type][t.attribute]+e:e}}add_effect(t,e,i=!1){let n,a=new s.Effect(t.type,t.quantity,t.operator,e,t.quantity_is_absolute,t.rate,t.chance,t.attribute,t.add_status,t.status_key_name,t.turns_quantity,t.variation_on_final_result,t.damage_formula_key_name,t.usage,t.on_caster,t.relative_to_property,t.sub_effect,t.effect_msg,t.show_msg,this);return this.effects.push(a),i&&(n=a.apply_effect()),{effect:a,changes:n}}remove_effect(t,e=!1){this.effects=this.effects.filter(e=>e!==t),e&&t.apply_effect()}add_permanent_status(t){this.permanent_status.add(t)}remove_permanent_status(t){this.permanent_status.delete(t)}has_permanent_status(t){return this.permanent_status.has(t)}add_temporary_status(t){this.temporary_status.add(t)}remove_temporary_status(t){this.temporary_status.delete(t)}has_temporary_status(t){return this.temporary_status.has(t)}is_paralyzed(){return this.temporary_status.has(e.temporary_status.SLEEP)||this.temporary_status.has(e.temporary_status.STUN)}is_poisoned(){return this.permanent_status.has(e.permanent_status.POISON)?e.permanent_status.POISON:!!this.permanent_status.has(e.permanent_status.VENOM)&&e.permanent_status.VENOM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Effect=e.effect_msg=e.effect_usages=e.effect_operators=e.effect_names=e.effect_type_stat=e.effect_types=void 0;const s=i(0);e.effect_types={MAX_HP:"max_hp",MAX_PP:"max_pp",ATTACK:"attack",DEFENSE:"defense",AGILITY:"agility",LUCK:"luck",POWER:"power",RESIST:"resist",CURRENT_HP:"current_hp",CURRENT_PP:"current_pp",HP_RECOVERY:"hp_recovery",PP_RECOVERY:"pp_recovery",CRITICALS:"criticals",COUNTER_STRIKE:"counter_strike",TEMPORARY_STATUS:"temporary_status",PERMANENT_STATUS:"permanent_status",TURNS:"turns",ENCOUNTERS:"encounters",FLEE:"flee",END_THE_ROUND:"end_the_round",ABILITY_POWER:"ability_power",SET_DJINN:"set_djinn",DAMAGE_MODIFIER:"damage_modifier",DAMAGE_INPUT:"damage_input"},e.effect_type_stat={[e.effect_types.MAX_HP]:"max_hp",[e.effect_types.MAX_PP]:"max_pp",[e.effect_types.ATTACK]:"atk",[e.effect_types.DEFENSE]:"def",[e.effect_types.AGILITY]:"agi",[e.effect_types.LUCK]:"luk",[e.effect_types.CURRENT_HP]:"current_hp",[e.effect_types.CURRENT_PP]:"current_pp"},e.effect_names={[e.effect_types.MAX_HP]:"HP",[e.effect_types.MAX_PP]:"PP",[e.effect_types.ATTACK]:"Attack",[e.effect_types.DEFENSE]:"Defense",[e.effect_types.AGILITY]:"Agility",[e.effect_types.LUCK]:"Luck",[e.effect_types.POWER]:"Power",[e.effect_types.RESIST]:"Resist"},e.effect_operators={PLUS:"plus",MINUS:"minus",TIMES:"times",DIVIDE:"divide"},e.effect_usages={NOT_APPLY:"not_apply",ON_USE:"on_use",ON_TAKE:"on_take",BATTLE_ROUND_START:"battle_round_start",BATTLE_ROUND_END:"battle_round_end",PLAYER_TURN_START:"player_turn_start",PLAYER_TURN_END:"player_turn_end"},e.effect_msg={aura:t=>`A protective aura encircles ${t.name}!`,double:()=>"And it got doubled!"};class n{constructor(t,i,n,a,r,o,_,h,c,l,d,p,u,g,m,y,b,f,w,v){this.type=t,this.quantity=i,this.operator=n,this.effect_owner_instance=a,this.quantity_is_absolute=void 0!==r&&r,this.rate=void 0===o?1:o,this.chance=void 0===_?1:_,this.attribute=void 0===h?s.elements.NO_ELEMENT:h,this.add_status=c,this.status_key_name=l,this.turns_quantity=d,this.turn_count=d,this.variation_on_final_result=void 0!==p&&p,this.damage_formula_key_name=u,this.usage=void 0===g?e.effect_usages.NOT_APPLY:g,this.on_caster=void 0!==m&&m,this.relative_to_property=y,this.effect_msg=f,this.show_msg=void 0===w||w,this.char=v,this.sub_effect=b,void 0!==this.sub_effect&&this.init_sub_effect()}static apply_operator(t,i,s){switch(s){case e.effect_operators.PLUS:return t+i;case e.effect_operators.MINUS:return t-i;case e.effect_operators.TIMES:return t*i;case e.effect_operators.DIVIDE:return t/i}}init_sub_effect(){this.sub_effect.quantity_is_absolute=void 0!==this.sub_effect.quantity_is_absolute&&this.sub_effect.quantity_is_absolute,this.sub_effect.rate=void 0===this.sub_effect.rate?1:this.sub_effect.rate,this.sub_effect.chance=void 0===this.sub_effect.chance?1:this.sub_effect.chance,this.sub_effect.attribute=void 0===this.sub_effect.attribute?s.elements.NO_ELEMENT:this.sub_effect.attribute,this.sub_effect.variation_on_final_result=void 0!==this.sub_effect.variation_on_final_result&&this.sub_effect.variation_on_final_result,this.sub_effect.usage=void 0===this.sub_effect.usage?e.effect_usages.NOT_APPLY:this.sub_effect.usage,this.sub_effect.on_caster=void 0!==this.sub_effect.on_caster&&this.sub_effect.on_caster}apply_general_value(t,e){const i=void 0!==t?this.char[t]:e;if(Math.random()>=this.chance)return{before:i,after:i};let a;if(this.quantity_is_absolute)void 0!==t&&(this.char[t]=this.quantity),a=this.quantity;else{let i,r=this.quantity;r*=this.rate,this.variation_on_final_result&&(r+=s.variation()),i=void 0!==t?this.char[void 0!==this.relative_to_property?this.relative_to_property:t]:e;const o=0|n.apply_operator(i,r,this.operator);void 0!==t&&(this.char[t]=o),a=o}return{before:i,after:a}}apply_subeffect(t,e){return Math.random()<this.sub_effect.chance&&(this.sub_effect.quantity_is_absolute?this.char[t]=e:(e*=this.sub_effect.rate,this.sub_effect.variation_on_final_result&&(e+=s.variation()),this.char[t]=0|n.apply_operator(this.char[t],e,this.sub_effect.operator))),this.char[t]}static preview_value_applied(t,e){if(t.quantity_is_absolute)return t.quantity;{let i=t.quantity;return t.rate||(t.rate=1),i*=t.rate,i|=0,n.apply_operator(e,i,t.operator)}}check_caps(t,e,i,s){this.char[t]>this.char[e]?(s&&(s.after=this.char[e]),this.char[t]=this.char[e]):this.char[t]<i&&(s&&(s.after=i),this.char[t]=i)}apply_effect(t){switch(this.type){case e.effect_types.MAX_HP:case e.effect_types.MAX_PP:case e.effect_types.ATTACK:case e.effect_types.DEFENSE:case e.effect_types.AGILITY:case e.effect_types.LUCK:return this.apply_general_value(e.effect_type_stat[this.type]);case e.effect_types.HP_RECOVERY:return this.apply_general_value("hp_recovery");case e.effect_types.PP_RECOVERY:return this.apply_general_value("pp_recovery");case e.effect_types.CURRENT_HP:const i=this.apply_general_value("current_hp");return this.check_caps("current_hp","max_hp",0,i),i;case e.effect_types.CURRENT_PP:const s=this.apply_general_value("current_pp");return this.check_caps("current_pp","max_pp",0,s),s;case e.effect_types.POWER:return this.apply_general_value(this.attribute+"_power_current");case e.effect_types.RESIST:return this.apply_general_value(this.attribute+"_resist_current");case e.effect_types.TURNS:return this.turn_count=1,this.apply_general_value("turns");case e.effect_types.PERMANENT_STATUS:return void(this.add_status?this.char.add_permanent_status(this.status_key_name):this.char.remove_permanent_status(this.status_key_name));case e.effect_types.TEMPORARY_STATUS:return void(this.add_status?this.char.add_temporary_status(this.status_key_name):this.char.remove_temporary_status(this.status_key_name));case e.effect_types.DAMAGE_MODIFIER:return this.apply_general_value(void 0,t);case e.effect_types.DAMAGE_INPUT:let n=this.apply_general_value(void 0,t);const a=e.effect_type_stat[this.sub_effect.type];switch(n.before=this.char[a],n.after=this.apply_subeffect(a,n.after),this.sub_effect.type){case e.effect_types.CURRENT_HP:this.check_caps("current_hp","max_hp",0,n);break;case e.effect_types.CURRENT_PP:this.check_caps("current_pp","max_pp",0,n)}return n}}}e.Effect=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Item=e.use_types=e.item_types=void 0,e.item_types={WEAPONS:"weapons",ARMOR:"armor",CHEST_PROTECTOR:"chest_protector",HEAD_PROTECTOR:"head_protector",LEG_PROTECTOR:"leg_protector",ABILITY_GRANTOR:"ability_grantor",LUCKY_CHARM:"lucky_charm",RING:"ring",UNDERWEAR:"underwear",GENERAL_ITEM:"general_item",SHIRT:"shirt"},e.use_types={MULTIPLE_USES:"multiple_uses",SINGLE_USE:"single_use",BREAKS_WHEN_USE:"breaks_when_use",NO_USE:"no_use"};e.Item=class{constructor(t,i,s,n,a,r,o,_,h,c,l,d,p,u,g,m,y,b){this.key_name=t,this.name=i,this.type=s,this.description=n,this.use_type=a,this.curses_when_equipped=r,this.cant_be_removed=o,this.rare_item=_,this.important_item=h,this.carry_up_to_30=c,this.effects=l,this.attribute=d,this.unleash_ability=p,this.unleash_rate=u,this.use_ability=g,this.equipable_chars=m,this.price=y,this.granted_ability=b,this.broken=!1,this.equipable=this.type!==e.item_types.GENERAL_ITEM}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpriteBase=void 0;e.SpriteBase=class{constructor(t,e){this.key_name=t,this.actions={},this.animations={},this.dash_speed=0,this.walk_speed=0,this.climb_speed=0,this.push_speed=0;for(let t=0;t<e.length;++t)this.actions[e[t]]={}}setActionDirections(t,e,i){this.actions[t].directions=new Array(e.length),this.actions[t].frame_counts=new Array(e.length);const s=Array.isArray(i);for(let n=0;n<e.length;++n){const a=s?i[n]:i;this.actions[t].directions[n]=e[n],this.actions[t].frame_counts[n]=a}}setActionFrameRate(t,e){this.actions[t].frame_rate={};for(let i=0;i<this.actions[t].directions.length;++i){const s=this.actions[t].directions[i];let n;n=Array.isArray(e)?1===e.length?e[0]:e[i]:e,this.actions[t].frame_rate[s]=n}}setActionLoop(t,e){this.actions[t].loop=e}setActionSpritesheet(t,e,i){this.actions[t].spritesheet={spritesheet_image_url:e,spritesheet_json_url:i}}loadSpritesheets(t,e,i){for(let s in this.actions){const n=this.actions[s].spritesheet,a=this.getActionKey(s);let r=t.load.atlasJSONHash(a,n.spritesheet_image_url,n.spritesheet_json_url);e&&(r.onLoadComplete.addOnce(i,this),t.load.start())}}generateFrameNames(t,e,i,s,n,a){t in this.animations||(this.animations[t]={}),this.animations[t][e]=Phaser.Animation.generateFrameNames(`${t}/${e}/`,i,s,n,a)}setAnimation(t,e){const i=this.actions[e].directions,s=void 0===this.actions[e].loop||this.actions[e].loop;for(let n=0;n<i.length;++n){const a=i[n],r=this.actions[e].frame_rate[a],o=this.getAnimationKey(e,a);t.animations.add(o,this.animations[e][a],r,Array.isArray(s)?s[n]:s,!1)}}generateAllFrames(){for(let t in this.actions){const e=this.actions[t].directions,i=this.actions[t].frame_counts;for(let s=0;s<e.length;++s){const n=e[s];this.generateFrameNames(t,n,0,i[s]-1,"",2)}}}getFrameName(t,e,i){return`${t}/${e}/${i.toLocaleString("en-US",{minimumIntegerDigits:2,useGrouping:!1})}`}getActionKey(t){return this.key_name+"_"+t}getAnimationKey(t,e){return t+"_"+e}getSpriteAction(t){return t.key.split("_")[1]}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JumpEvent=void 0;const s=i(4),n=i(1),a=i(0);class r extends s.TileEvent{constructor(t,e,i,n,a,r,o,_,h){super(t,e,s.event_types.JUMP,i,n,a,r,o,_,null),this.is_set=h}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;let t,e,i=30,n={x:this.x,y:this.y},o={x:this.x,y:this.y};if(this.data.hero.current_direction===a.directions.left?(i=-i,t="x",n.x-=2,o.x-=1,e=a.directions.left):this.data.hero.current_direction===a.directions.right?(t="x",n.x+=2,o.x+=1,e=a.directions.right):this.data.hero.current_direction===a.directions.up?(i=-i,t="y",n.y-=2,o.y-=1,e=a.directions.up):this.data.hero.current_direction===a.directions.down&&(t="y",n.y+=2,o.y+=1,e=a.directions.down),void 0===e)return;let _=s.TileEvent.get_location_key(o.x,o.y);if(_ in this.data.map.events)for(let t=0;t<this.data.map.events[_].length;++t){const e=this.data.map.events[_][t];let i=!1;for(let t=0;t<this.data.map.interactable_objects.length;++t){const s=this.data.map.interactable_objects[t];if(this.data.map.collision_layer===s.base_collision_layer&&(e.x===s.current_x&&e.y===s.current_y)){i=!0;break}}if(!i&&(e.type===s.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(this.data.map.collision_layer)))return}let h=s.TileEvent.get_location_key(n.x,n.y);for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===n.x&&e.current_y===n.y&&this.data.map.collision_layer===e.base_collision_layer)return}if(h in this.data.map.events){let t=!1;for(let i=0;i<this.data.map.events[h].length;++i){const n=this.data.map.events[h][i];if(n.type===s.event_types.JUMP&&n.is_active(a.get_opposite_direction(e))&&n.is_set&&n.activation_collision_layers.includes(this.data.map.collision_layer)){if(t=!0,n.dynamic){r.set_jump_collision(this.game,this.data);break}this.dynamic&&r.unset_set_jump_collision(this.data)}}if(!t)return}else if(this.dynamic)return;this.data.hero.jumping=!0,this.data.tile_event_manager.on_event=!0;let c={};c[t]=this.data.hero.sprite[t]+i;const l=this.data.map.sprite.tileWidth*(n.x+.5),d=this.data.map.sprite.tileHeight*(n.y+.5);"x"===t?c.y=[d-5,d-8,d-5,d]:c.x=l,this.game.physics.p2.pause(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1,this.data.hero.shadow.x=l,this.data.hero.shadow.y=d,this.game.add.tween(this.data.hero.sprite.body).to(c,150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.shadow.visible=!0,this.data.hero.sprite.animations.currentAnim.reverseOnce(),this.data.hero.play(a.base_actions.JUMP,a.reverse_directions[e]),this.data.hero.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.hero.jumping=!1,this.data.tile_event_manager.on_event=!1})},this)})}jump_near_collision(){const t=s.TileEvent.get_location_key(this.data.hero.tile_x_pos,this.data.hero.tile_y_pos);let e={x:this.data.hero.tile_x_pos,y:this.data.hero.tile_y_pos},i=a.get_surroundings(e.x,e.y,!0),r=!1,o=a.split_direction(this.data.hero.current_direction);for(let t=0;t<o.length;++t)r=r||this.activation_directions.includes(o[t]);let _=()=>{this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].destroy();this.data.collision.dynamic_jump_events_bodies=[]},h=t,c=[],l=!1;for(let t=0;t<i.length;++t){const e=s.TileEvent.get_location_key(i[t].x,i[t].y);if(e in this.data.map.events)for(let n=0;n<this.data.map.events[e].length;++n){const o=this.data.map.events[e][n];if(o.type===s.event_types.JUMP&&r&&o.is_set&&o.activation_collision_layers.includes(this.data.map.collision_layer)){!o.dynamic&&!this.dynamic||i[t].diag||(l=!0);const s=a.get_surroundings(i[t].x,i[t].y,!1);c.push(s),h+="-"+e}}}if(!this.data.tile_event_manager.walking_on_pillars_tiles.has(h)&&l){this.data.tile_event_manager.walking_on_pillars_tiles.clear(),_(),this.data.tile_event_manager.walking_on_pillars_tiles.add(h);let t=new Set(i.concat(...c).map(t=>t.x+"_"+t.y));h.split("-").forEach(e=>{t.delete(e)}),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0),t.forEach(t=>{const e=t.split("_"),i=(parseInt(e[0])+.5)*this.data.map.sprite.tileWidth,s=(parseInt(e[1])+.5)*this.data.map.sprite.tileHeight;let a=this.game.physics.p2.createBody(i,s,0,!0);a.clearShapes(),a.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),a.setCollisionGroup(this.data.collision.dynamic_events_collision_group),a.damping=n.MAP_DAMPING,a.angularDamping=n.MAP_DAMPING,a.setZeroRotation(),a.fixedRotation=!0,a.dynamic=!1,a.static=!0,a.debug=this.data.hero.sprite.body.debug,a.collides(this.data.collision.hero_collision_group),this.data.collision.dynamic_jump_events_bodies.push(a)})}this.dynamic||r||!this.data.tile_event_manager.walking_on_pillars_tiles.size||(this.data.tile_event_manager.walking_on_pillars_tiles.clear(),_())}static set_jump_collision(t,e){for(let t=0;t<e.collision.dynamic_jump_events_bodies.length;++t)e.collision.dynamic_jump_events_bodies[t].destroy();e.collision.dynamic_jump_events_bodies=[],e.tile_event_manager.walking_on_pillars_tiles.clear(),e.hero.sprite.body.removeCollisionGroup(e.collision.map_collision_group,!0),e.map.collision_sprite.body.removeCollisionGroup(e.collision.hero_collision_group,!0);for(let i in e.map.events)for(let a=0;a<e.map.events[i].length;++a){const r=e.map.events[i][a];if(r.type===s.event_types.JUMP&&r.dynamic&&r.is_set&&r.activation_collision_layers.includes(e.map.collision_layer)){let i=[{x:r.x-1,y:r.y},{x:r.x+1,y:r.y},{x:r.x,y:r.y-1},{x:r.x,y:r.y+1}];for(let a=0;a<i.length;++a){const r=s.TileEvent.get_location_key(i[a].x,i[a].y);if(r in e.map.events){let t=!1;for(let i=0;i<e.map.events[r].length;++i){const n=e.map.events[r][i];if(n.dynamic&&n.type===s.event_types.JUMP&&n.is_set&&n.activation_collision_layers.includes(e.map.collision_layer)){t=!0;break}}if(t)continue}let o=(i[a].x+.5)*e.map.sprite.tileWidth,_=(i[a].y+.5)*e.map.sprite.tileHeight,h=t.physics.p2.createBody(o,_,0,!0);h.clearShapes(),h.setRectangle(e.map.sprite.tileWidth,e.map.sprite.tileHeight,0,0),h.setCollisionGroup(e.collision.dynamic_events_collision_group),h.damping=n.MAP_DAMPING,h.angularDamping=n.MAP_DAMPING,h.setZeroRotation(),h.fixedRotation=!0,h.dynamic=!1,h.static=!0,h.debug=e.hero.sprite.body.debug,h.collides(e.collision.hero_collision_group),e.collision.dynamic_jump_events_bodies.push(h)}}}}static unset_set_jump_collision(t){t.hero.sprite.body.collides(t.collision.map_collision_group),t.map.collision_sprite.body.collides(t.collision.hero_collision_group);for(let e=0;e<t.collision.dynamic_jump_events_bodies.length;++e)t.collision.dynamic_jump_events_bodies[e].destroy();t.collision.dynamic_jump_events_bodies=[]}static active_jump_surroundings(t,e,i){for(let n=0;n<e.length;++n){const r=e[n],o=s.TileEvent.get_location_key(r.x,r.y);if(o in t.map.events)for(let e=0;e<t.map.events[o].length;++e){const n=t.map.events[o][e];n.type===s.event_types.JUMP&&n.activation_collision_layers.includes(i)&&!1===n.dynamic&&n.is_set&&n.activate_at(a.get_opposite_direction(r.direction))}}}}e.JumpEvent=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainChar=e.MainCharBase=void 0;const s=i(10),n=i(23),a=i(5),r=i(8),o=i(9),_=i(7),h=i(0),c=i(1),l=i(3);class d extends s.SpriteBase{constructor(t,e,i,s,n,a){super(t,e),this.walk_speed=i,this.dash_speed=s,this.climb_speed=n,this.push_speed=a}}e.MainCharBase=d;class p extends _.Player{constructor(t,e,i,s,n,a,r,o,c,d,p,u,g,m,y,b,f,w,v,x,k,E,j,T,A,S,I,O,P,M,N){super(t,s),this.info=e,this.sprite_base=i,this.starting_level=u,this.level=this.starting_level,this.class_table=g,this.battle_scale=m,this.exp_curve=p,this.current_exp=this.exp_curve[this.level-1],this.venus_level_base=y,this.mercury_level_base=b,this.mars_level_base=f,this.jupiter_level_base=w,this.venus_power_base=v,this.mercury_power_base=x,this.mars_power_base=k,this.jupiter_power_base=E,this.venus_resist_base=j,this.mercury_resist_base=T,this.mars_resist_base=A,this.jupiter_resist_base=S,this.element_afinity=l.maxBy([{element:h.elements.VENUS,level:this.venus_level_base},{element:h.elements.MERCURY,level:this.mercury_level_base},{element:h.elements.MARS,level:this.mars_level_base},{element:h.elements.JUPITER,level:this.jupiter_level_base}],t=>t.level).element,this.venus_djinni=[],this.mercury_djinni=[],this.mars_djinni=[],this.jupiter_djinni=[],this.init_djinni(P),this.update_class(),this.hp_curve=n,this.pp_curve=a,this.atk_curve=r,this.def_curve=o,this.agi_curve=c,this.luk_curve=d,this.hp_extra=0,this.pp_extra=0,this.atk_extra=0,this.def_extra=0,this.agi_extra=0,this.luk_extra=0,this.hp_recovery=0,this.pp_recovery=0,this.items=M,this.equip_slots={weapon:null,head:null,chest:null,body:null,ring:null,boots:null,underwear:null},this.equipped_abilities=[],this.innate_abilities=I,this.init_items(),this.update_attributes(),this.update_elemental_attributes(),this.in_party=O,this.abilities=[],this.update_abilities(),this.turns=1,this.fighter_type=_.fighter_types.ALLY,this.battle_animations_variations=Object.assign({},N)}get djinni(){return this.venus_djinni.concat(this.mercury_djinni,this.mars_djinni,this.jupiter_djinni).sort((t,e)=>this.info.djinni_list[t].index-this.info.djinni_list[e].index)}update_class(){this.class=n.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,this.venus_level_current,this.mercury_level_current,this.mars_level_current,this.jupiter_level_current)}add_exp(t){let e={before:{level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},after:null};return this.current_exp+=t,this.level=l.findIndex(this.exp_curve,t=>t>this.current_exp),this.update_all(),e.after={level:this.level,abilities:this.abilities.slice(),stats:[{max_hp:this.max_hp},{max_pp:this.max_pp},{atk:this.atk},{def:this.def},{agi:this.agi},{luk:this.luk}]},e}init_items(){this.items.forEach((t,e)=>{t.index=e,t.equipped&&this.equip_item(e,!0)})}add_item(t,e,i){let s=!1;this.info.items_list[t].type===o.item_types.GENERAL_ITEM&&this.items.forEach(i=>{i.key_name===t&&(s=!0,i.quantity+=e)}),s||(this.items.push({key_name:t,quantity:e,equipped:!1,index:this.items.length}),i&&this.equip_item(this.items.length-1))}remove_item(t,e){let i=!1;this.items=this.items.filter((s,n)=>t.key_name===s.key_name?(s.equipped&&this.unequip_item(n),s.quantity-e>=1?(s.quantity=s.quantity-e,!0):(i=!0,!1)):(i&&--s.index,!0))}equip_item(t,e=!1){let i=this.items[t];if(i.equipped&&!e)return;const s=this.info.items_list[i.key_name];switch(s.type===o.item_types.WEAPONS&&null!==this.equip_slots.weapon?this.unequip_item(this.equip_slots.weapon.index):s.type===o.item_types.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.unequip_item(this.equip_slots.head.index):s.type===o.item_types.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.unequip_item(this.equip_slots.chest.index):s.type===o.item_types.ARMOR&&null!==this.equip_slots.body?this.unequip_item(this.equip_slots.body.index):s.type===o.item_types.RING&&null!==this.equip_slots.ring?this.unequip_item(this.equip_slots.ring.index):s.type===o.item_types.LEG_PROTECTOR&&null!==this.equip_slots.boots?this.unequip_item(this.equip_slots.boots.index):s.type===o.item_types.UNDERWEAR&&null!==this.equip_slots.underwear&&this.unequip_item(this.equip_slots.underwear.index),s.type){case o.item_types.WEAPONS:this.equip_slots.weapon=i;break;case o.item_types.HEAD_PROTECTOR:this.equip_slots.head=i;break;case o.item_types.CHEST_PROTECTOR:this.equip_slots.chest=i;break;case o.item_types.ARMOR:this.equip_slots.body=i;break;case o.item_types.RING:this.equip_slots.ring=i;break;case o.item_types.LEG_PROTECTOR:this.equip_slots.boots=i;break;case o.item_types.UNDERWEAR:this.equip_slots.underwear=i}i.equipped=!0;for(let t=0;t<s.effects.length;++t)this.add_effect(s.effects[t],s);this.update_attributes(),this.update_elemental_attributes(),s.type===o.item_types.ABILITY_GRANTOR&&(this.equipped_abilities.push(s.granted_ability),this.update_abilities())}unequip_item(t){let e=this.items[t];if(!e.equipped)return;const i=this.info.items_list[e.key_name];i.type===o.item_types.WEAPONS&&null!==this.equip_slots.weapon?this.equip_slots.weapon=null:i.type===o.item_types.HEAD_PROTECTOR&&null!==this.equip_slots.head?this.equip_slots.head=null:i.type===o.item_types.CHEST_PROTECTOR&&null!==this.equip_slots.chest?this.equip_slots.chest=null:i.type===o.item_types.ARMOR&&null!==this.equip_slots.body?this.equip_slots.body=null:i.type===o.item_types.RING&&null!==this.equip_slots.ring?this.equip_slots.ring=null:i.type===o.item_types.LEG_PROTECTOR&&null!==this.equip_slots.boots?this.equip_slots.boots=null:i.type===o.item_types.UNDERWEAR&&null!==this.equip_slots.underwear&&(this.equip_slots.underwear=null),e.equipped=!1,this.effects.forEach(t=>{t.effect_owner_instance===i&&this.remove_effect(t)}),this.update_attributes(),this.update_elemental_attributes(),i.type===o.item_types.ABILITY_GRANTOR&&(this.equipped_abilities=this.equipped_abilities.filter(t=>t!==i.granted_ability),this.update_abilities())}init_djinni(t){for(let e=0;e<t.length;++e){let i=this.info.djinni_list[t[e]];switch(i.element){case h.elements.VENUS:this.venus_djinni.push(i.key_name);break;case h.elements.MERCURY:this.mercury_djinni.push(i.key_name);break;case h.elements.MARS:this.mars_djinni.push(i.key_name);break;case h.elements.JUPITER:this.jupiter_djinni.push(i.key_name)}}this.update_elemental_attributes()}add_djinn(t){let e=this.info.djinni_list[t];switch(e.element){case h.elements.VENUS:this.venus_djinni.push(e.key_name);break;case h.elements.MERCURY:this.mercury_djinni.push(e.key_name);break;case h.elements.MARS:this.mars_djinni.push(e.key_name);break;case h.elements.JUPITER:this.jupiter_djinni.push(e.key_name)}this.update_all()}remove_djinn(t){let e;switch(this.info.djinni_list[t].element){case h.elements.VENUS:e=this.venus_djinni;break;case h.elements.MERCURY:e=this.mercury_djinni;break;case h.elements.MARS:e=this.mars_djinni;break;case h.elements.JUPITER:e=this.jupiter_djinni}const i=e.indexOf(t);-1!==i&&e.splice(i,1),this.update_all()}replace_djinn(t,e){this.remove_djinn(t),this.add_djinn(e)}preview_djinn_change(t,e,i,s){const r=this.class;let o=this.venus_level_current,_=this.mercury_level_current,c=this.mars_level_current,l=this.jupiter_level_current;for(let t=0;t<e.length;++t){const s=this.info.djinni_list[e[t]];let n;switch(i[t]){case a.djinn_status.SET:n=1;break;case a.djinn_status.RECOVERY:case"irrelevant":n=0;break;default:n=-1}switch(s.element){case h.elements.VENUS:o+=n;break;case h.elements.MERCURY:_+=n;break;case h.elements.MARS:c+=n;break;case h.elements.JUPITER:l+=n}}this.class=n.choose_right_class(this.info.classes_list,this.class_table,this.element_afinity,o,_,c,l);let d={class_name:this.class.name,class_key_name:this.class.key_name,abilities:null};return d.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities),i=i.map(t=>"irrelevant"===t?a.djinn_status.STANDBY:t),t.forEach(t=>{d[t]=this.preview_stats_by_djinn(t,e,i,s)}),this.class=r,d}preview_stats_by_djinn(t,e,i,s){const n={djinni_key_name:e,djinni_next_status:i,action:s};switch(t){case"max_hp":return this.set_max_stat("hp",!0,n);case"max_pp":return this.set_max_stat("pp",!0,n);case"atk":return this.set_max_stat("atk",!0,n);case"def":return this.set_max_stat("def",!0,n);case"agi":return this.set_max_stat("agi",!0,n);case"luk":return this.set_max_stat("luk",!0,n)}}preview_stats_by_effect(t,e,i){const s={effect_obj:e,item_key_name:i};switch(t){case r.effect_types.MAX_HP:return this.set_max_stat("hp",!0,s);case r.effect_types.MAX_PP:return this.set_max_stat("pp",!0,s);case r.effect_types.ATTACK:return this.set_max_stat("atk",!0,s);case r.effect_types.DEFENSE:return this.set_max_stat("def",!0,s);case r.effect_types.AGILITY:return this.set_max_stat("agi",!0,s);case r.effect_types.LUCK:return this.set_max_stat("luk",!0,s)}}set_max_stat(t,e=!1,i={}){const s=["hp","pp"].includes(t)?"max_"+t:t,n="current_"+t,o=t+"_boost",_=t+"_curve",h=t+"_extra",c=this[s];this[s]=this[_][this.level]*this.class[o]+this[h]|0;let l=this.djinni;if(e)if("Trade"===i.action){const t=l.indexOf(i.djinni_key_name[0]);t>=0?l[t]=i.djinni_key_name[1]:l[l.indexOf(i.djinni_key_name[1])]=i.djinni_key_name[0]}else"Give"===i.action&&l.push(i.djinni_key_name[0]);for(let t=0;t<l.length;++t){let n=l[t],r=this.info.djinni_list[n],_=r.status;e&&i.djinni_key_name&&i.djinni_key_name.includes(n)&&(_=i.djinni_next_status[i.djinni_key_name.indexOf(n)]),_===a.djinn_status.SET&&(this[s]+=r[o])}if(this.effects.forEach(s=>{if(e&&s.effect_owner_instance&&i.item_key_name===s.effect_owner_instance.key_name)return;let n;switch(t){case"hp":n=r.effect_types.MAX_HP;break;case"pp":n=r.effect_types.MAX_PP;break;case"atk":n=r.effect_types.ATTACK;break;case"def":n=r.effect_types.DEFENSE;break;case"agi":n=r.effect_types.AGILITY;break;case"luk":n=r.effect_types.LUCK}s.type===n&&s.apply_effect()}),e){const t=i.effect_obj?r.Effect.preview_value_applied(i.effect_obj,this[s]):this[s];return this[s]=c,t}void 0===this[n]?this[n]=this[s]:this[n]=Math.round(this[n]*this[s]/c)}update_attributes(){this.set_max_stat("hp"),this.set_max_stat("pp"),this.set_max_stat("atk"),this.set_max_stat("def"),this.set_max_stat("agi"),this.set_max_stat("luk")}add_extra_max_hp(t){this.hp_extra+=t}add_extra_max_pp(t){this.pp_extra+=t}add_extra_max_atk(t){this.atk_extra+=t}add_extra_max_def(t){this.def_extra+=t}add_extra_max_agi(t){this.agi_extra+=t}add_extra_max_luk(t){this.luk_extra+=t}init_elemental_attributes(){this.venus_level_current=this.venus_level_base,this.mercury_level_current=this.mercury_level_base,this.mars_level_current=this.mars_level_base,this.jupiter_level_current=this.jupiter_level_base,this.venus_power_current=this.venus_power_base,this.mercury_power_current=this.mercury_power_base,this.mars_power_current=this.mars_power_base,this.jupiter_power_current=this.jupiter_power_base,this.venus_resist_current=this.venus_resist_base,this.mercury_resist_current=this.mercury_resist_base,this.mars_resist_current=this.mars_resist_base,this.jupiter_resist_current=this.jupiter_resist_base}update_elemental_attributes(){this.init_elemental_attributes();for(let t=0;t<this.djinni.length;++t){let e=this.info.djinni_list[this.djinni[t]];e.status===a.djinn_status.SET&&(this[e.element+"_level_current"]+=1,this[e.element+"_power_current"]+=5,this[e.element+"_resist_current"]+=5)}this.effects.forEach(t=>{t.type!==r.effect_types.POWER&&t.type!==r.effect_types.RESIST||t.apply_effect()});for(let t=0;t<h.ordered_elements.length;++t){const e=h.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=l.clamp(this[i],c.ELEM_ATTR_MIN,c.ELEM_ATTR_MAX),this[s]=l.clamp(this[s],c.ELEM_ATTR_MIN,c.ELEM_ATTR_MAX)}}update_abilities(){this.abilities=this.innate_abilities.concat(this.class.ability_level_pairs.filter(t=>t.level<=this.level&&!this.innate_abilities.includes(t.ability)).map(t=>t.ability),this.equipped_abilities)}update_all(){this.update_elemental_attributes(),this.update_class(),this.update_attributes(),this.update_abilities()}static get_active_players(t,e){return t.members.slice(0,e).filter(t=>!t.has_permanent_status(_.permanent_status.DOWNED))}}e.MainChar=p},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Ability=e.diminishing_ratios=e.ability_categories=e.ability_target_types=e.ability_msg_types=e.ability_types=void 0,e.ability_types={HEALING:"healing",EFFECT_ONLY:"effect_only",ADDED_DAMAGE:"added_damage",MULTIPLIER:"multiplier",BASE_DAMAGE:"base_damage",SUMMON:"summon",UTILITY:"utility",DIRECT_DAMAGE:"direct_damage"},e.ability_msg_types={CAST:"cast",ATTACK:"attack",USE:"use",SUMMON:"summon",UNLEASH:"unleash",DEFEND:"defend",ITEM_UNLEASH:"item_unleash",SET_DJINN:"set_djinn",NO_MSG:"no_msg"},e.ability_target_types={NO_TARGET:"no_target",ALLY:"ally",ENEMY:"enemy",USER:"user"},e.ability_categories={PSYNERGY:"psynergy",DJINN:"djinn",SUMMON:"summon",ITEM:"item",WEAPON_UNLEASH:"weapon_unleash",NORMAL:"normal"},e.diminishing_ratios={STANDARD:{11:.1,9:.2,7:.4,5:.6,3:.8,1:1},SUMMON:{11:.1,9:.2,7:.3,5:.4,3:.7,1:1},DIMINISH:{11:.1,9:.1,7:.1,5:.3,3:.5,1:1},STATUS:{11:.3,9:.3,7:.3,5:.3,3:.6,1:1}};e.Ability=class{constructor(t,i,s,n,a,r,o,_,h,c,l,d,p,u,g,m,y,b,f,w,v,x,k,E){this.key_name=t,this.name=i,this.description=s,this.type=n,this.element=a,this.battle_target=r,this.range=o,this.pp_cost=_,this.ability_power=h,this.effects_outside_battle=c,this.is_battle_ability=l,this.is_field_psynergy=d,this.effects=p,this.ability_category=u,this.battle_animation_key=g,this.priority_move=m||!1,this.has_critical=y||!1,this.crit_mult_factor=void 0!==b?b:1,this.can_switch_to_unleash=f||!1,this.can_be_evaded=w||!1,this.use_diminishing_ratio=v||!1,this.msg_type=void 0===x?e.ability_msg_types.CAST:x,this.affects_pp=void 0!==k&&k,this.has_animation_variation=void 0!==E&&E}static get_diminishing_ratios(t,i){if(i)return e.diminishing_ratios.DIMINISH;switch(t){case e.ability_types.SUMMON:return e.diminishing_ratios.SUMMON;default:return e.diminishing_ratios.STANDARD}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEvent=e.event_types=void 0,e.event_types={BATTLE:"battle"};class s{constructor(t,e,i){this.game=t,this.data=e,this.type=i,this.id=s.id_incrementer++,s.events[this.id]=this}static get_event(t){return s.events[t]}static reset(){s.id_incrementer=0,s.events={}}}e.GameEvent=s,s.reset()},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Battle=e.MAX_CHARS_IN_BATTLE=void 0;const n=i(7),a=i(21),r=i(43),o=i(44),_=i(25),h=i(13),c=i(52),l=i(53),d=i(54),p=i(8),u=i(0),g=i(5),m=i(12),y=i(55),b=i(3);e.MAX_CHARS_IN_BATTLE=4;const f=0,w=1,v=2,x=3,k=4,E=5,j=6;e.Battle=class{constructor(t,i,s,n){this.game=t,this.data=i,this.allies_info=this.data.info.party_data.members.slice(0,e.MAX_CHARS_IN_BATTLE).map(t=>(t.init_effect_turns_count(),{sprite_key:t.key_name+"_battle",scale:t.battle_scale,instance:t,entered_in_battle:!0}));const h=this.data.dbs.enemies_parties_db[n];this.enemies_party_name=h.name,this.enemies_info=[],this.this_enemies_list={};let l={},d=0;h.members.forEach(t=>{const e=b.random(t.min,t.max);for(let i=0;i<e;++i){this.enemies_info.push({sprite_key:t.key+"_battle"}),this.enemies_info[d].sprite_key in l?l[this.enemies_info[d].sprite_key]+=1:l[this.enemies_info[d].sprite_key]=1;let e="",i="";l[this.enemies_info[d].sprite_key]>1&&(e="_"+l[this.enemies_info[d].sprite_key].toString(),i=" "+l[this.enemies_info[d].sprite_key].toString()),this.enemies_info[d].instance=_.get_enemy_instance(this.data.info.enemies_list[t.key].data,i),this.enemies_info[d].scale=this.enemies_info[d].instance.battle_scale,this.enemies_info[d].battle_key=this.enemies_info[d].sprite_key+e,this.this_enemies_list[this.enemies_info[d].battle_key]=this.enemies_info[d].instance,++d}}),this.enter_propagation_priority=0,this.esc_propagation_priority=0,this.battle_stage=new a.BattleStage(this.game,this.data,s,this.allies_info,this.enemies_info,this.esc_propagation_priority++,this.enter_propagation_priority++),this.battle_log=new r.BattleLog(this.game),this.battle_menu=new o.MainBattleMenu(this.game,this.data,++this.enter_propagation_priority,++this.esc_propagation_priority,this.on_abilities_choose.bind(this),this.choose_targets.bind(this)),this.target_window=new c.ChoosingTargetWindow(this.game,this.data),this.animation_manager=new y.BattleAnimationManager(this.game,this.data),this.battle_phase=f,this.controls_enabled=!1,this.on_going_effects=[],this.allies_defeated=!1,this.enemies_defeated=!1,++this.enter_propagation_priority,++this.esc_propagation_priority,this.battle_finishing=!1,this.signal_bindings=this.set_controls()}set_controls(){return[this.data.enter_input.add(()=>{if(this.data.in_battle&&this.controls_enabled)switch(this.data.enter_input.halt(),this.battle_phase){case w:this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=v,this.check_phases();break;case k:case E:case j:this.advance_log_resolve&&(this.advance_log_resolve(),this.advance_log_resolve=null)}},this,this.enter_propagation_priority)]}start_battle(){this.check_phases()}on_abilities_choose(t){this.allies_abilities=t,this.battle_menu.close_menu(),this.battle_stage.reset_positions(),this.battle_stage.choosing_actions=!1,this.battle_phase=x,this.check_phases()}choose_targets(t,e,i,s,n){const a=this.data.info.abilities_list[t];let r;"psynergy"===e&&(r=[a.pp_cost]),"defend"!==e&&this.target_window.open(e,a.name,a.element,t,r,n),this.battle_stage.choose_targets(a.range,a.battle_target,a.type,s,t=>{this.target_window.window_open&&this.target_window.close(),i(t)})}check_parties(){this.allies_defeated=this.allies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),this.enemies_defeated=this.enemies_info.every(t=>t.instance.has_permanent_status(n.permanent_status.DOWNED)),(this.allies_defeated||this.enemies_defeated)&&(this.battle_phase=j)}check_phases(){switch(this.check_parties(),this.battle_phase){case f:this.battle_phase_none();break;case w:case v:this.battle_phase_menu();break;case x:this.battle_phase_round_start();break;case k:this.battle_phase_combat();break;case E:this.battle_phase_round_end();break;case j:this.battle_phase_end()}}battle_phase_none(){this.game.physics.p2.pause(),this.battle_phase=w,this.data.in_battle=!0,this.data.battle_instance=this,this.battle_log.add(this.enemies_party_name+" appeared!"),this.battle_stage.initialize_stage(()=>{this.allies_map_sprite=b.mapValues(b.keyBy(this.allies_info,"instance.key_name"),t=>t.sprite),this.enemies_map_sprite=b.mapValues(b.keyBy(this.enemies_info,"instance.key_name"),t=>t.sprite),this.controls_enabled=!0})}battle_phase_menu(){this.battle_stage.set_choosing_action_position(),this.battle_menu.open_menu()}battle_phase_round_start(){return s(this,void 0,void 0,(function*(){const t=this.enemies_info.map(t=>t.instance);this.enemies_abilities=Object.fromEntries(t.map((e,i)=>{let s=new Array(e.turns);for(let i=0;i<e.turns;++i)s[i]=l.EnemyAI.roll_action(e,this.data.info.party_data.members,t);return[this.enemies_info[i].battle_key,s]}));for(let t in this.allies_abilities){const e=this.data.info.main_char_list[t];for(let i=0;i<this.allies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.allies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.allies_abilities[t][i].speed=d.BattleFormulas.player_turn_speed(e.current_agi,n,i>0),this.allies_abilities[t][i].caster=e}}for(let t in this.enemies_abilities){const e=this.this_enemies_list[t];for(let i=0;i<this.enemies_abilities[t].length;++i){const s=this.data.info.abilities_list[this.enemies_abilities[t][i].key_name],n=void 0!==s&&s.priority_move;this.enemies_abilities[t][i].speed=d.BattleFormulas.enemy_turn_speed(e.current_agi,i+1,e.turns,n),this.enemies_abilities[t][i].caster=e}}this.turns_actions=b.sortBy(Object.values(this.allies_abilities).flat().concat(Object.values(this.enemies_abilities).flat()),t=>t.speed);for(let t=0;t<this.turns_actions.length;++t){const e=this.turns_actions[t],i=this.data.info.abilities_list[e.key_name];let s=this.data.info.abilities_list[e.key_name].battle_animation_key;i.has_animation_variation&&e.key_name in e.caster.battle_animations_variations&&(s=e.caster.battle_animations_variations[e.key_name]),e.battle_animation_key=s,yield this.animation_manager.load_animation(s)}this.battle_phase=k,this.controls_enabled=!0,this.check_phases()}))}wait_for_key(){return new Promise(t=>{this.advance_log_resolve=t})}check_downed(t){return s(this,void 0,void 0,(function*(){0===t.current_hp&&(t.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add(n.on_catch_status_msg[n.permanent_status.DOWNED](t)),yield this.wait_for_key())}))}battle_phase_combat(){return s(this,void 0,void 0,(function*(){if(!this.turns_actions.length)return this.battle_phase=E,void this.check_phases();const t=this.turns_actions.pop();if(t.caster.has_permanent_status(n.permanent_status.DOWNED))return void this.check_phases();if(t.caster.is_paralyzed())return t.caster.temporary_status.has(n.temporary_status.SLEEP)?yield this.battle_log.add(t.caster.name+" is asleep!"):t.caster.temporary_status.has(n.temporary_status.STUN)&&(yield this.battle_log.add(t.caster.name+" is paralyzed and cannot move!")),yield this.wait_for_key(),void this.check_phases();t.caster.fighter_type!==n.fighter_types.ENEMY||this.data.info.abilities_list[t.key_name].priority_move||Object.assign(t,l.EnemyAI.roll_action(t.caster,this.data.info.party_data.members,this.enemies_info.map(t=>t.instance)));let i=this.data.info.abilities_list[t.key_name],s="";if(t.caster.fighter_type===n.fighter_types.ALLY&&void 0!==i&&i.can_switch_to_unleash){const e=t.caster;if(e.equip_slots.weapon&&this.data.info.items_list[e.equip_slots.weapon.key_name].unleash_ability){const n=this.data.info.items_list[e.equip_slots.weapon.key_name];Math.random()<n.unleash_rate&&(s=n.name,t.key_name=n.unleash_ability,i=this.data.info.abilities_list[n.unleash_ability])}}if(void 0===i)return yield this.battle_log.add(t.key_name+" ability key not registered."),yield this.wait_for_key(),void this.check_phases();if(t.caster.has_temporary_status(n.temporary_status.SEAL)&&i.ability_category===h.ability_categories.PSYNERGY)return yield this.battle_log.add("But the Psynergy was blocked!"),yield this.wait_for_key(),void this.check_phases();if(i.pp_cost>t.caster.current_pp)return yield this.battle_log.add("... But doesn't have enough PP!"),yield this.wait_for_key(),void this.check_phases();t.caster.current_pp-=i.pp_cost;let a=t.djinn_key_name?this.data.info.djinni_list[t.djinn_key_name].name:void 0;if(yield this.battle_log.add_ability(t.caster,i,s,a),i.ability_category===h.ability_categories.DJINN)i.effects.some(t=>t.type===p.effect_types.SET_DJINN)?this.data.info.djinni_list[t.djinn_key_name].set_status(g.djinn_status.SET,t.caster):this.data.info.djinni_list[t.key_name].set_status(g.djinn_status.STANDBY,t.caster);else if(i.ability_category===h.ability_categories.SUMMON){const s=this.data.dbs.summons_db[i.key_name].requirements,n=g.Djinn.get_standby_djinni(this.data.info.djinni_list,m.MainChar.get_active_players(this.data.info.party_data,e.MAX_CHARS_IN_BATTLE));if(!b.every(s,(t,e)=>n[e]>=t))return yield this.battle_log.add(`${t.caster.name} summons ${i.name} but`),yield this.battle_log.add("doesn't have enough standby Djinn!"),yield this.wait_for_key(),void this.check_phases();g.Djinn.set_to_recovery(this.data.info.djinni_list,m.MainChar.get_active_players(this.data.info.party_data,e.MAX_CHARS_IN_BATTLE),s)}if(this.battle_menu.chars_status_window.update_chars_info(),i.type===h.ability_types.UTILITY&&(yield this.wait_for_key()),this.animation_manager.animation_available(t.battle_animation_key)){const e=t.caster.fighter_type===n.fighter_types.ALLY?this.allies_map_sprite[t.caster.key_name]:this.enemies_map_sprite[t.caster.key_name],i=t.targets.flatMap(t=>t.magnitude?[t.target.sprite]:[]),s=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_allies:this.battle_stage.group_enemies,a=t.caster.fighter_type===n.fighter_types.ALLY?this.battle_stage.group_enemies:this.battle_stage.group_allies;yield this.animation_manager.play(t.battle_animation_key,e,i,s,a,this.battle_stage),this.battle_stage.prevent_camera_angle_overflow()}else yield this.battle_log.add(`Animation for ${i.name} not available...`),yield this.wait_for_key();[h.ability_types.UTILITY,h.ability_types.EFFECT_ONLY].includes(i.type)||(yield this.apply_damage(t,i));for(let e=0;e<i.effects.length;++e){const s=i.effects[e];if(!p.effect_usages.ON_USE)continue;if(yield this.apply_effects(t,i,s))return this.battle_phase=E,void this.check_phases()}if(yield this.battle_stage.set_stage_default_position(),i.ability_category===h.ability_categories.SUMMON){const e=this.data.dbs.summons_db[i.key_name].requirements;for(let s=0;s<u.ordered_elements.length;++s){const n=u.ordered_elements[s],a=d.BattleFormulas.summon_power(e[n]);a>0&&(t.caster.add_effect({type:"power",quantity:a,operator:"plus",attribute:n},i,!0),yield this.battle_log.add(`${t.caster.name}'s ${u.element_names[n]} Power rises by ${a.toString()}!`),yield this.wait_for_key())}}const r=t.caster.is_poisoned();if(r){let e=d.BattleFormulas.battle_poison_damage(t.caster,r);e>t.caster.current_hp&&(e=t.caster.current_hp),t.caster.current_hp=b.clamp(t.caster.current_hp-e,0,t.caster.max_hp);const i=r===n.permanent_status.POISON?"poison":"venom";yield this.battle_log.add(`The ${i} does ${e.toString()} damage to ${t.caster.name}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(t.caster)}if(t.caster.has_temporary_status(n.temporary_status.DEATH_CURSE)){const e=b.find(t.caster.effects,{status_key_name:n.temporary_status.DEATH_CURSE});1===t.caster.get_effect_turns_count(e)&&(t.caster.current_hp=0,t.caster.add_permanent_status(n.permanent_status.DOWNED),yield this.battle_log.add("The Grim Reaper calls out to "+t.caster.name),yield this.wait_for_key())}this.check_phases()}))}apply_damage(t,e){return s(this,void 0,void 0,(function*(){let i;e.has_critical&&(i=t.caster.effects.filter(t=>t.type===p.effect_types.CRITICALS).reduce((t,e)=>p.Effect.apply_operator(t,e.quantity,e.operator),0));for(let s=0;s<t.targets.length;++s){const a=t.targets[s];if(null===a.magnitude)continue;const r=a.target.instance;if(r.has_permanent_status(n.permanent_status.DOWNED))continue;if(e.can_be_evaded&&(Math.random()<d.EVASION_CHANCE||t.caster.temporary_status.has(n.temporary_status.DELUSION)&&Math.random()<d.DELUSION_MISS_CHANCE))return yield this.battle_log.add(r.name+" nimbly dodges the blow!"),this.wait_for_key();let o=0;if(e.has_critical&&(Math.random()<d.CRITICAL_CHANCE||Math.random()<i/2)){const i=void 0===e.crit_mult_factor?1.25:e.crit_mult_factor,s=6+r.level/5;o=d.BattleFormulas.physical_attack(t.caster,r,i,s,e.element)}else switch(e.type){case h.ability_types.ADDED_DAMAGE:o=d.BattleFormulas.physical_attack(t.caster,r,1,e.ability_power,e.element);break;case h.ability_types.MULTIPLIER:o=d.BattleFormulas.physical_attack(t.caster,r,e.ability_power/10,0,e.element);break;case h.ability_types.BASE_DAMAGE:o=d.BattleFormulas.psynergy_damage(t.caster,r,e.ability_power,e.element);break;case h.ability_types.HEALING:o=-d.BattleFormulas.heal_ability(t.caster,e.ability_power,e.element);break;case h.ability_types.SUMMON:const i=b.sum(b.values(this.data.dbs.summons_db[e.key_name].requirements));o=d.BattleFormulas.summon_damage(r,e.ability_power,i);break;case h.ability_types.DIRECT_DAMAGE:o=e.ability_power}const _=h.Ability.get_diminishing_ratios(e.type,e.use_diminishing_ratio);o=o*_[a.magnitude]|0,o+=u.variation(),o>=0&&r.effects.forEach(t=>{t.type===p.effect_types.DAMAGE_MODIFIER&&(o=t.apply_effect(o).after)}),yield this.battle_log.add_damage(o,r,e.affects_pp);const c=e.affects_pp?"current_pp":"current_hp",l=e.affects_pp?"max_pp":"max_hp";r.current_hp=b.clamp(r[c]-o,0,r[l]),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key(),yield this.check_downed(r);for(let i=0;i<e.effects.length;++i){const s=e.effects[i];if(s.type===p.effect_types.DAMAGE_INPUT){const i=s.on_caster?t.caster:r,n=i.add_effect(s,e).effect,a=n.apply_effect(o);if([p.effect_types.CURRENT_HP,p.effect_types.CURRENT_PP].includes(n.sub_effect.type)){const t=a.before-a.after;0!==t&&(n.effect_msg?yield this.battle_log.add(p.effect_msg[n.effect_msg](r)):yield this.battle_log.add_damage(t,i,n.sub_effect.type===p.effect_types.CURRENT_PP),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()),yield this.check_downed(i)}i.remove_effect(n)}}}}))}apply_effects(t,e,i){return s(this,void 0,void 0,(function*(){let s;for(let a=0;a<t.targets.length;++a){const r=t.targets[a];if(null===r.magnitude)continue;const o=r.target.instance;if(!o.has_permanent_status(n.permanent_status.DOWNED))switch(i.type){case p.effect_types.PERMANENT_STATUS:if(i.add_status){if(o.has_permanent_status(i.status_key_name))break;if(i.status_key_name===n.permanent_status.POISON&&o.has_permanent_status(n.permanent_status.VENOM))break}case p.effect_types.TEMPORARY_STATUS:if(i.add_status){let s=b.find(o.class.vulnerabilities,{status_key_name:i.status_key_name});s=void 0===s?0:s.chance;const a=h.diminishing_ratios.STATUS[r.magnitude];if(d.BattleFormulas.ailment_success(t.caster,o,i.chance,a,e.element,s)){const t=o.add_effect(i,e,!0).effect;if(t.type===p.effect_types.TEMPORARY_STATUS)o.has_temporary_status(t.status_key_name)||this.on_going_effects.push(t),t.status_key_name===n.temporary_status.DEATH_CURSE&&o.has_temporary_status(n.temporary_status.DEATH_CURSE)?o.set_effect_turns_count(t):o.set_effect_turns_count(t,t.turn_count,!1);else if(t.status_key_name===n.permanent_status.VENOM&&o.has_permanent_status(n.permanent_status.POISON)){const t=b.find(o.effects,{status_key_name:n.permanent_status.POISON});o.remove_effect(t,!0)}yield this.battle_log.add(n.on_catch_status_msg[i.status_key_name](o))}else yield this.battle_log.add(`But it has no effect on ${o.name}!`);yield this.wait_for_key()}else if(Math.random()<i.chance){let t=!1;for(;;){const t=b.find(o.effects,{status_key_name:i.status_key_name});if(!t)break;o.remove_effect(t,!0),t.status_key_name===n.permanent_status.DOWNED&&o.init_effect_turns_count(),t.type===p.effect_types.TEMPORARY_STATUS&&(this.on_going_effects=this.on_going_effects.filter(e=>e!==t))}t&&(this.battle_log.add_recover_effect(i),yield this.wait_for_key())}break;case p.effect_types.CURRENT_HP:if(s=o.add_effect(i,e,!0),s.effect.show_msg){const t=s.changes.before-s.changes.after;yield this.battle_log.add_damage(t,o),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}yield this.check_downed(o),void 0!==s.effect.turns_quantity?this.on_going_effects.push(s.effect):o.remove_effect(s.effect);break;case p.effect_types.MAX_HP:case p.effect_types.MAX_PP:case p.effect_types.ATTACK:case p.effect_types.DEFENSE:case p.effect_types.AGILITY:case p.effect_types.LUCK:case p.effect_types.POWER:case p.effect_types.RESIST:if(s=o.add_effect(i,e,!0),this.on_going_effects.push(s.effect),o.set_effect_turns_count(s.effect,s.effect.turn_count,!1),s.effect.show_msg){const t=s.changes.after-s.changes.before,e=t>=0?"rises":"drops";let n="";[p.effect_types.POWER,p.effect_types.RESIST].includes(i.type)&&(n=u.element_names[s.effect.attribute]+" "),yield this.battle_log.add(`${o.name}'s ${n}${p.effect_names[i.type]} ${e} by ${Math.abs(t)}!`),this.battle_menu.chars_status_window.update_chars_info(),yield this.wait_for_key()}break;case p.effect_types.END_THE_ROUND:return yield this.battle_log.add("Everybody is resting!"),yield this.wait_for_key(),!0;case p.effect_types.TURNS:yield this.battle_log.add(t.caster.name+" readies for action!"),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case p.effect_types.DAMAGE_MODIFIER:yield this.battle_log.add(p.effect_msg[i.effect_msg](o)),yield this.wait_for_key(),this.on_going_effects.push(o.add_effect(i,e,!0).effect);break;case p.effect_types.COUNTER_STRIKE:case p.effect_types.FLEE:break;default:this.on_going_effects.push(o.add_effect(i,e,!0).effect)}}return!1}))}battle_phase_round_end(){return s(this,void 0,void 0,(function*(){let t=[],i={};for(let e=0;e<this.on_going_effects.length;++e){const s=this.on_going_effects[e];if(s.char.has_permanent_status(n.permanent_status.DOWNED)){s.char.remove_effect(s),s.char.update_all(),t.push(e);continue}let a=!1;void 0!==s.turn_count&&(null!==s.char.get_effect_turns_count(s)?(s.char.key_name in i&&s.char.get_effect_turns_key(s)in i[s.char.key_name]||s.char.set_effect_turns_count(s),s.turn_count=s.char.get_effect_turns_count(s),i[s.char.key_name]?i[s.char.key_name][s.char.get_effect_turns_key(s)]=s:i[s.char.key_name]={[s.char.get_effect_turns_key(s)]:s},a=!0):--s.turn_count,0===s.turn_count&&(s.char.remove_effect(s),s.char.update_all(),t.push(e),a||(this.battle_log.add_recover_effect(s),yield this.wait_for_key())))}for(let t in i)for(let e in i[t]){const s=i[t][e];0===s.turn_count&&(this.battle_log.add_recover_effect(s),yield this.wait_for_key())}this.on_going_effects=this.on_going_effects.filter((e,i)=>!t.includes(i));for(let t=0;t<e.MAX_CHARS_IN_BATTLE;++t){const e=this.data.info.party_data.members[t];if(void 0===e)continue;const i=e.djinni;for(let t=0;t<i.length;++t){const s=i[t],n=this.data.info.djinni_list[s];n.status===g.djinn_status.RECOVERY&&(0===n.recovery_turn?(n.set_status(g.djinn_status.SET,e),yield this.battle_log.add(`${n.name} is set to ${e.name}!`),yield this.wait_for_key()):--n.recovery_turn)}}this.controls_enabled=!1,this.battle_log.clear(),this.battle_phase=v,this.check_phases()}))}battle_phase_end(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.on_going_effects.length;++t){const e=this.on_going_effects[t];e.char.remove_effect(e),e.char.update_all()}if(this.allies_defeated)this.battle_log.add(this.allies_info[0].instance.name+"' party has been defeated!");else{this.battle_log.add(this.enemies_party_name+" has been defeated!"),yield this.wait_for_key();const t=this.enemies_info.map(t=>t.instance.exp_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${t.toString()} experience points.`),yield this.wait_for_key();for(let e=0;e<this.allies_info.length;++e){const i=this.allies_info[e],s=i.instance;if(!s.has_permanent_status(n.permanent_status.DOWNED)){const e=s.add_exp(i.entered_in_battle?t:t>>1);if(e.before.level!==e.after.level){this.battle_log.add(`${s.name} is now a level ${s.level} ${s.class.name}!`),yield this.wait_for_key();const t=b.difference(e.after.abilities,e.before.abilities);for(let e=0;e<t.length;++e){const i=this.data.info.abilities_list[t[e]];this.battle_log.add(`Mastered the ${s.class.name}'s ${i.name}!`),yield this.wait_for_key()}for(let t=0;t<e.before.stats.length;++t){const i=Object.keys(e.before.stats[t])[0],s=e.after.stats[t][i]-e.before.stats[t][i];if(0!==s){let t;switch(i){case"max_hp":t="Maximum HP";break;case"max_pp":t="Maximum PP";break;case"atk":t="Attack";break;case"def":t="Defense";break;case"agi":t="Agility";break;case"luk":t="Luck"}this.battle_log.add(`${t} rises by ${s.toString()}!`),yield this.wait_for_key()}}}}}const e=this.enemies_info.map(t=>t.instance.coins_reward).reduce((t,e)=>t+e,0);this.battle_log.add(`You got ${e.toString()} coins.`),yield this.wait_for_key();for(let t=0;t<this.enemies_info.length;++t){const e=this.enemies_info[t].instance;if(e.item_reward&&Math.random()<e.item_reward_chance){const t=this.data.info.items_list[e.item_reward];void 0!==t?(this.battle_log.add(`You got a ${t.name}.`),yield this.wait_for_key()):(this.battle_log.add(e.item_reward+" not registered..."),yield this.wait_for_key())}}}this.unset_battle()}))}unset_battle(){this.battle_finishing=!0,this.battle_stage.unset_stage(()=>{this.battle_log.destroy(),this.battle_menu.destroy_menu(),this.signal_bindings.forEach(t=>{t.detach()}),this.target_window.destroy(),this.animation_manager.destroy()},()=>{this.data.in_battle=!1,this.data.battle_instance=void 0,this.game.physics.p2.resume()})}update(){this.battle_finishing||(this.battle_stage.update_stage(),this.animation_manager.render())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldAbilities=void 0;const s=i(62),n=i(0),a=i(26),r=i(63);e.FieldAbilities=class{constructor(t,e,i,s,n,a){this.game=t,this.ability_key_name=i,this.data=e,this.target_max_range=s,this.action_key_name=n,this.need_target=a,this.bootstrap_method=()=>{},this.cast_finisher=()=>{},this.controllable_char=null,this.target_found=!1,this.target_object=null,this.stop_casting=null,this.field_psynergy_window=new r.FieldPsynergyWindow(this.game,this.data)}get_cast_direction(t){return t%2==0?t:++t===n.directions_count?n.directions.right:t}set_hero_cast_anim(){this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}unset_hero_cast_anim(){this.controllable_char.sprite.animations.currentAnim.reverseOnce(),this.controllable_char.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.controllable_char.play(n.base_actions.IDLE,n.reverse_directions[this.cast_direction])}),this.controllable_char.play(this.action_key_name,n.reverse_directions[this.cast_direction])}set_bootstrap_method(t){this.bootstrap_method=t}set_cast_finisher_method(t){this.cast_finisher=t}search_for_target(){let t,e,i,s;this.target_found=!1,this.cast_direction===n.directions.up||this.cast_direction===n.directions.down?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius,this.cast_direction===n.directions.up?(i=this.controllable_char.sprite.y-this.controllable_char.body_radius-this.target_max_range,s=this.controllable_char.sprite.y-this.controllable_char.body_radius):(i=this.controllable_char.sprite.y+this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius+this.target_max_range)):(i=this.controllable_char.sprite.y-this.controllable_char.body_radius,s=this.controllable_char.sprite.y+this.controllable_char.body_radius,this.cast_direction===n.directions.left?(t=this.controllable_char.sprite.x-this.controllable_char.body_radius-this.target_max_range,e=this.controllable_char.sprite.x-this.controllable_char.body_radius):(t=this.controllable_char.sprite.x+this.controllable_char.body_radius,e=this.controllable_char.sprite.x+this.controllable_char.body_radius+this.target_max_range));let a=1/0;for(let n=0;n<this.data.map.interactable_objects.length;++n){let r=this.data.map.interactable_objects[n];if(!(this.ability_key_name in this.data.dbs.interactable_objects_db[r.key_name].psynergy_keys))continue;const o=r.current_x*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),_=r.current_y*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),h=_>=i&&_<=s;if(o>=t&&o<=e&&h&&this.data.map.collision_layer===r.base_collision_layer){let t=Math.pow(o-this.controllable_char.sprite.x,2)+Math.pow(_-this.controllable_char.sprite.y,2);t<a&&(a=t,this.target_found=!0,this.target_object=r)}}}set_target_casted(){if(this.target_object){if(this.data.dbs.interactable_objects_db[this.target_object.key_name].psynergy_keys[this.ability_key_name].interaction_type===a.interactable_object_interaction_types.ONCE){const t=this.ability_key_name+"_casted";this.target_object.custom_data[t]?(this.target_found=!1,this.target_object=null):this.target_found&&(this.target_object.custom_data[t]=!0)}}}cast(t,e){if(this.controllable_char=t,this.controllable_char.casting_psynergy)return;if(void 0!==e&&e in this.data.info.main_char_list){const t=this.data.info.main_char_list[e],i=this.data.info.abilities_list[this.ability_key_name];if(t.current_pp<i.pp_cost||!t.abilities.includes(this.ability_key_name))return;t.current_pp-=i.pp_cost}let i;this.field_psynergy_window.window.send_to_front(),this.field_psynergy_window.open(this.ability_key_name),this.controllable_char.casting_psynergy=!0,this.game.physics.p2.pause(),this.controllable_char.stop_char(!1),this.cast_direction=this.get_cast_direction(this.controllable_char.current_direction),this.controllable_char.set_direction(this.cast_direction),this.need_target&&(this.search_for_target(),this.set_target_casted()),this.set_hero_cast_anim(),this.stop_casting=s.init_cast_aura(this.game,this.controllable_char.sprite,this.data.npc_group,this.controllable_char.color_filter,()=>{i=s.tint_map_layers(this.game,this.data.map,this.data.map.color_filter),this.bootstrap_method()},()=>{this.game.physics.p2.resume(),this.controllable_char.casting_psynergy=!1,this.target_object=null},()=>{this.cast_finisher(),i()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControllableChar=void 0;const s=i(1),n=i(0),a=i(39),r={x:.5,y:.8};e.ControllableChar=class{constructor(t,e,i,s,n,r,o,_){this.game=t,this.data=e,this.key_name=i,this.x_speed=0,this.y_speed=0,this.extra_speed=0,this.stop_by_colliding=!1,this.force_direction=!1,this.climbing=!1,this.pushing=!1,this.jumping=!1,this.sliding=!1,this.casting_psynergy=!1,this.teleporting=!1,this.idle_climbing=!1,this.sprite_info=null,this.sprite=null,this.shadow=null,this.body_radius=0,this.tile_x_pos=s,this.tile_y_pos=n,this.current_action=r,this.current_direction=o,this.required_direction=0,this.desired_direction=o,this.color_filter=this.game.add.filter("ColorFilters"),this.trying_to_push=!1,this.trying_to_push_direction=null,this.push_timer=null,this.enable_footsteps=void 0!==_&&_,this.footsteps=new a.Footsteps(this.game,this.data)}in_action(t=!1){return this.casting_psynergy||this.pushing||this.climbing&&!t||this.jumping||this.teleporting||this.sliding}set_sprite(t,e,i,s,n,a){n=void 0===n?r.x:n,a=void 0===a?r.y:a,this.sprite_info=e;const o=this.sprite_info.getActionKey(this.current_action);this.sprite=t.create(0,0,o),this.sprite.centerX=(this.tile_x_pos+1.5)*i.tileWidth|0,this.sprite.centerY=(this.tile_y_pos+1.5)*i.tileHeight|0,this.sprite.base_collision_layer=s,this.sprite.roundPx=!0,this.sprite.anchor.setTo(n,a)}reset_anchor(t){void 0!==t&&["x","y"].includes(t)?this.sprite.anchor[t]=r[t]:(this.sprite.anchor.x=r.x,this.sprite.anchor.y=r.y)}set_shadow(t,e,i,s,n){t=void 0===t?"shadow":t,s=void 0===s?.45:s,n=void 0===n?.05:n,this.shadow=e.create(0,0,t),this.shadow.blendMode=PIXI.blendModes.MULTIPLY,this.shadow.disableRoundPx=!0,this.shadow.anchor.setTo(s,n),this.shadow.base_collision_layer=i}camera_follow(){this.game.camera.follow(this.sprite,Phaser.Camera.FOLLOW_LOCKON,s.CAMERA_LERP,s.CAMERA_LERP),this.game.camera.focusOn(this.sprite)}set_collision_layer(t){this.sprite.base_collision_layer=t,this.shadow.base_collision_layer=t}play(t,e,i=!0){if(t=void 0===t?this.current_action:t,e=void 0===e?n.reverse_directions[this.current_direction]:e,this.sprite_info.getSpriteAction(this.sprite)!==t){const e=this.sprite_info.getActionKey(t);this.sprite.loadTexture(e)}const s=this.sprite_info.getAnimationKey(t,e);this.sprite.animations.getAnimation(s)||this.sprite_info.setAnimation(this.sprite,t);const a=this.sprite.animations.getAnimation(s);return i?this.sprite.animations.play(s):a.stop(!0),a}set_frame(t,e=0){const i=this.sprite_info.getFrameName(this.current_action,n.reverse_directions[t],e);this.sprite.frameName=i}update_shadow(){this.shadow.x=this.sprite.body.x,this.shadow.y=this.sprite.body.y}stop_char(t=!0){this.sprite.body.velocity.y=this.sprite.body.velocity.x=0,t&&(this.current_action=n.base_actions.IDLE,this.set_action())}set_direction(t){this.current_direction=this.desired_direction=t}set_action(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=this.current_action,i=this.idle_climbing;!this.stop_by_colliding||this.pushing||this.climbing?this.stop_by_colliding&&!this.pushing&&this.climbing&&(i=!0):e=n.base_actions.IDLE;const s=i?n.base_actions.IDLE:n.reverse_directions[this.desired_direction];this.play(e,s)}tile_able_to_show_footprint(){const t=this.data.map.get_current_tile(this);for(let e=0;e<t.length;++e){const i=t[e];if(i.properties.hasOwnProperty("disable_footprint")){if(i.properties.disable_footprint.split(",").map(t=>parseInt(t)).includes(this.data.map.collision_layer))return!1}}return!0}set_current_action(){if(!this.data.tile_event_manager.on_event)if(null!==this.required_direction||this.current_action===n.base_actions.IDLE||this.climbing){if(null!==this.required_direction&&!this.climbing&&!this.pushing){const t=this.enable_footsteps&&this.data.map.show_footsteps&&this.tile_able_to_show_footprint();this.footsteps.can_make_footprint&&t&&this.footsteps.create_step(this.current_direction,this.current_action);const e=this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT);e&&this.current_action!==n.base_actions.DASH?this.current_action=n.base_actions.DASH:e||this.current_action===n.base_actions.WALK||(this.current_action=n.base_actions.WALK)}}else this.current_action=n.base_actions.IDLE}update_tile_position(t){this.tile_x_pos=this.sprite.x/t.tileWidth|0,this.tile_y_pos=this.sprite.y/t.tileHeight|0}calculate_speed(){const t=this.game.time.elapsedMS/s.DELTA_TIME_FACTOR;this.current_action===n.base_actions.DASH?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.dash_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.dash_speed+this.extra_speed)|0):this.current_action===n.base_actions.WALK?(this.sprite.body.velocity.temp_x=t*this.x_speed*(this.sprite_info.walk_speed+this.extra_speed)|0,this.sprite.body.velocity.temp_y=t*this.y_speed*(this.sprite_info.walk_speed+this.extra_speed)|0):this.current_action===n.base_actions.CLIMB?(this.sprite.body.velocity.temp_x=t*this.x_speed*this.sprite_info.climb_speed|0,this.sprite.body.velocity.temp_y=t*this.y_speed*this.sprite_info.climb_speed|0):this.current_action===n.base_actions.IDLE&&(this.sprite.body.velocity.y=this.sprite.body.velocity.x=0)}apply_speed(){[n.base_actions.WALK,n.base_actions.DASH,n.base_actions.CLIMB].includes(this.current_action)&&(this.sprite.body.velocity.x=this.sprite.body.velocity.temp_x,this.sprite.body.velocity.y=this.sprite.body.velocity.temp_y)}set_speed(t,e){this.x_speed=void 0===t?this.x_speed:t,this.y_speed=void 0===e?this.y_speed:e,this.calculate_speed(),this.apply_speed()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fire_push_movement=e.target_only_push=e.normal_push=void 0;const s=i(1),n=i(4),a=i(0),r=i(11);function o(t,e,i,n,r,o=!1,c=!0,l){let d;if(!o){let t=e.hero.sprite.x+(-i.sprite.y-i.sprite.x),s=-e.hero.sprite.x+(-i.sprite.y+i.sprite.x);-e.hero.sprite.y>=t&&-e.hero.sprite.y>=s?d=a.directions.down:-e.hero.sprite.y<=t&&-e.hero.sprite.y>=s?d=a.directions.left:-e.hero.sprite.y<=t&&-e.hero.sprite.y<=s?d=a.directions.up:-e.hero.sprite.y>=t&&-e.hero.sprite.y<=s&&(d=a.directions.right)}if(o||d===e.hero.trying_to_push_direction){o||(e.hero.pushing=!0,e.hero.current_action=a.base_actions.PUSH,e.hero.set_action()),t.physics.p2.pause();let d=0,p=0,u=0,g=0;switch(e.hero.trying_to_push_direction){case a.directions.up:g=-1,p=-16;break;case a.directions.down:g=1,p=16;break;case a.directions.left:u=-1,d=-16;break;case a.directions.right:u=1,d=16}_(e,i,u,g);let m=[i.sprite.body];o||m.push(e.hero.shadow,e.hero.sprite.body);const y=i.current_x,b=i.current_y;i.current_x+=u,i.current_y+=g;let f=[];void 0!==r&&r(d,p),i.custom_data.blocking_stair_block&&(i.custom_data.blocking_stair_block.x+=d,i.custom_data.blocking_stair_block.y+=p);for(let n=0;n<m.length;++n){let r,o=m[n],c=o.x+d,w=o.y+p;o!==e.hero.shadow&&o!==e.hero.sprite.body||(0===d?c=e.map.sprite.tileWidth*(y+u+.5):0===p&&(w=e.map.sprite.tileHeight*(b+g+.5))),f.push(new Promise(t=>{r=t}));const v=t.add.tween(o).to({x:c,y:w},s.PUSH_TIME,Phaser.Easing.Linear.None,!0);l&&v.onUpdateCallback(l),v.onComplete.addOnce(()=>{let s=!1;n===m.length-1&&i.object_drop_tiles.forEach(n=>{if(n.x===i.current_x&&n.y===i.current_y){s=!0;const o=(n.dest_y-i.current_y)*e.map.sprite.tileHeight;return _(e,i,0,n.dest_y-i.current_y),i.current_y=n.dest_y,i.change_collider_layer(e,n.destination_collider_layer),void t.add.tween(i.sprite.body).to({y:i.sprite.body.y+o},n.animation_duration,Phaser.Easing.Quadratic.In,!0).onComplete.addOnce(()=>{n.dust_animation?(e.hero.current_action=a.base_actions.IDLE,e.hero.play(e.hero.current_action,a.reverse_directions[e.hero.current_direction]),h(t,e,i,r)):r()})}}),s||r()})}Promise.all(f).then(()=>{e.hero.pushing=!1,c&&t.physics.p2.resume(),void 0!==n&&n()})}}function _(t,e,i,s){let o=e.get_events();for(let _=0;_<o.length;++_){let h=o[_];t.map.events[h.location_key]=t.map.events[h.location_key].filter(t=>t.id!==h.id),0===t.map.events[h.location_key].length&&delete t.map.events[h.location_key];let c=h.x,l=h.y,d=c+i,p=l+s;const u=n.TileEvent.get_location_key(d,p);h.x=d,h.y=p,h.location_key=u,u in t.map.events||(t.map.events[u]=[]),t.map.events[u].push(h);const g=a.get_surroundings(d,p,!1,2);r.JumpEvent.active_jump_surroundings(t,g,e.collider_layer_shift+e.base_collision_layer);const m=a.get_surroundings(c,l,!1,2);for(let i=0;i<m.length;++i){const s=m[i],r=n.TileEvent.get_location_key(s.x,s.y);if(r in t.map.events)for(let i=0;i<t.map.events[r].length;++i){const o=t.map.events[r][i];if(o.type===n.event_types.JUMP){const t=e.collider_layer_shift+e.base_collision_layer;o.activation_collision_layers.includes(t)&&!1===o.dynamic&&o.deactivate_at(a.get_opposite_direction(s.direction))}}}}}function h(t,e,i,n){let a=new Array(7),r=new Array(7);const o=(i.current_x+.5)*e.map.sprite.tileWidth,_=(i.current_y+.5)*e.map.sprite.tileHeight,h=e.info.misc_sprite_base_list.dust;for(let n=0;n<7;++n){const c=(Math.PI+s.degree60)*n/6-s.degree30,l=o+18*Math.cos(c),d=_+18*Math.sin(c);let p=e.npc_group.create(o,_,"dust");(c<0||c>Math.PI)&&e.npc_group.setChildIndex(p,e.npc_group.getChildIndex(i.sprite)),p.anchor.setTo(.5,.5),t.add.tween(p).to({x:l,y:d},400,Phaser.Easing.Linear.None,!0),r[n]=p,h.setAnimation(p,"dust");const u=h.getAnimationKey("dust","spread");let g;a[n]=new Promise(t=>{g=t}),p.animations.getAnimation(u).onComplete.addOnce(g),p.animations.play(u)}Promise.all(a).then(()=>{r.forEach(t=>{e.npc_group.remove(t,!0)}),n()})}e.normal_push=function(t,e,i){!e.hero.trying_to_push||![a.directions.up,a.directions.down,a.directions.left,a.directions.right].includes(e.hero.trying_to_push_direction)||e.hero.trying_to_push_direction!==e.hero.current_direction||e.hero.casting_psynergy||e.hero.jumping||e.in_battle||o(t,e,i),e.hero.trying_to_push=!1,e.hero.push_timer=null},e.target_only_push=function(t,e,i,s,n,a=!0,r){o(t,e,i,n,s,!0,a,r)},e.fire_push_movement=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DialogManager=void 0;const s=i(1),n=i(0),a=i(2);e.DialogManager=class{constructor(t,e,i=!0){this.game=t,this.data=e,this.italic_font=i,this.parts=null,this.step=0,this.finished=!1,this.avatar=null,this.window=null,this.avatar_window=null,this.hero_direction=n.directions.down,this.dialog_crystal_sprite_base=this.data.info.misc_sprite_base_list.dialog_crystal;const s=this.dialog_crystal_sprite_base.getActionKey("dialog_crystal");this.dialog_crystal=this.game.add.sprite(0,0,s),this.dialog_crystal_sprite_base.setAnimation(this.dialog_crystal,"dialog_crystal"),this.dialog_crystal_anim_key=this.dialog_crystal_sprite_base.getAnimationKey("dialog_crystal","rotate"),this.dialog_crystal.visible=!1,this.dialog_crystal_tween=null,this.show_crystal=!1}update_position(){this.avatar&&this.avatar_window.update(!0),this.window.update(!0)}get_dialog_window_position(t,e){const i=s.GAME_WIDTH-t>>1;let a=s.MAX_DIAG_WIN_HEIGHT-e>>1;return[n.directions.up,n.directions.up_left,n.directions.up_right].includes(this.hero_direction)||(a=s.GAME_HEIGHT-(s.MAX_DIAG_WIN_HEIGHT+4)+a),{x:i,y:a}}get_avatar_position(t){const e=(this.parts[this.step].width>>2)+t.x|0;let i;return i=t.y>=s.GAME_HEIGHT>>1?t.y-s.AVATAR_SIZE-8:t.y+this.parts[this.step].height+4,{x:e,y:i}}set_avatar(t){this.avatar=t}set_hero_direction(t){void 0!==t&&(this.hero_direction=t)}next(t,e,i){if(this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.step>=this.parts.length)return this.finished=!0,this.window.destroy(!0,t.bind(this,this.finished)),void this.dialog_crystal.destroy();this.window&&(this.window.destroy(!1),this.window=null),this.mount_window(t,e,i),++this.step}mount_window(t,e,i){this.dialog_crystal.visible=!1;let n=this.get_dialog_window_position(this.parts[this.step].width,this.parts[this.step].height);if(e&&void 0!==e.x&&(n.x=e.x),e&&void 0!==e.y&&(n.y=e.y),this.window=new a.Window(this.game,n.x,n.y,this.parts[this.step].width,this.parts[this.step].height,!1),this.window.show(((t,e,i)=>{this.window.set_text(this.parts[t].lines,void 0,void 0,void 0,e,!0).then(()=>{if(t<this.parts.length-1||this.show_crystal){this.dialog_crystal.visible=!0,this.dialog_crystal.x=this.window.real_x+this.parts[t].width-this.dialog_crystal.width,this.dialog_crystal.y=this.window.real_y+this.parts[t].height;const e=this.dialog_crystal.parent;e.setChildIndex(this.dialog_crystal,e.getChildIndex(this.window.group)),this.dialog_crystal.play(this.dialog_crystal_anim_key);const i=[this.dialog_crystal.y-(this.dialog_crystal.height>>1),this.dialog_crystal.y];this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop(),this.dialog_crystal_tween=this.game.tweens.create(this.dialog_crystal).to({y:i},1400,Phaser.Easing.Quadratic.InOut,!0,0,-1)}else this.dialog_crystal_tween&&this.dialog_crystal_tween.isRunning&&this.dialog_crystal_tween.stop();i&&i(this.finished)})}).bind(this,this.step,this.italic_font,t)),this.avatar){let t=this.get_avatar_position(n);i&&void 0!==i.x&&(t.x=i.x),i&&void 0!==i.y&&(t.y=i.y);const e=s.AVATAR_SIZE+4;this.avatar_window=new a.Window(this.game,t.x,t.y,e,e),this.avatar_window.create_at_group(4,4,"avatars",void 0,this.avatar),this.avatar_window.show()}}set_dialog(t,e,i){this.set_avatar(e),this.set_hero_direction(i);const a=s.MAX_DIAG_WIN_WIDTH-2*s.WINDOW_PADDING_H-s.INSIDE_BORDER_WIDTH;let r=t.split(" "),o=[],_=[],h=[],c=0,l=0;for(let t=0;t<r.length;++t){const e=r[t];if(c=n.get_text_width(this.game,h.join(" ")+e,this.italic_font),c>=a){const t=h.join(" ");_.push(t),l=Math.max(l,n.get_text_width(this.game,t,this.italic_font)),h=[],h.push(e),c=n.get_text_width(this.game,e,this.italic_font),_.length===s.MAX_LINES_PER_DIAG_WIN&&(o.push({lines:_.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+_.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES}),l=0,_=[])}else h.push(e)}h.length&&(l=Math.max(l,n.get_text_width(this.game,h.join(" "),this.italic_font)),_.push(h.join(" ")),o.push({lines:_.slice(),width:l+2*s.WINDOW_PADDING_H+s.INSIDE_BORDER_WIDTH+2,height:s.WINDOW_PADDING_TOP+s.WINDOW_PADDING_BOTTOM+_.length*(s.FONT_SIZE+s.SPACE_BETWEEN_LINES)-s.SPACE_BETWEEN_LINES})),this.parts=o}quick_next(t,e,i,s,n,a,r=!1){this.parts=null,this.step=0,this.window&&(this.window.destroy(!1),this.window=null),this.avatar_window&&(this.avatar_window.destroy(!1),this.avatar_window=null),this.show_crystal=r,this.set_dialog(t,i,s),this.mount_window(e,n,a)}kill_dialog(t,e=!1,i=!1){e||this.avatar_window&&this.avatar_window.destroy(!1),this.window&&(this.finished=!0,this.window.destroy(!0,t),i&&this.dialog_crystal.destroy())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NPC=e.npc_types=e.npc_movement_types=e.NPC_Sprite=void 0;const s=i(10),n=i(14),a=i(0),r=i(17),o=i(42);class _ extends s.SpriteBase{constructor(t,e){super(t,e)}}e.NPC_Sprite=_;e.npc_movement_types={IDLE:"idle",WALK_AROUND:"walk_around"},e.npc_types={NORMAL:"normal",INN:"inn",SHOP:"shop"};class h extends r.ControllableChar{constructor(t,e,i,s,n,a,r,o,_,h,c,l,d,p,u,g,m){super(t,e,i,s,n,a,r,o),this.npc_type=_,this.movement_type=h,this.message=c,this.thought_message=l,this.avatar=d,this.shop_key=p,this.base_collision_layer=u,this.talk_range_factor=void 0===g?3:g,this.events=[],this.set_events(m)}set_sprite_as_npc(){this.sprite.is_npc=!0}set_events(t){for(let e=0;e<t.length;++e){const i=t[e];switch(i.type){case n.event_types.BATTLE:this.events.push(new o.BattleEvent(this.game,this.data,i.background_key,i.enemy_party_key))}}}update(){this.movement_type===e.npc_movement_types.IDLE&&this.stop_char(!1),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),void 0!==this.data.dbs.npc_db[this.key_name].anchor_x?this.sprite.anchor.x=this.data.dbs.npc_db[this.key_name].anchor_x:this.reset_anchor("x"),void 0!==this.data.dbs.npc_db[this.key_name].anchor_y?this.sprite.anchor.y=this.data.dbs.npc_db[this.key_name].anchor_y:this.reset_anchor("y"),this.sprite.body.clearShapes(),this.body_radius=this.data.dbs.npc_db[this.key_name].body_radius;const e=this.body_radius<<1,i=a.mount_collision_polygon(e,-(e>>1),this.data.dbs.npc_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},i),this.sprite.body.setCollisionGroup(t.npc_collision_groups[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0}}e.NPC=h},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleStage=e.DEFAULT_POS_ANGLE=void 0;const n=i(1),a=i(0),r=i(13),o=i(7),_=i(3),h=n.GAME_WIDTH>>1,c=n.GAME_HEIGHT-35,l=.009*Math.PI,d=n.GAME_WIDTH/2-50,p=n.GAME_HEIGHT/50;e.DEFAULT_POS_ANGLE=.7551327;const u=[11,9,7,5,3,1,3,5,7,9,11],g=[.1,.2,.3,.4,.6,1,.6,.4,.3,.2,.1];class m{constructor(t,e,i,s,n,a,r){this.game=t,this.data=e,this.esc_propagation_priority=a,this.enter_propagation_priority=r,this.camera_angle={rad:-2.120575,spining:!1,update:this.update_sprite_properties.bind(this)},this.background_key=i,this.old_camera_angle=this.camera_angle.rad,this.battle_group=this.game.add.group(),this.crop_group=this.game.add.group(),this.group_enemies=this.game.add.group(),this.group_allies=this.game.add.group(),this.allies_info=s,this.enemies_info=n,this.allies_count=s.length,this.enemies_count=n.length,this.shift_from_middle_enemy=35*this.enemies_count*.5,this.shift_from_middle_ally=35*this.allies_count*.5,this.sprites=[],this.x=this.game.camera.x,this.y=this.game.camera.y,this.battle_group.x=this.x,this.battle_group.y=this.y,this.battle_group.scale.setTo(1.2,1.2),this.crop_group.x=this.x,this.crop_group.y=this.y,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.choosing_targets&&(this.data.enter_input.halt(),this.set_targets())},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.choosing_targets&&(this.data.esc_input.halt(),this.choosing_targets_finished(null))},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.choosing_targets&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.choosing_targets&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.choosing_targets&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.choosing_targets&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}set_targets(){let t,e;switch(this.target_type){case r.ability_target_types.ALLY:t=this.allies_count,e=this.allies_info;break;case r.ability_target_types.ENEMY:t=this.enemies_count,e=this.enemies_info;break;case r.ability_target_types.USER:t=this.ability_caster.fighter_type===o.fighter_types.ALLY?this.allies_count:this.enemies_count,e=this.ability_caster.fighter_type===o.fighter_types.ENEMY?this.allies_info:this.enemies_info}const i=_.zipWith(u.slice(this.range_cursor_position-(t>>1),this.range_cursor_position+(t>>1)+1).reverse(),e,(t,e)=>({magnitude:t>this.ability_range?null:t,target:e}));this.target_type===r.ability_target_types.USER?this.choosing_targets_callback(i):this.choosing_targets_finished(i)}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}set_change_timers(t){this.change_target(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_target.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}change_target(t,e=!0){this.target_type===r.ability_target_types.ENEMY&&(t*=-1);const i=this.target_type===r.ability_target_types.ALLY?this.allies_info:this.enemies_info,s=i.length,n=s%2?s>>1:(s>>1)-1;let a;do{this.range_cursor_position+=t,0===t&&(t=-1);a=n+(this.range_cursor_position-(u.length>>1)),a>=s?(this.range_cursor_position=(u.length>>1)-n,a=0):a<0&&(this.range_cursor_position=(u.length>>1)+n+ +!(s%2),a=s-1)}while(i[a].instance.has_permanent_status(o.permanent_status.DOWNED));this.set_battle_cursors_position(e)}initialize_sprites(){this.black_bg=this.game.add.graphics(0,0),this.battle_group.add(this.black_bg),this.black_bg.beginFill(0,1),this.black_bg.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT),this.black_bg.endFill(),this.battle_bg=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.battle_bg2=this.game.add.tileSprite(0,17,n.GAME_WIDTH,120,"battle_backgrounds",this.background_key),this.bg_height=this.battle_bg.height,this.battle_bg.scale.setTo(1,1),this.battle_bg2.scale.setTo(1,1);const t=(t,e,i,s,n)=>{const a=t.create(0,0,e.sprite_key);return a.anchor.setTo(.5,1),a.scale.setTo(e.scale,e.scale),a.ellipses_semi_major=d,a.ellipses_semi_minor=p,a.data.is_Ally=i,n.setAnimation(a,"battle"),a.animations.play(s),this.sprites.push(a),a};this.allies_info.forEach(e=>{const i=t(this.group_allies,e,!0,"battle_back",this.data.info.main_char_list[e.instance.key_name].sprite_base);e.sprite=i}),this.enemies_info.forEach(e=>{const i=t(this.group_enemies,e,!1,"battle_front",this.data.info.enemies_list[e.instance.key_name].sprite_base);e.sprite=i}),this.first_ally_char=this.group_allies.children[0],this.last_ally_char=this.group_allies.children[this.allies_count-1],this.first_enemy_char=this.group_enemies.children[0],this.last_enemy_char=this.group_enemies.children[this.enemies_count-1]}intialize_crop_rectangles(){this.upper_rect=this.game.add.graphics(0,0),this.crop_group.add(this.upper_rect),this.upper_rect.beginFill(0,1),this.upper_rect.drawRect(0,0,n.GAME_WIDTH,n.GAME_HEIGHT>>1),this.upper_rect.endFill();const t=17+(this.bg_height>>1)+2;this.lower_rect=this.game.add.graphics(0,t),this.crop_group.add(this.lower_rect),this.lower_rect.beginFill(0,1),this.lower_rect.drawRect(0,0,n.GAME_WIDTH,2+(n.GAME_HEIGHT>>1)),this.lower_rect.endFill()}initialize_stage(t){this.choosing_actions=!1,this.choosing_targets=!1,this.right_pressed=!1,this.left_pressed=!1,this.initialize_sprites(),this.intialize_crop_rectangles(),this.battle_group.add(this.battle_bg),this.battle_group.add(this.battle_bg2),this.battle_group.add(this.group_enemies),this.battle_group.add(this.group_allies),this.game.add.tween(this.upper_rect).to({height:17},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.lower_rect).to({y:17+this.bg_height-1,height:n.GAME_HEIGHT-this.bg_height-17+1},1500,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},1500,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{t&&t()}),this.game.add.tween(this.battle_group.scale).to({x:1,y:1},1500,Phaser.Easing.Linear.None,!0)}set_stage_default_position(){return s(this,void 0,void 0,(function*(){let t;const i=new Promise(e=>{t=e});this.game.add.tween(this.camera_angle).to({rad:e.DEFAULT_POS_ANGLE},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(t),yield i}))}set_choosing_action_position(){this.choosing_actions=!0,this.battle_bg2.x=0,this.battle_bg2.scale.setTo(2,2),this.battle_bg2.y=1*-this.battle_bg.height+17- -3;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?t:this.enemies_count-1-(t-this.allies_count),s=(e.data.is_Ally?88:106-40*(this.enemies_count>>1))+40*i,n=e.data.is_Ally?160:98;e.x=s,e.y=n;const a=e.scale.x+.2*Math.sign(e.scale.x),r=e.scale.y+.2*Math.sign(e.scale.y);e.scale.setTo(a,r)}}reset_positions(){this.battle_bg2.scale.setTo(1,1),this.battle_bg2.y=17;for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.scale.x-.2*Math.sign(e.scale.x),s=e.scale.y-.2*Math.sign(e.scale.y);e.scale.setTo(i,s)}}set_battle_cursors_position(t=!0){const e=this.target_type===r.ability_target_types.ALLY?this.allies_info:this.enemies_info,i=e.length%2?e.length>>1:(e.length>>1)-1,s=this.range_cursor_position-(u.length>>1);this.cursors.forEach((n,a)=>{let r=a-((this.cursors.length>>1)-i)+s;const _=e[r];if(_&&!_.instance.has_permanent_status(o.permanent_status.DOWNED)){const e=_.sprite,i=g[this.range_cursor_position-s-(this.cursors.length>>1)+a];n.scale.setTo(i,i),n.alpha=1,this.cursors_tweens[a]&&this.cursors_tweens[a].stop();const r=e.x,o=e.y-e.height-5;t?this.game.add.tween(n).to({centerX:r,y:o},85,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0)}):(n.centerX=r,n.y=o,this.cursors_tweens[a]=this.game.add.tween(n).to({y:n.y-4},100,Phaser.Easing.Linear.None,!0,0,-1,!0))}else{n.alpha=0,r=r<0?0:e.length-1;const t=e[r].sprite;n.centerX=t.x,n.y=t.y-t.height}})}unset_battle_cursors(){this.cursors.forEach((t,e)=>{t.destroy(),this.cursors_tweens[e]&&this.cursors_tweens[e].stop()}),this.stop_timers()}choose_targets(t,e,i,s,n){this.choosing_targets_callback=n,this.range_cursor_position=u.length>>1,this.ability_range="all"===t?u[0]:t,this.ability_type=i,this.ability_caster=s,this.target_type=e,this.target_type===r.ability_target_types.USER?this.set_targets():this.game.add.tween(this.battle_group).to({y:this.battle_group.y+(this.target_type===r.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.ability_range;this.cursors=new Array(t),this.cursors_tweens=new Array(t).fill(null);for(let e=0;e<t;++e)this.cursors[e]=this.battle_group.create(0,0,"battle_cursor"),this.cursors[e].animations.add("anim"),this.cursors[e].animations.play("anim",40,!0);this.choosing_targets=!0,this.change_target(0,!1)})}choosing_targets_finished(t){this.game.add.tween(this.battle_group).to({y:this.battle_group.y-(this.target_type===r.ability_target_types.ALLY?-3:15)},150,Phaser.Easing.Linear.None,!0),this.choosing_targets=!1,this.unset_battle_cursors(),this.choosing_targets_callback(t)}prevent_camera_angle_overflow(){this.camera_angle.rad=a.range_360(this.camera_angle.rad)}update_stage(){if(!this.choosing_actions){if(!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad-=l,this.battle_bg.x-=2.4;else if(this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_UP)&&!this.game.input.keyboard.isDown(Phaser.Keyboard.PAGE_DOWN))this.camera_angle.rad+=l,this.battle_bg.x+=2.4;else{const t=a.range_360(this.camera_angle.rad)-a.range_360(this.old_camera_angle);this.battle_bg.x+=.4*this.battle_bg.width*t}this.old_camera_angle=this.camera_angle.rad,(this.battle_bg.x>this.battle_bg.width||this.battle_bg.x<-this.battle_bg.width)&&(this.battle_bg.x=this.battle_bg2.x),this.battle_bg.x>0?this.battle_bg2.x=this.battle_bg.x-this.battle_bg.width:this.battle_bg.x<0&&(this.battle_bg2.x=this.battle_bg.x+this.battle_bg.width),(Math.sin(this.camera_angle.rad)>0&&this.battle_group.getChildIndex(this.group_allies)<this.battle_group.getChildIndex(this.group_enemies)||Math.sin(this.camera_angle.rad)<0&&this.battle_group.getChildIndex(this.group_allies)>this.battle_group.getChildIndex(this.group_enemies))&&this.battle_group.swapChildren(this.group_enemies,this.group_allies),(Math.cos(this.camera_angle.rad)<0&&this.first_ally_char.z>this.last_ally_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_ally_char.z<this.last_ally_char.z)&&this.group_allies.reverse(),(Math.cos(this.camera_angle.rad)<0&&this.first_enemy_char.z<this.last_enemy_char.z||Math.cos(this.camera_angle.rad)>0&&this.first_enemy_char.z>this.last_enemy_char.z)&&this.group_enemies.reverse(),this.update_sprite_properties()}}update_sprite_properties(){for(let t=0;t<this.sprites.length;++t){const e=this.sprites[t],i=e.data.is_Ally?this.camera_angle.rad:this.camera_angle.rad+Math.PI,s=m.get_angle(i),n=m.ellipse_position(e,s,!0),a=m.ellipse_position(e,s,!1),r=e.data.is_Ally?this.shift_from_middle_ally:this.shift_from_middle_enemy,o=e.data.is_Ally?t:t-this.allies_count;e.x=n+(35*o-r+17)*Math.sin(i),e.y=a;const _=e.data.is_Ally?this.allies_info[o]:this.enemies_info[o],h=m.get_scale(_.scale,i);e.scale.setTo(h,h),Math.sin(i)>0&&!e.animations.currentAnim.name.endsWith("back")?e.animations.play(e.animations.currentAnim.name.replace("front","back")):Math.sin(i)<=0&&!e.animations.currentAnim.name.endsWith("front")&&e.animations.play(e.animations.currentAnim.name.replace("back","front")),Math.cos(i)>0&&e.scale.x<0?e.scale.setTo(e.scale.x,e.scale.y):Math.cos(i)<=0&&e.scale.x>0&&e.scale.setTo(-e.scale.x,e.scale.y)}}unset_stage(t,e){this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{t&&t(),this.signal_bindings.forEach(t=>{t.detach()}),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.battle_group.destroy(),this.upper_rect.height=this.lower_rect.height=n.GAME_HEIGHT>>1,this.upper_rect.y=0,this.lower_rect.y=n.GAME_HEIGHT>>1;this.game.camera.resetFX(),this.game.add.tween(this.upper_rect).to({height:0},300,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{e&&e(),this.crop_group.destroy()}),this.game.add.tween(this.lower_rect).to({height:0,y:n.GAME_HEIGHT},300,Phaser.Easing.Linear.None,!0)},this)}static ellipse(t,e,i){return(e=void 0===e?d:e)*(i=void 0===i?p:i)/Math.sqrt(Math.pow(i*Math.cos(t),2)+Math.pow(e*Math.sin(t),2))}static ellipse_position(t,e,i){if(i){const i=t.ellipses_semi_major;return h+m.ellipse(e,i,p)*Math.cos(e)}{const i=t.ellipses_semi_minor;return c+m.ellipse(e,d,i)*Math.sin(e)}}static get_angle(t){return t+Math.atan((p-d)*Math.tan(t)/(d+p*Math.pow(Math.tan(t),2)))}static get_scale(t,e){return(Math.sin(e)/7+.8334)*t}}e.BattleStage=m},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsStatusWindow=void 0;const s=i(2),n=i(0),a=i(1),r=i(5),o=i(12),_=i(3),h=a.BLUE_FONT_COLOR,c=a.RED_FONT_COLOR,l=[0,16],d=[1,9],p=[20,36],u=[8,16];e.CharsStatusWindow=class{constructor(t,e,i=!1,r=!1){this.game=t,this.data=e,this.djinni_info=i,this.compact=r,this.name_y=8,this.compact&&(this.name_y=0),this.status_win_height=35,this.compact&&(this.status_win_height=24);const o=_.clamp(this.data.info.party_data.members.length,4);if(this.status_win_width=49*o+4,this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window=new s.Window(this.game,this.status_win_x,0,this.status_win_width,this.status_win_height,!1),this.status_header_width=n.get_text_width(this.game,"HP "),this.info_sprites={},this.set_chars_info(),this.djinni_info){this.standby_count_text={},this.stars_group=this.game.add.group();for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=t%2,s=+(t>1);this.stars_group.create(l[i],d[s],e+"_star"),this.standby_count_text[e]=this.status_window.set_text_in_position("",p[i],this.name_y+u[s],!0)}this.status_window.add_sprite_to_group(this.stars_group)}}update_position(t=!1){this.status_window.update(t)}set_chars_info(){const t=this.data.info.party_data.members.slice(0,4);for(let e=0;e<t.length;++e){let i={group:null,name:null,hp_bar_graphics:null,hp_bar_damage_graphics:null,hp_header:null,hp:null,pp_bar_graphics:null,pp_bar_damage_graphics:null,pp_header:null,pp:null};const s=t[e],n=49*e+8,r=s.key_name+"_status";i.group=this.status_window.define_internal_group(r),i.name=this.status_window.set_text_in_position(s.name,n,this.name_y,!1,!1,this.status_window.font_color,this.compact,r);let o=this.name_y+a.FONT_SIZE,_=o+a.FONT_SIZE-3;i.hp_bar_graphics=this.game.add.graphics(n,_),i.hp_bar_graphics.beginFill(h,1),i.hp_bar_graphics.drawRect(0,0,43,3),i.hp_bar_graphics.endFill(),i.group.add(i.hp_bar_graphics),i.hp_bar_damage_graphics=this.game.add.graphics(0,0),i.hp_bar_damage_graphics.data.default_y=_,i.group.add(i.hp_bar_damage_graphics),i.hp_header=this.status_window.set_text_in_position("HP",n,o,!1,!1,this.status_window.font_color,!1,r);const c=n+40;i.hp=this.status_window.set_text_in_position(s.current_hp.toString(),c,o,!0,!1,this.status_window.font_color,!1,r),o=this.name_y+2*a.FONT_SIZE,_=o+a.FONT_SIZE-3,i.pp_bar_graphics=this.game.add.graphics(n,_),i.pp_bar_graphics.beginFill(h,1),i.pp_bar_graphics.drawRect(0,0,43,3),i.pp_bar_graphics.endFill(),i.group.add(i.pp_bar_graphics),i.pp_bar_damage_graphics=this.game.add.graphics(0,0),i.pp_bar_damage_graphics.data.default_y=_,i.group.add(i.pp_bar_damage_graphics),i.pp_header=this.status_window.set_text_in_position("PP",n,o,!1,!1,this.status_window.font_color,!1,r),i.pp=this.status_window.set_text_in_position(s.current_pp.toString(),c,o,!0,!1,this.status_window.font_color,!1,r),this.info_sprites[s.key_name]=i}}update_chars_info(){let t=!1;if(this.djinni_info)if(this.standby_djinni=r.Djinn.get_standby_djinni(this.data.info.djinni_list,o.MainChar.get_active_players(this.data.info.party_data,4)),t=_.some(this.standby_djinni,Boolean),t){this.stars_group.alpha=1,this.stars_group.x=7,this.stars_group.y=this.name_y+a.FONT_SIZE;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t],i=e in this.standby_djinni?this.standby_djinni[e].toString():"0";this.status_window.update_text(i,this.standby_count_text[e],void 0,this.name_y+u[+(t>1)])}}else{for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.status_window.update_text("",this.standby_count_text[e])}this.stars_group.alpha=0}const e=_.clamp(this.data.info.party_data.members.length,4);this.status_win_width=49*e+4+(t?36:0),this.status_win_x=a.GAME_WIDTH-this.status_win_width-a.INSIDE_BORDER_WIDTH-a.OUTSIDE_BORDER_WIDTH,this.status_window.update_size({width:this.status_win_width}),this.status_window.update_position({x:this.status_win_x}),this.status_window.clear_separators();let i=[];for(let s=0;s<e;++s){let e=this.data.info.party_data.members[s];i.push(e.key_name);let n=this.info_sprites[e.key_name];n.group.visible=!0;const a=49*s+8+(t?36:0);this.status_window.update_text(e.name,n.name,a);const r=a+40;this.status_window.update_text(e.current_hp,n.hp,r),this.status_window.update_text(e.current_pp,n.pp,r),this.status_window.update_text_position({x:a},n.hp_header),this.status_window.update_text_position({x:a},n.pp_header),n.hp_bar_graphics.x=a,n.pp_bar_graphics.x=a;const o=43*(1-e.current_hp/e.max_hp)|0,_=a+43-o;n.hp_bar_damage_graphics.clear(),n.hp_bar_damage_graphics.beginFill(c,1),n.hp_bar_damage_graphics.drawRect(_,n.hp_bar_damage_graphics.data.default_y,o,3),n.hp_bar_damage_graphics.endFill();const h=43*(1-e.current_pp/e.max_pp)|0,l=a+43-h;n.pp_bar_damage_graphics.clear(),n.pp_bar_damage_graphics.beginFill(c,1),n.pp_bar_damage_graphics.drawRect(l,n.pp_bar_damage_graphics.data.default_y,h,3),n.pp_bar_damage_graphics.endFill(),(0!==s||t)&&this.status_window.draw_separator(a-4,3,a-4,this.status_win_height-1)}for(let t in this.info_sprites){if(i.includes(t))continue;this.info_sprites[t].group.visible=!1}}show(){this.status_window.show()}close(){this.status_window.close()}destroy(){this.status_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.choose_right_class=e.Classes=void 0;const s=i(0),n=i(3);e.Classes=class{constructor(t,e,i,s,n,a,r,o,_,h,c,l,d,p,u){this.key_name=t,this.name=e,this.required_venus_level=i,this.required_mercury_level=s,this.required_mars_level=n,this.required_jupiter_level=a,this.hp_boost=r,this.pp_boost=o,this.atk_boost=_,this.def_boost=h,this.agi_boost=c,this.luk_boost=l,this.ability_level_pairs=d,this.class_type=p,this.vulnerabilities=void 0===u?[]:u}},e.choose_right_class=function(t,e,i,a,r,o,_){let h,c=[...i!==s.elements.VENUS?[{element:s.elements.VENUS,level:a}]:[],...i!==s.elements.MERCURY?[{element:s.elements.MERCURY,level:r}]:[],...i!==s.elements.MARS?[{element:s.elements.MARS,level:o}]:[],...i!==s.elements.JUPITER?[{element:s.elements.JUPITER,level:_}]:[]];h=c.every(t=>0===t.level)?i:n.maxBy(c,t=>t.level).element;const l=e[i][h];let d=Object.values(t).filter(t=>t.class_type===l);return d=d.filter(t=>t.required_venus_level<=a&&t.required_mercury_level<=r&&t.required_mars_level<=o&&t.required_jupiter_level<=_),n.sortBy(d,[t=>t.required_venus_level+t.required_mercury_level+t.required_mars_level+t.required_jupiter_level]).reverse()[0]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HorizontalMenu=void 0;const s=i(0),n=i(1),a=i(2),r=i(3),o=n.GAME_HEIGHT-24,_=24-n.OUTSIDE_BORDER_WIDTH-n.INSIDE_BORDER_WIDTH;e.HorizontalMenu=class{constructor(t,e,i,h,c,l,d,p,u,g=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.buttons_number=i.length,this.enter_propagation_priority=l,this.esc_propagation_priority=p;const m=s.get_text_width(this.game,r.maxBy(h,t=>t.length));this.title_window_width=void 0!==u?u:m+2*(n.WINDOW_PADDING_H+n.INSIDE_BORDER_WIDTH);const y=24*this.buttons_number+this.title_window_width+2*n.OUTSIDE_BORDER_WIDTH+2;this.dock_right=g,this.x=n.GAME_WIDTH-y,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new a.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,_),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.on_choose=void 0===c?()=>{}:c,this.on_cancel=void 0===d?()=>{}:d,this.right_pressed=!1,this.left_pressed=!1,this.signal_bindings=this.set_control()}set_control(){return[this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.menu_open&&this.menu_active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.menu_open&&this.menu_active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})]}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(n.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=n.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=24*(t+.5)|0,this.buttons[t].sprite.centerY=12}set_change_timers(t){this.change_button(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(Phaser.Timer.QUARTER>>1,this.change_button.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){this.buttons[this.selected_button_index].sprite.scale.setTo(1.2,1.2),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:1.3,y:1.3},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e,i=!0){let s;this.reset_button(),this.right_pressed=!1,this.left_pressed=!1,this.menu_active=i,this.group.alpha=1,this.selected_button_index=void 0===e?0:e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let n,a=new Promise(t=>{s=t});this.title_window.show(s);let r=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([a,r]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.stop_timers(),this.reset_button(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.right_pressed=!1,this.left_pressed=!1,this.menu_active=!0,this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.stop_timers(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy(),this.choose_timer_repeat.destroy(),this.choose_timer_start.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.get_enemy_instance=e.EnemyBase=e.Enemy=void 0;const s=i(10),n=i(7),a=i(0),r=i(3),o=i(1),_=i(8);class h extends n.Player{constructor(t,e){super(t.key_name,e||t.name),this.level=t.level,this.turns=t.turns,this.max_hp=t.max_hp,this.max_pp=t.max_pp,this.hp_recovery=t.hp_recovery,this.pp_recovery=t.pp_recovery,this.atk=t.atk,this.def=t.def,this.agi=t.agi,this.luk=t.luk,this.items=t.items,this.abilities=t.abilities,this.coins_reward=t.coins_reward,this.item_reward=t.item_reward,this.item_reward_chance=t.item_reward_chance,this.exp_reward=t.exp_reward,this.venus_level=t.venus_level,this.mercury_level=t.mercury_level,this.mars_level=t.mars_level,this.jupiter_level=t.jupiter_level,this.venus_power=t.venus_power,this.mercury_power=t.mercury_power,this.mars_power=t.mars_power,this.jupiter_power=t.jupiter_power,this.venus_resist=t.venus_resist,this.mercury_resist=t.mercury_resist,this.mars_resist=t.mars_resist,this.jupiter_resist=t.jupiter_resist,this.battle_scale=t.battle_scale,this.battle_animations_variations=Object.assign({},t.battle_animations_variations),this.fighter_type=n.fighter_types.ENEMY,this.class={name:"No Class",vulnerabilities:void 0===t.vulnerabilities?[]:t.vulnerabilities},this.current_exp=-1,this.effects=[],this.set_base_attributes()}set_base_attributes(){this.current_hp=this.max_hp,this.current_pp=this.max_pp,this.current_hp_recovery=this.hp_recovery,this.current_pp_recovery=this.pp_recovery,this.current_atk=this.atk,this.current_def=this.def,this.current_agi=this.agi,this.current_luk=this.luk,this.venus_level_current=this.venus_level,this.mercury_level_current=this.mercury_level,this.mars_level_current=this.mars_level,this.jupiter_level_current=this.jupiter_level,this.venus_power_current=this.venus_power,this.mercury_power_current=this.mercury_power,this.mars_power_current=this.mars_power,this.jupiter_power_current=this.jupiter_power,this.venus_resist_current=this.venus_resist,this.mercury_resist_current=this.mercury_resist,this.mars_resist_current=this.mars_resist,this.jupiter_resist_current=this.jupiter_resist}update_all(){this.set_base_attributes(),this.effects.forEach(t=>{switch(t.type){case _.effect_types.POWER:case _.effect_types.RESIST:case _.effect_types.MAX_HP:case _.effect_types.MAX_PP:case _.effect_types.ATTACK:case _.effect_types.DEFENSE:case _.effect_types.AGILITY:case _.effect_types.LUCK:t.apply_effect()}});for(let t=0;t<a.ordered_elements.length;++t){const e=a.ordered_elements[t],i=e+"_power_current",s=e+"_resist_current";this[i]=r.clamp(this[i],o.ELEM_ATTR_MIN,o.ELEM_ATTR_MAX),this[s]=r.clamp(this[s],o.ELEM_ATTR_MIN,o.ELEM_ATTR_MAX)}}}e.Enemy=h;class c extends s.SpriteBase{constructor(t){super(t,["battle"])}}e.EnemyBase=c,e.get_enemy_instance=function(t,e){return new h(t,t.name+e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InteractableObjects=e.InteractableObjects_Sprite=e.interactable_object_event_types=e.interactable_object_interaction_types=void 0;const s=i(10),n=i(4),a=i(1),r=i(0),o=i(11),_=i(27);e.interactable_object_interaction_types={ONCE:"once",INFINITE:"infinite"},e.interactable_object_event_types={JUMP:"jump",JUMP_AROUND:"jump_around",CLIMB:"climb"};class h extends s.SpriteBase{constructor(t,e){super(t,e)}}e.InteractableObjects_Sprite=h;e.InteractableObjects=class{constructor(t,e,i,s,n,a,r,o,_,h,c){this.game=t,this.data=e,this.key_name=i,this.x=s,this.y=n,this.sprite_info=null,this.allowed_tiles=a,this.base_collision_layer=r,this.collider_layer_shift=o,this.intermediate_collider_layer_shift=void 0===c?0:c,this.not_allowed_tiles=void 0===_?[]:_,this.object_drop_tiles=void 0===h?[]:h,this.events=new Set,this.events_info={},this.current_x=s,this.current_y=n,this.custom_data={collision_tiles_bodies:[]},this.collision_change_functions=[],this.color_filter=this.game.add.filter("ColorFilters")}set_sprite(t){this.sprite=t}position_allowed(t,e){if(this.data.map.interactable_objects.filter(i=>i.current_x===t&&i.current_y===e).length)return!1;for(let i=0;i<this.allowed_tiles.length;++i){const s=this.allowed_tiles[i];if(s.x===t&&s.y===e&&s.collision_layer===this.data.map.collision_layer)return!0}return!1}get_current_position(t){return{x:this.sprite.x/t.sprite.tileWidth|0,y:this.sprite.y/t.sprite.tileHeight|0}}change_collider_layer(t,e){this.sprite.body.removeCollisionGroup(t.collision.interactable_objs_collision_groups[this.base_collision_layer]),this.sprite.body.setCollisionGroup(t.collision.interactable_objs_collision_groups[e]),this.base_collision_layer=e,this.sprite.base_collision_layer=e,this.collision_change_functions.forEach(t=>{t()})}insert_event(t){this.events.add(t)}get_events(){return[...this.events].map(t=>n.TileEvent.get_event(t))}remove_event(t){this.events.delete(t)}creating_blocking_stair_block(t){const e=this.base_collision_layer+this.custom_data.block_stair_collider_layer_shift,i=(this.current_x+.5)*this.data.map.sprite.tileWidth,s=(this.current_y+1.5)*this.data.map.sprite.tileHeight-4;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes();const r=2*this.data.dbs.interactable_objects_db[this.key_name].body_radius;n.setRectangle(r,r,0,0),e in this.data.collision.interactable_objs_collision_groups||(this.data.collision.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup()),n.setCollisionGroup(this.data.collision.interactable_objs_collision_groups[e]),n.damping=a.MAP_DAMPING,n.angularDamping=a.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(t.hero_collision_group),this.custom_data.blocking_stair_block=n}initial_config(t){const e=this.data.npc_group.create(0,0,this.key_name+"_"+this.key_name);this.set_sprite(e),this.sprite.is_interactable_object=!0,this.sprite.roundPx=!0,this.sprite.base_collision_layer=this.base_collision_layer,this.sprite.interactable_object=this,void 0!==this.data.dbs.interactable_objects_db[this.key_name].send_to_back&&(this.sprite.send_to_back=this.data.dbs.interactable_objects_db[this.key_name].send_to_back),void 0!==this.data.dbs.interactable_objects_db[this.key_name].anchor_x&&(this.sprite.anchor.x=this.data.dbs.interactable_objects_db[this.key_name].anchor_x),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y;const i=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_x?this.data.dbs.interactable_objects_db[this.key_name].shift_x:0,s=void 0!==this.data.dbs.interactable_objects_db[this.key_name].shift_y?this.data.dbs.interactable_objects_db[this.key_name].shift_y:0;this.sprite.centerX=(this.x+1)*t.tileWidth+i;const n=this.data.dbs.interactable_objects_db[this.key_name].anchor_y*t.tileWidth*.5;this.sprite.centerY=this.y*t.tileWidth-n+s,this.sprite_info.setAnimation(this.sprite,this.key_name);const a=this.data.dbs.interactable_objects_db[this.key_name].initial_animation;this.sprite.animations.play(this.key_name+"_"+a)}initialize_related_events(t,i){const s=this.get_current_position(i);let n=s.x,a=s.y;for(let i=0;i<this.data.dbs.interactable_objects_db[this.key_name].events.length;++i){const s=this.data.dbs.interactable_objects_db[this.key_name].events[i];n+=void 0!==s.x_shift?s.x_shift:0,a+=void 0!==s.y_shift?s.y_shift:0;let r=void 0!==s.collider_layer_shift?s.collider_layer_shift:0;r=void 0!==this.collider_layer_shift?this.collider_layer_shift:r,this.collider_layer_shift=r;const o=void 0===s.active||s.active,_=this.base_collision_layer+r;switch(s.type){case e.interactable_object_event_types.JUMP:this.set_jump_type_event(s,n,a,o,_,t);break;case e.interactable_object_event_types.JUMP_AROUND:this.set_jump_around_event(s,n,a,o,_,t);break;case e.interactable_object_event_types.CLIMB:this.set_stair_event(s,n,a,o,_,t)}}}not_allowed_tile_test(t,e){for(let i=0;i<this.not_allowed_tiles.length;++i){const s=this.not_allowed_tiles[i];if(s.x===t&&s.y===e)return!0}return!1}set_jump_type_event(t,e,i,s,a,_){if(this.not_allowed_tile_test(e,i))return;const h=n.TileEvent.get_location_key(e,i);h in _||(_[h]=[]);const c=new o.JumpEvent(this.game,this.data,e,i,[r.directions.up,r.directions.down,r.directions.right,r.directions.left],[a],t.dynamic,s,void 0===t.is_set||t.is_set);_[h].push(c),this.insert_event(c.id),this.events_info[t.type]=t,this.collision_change_functions.push(()=>{c.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift]})}set_jump_around_event(t,e,i,s,a,_){let h=void 0===t.is_set||t.is_set;r.get_surroundings(e,i).forEach((e,i)=>{if(this.not_allowed_tile_test(e.x,e.y))return;const c=n.TileEvent.get_location_key(e.x,e.y);if(c in _)for(let t=0;t<_[c].length;++t){const e=_[c][t];e.type===n.event_types.JUMP&&e.is_set&&e.activation_collision_layers.includes(a)&&(h=!1)}else _[c]=[];const l=new o.JumpEvent(this.game,this.data,e.x,e.y,[r.directions.right,r.directions.left,r.directions.down,r.directions.up][i],[this.base_collision_layer],t.dynamic,s,h);_[c].push(l),this.insert_event(l.id),this.collision_change_functions.push(()=>{l.activation_collision_layers=[this.base_collision_layer]})}),this.events_info[t.type]=t}set_stair_event(t,e,i,s,a,o){[{x:e,y:i+1,activation_directions:[r.directions.up],activation_collision_layers:[this.base_collision_layer],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}},{x:e,y:i,activation_directions:[r.directions.down],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:this.base_collision_layer,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer}},{x:e,y:i+t.last_y_shift+1,activation_directions:[r.directions.up],activation_collision_layers:[this.base_collision_layer+this.intermediate_collider_layer_shift],change_to_collision_layer:a,climbing_only:!0,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.intermediate_collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.collider_layer_shift}},{x:e,y:i+t.last_y_shift,activation_directions:[r.directions.down],activation_collision_layers:[a],change_to_collision_layer:this.base_collision_layer+this.intermediate_collider_layer_shift,climbing_only:!1,collision_change_function:t=>{t.activation_collision_layers=[this.base_collision_layer+this.collider_layer_shift],t.change_to_collision_layer=this.base_collision_layer+this.intermediate_collider_layer_shift}}].forEach(e=>{const i=n.TileEvent.get_location_key(e.x,e.y);i in o||(o[i]=[]);const a=new _.ClimbEvent(this.game,this.data,e.x,e.y,e.activation_directions,e.activation_collision_layers,t.dynamic,s,e.change_to_collision_layer,t.is_set,this,e.climbing_only);o[i].push(a),this.insert_event(a.id),this.collision_change_functions.push(e.collision_change_function.bind(null,a))}),this.events_info[t.type]=t}config_body(t){if(0===this.data.dbs.interactable_objects_db[this.key_name].body_radius)return;const e=t.interactable_objs_collision_groups;this.game.physics.p2.enable(this.sprite,!1),this.sprite.anchor.y=this.data.dbs.interactable_objects_db[this.key_name].anchor_y,this.sprite.body.clearShapes();const i=this.data.dbs.interactable_objects_db[this.key_name].body_radius<<1,s=r.mount_collision_polygon(i,-(i>>1),this.data.dbs.interactable_objects_db[this.key_name].collision_body_bevel);this.sprite.body.addPolygon({optimalDecomp:!1,skipSimpleCheck:!0,removeCollinearPoints:!1},s),this.sprite.body.setCollisionGroup(e[this.base_collision_layer]),this.sprite.body.damping=1,this.sprite.body.angularDamping=1,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0,this.sprite.body.dynamic=!1,this.sprite.body.static=!0,void 0!==this.custom_data.block_stair_collider_layer_shift&&this.creating_blocking_stair_block(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ClimbEvent=void 0;const s=i(0),n=i(11),a=i(4),r=i(1);class o extends a.TileEvent{constructor(t,e,i,s,n,r,o,_,h,c,l,d){super(t,e,a.event_types.CLIMB,i,s,n,r,o,_,l),this.change_to_collision_layer=h,this.is_set=void 0===c||c,this.climbing_only=void 0!==d&&d}fire(t){this.data.hero.stop_by_colliding&&this.check_position()&&this.data.hero_movement_allowed()&&(this.data.hero.climbing||this.climbing_only?(this.data.hero.climbing&&!this.climbing_only||this.data.hero.climbing&&this.climbing_only)&&this.finish_climbing(t):this.start_climbing(t))}start_climbing(t){if(this.game.physics.p2.pause(),null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,t===s.directions.down){this.data.hero.play(s.base_actions.CLIMB,"turn").onComplete.addOnce(()=>{this.data.hero.shadow.visible=!1;const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.hero.sprite.y+25;this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},300,Phaser.Easing.Linear.None,!0);this.data.hero.play(s.base_actions.CLIMB,"start").onComplete.addOnce(()=>{this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0,this.data.hero.current_action=s.base_actions.CLIMB,this.dynamic&&this.create_climb_collision_bodies(),this.game.physics.p2.resume()})})}else if(t===s.directions.up){this.data.hero.play(s.base_actions.CLIMB,s.base_actions.IDLE);const t=Phaser.Timer.QUARTER/3,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.dynamic&&this.create_climb_collision_bodies(),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!0}),this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.CLIMB,this.data.hero.idle_climbing=!0}}finish_climbing(t){if(this.game.physics.p2.pause(),t===s.directions.up){for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];if(e.current_x===this.x&&e.current_y===this.y-1&&this.change_to_collision_layer===e.base_collision_layer)return void this.game.physics.p2.resume()}null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0;const t=this.data.hero.play(s.base_actions.CLIMB,"end");this.data.hero.shadow.visible=!1,this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y-15},170,Phaser.Easing.Linear.None,!0);const e=this.data.hero.sprite.y-15;this.game.time.events.add(170,()=>{this.data.hero.shadow.y=e,this.data.hero.shadow.visible=!0}),t.onComplete.addOnce(()=>{this.game.time.events.add(150,()=>{this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]),this.dynamic&&this.remove_climb_collision_bodies(!1),this.game.time.events.add(250,()=>{this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up),this.game.physics.p2.resume()},this)},this)})}else if(t===s.directions.down){null!==this.change_to_collision_layer&&this.data.collision.change_map_body(this.data,this.change_to_collision_layer),this.data.tile_event_manager.on_event=!0,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.up]);const t=Phaser.Timer.QUARTER/3;this.game.add.tween(this.data.hero.sprite.body).to({y:this.data.hero.sprite.y+15},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1,this.data.hero.climbing=!1}),this.dynamic&&this.remove_climb_collision_bodies(),this.data.hero.shadow.y=this.data.hero.sprite.y,this.data.hero.shadow.visible=!0,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.set_direction(s.directions.up)}}create_climb_collision_bodies(){this.origin_interactable_object.sprite.send_to_back=!0;const t=this.origin_interactable_object.events_info.climb.collision_tiles.map(t=>({x:this.origin_interactable_object.current_x+t.x,y:this.origin_interactable_object.current_y+t.y}));n.JumpEvent.unset_set_jump_collision(this.data),this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.map_collision_group,!0),this.data.map.collision_sprite.body.removeCollisionGroup(this.data.collision.hero_collision_group,!0);for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);for(let e=0;e<t.length;++e){const i=(t[e].x+.5)*this.data.map.sprite.tileWidth,s=(t[e].y+.5)*this.data.map.sprite.tileHeight;let n=this.game.physics.p2.createBody(i,s,0,!0);n.clearShapes(),n.setRectangle(this.data.map.sprite.tileWidth,this.data.map.sprite.tileHeight,0,0),n.setCollisionGroup(this.data.collision.dynamic_events_collision_group),n.damping=r.MAP_DAMPING,n.angularDamping=r.MAP_DAMPING,n.setZeroRotation(),n.fixedRotation=!0,n.dynamic=!1,n.static=!0,n.debug=this.data.hero.sprite.body.debug,n.collides(this.data.collision.hero_collision_group),this.origin_interactable_object.custom_data.collision_tiles_bodies.push(n)}}remove_climb_collision_bodies(t=!0){this.origin_interactable_object.sprite.send_to_back=!1,n.JumpEvent.set_jump_collision(this.game,this.data),t&&(this.data.hero.sprite.body.collides(this.data.collision.map_collision_group),this.data.map.collision_sprite.body.collides(this.data.collision.hero_collision_group));for(let t in this.data.collision.interactable_objs_collision_groups)this.data.hero.sprite.body.removeCollisionGroup(this.data.collision.interactable_objs_collision_groups[t],!0);this.data.map.collision_layer in this.data.collision.interactable_objs_collision_groups&&this.data.hero.sprite.body.collides(this.data.collision.interactable_objs_collision_groups[this.data.map.collision_layer]);let e=this.origin_interactable_object.custom_data.collision_tiles_bodies;for(let t=0;t<e.length;++t)e[t].destroy();e=[]}}e.ClimbEvent=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsMenu=void 0;const s=i(2),n=i(1),a=i(6),r=i(0),o=i(3),_=100-2*(n.OUTSIDE_BORDER_WIDTH+n.INSIDE_BORDER_WIDTH),h=_/4|0,c=_/4/2|0;e.CharsMenu=class{constructor(t,e,i,n,r,o,_){this.game=t,this.data=e,this.enter_propagation_priority=_,this.esc_propagation_priority=o,this.on_choose=void 0===i?()=>{}:i,this.on_change=void 0===n?()=>{}:n,this.on_cancel=void 0===r?()=>{}:r,this.base_window=new s.Window(this.game,0,0,100,36),this.group=t.add.group(),this.group.alpha=0,this.x=0,this.y=0,this.selected_y=0,this.unselected_y=-4,this.set_chars(),this.selected_button_index=0,this.line_index=0,this.menu_open=!1,this.menu_active=!1,this.set_control(),this.cursor_control=new a.CursorControl(this.game,!0,!1,this.get_max_per_line.bind(this),void 0,this.group,this.change_button.bind(this),void 0,this.get_selected_button_index.bind(this),this.set_selected_button_index.bind(this),void 0,void 0,this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}get_cursor_x(){return this.char_buttons[this.data.info.party_data.members[this.selected_button_index].key_name].x}get_cursor_y(){return 22}get_max_per_line(){return this.data.info.party_data.members.slice(4*this.line_index,4*(this.line_index+1)).length}get_selected_button_index(){return this.selected_button_index}set_selected_button_index(t){this.selected_button_index=t}is_open(){return this.menu_open}is_activated(){return this.menu_active}set_chars(){for(let t in this.char_buttons)this.char_buttons[t].destroy();this.char_buttons={};for(let t=0;t<o.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name]=this.group.create(0,0,e.sprite_base.getActionKey(r.base_actions.IDLE)),this.data.info.party_data.members[t].sprite_base.setAnimation(this.char_buttons[e.key_name],r.base_actions.IDLE),this.char_buttons[e.key_name].animations.play(e.sprite_base.getAnimationKey(r.base_actions.IDLE,r.reverse_directions[r.directions.down]))}}set_control(){this.data.enter_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.enter_input.halt(),this.on_choose(this.selected_button_index))},this,this.enter_propagation_priority),this.data.esc_input.add(()=>{this.menu_open&&this.menu_active&&(this.data.esc_input.halt(),this.on_cancel())},this,this.esc_propagation_priority)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y;for(let t=0;t<o.clamp(this.data.info.party_data.members.length,0,4);++t){const e=this.data.info.party_data.members[t];this.char_buttons[e.key_name].centerX=t*h+c+n.OUTSIDE_BORDER_WIDTH+n.INSIDE_BORDER_WIDTH,this.char_buttons[e.key_name].y=this.unselected_y}}change_button(t,e){this.reset_button(t),this.on_change(e),this.set_button(e)}set_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.selected_y}reset_button(t){this.char_buttons[this.data.info.party_data.members[t].key_name].y=this.unselected_y}set_char_by_index(t){this.reset_button(this.selected_button_index),this.selected_button_index=t,this.set_button(this.selected_button_index)}open(t,e=!0){Object.keys(this.char_buttons).length!=o.clamp(this.data.info.party_data.members.length,0,4)&&this.set_chars(),this.buttons_number=o.clamp(this.data.info.party_data.members.length,0,4),this.selected_button_index=void 0===t?0:t,this.line_index=0,this.update_position(),this.set_button(this.selected_button_index),this.base_window.show(void 0,!1),this.group.alpha=1,this.menu_active=e,this.cursor_control.activate(),this.menu_open=!0}close(){this.menu_open=!1,this.reset_button(this.selected_button_index),this.group.alpha=0,this.cursor_control.deactivate(),this.base_window.close(void 0,!1)}activate(){this.menu_active=!0,this.cursor_control.activate()}deactivate(){this.menu_active=!1,this.cursor_control.deactivate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BasicInfoWindow=void 0;const s=i(2);e.BasicInfoWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("HP",8,48),this.base_window.set_text_in_position("PP",8,56),this.base_window.set_text_in_position("/",56,49),this.base_window.set_text_in_position("/",56,56),this.base_window.set_text_in_position("Exp",8,73),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.class_text=this.base_window.set_text_in_position("0",8,40),this.hp_text=this.base_window.set_text_in_position("0",51,48,!0),this.pp_text=this.base_window.set_text_in_position("0",51,56,!0),this.max_hp_text=this.base_window.set_text_in_position("0",94,48,!0),this.max_pp_text=this.base_window.set_text_in_position("0",94,56,!0),this.exp_text=this.base_window.set_text_in_position("0",94,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}set_char(t){void 0!==t&&(this.char=t),this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.class.name,this.class_text),this.base_window.update_text(this.char.current_hp.toString(),this.hp_text),this.base_window.update_text(this.char.current_pp.toString(),this.pp_text),this.base_window.update_text(this.char.max_hp.toString(),this.max_hp_text),this.base_window.update_text(this.char.max_pp.toString(),this.max_pp_text),this.base_window.update_text(this.char.current_exp.toString(),this.exp_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name)}open(t,e){this.update_position(),this.avatar_group.alpha=1,this.set_char(t),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemPsynergyChooseWindow=void 0;const s=i(2),n=i(6),a=i(1),r=a.FONT_SIZE;e.ItemPsynergyChooseWindow=class{constructor(t,e,i,o,_,h,c){this.game=t,this.data=e,this.is_psynergy_window=i,this.element_list=this.is_psynergy_window?this.data.info.abilities_list:this.data.info.items_list,this.element_sprite_key=this.is_psynergy_window?"abilities_icons":"items_icons",this.on_choose=void 0===_?()=>{}:_,this.on_change=void 0===o?()=>{}:o,this.esc_propagation_priority=h+1,this.enter_propagation_priority=c+1,this.window=new s.Window(this.game,104,24,132,108),this.group=t.add.group(),this.group.alpha=0,this.set_control(),this.window_open=!1,this.window_activated=!1,this.close_callback=void 0,this.char=null,this.char_select_controls_sprites=[this.window.create_at_group(9,97,"shift_keyboard",0),this.window.create_at_group(8,96,"shift_keyboard"),this.window.create_at_group(32,97,"tab_keyboard",0),this.window.create_at_group(31,96,"tab_keyboard")];const l=this.window.set_text_in_position(": Change Char",49,96);this.char_select_controls_sprites.push(l.text,l.shadow),this.page_index=0,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.selected_element_index=0,this.elements=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_page_number.bind(this),this.get_elem_per_page.bind(this),this.group,this.page_change.bind(this),this.element_change.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_element_index.bind(this),this.set_element_index.bind(this),this.is_open.bind(this),this.is_activated.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.selected_element_tween=null,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.window.color,1),this.highlight_bar.drawRect(8+(a.ICON_WIDTH>>1),0,114,r),this.highlight_bar.endFill(),this.is_psynergy_window&&this.window.set_text_in_position("PP",102,8),this.window.init_page_indicator_bar()}get_element_key_name(t){return this.is_psynergy_window?this.elements[t]:this.elements[t].key_name}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_activated&&(this.data.esc_input.halt(),this.close())},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_activated&&(this.data.enter_input.halt(),this.is_psynergy_window&&this.element_list[this.elements[this.selected_element_index]].is_field_psynergy&&this.close(),this.is_psynergy_window||this.deactivate(),this.on_choose(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]))},this,this.enter_propagation_priority)}is_open(){return this.window_open}is_activated(){return this.window_activated}get_element_index(){return this.selected_element_index}set_element_index(t){this.selected_element_index=t}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_cursor_x(){return-5}get_cursor_y(){return 12+(a.ICON_HEIGHT>>1|0)+this.selected_element_index*(a.ICON_HEIGHT+1)}get_elem_per_page(){return this.elements.length}set_page_number(){let t;t=this.is_psynergy_window?this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).length:this.char.items.filter(t=>t.key_name in this.element_list).length,this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_page_number(){return this.page_number}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+24}set_elements(){this.clear_sprites(),this.item_objs=[],this.is_psynergy_window?this.elements=this.char.abilities.filter(t=>t in this.element_list&&(this.element_list[t].is_field_psynergy||this.element_list[t].effects_outside_battle)).slice(5*this.page_index,5*(this.page_index+1)):(this.elements=this.char.items.filter(t=>t.key_name in this.element_list&&(this.item_objs.push(t),!0)).slice(5*this.page_index,5*(this.page_index+1)),this.item_objs=this.item_objs.slice(5*this.page_index,5*(this.page_index+1))),this.selected_element_index>=this.elements.length&&(this.selected_element_index=this.elements.length-1,this.cursor_control.set_cursor_position());for(let t=0;t<this.elements.length;++t){const e=this.get_element_key_name(t),i=8,s=12+t*(a.ICON_HEIGHT+1),n=i+(a.ICON_WIDTH>>1),r=s+(a.ICON_HEIGHT>>1),o=8+a.ICON_WIDTH+(this.is_psynergy_window?2:4);if(this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].name,o,s+4)),this.is_psynergy_window)this.icon_sprites_in_window.push(this.window.create_at_group(n,r,this.element_sprite_key,void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);else{let i=this.game.add.group();if(i.create(0,0,this.element_sprite_key,e).anchor.setTo(.5,.5),this.item_objs[t].equipped&&i.create(0,0,"equipped"),this.item_objs[t].quantity>1){let e=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_objs[t].quantity.toString());i.add(e)}this.window.add_sprite_to_group(i),i.x=n,i.y=r,this.icon_sprites_in_window.push(i)}if(this.is_psynergy_window){const t=125;this.text_sprites_in_window.push(this.window.set_text_in_position(this.element_list[e].pp_cost,t,s+4,!0))}}}set_highlight_bar(){this.highlight_bar.alpha=1,this.highlight_bar.y=12+this.selected_element_index*(a.ICON_HEIGHT+1)+4}unset_highlight_bar(){this.highlight_bar.alpha=0}set_element_tween(t){this.selected_element_tween&&(this.selected_element_tween.stop(),this.icon_sprites_in_window[t].scale.setTo(1,1)),this.selected_element_tween=this.game.add.tween(this.icon_sprites_in_window[this.selected_element_index].scale).to({x:1.6,y:1.6},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0,0,-1,!0)}unset_element_tween(){this.selected_element_tween.stop(),this.selected_element_tween=null}element_change(t,e){this.set_element_tween(t),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(e)],this.is_psynergy_window?void 0:this.item_objs[e])}page_change(){this.set_elements(),this.set_element_tween(this.selected_element_index),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.set_page_indicator_highlight(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}hide(){this.window.group.alpha=0}show(){this.window.group.alpha=1}open(t,e,i){this.update_position(),this.char_index=t,this.char=this.data.info.party_data.members[t],this.set_page_number(),this.group.alpha=1,this.close_callback=e,this.window.show(i,!1),this.selected_element_index=0,this.page_index=0,this.set_elements(),this.window.set_page_indicator(this.page_number,this.page_index),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window_open=!0,this.window_activated=!0}close(){this.window.close(this.close_callback,!1),this.group.alpha=1,this.clear_sprites(),this.window.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.window_open=!1,this.window_activated=!1}activate(){this.set_page_number(),this.set_elements(),this.on_change(this.element_list[this.get_element_key_name(this.selected_element_index)],this.is_psynergy_window?void 0:this.item_objs[this.selected_element_index]),this.window.set_page_indicator(this.page_number,this.page_index),this.cursor_control.activate(),this.set_element_tween(),this.set_highlight_bar(),this.window_activated=!0,this.char_select_controls_sprites.forEach(t=>{t.alpha=1})}deactivate(){this.clear_sprites(),this.window.unset_page_indicator(),this.cursor_control.deactivate(),this.unset_element_tween(),this.unset_highlight_bar(),this.window_activated=!1,this.char_select_controls_sprites.forEach(t=>{t.alpha=0})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ButtonSelectMenu=void 0;const s=i(0),n=i(1),a=i(2),r=i(3),o=n.GAME_HEIGHT-24,_=24-n.OUTSIDE_BORDER_WIDTH-n.INSIDE_BORDER_WIDTH;e.ButtonSelectMenu=class{constructor(t,e,i,h,c,l,d,p=!1){this.game=t,this.data=e,this.buttons_keys=i,this.titles=h,this.on_cancel=c.on_cancel,this.on_press=c.on_press,this.control_manager=l,this.buttons_number=i.length,this.custom_scale=null;const u=s.get_text_width(this.game,r.maxBy(h,t=>t.length));this.title_window_width=void 0!==d?d:u+2*(n.WINDOW_PADDING_H+n.INSIDE_BORDER_WIDTH);const g=24*this.buttons_number+this.title_window_width+2*n.OUTSIDE_BORDER_WIDTH+2;this.dock_right=p,this.x=n.GAME_WIDTH-g,this.dock_right||(this.x=this.x>>1),this.y=o,this.title_window=new a.Window(this.game,this.x+24*this.buttons_number,this.y,this.title_window_width,_),this.group=t.add.group(),this.group.alpha=0,this.mount_buttons(),this.selected_button_index=0,this.menu_open=!1,this.menu_active=!1,this.group.width=0,this.group.height=0,this.selected_button_tween=null}set_control(){this.control_manager.initialized&&this.control_manager.reset(),this.control_manager.set_control(!0,!1,!0,!1,{right:this.next_button.bind(this),left:this.previous_button.bind(this),esc:this.on_cancel.bind(this),enter:this.on_press.bind(this)})}mount_buttons(t=[]){const e=this.buttons_keys.filter(e=>!t.includes(e));this.buttons_number=e.length;const i=24*this.buttons_number+this.title_window_width+(n.OUTSIDE_BORDER_WIDTH<<1)+2;this.x=n.GAME_WIDTH-i,this.dock_right||(this.x=this.x>>1),this.title_window.update_position({x:this.x+24*this.buttons_number}),this.buttons&&this.buttons.forEach(t=>{t.sprite.destroy()}),this.buttons=new Array(this.buttons_number);for(let t=0;t<this.buttons_number;++t)this.buttons[t]={sprite:this.group.create(0,0,"buttons",e[t]),title:this.titles[t]},this.buttons[t].sprite.anchor.setTo(.5,1),this.buttons[t].sprite.centerX=24*(t+.5)|0,this.buttons[t].sprite.centerY=12}change_button(t){this.reset_button(),this.selected_button_index=(this.selected_button_index+t)%this.buttons_number,this.selected_button_index<0&&(this.selected_button_index=this.buttons_number-1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}next_button(){this.change_button(1)}previous_button(){this.change_button(-1)}set_to_position(t){this.reset_button(),this.selected_button_index=t,this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}set_button(){let t=1.2,e=1.3;this.custom_scale&&(t=this.custom_scale.active_default,e=this.custom_scale.max_scale),this.buttons[this.selected_button_index].sprite.scale.setTo(t,t),this.buttons[this.selected_button_index].sprite.bringToTop(),this.selected_button_tween=this.game.add.tween(this.buttons[this.selected_button_index].sprite.scale).to({x:e,y:e},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0,0,-1,!0)}reset_button(){this.buttons[this.selected_button_index]&&this.buttons[this.selected_button_index].sprite.scale.setTo(1,1),this.selected_button_tween&&this.selected_button_tween.stop()}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y,this.title_window.update(!0)}open(t,e=0,i=!0,s){let n;this.reset_button(),this.set_control(),this.game.world.bringToTop(this.group),s&&(this.custom_scale=s),this.menu_active=i,this.group.alpha=1,this.selected_button_index=e,this.update_position(),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]);let a,r=new Promise(t=>{n=t});this.title_window.show(n);let o=new Promise(t=>{a=t});this.game.add.tween(this.group).to({width:24*this.buttons_number,height:24},Phaser.Timer.QUARTER>>2,Phaser.Easing.Linear.None,!0).onComplete.addOnce(a),Promise.all([r,o]).then(()=>{this.set_button(),this.menu_open=!0,t&&t()})}close(t,e=!0){if(this.menu_open=!1,this.reset_button(),this.control_manager.reset(),this.group.alpha=0,e){let e,i=new Promise(t=>{e=t});this.title_window.close(e);const s=Phaser.Timer.QUARTER>>2;let n,a=new Promise(t=>{n=t});this.game.add.tween(this.group).to({width:0,height:0},s,Phaser.Easing.Linear.None,!0).onComplete.addOnce(n),Promise.all([i,a]).then(void 0!==t?t:()=>{})}else this.title_window.close(void 0,!1),this.group.width=this.group.height=0,t&&t()}activate(){this.menu_active=!0,this.set_control(),this.buttons.forEach(t=>{t.sprite.alpha=1}),this.title_window.open||this.title_window.show(void 0,!1),this.title_window.set_text([[this.buttons[this.selected_button_index].title]]),this.set_button()}deactivate(t=!1){this.menu_active=!1,this.control_manager.reset(),this.reset_button(),t&&(this.buttons.forEach(t=>{t.sprite.alpha=0}),this.title_window.close(void 0,!1))}destroy(){this.title_window.destroy(!1),this.group.destroy()}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GoldenSun=void 0;const n=i(1),a=i(4),r=i(35),o=i(36),_=i(37),h=i(0),c=i(38),l=i(40),d=i(41),p=i(57),u=i(58);class g{constructor(){this.game=null,this.dbs={},this.info={},this.menu_open=!1,this.shop_open=!1,this.in_battle=!1,this.created=!1,this.force_stop_movement=!1,this.hero=null,this.collision=null,this.debug=null,this.main_menu=null,this.shop_menu=null,this.map=null,this.tile_event_manager=null,this.game_event_manager=null,this.battle_instance=null,this.enter_input=null,this.esc_input=null,this.shift_input=null,this.spacebar_input=null,this.fullscreen=!1,this.scale_factor=1,this.underlayer_group=null,this.npc_group=null,this.overlayer_group=null,this.game=new Phaser.Game(n.GAME_WIDTH,n.GAME_HEIGHT,Phaser.WEBGL,"game",{preload:this.preload.bind(this),create:this.create.bind(this),update:this.update.bind(this),render:this.render.bind(this),loadRender:this.loadRender.bind(this)},!1,!1)}preload(){o.load_all(this.game),this.game.time.advancedTiming=!0,this.game.stage.smoothed=!1,this.game.camera.roundPx=!0,this.game.renderer.renderSession.roundPixels=!0,this.game.camera.fade(0,1)}render_loading(){this.game.debug.text("Loading...",5,15,"#00ff00")}loadRender(){this.render_loading()}create(){return s(this,void 0,void 0,(function*(){p.load_databases(this.game,this.dbs),this.enter_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER).onDown,this.esc_input=this.game.input.keyboard.addKey(Phaser.Keyboard.ESC).onDown,this.shift_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onDown,this.spacebar_input=this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onDown,this.scale_factor=this.dbs.init_db.initial_scale_factor,this.debug=new r.Debug(this.game,this),this.debug.initialize_controls(),this.underlayer_group=this.game.add.group(),this.npc_group=this.game.add.group(),this.overlayer_group=this.game.add.group(),yield u.initialize_game_data(this.game,this),this.map=yield this.info.maps_list[this.dbs.init_db.map_key_name].mount_map(this.dbs.init_db.map_z_index),this.hero=new c.Hero(this.game,this,this.dbs.init_db.hero_key_name,this.dbs.init_db.x_tile_position,this.dbs.init_db.y_tile_position,this.dbs.init_db.initial_action,h.directions[this.dbs.init_db.initial_direction]),this.hero.set_sprite(this.npc_group,this.info.main_char_list[this.hero.key_name].sprite_base,this.map.sprite,this.map.collision_layer),this.hero.set_shadow("shadow",this.npc_group,this.map.collision_layer),this.hero.camera_follow(),this.hero.play(),this.collision=new _.Collision(this.game,this.hero),this.hero.config_body(this.collision),this.collision.config_collision_groups(this.map),this.map.config_all_bodies(this.collision,this.map.collision_layer),this.collision.config_collisions(this.map,this.map.collision_layer,this.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.tile_event_manager=new l.TileEventManager(this.game,this,this.hero,this.collision),this.game_event_manager=new d.GameEventManager(this.game,this),this.initialize_utils_controls(),this.created=!0,this.game.camera.resetFX()}))}initialize_utils_controls(){this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")),this.game.scale.fullScreenScaleMode=Phaser.ScaleManager.SHOW_ALL,this.game.input.onTap.add((t,e)=>{e&&this.game.scale.startFullScreen(!0)}),this.game.scale.onFullScreenChange.add(()=>{this.fullscreen=!this.fullscreen,this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize"))}),this.game.input.keyboard.addKey(Phaser.Keyboard.ONE).onDown.add(()=>{this.fullscreen||(this.scale_factor=1,this.game.scale.setupScale(n.GAME_WIDTH,n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.TWO).onDown.add(()=>{this.fullscreen||(this.scale_factor=2,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.THREE).onDown.add(()=>{this.fullscreen||(this.scale_factor=3,this.game.scale.setupScale(this.scale_factor*n.GAME_WIDTH,this.scale_factor*n.GAME_HEIGHT),window.dispatchEvent(new Event("resize")))}),this.game.input.keyboard.addKey(Phaser.Keyboard.Q).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.move.cast(this.hero,this.dbs.init_db.initial_shortcuts.move)}),this.game.input.keyboard.addKey(Phaser.Keyboard.W).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.frost.cast(this.hero,this.dbs.init_db.initial_shortcuts.frost)}),this.game.input.keyboard.addKey(Phaser.Keyboard.E).onDown.add(()=>{this.hero.in_action()||this.menu_open||this.in_battle||this.shop_open||this.info.field_abilities_list.growth.cast(this.hero,this.dbs.init_db.initial_shortcuts.growth)})}hero_movement_allowed(t=!0){return!(this.hero.in_action(t)||this.menu_open||this.shop_open||this.in_battle||this.tile_event_manager.on_event||this.force_stop_movement)}update(){if(this.created)if(this.hero_movement_allowed()){this.hero.update_tile_position(this.map.sprite),this.tile_event_manager.fire_triggered_events();const t=a.TileEvent.get_location_key(this.hero.tile_x_pos,this.hero.tile_y_pos);t in this.map.events&&this.tile_event_manager.check_tile_events(t,this.map),this.hero.update(this.map),this.map.update()}else this.hero.stop_char(!1),this.menu_open&&this.main_menu.horizontal_menu.menu_active?this.main_menu.update_position():this.shop_open&&this.shop_menu.horizontal_menu.menu_active?this.shop_menu.update_position():this.in_battle&&this.battle_instance.update();else this.render_loading()}render(){this.debug.set_debug_info(),this.game.time.frames%8==0&&this.debug.fill_key_debug_table(),this.game.time.frames%30==0&&this.debug.fill_stats_debug_table()}}e.GoldenSun=g;var m=new g;window.data=m},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Debug=void 0;const s=i(0);e.Debug=class{constructor(t,e){this.game=t,this.data=e,this.debug_physics=!1,this.grid=!1,this.debug_keys=!1,this.debug_stats=!1,this.show_fps=!1}initialize_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.D).onDown.add(()=>{this.toggle_debug_physics()}),this.game.input.keyboard.addKey(Phaser.Keyboard.G).onDown.add(()=>{this.toggle_grid()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.K).onDown.add(()=>{this.toggle_keys()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.S).onDown.add(()=>{this.toggle_stats()},this),this.game.input.keyboard.addKey(Phaser.Keyboard.F).onDown.add(()=>{this.toggle_fps()},this)}update_debug_physics(t){this.data.map.collision_sprite.body.debug=t;for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.body&&(i.body.debug=t))}}toggle_debug_physics(){this.data.hero.sprite.body.debug=!this.data.hero.sprite.body.debug,this.update_debug_physics(this.data.hero.sprite.body.debug);for(let t=0;t<this.data.collision.dynamic_jump_events_bodies.length;++t)this.data.collision.dynamic_jump_events_bodies[t].debug=!this.data.collision.dynamic_jump_events_bodies[t].debug;for(let t=0;t<this.data.map.interactable_objects.length;++t){const e=this.data.map.interactable_objects[t];e.custom_data.blocking_stair_block&&(e.custom_data.blocking_stair_block.debug=!e.custom_data.blocking_stair_block.debug)}this.debug_physics=!this.debug_physics}toggle_keys(){this.debug_keys=!this.debug_keys;const t=(t,e)=>{let i;switch(e.keyCode){case 38:if(e.repeat)return;i=document.querySelector("#key_debug .up").classList;break;case 40:if(e.repeat)return;i=document.querySelector("#key_debug .down").classList;break;case 39:if(e.repeat)return;i=document.querySelector("#key_debug .right").classList;break;case 37:if(e.repeat)return;i=document.querySelector("#key_debug .left").classList}i&&(t?i.add("pressed"):i.remove("pressed"))};this.debug_keys?(document.getElementById("key_debug").style.display="flex",document.onkeydown=t.bind(null,!0),document.onkeyup=t.bind(null,!1)):(document.getElementById("key_debug").style.display="none",document.onkeydown=void 0,document.onkeyup=void 0)}fill_key_debug_table(){this.debug_keys&&(document.querySelector("#key_debug table .direction").innerHTML=s.reverse_directions[this.data.hero.current_direction],document.querySelector("#key_debug table .action").innerHTML=this.data.hero.current_action,document.querySelector("#key_debug table .x").innerHTML=`${this.data.hero.tile_x_pos}/${this.data.hero.sprite.body.x.toFixed(3)}`,document.querySelector("#key_debug table .y").innerHTML=`${this.data.hero.tile_y_pos}/${this.data.hero.sprite.body.y.toFixed(3)}`,document.querySelector("#key_debug table .speed_x").innerHTML=this.data.hero.sprite.body.velocity.x.toFixed(3),document.querySelector("#key_debug table .speed_y").innerHTML=this.data.hero.sprite.body.velocity.y.toFixed(3),document.querySelector("#key_debug table .force_direction").innerHTML=this.data.hero.force_direction.toString(),document.querySelector("#key_debug table .stop_by_colliding").innerHTML=this.data.hero.stop_by_colliding.toString())}toggle_fps(){this.show_fps=!this.show_fps}toggle_grid(){this.grid=!this.grid}set_debug_info(){if(this.game.debug.text("",0,0),this.show_fps&&this.game.debug.text("FPS: "+this.game.time.fps||!1,5,15,"#00ff00"),this.grid){const t=this.data.map.sprite.tileWidth;for(let e=0;e<this.game.world.width;e+=t)this.game.debug.geom(new Phaser.Line(e,0,e,this.game.world.height),"rgba(0,255,255,0.35)",!1,4);const e=this.data.map.sprite.tileHeight;for(let t=0;t<this.game.world.height;t+=e)this.game.debug.geom(new Phaser.Line(0,t,this.game.world.width,t),"rgba(0,255,255,0.35)",!1,4);let i=this.data.hero.tile_x_pos*t,n=this.data.hero.tile_y_pos*e;this.game.debug.geom(new Phaser.Rectangle(i,n,t,e),"rgba(255,0,0,0.5)"),this.game.debug.geom(new Phaser.Circle(this.data.hero.sprite.x,this.data.hero.sprite.y,5),"rgba(20,75,0,1.0)");for(let i in this.data.map.events){let s=i.split("_").map(t=>parseInt(t));this.game.debug.geom(new Phaser.Rectangle(s[0]*t,s[1]*e,t,e),"rgba(255,255,60,0.7)")}if(this.game.input.mousePointer.withinGame){const t=(this.game.camera.x+this.game.input.mousePointer.x/this.data.scale_factor)/this.data.map.sprite.tileWidth|0,e=(this.game.camera.y+this.game.input.mousePointer.y/this.data.scale_factor)/this.data.map.sprite.tileHeight|0;this.game.debug.text(`x: ${t}, y: ${e}`,140,15,"#00ff00");const i=t+"_"+e;if(i in this.data.map.events){const t=this.data.map.events[i].map(t=>Object.assign({},t,Object.assign({game:"[Phaser.Game]",data:"[GoldenSun]",activation_directions:t.activation_directions.map(t=>s.reverse_directions[t])},t.origin_interactable_object&&{origin_interactable_object:`[${t.origin_interactable_object.key_name}]`})));document.getElementById("object_inspector").innerText=JSON.stringify(t,null,4)}}else this.game.debug.text("x: --, y: --",140,15,"#00ff00")}else document.getElementById("object_inspector").innerText=""}toggle_stats(){this.data.in_battle?this.debug_stats=!this.debug_stats:this.debug_stats=!1;const t=document.getElementById("stats_debug_select");this.debug_stats?(this.debug_stats_info={chars:this.data.battle_instance.allies_info.concat(this.data.battle_instance.enemies_info).map(t=>t.instance),selected:0,listener:t=>{this.debug_stats_info.selected=t.target.value}},this.debug_stats_info.chars.forEach((e,i)=>{let s=document.createElement("option");s.innerText=e.name,s.setAttribute("value",i.toString()),t.appendChild(s)}),t.addEventListener("change",this.debug_stats_info.listener),document.getElementById("stats_debug").style.display="block"):(this.debug_stats_info&&(t.removeEventListener("change",this.debug_stats_info.listener),this.debug_stats_info=void 0),document.getElementById("stats_debug_select").innerHTML="",document.getElementById("stats_debug").style.display="none")}fill_stats_debug_table(){if(!this.debug_stats||!this.data.in_battle)return;const t=this.debug_stats_info.chars[this.debug_stats_info.selected];document.querySelector("#stats_debug table .name").innerHTML=t.name,document.querySelector("#stats_debug table .class").innerHTML=t.class.name,document.querySelector("#stats_debug table .level").innerHTML=t.level.toString(),document.querySelector("#stats_debug table .exp").innerHTML=t.current_exp.toString(),document.querySelector("#stats_debug table .current_hp").innerHTML=t.current_hp.toString(),document.querySelector("#stats_debug table .max_hp").innerHTML=t.max_hp.toString(),document.querySelector("#stats_debug table .current_pp").innerHTML=t.current_pp.toString(),document.querySelector("#stats_debug table .max_pp").innerHTML=t.max_pp.toString(),document.querySelector("#stats_debug table .atk").innerHTML=t.current_atk.toString(),document.querySelector("#stats_debug table .def").innerHTML=t.current_def.toString(),document.querySelector("#stats_debug table .agi").innerHTML=t.current_agi.toString(),document.querySelector("#stats_debug table .luk").innerHTML=t.current_luk.toString(),document.querySelector("#stats_debug table .venus_power").innerHTML=t.venus_power_current.toString(),document.querySelector("#stats_debug table .venus_resist").innerHTML=t.venus_resist_current.toString(),document.querySelector("#stats_debug table .venus_level").innerHTML=t.venus_level_current.toString(),document.querySelector("#stats_debug table .mercury_power").innerHTML=t.mercury_power_current.toString(),document.querySelector("#stats_debug table .mercury_resist").innerHTML=t.mercury_resist_current.toString(),document.querySelector("#stats_debug table .mercury_level").innerHTML=t.mercury_level_current.toString(),document.querySelector("#stats_debug table .mars_power").innerHTML=t.mars_power_current.toString(),document.querySelector("#stats_debug table .mars_resist").innerHTML=t.mars_resist_current.toString(),document.querySelector("#stats_debug table .mars_level").innerHTML=t.mars_level_current.toString(),document.querySelector("#stats_debug table .jupiter_power").innerHTML=t.jupiter_power_current.toString(),document.querySelector("#stats_debug table .jupiter_resist").innerHTML=t.jupiter_resist_current.toString(),document.querySelector("#stats_debug table .jupiter_level").innerHTML=t.jupiter_level_current.toString(),document.querySelector("#stats_debug table .turns").innerHTML=t.turns.toString(),document.querySelector("#stats_debug table .temp_statuses").innerHTML=[...t.temporary_status].join(" "),document.querySelector("#stats_debug table .perm_statuses").innerHTML=[...t.permanent_status].join(" ");let e="";Object.keys(t.effect_turns_count).sort().forEach(i=>{"power"===i||"resist"===i?s.ordered_elements.forEach(s=>{e+=`${i}[${s}]/${t.effect_turns_count[i][s]} <br>`}):e+=`${i}/${t.effect_turns_count[i]} <br>`}),document.querySelector("#stats_debug table .buff").innerHTML=e,document.querySelector("#stats_debug table .effect_count").innerHTML=t.effects.length.toString()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_all=void 0,e.load_all=function(t){!function(t){t.load.json("init_db","assets/init.json"),t.load.json("classes_db","assets/dbs/classes_db.json"),t.load.json("abilities_db","assets/dbs/abilities_db.json"),t.load.json("items_db","assets/dbs/items_db.json"),t.load.json("npc_db","assets/dbs/npc_db.json"),t.load.json("interactable_objects_db","assets/dbs/interactable_objects_db.json"),t.load.json("djinni_db","assets/dbs/djinni_db.json"),t.load.json("enemies_db","assets/dbs/enemies_db.json"),t.load.json("enemies_parties_db","assets/dbs/enemies_parties_db.json"),t.load.json("maps_db","assets/dbs/maps_db.json"),t.load.json("main_chars_db","assets/dbs/main_chars_db.json"),t.load.json("summons_db","assets/dbs/summons_db.json"),t.load.json("misc_animations_db","assets/dbs/misc_animations_db.json"),t.load.json("shopkeep_dialog_db","assets/dbs/shopkeep_dialog_db.json"),t.load.json("shops_db","assets/dbs/shops_db.json")}(t),function(t){t.load.image("shadow","assets/images/misc/shadow.jpg"),t.load.image("cursor","assets/images/misc/cursor.gif"),t.load.image("green_arrow","assets/images/misc/green_arrow.gif"),t.load.image("up_arrow","assets/images/misc/up_arrow.gif"),t.load.image("down_arrow","assets/images/misc/down_arrow.gif"),t.load.image("page_arrow","assets/images/misc/page_arrow.png"),t.load.image("psynergy_aura","assets/images/misc/psynergy_aura.png"),t.load.image("equipped","assets/images/misc/equipped.gif"),t.load.image("venus_star","assets/images/misc/venus_star.gif"),t.load.image("mercury_star","assets/images/misc/mercury_star.gif"),t.load.image("mars_star","assets/images/misc/mars_star.gif"),t.load.image("jupiter_star","assets/images/misc/jupiter_star.gif"),t.load.image("stat_up","assets/images/misc/stat_up.gif"),t.load.image("stat_down","assets/images/misc/stat_down.gif"),t.load.image("arrow_change","assets/images/misc/arrow_change.png"),t.load.image("item_border","assets/images/misc/item_border.png"),t.load.image("price_tag","assets/images/misc/price_tag.png"),t.load.image("broken","assets/images/misc/broken.png"),t.load.image("frost_snowflake","assets/images/interactable_objects/snowflake.png"),t.load.atlasJSONHash("dust","assets/images/misc/dust.png","assets/images/misc/dust.json"),t.load.atlasJSONHash("battle_cursor","assets/images/misc/battle_cursor.png","assets/images/misc/battle_cursor.json"),t.load.atlasJSONHash("ranges","assets/images/misc/ranges.png","assets/images/misc/ranges.json"),t.load.atlasJSONHash("psynergy_particle","assets/images/interactable_objects/psynergy_particle.png","assets/images/interactable_objects/psynergy_particle.json"),t.load.atlasJSONHash("psynergy_ball","assets/images/interactable_objects/psynergy_ball.png","assets/images/interactable_objects/psynergy_ball.json")}(t),function(t){t.load.atlasJSONHash("battle_backgrounds","assets/images/battle_backgrounds/battle_backgrounds.png","assets/images/battle_backgrounds/battle_backgrounds.json"),t.load.atlasJSONHash("avatars","assets/images/avatars/avatars.png","assets/images/avatars/avatars.json")}(t),function(t){t.load.atlasJSONHash("buttons","assets/images/buttons/buttons.png","assets/images/buttons/buttons.json"),t.load.image("shift_keyboard","assets/images/keyboard/shift.png"),t.load.image("tab_keyboard","assets/images/keyboard/tab.png"),t.load.image("spacebar_keyboard","assets/images/keyboard/spacebar.png")}(t),function(t){t.load.bitmapFont("gs-bmp-font","assets/font/golden-sun.png","assets/font/golden-sun.fnt"),t.load.bitmapFont("gs-italic-bmp-font","assets/font/golden-sun-italic.png","assets/font/golden-sun-italic.fnt"),t.load.bitmapFont("gs-item-bmp-font","assets/font/gs-item-font.png","assets/font/gs-item-font.fnt"),t.load.bitmapFont("gs-shop-bmp-font","assets/font/gs-shop-font.png","assets/font/gs-shop-font.fnt")}(t),t.load.script("color_filters","assets/filters/color_filters.js")}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Collision=void 0;e.Collision=class{constructor(t,e){this.game=t,this.hero=e,this.config_world(),this.hero_collision_group=this.game.physics.p2.createCollisionGroup(),this.dynamic_events_collision_group=this.game.physics.p2.createCollisionGroup(),this.map_collision_group=t.physics.p2.createCollisionGroup(),this.npc_collision_groups={},this.interactable_objs_collision_groups={},this.max_layers_created=0,this.dynamic_jump_events_bodies=[]}config_world(){this.game.physics.startSystem(Phaser.Physics.P2JS),this.game.physics.p2.setImpactEvents(!0),this.game.physics.p2.world.defaultContactMaterial.restitution=0,this.game.physics.p2.world.defaultContactMaterial.relaxation=8,this.game.physics.p2.world.defaultContactMaterial.friction=0,this.game.physics.p2.world.defaultContactMaterial.contactSkinSize=.001,this.game.physics.p2.world.setGlobalStiffness(1e5),this.game.physics.p2.restitution=0}config_collision_groups(t){for(let e=this.max_layers_created;e<t.collision_layers_number;++e)this.npc_collision_groups[e]=this.game.physics.p2.createCollisionGroup(),this.interactable_objs_collision_groups[e]=this.game.physics.p2.createCollisionGroup();this.max_layers_created=Math.max(this.max_layers_created,t.collision_layers_number)}config_collisions(t,e,i){this.hero.sprite.body.collides(this.map_collision_group),t.collision_sprite.body.collides(this.hero_collision_group);for(let t in this.npc_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.npc_collision_groups[t],!0);e in this.npc_collision_groups&&this.hero.sprite.body.collides(this.npc_collision_groups[e]);for(let t in this.interactable_objs_collision_groups)this.hero.sprite.body.removeCollisionGroup(this.interactable_objs_collision_groups[t],!0);e in this.interactable_objs_collision_groups&&this.hero.sprite.body.collides(this.interactable_objs_collision_groups[e]);for(let t=0;t<i.children.length;++t){const e=i.children[t];(e.is_npc||e.is_interactable_object)&&(e.body&&e.body.collides(this.hero_collision_group))}this.hero.sprite.body.collides(this.dynamic_events_collision_group)}change_map_body(t,e){if(t.map.collision_layer===e)return;t.map.collision_layer=e,this.hero.shadow.base_collision_layer=t.map.collision_layer,this.hero.sprite.base_collision_layer=t.map.collision_layer,t.map.config_body(this,e),this.config_collision_groups(t.map),this.config_collisions(t.map,t.map.collision_layer,t.npc_group);let i=t.map.layers;for(let s=0;s<i.length;++s){let n=i[s],a=n.properties.over.toString().split(",");if(a.length>e)if(a=a.length>e?0|a[e]:0|a[0],0!==a){t.underlayer_group.remove(n.sprite,!1,!0);let e=0;for(e=0;e<t.overlayer_group.children.length;++e){if(t.overlayer_group.children[e].layer_z>n.z){t.overlayer_group.addAt(n.sprite,e,!0);break}}e===t.overlayer_group.children.length&&t.overlayer_group.add(n.sprite,!0)}else{t.overlayer_group.remove(n.sprite,!1,!0);let e=0;for(e=0;e<t.underlayer_group.children.length;++e){if(t.underlayer_group.children[e].layer_z>n.z){t.underlayer_group.addAt(n.sprite,e,!0);break}}e===t.underlayer_group.children.length&&t.underlayer_group.add(n.sprite,!0)}}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Hero=void 0;const s=i(17),n=i(1),a=i(4),r=i(0),o=i(18),_=[null,r.directions.right,r.directions.left,null,r.directions.up,r.directions.up_right,r.directions.up_left,null,r.directions.down,r.directions.down_right,r.directions.down_left,null,null,null,null,null],h=[r.directions.right,r.directions.up_right,r.directions.up_right,r.directions.up,r.directions.up_left,r.directions.up_left,r.directions.left,r.directions.down_left,r.directions.down_left,r.directions.down,r.directions.down_right,r.directions.down_right],c={[r.directions.right]:{x:1,y:0},[r.directions.left]:{x:-1,y:0},[r.directions.up]:{x:0,y:-1},[r.directions.up_right]:{x:n.INV_SQRT2,y:-n.INV_SQRT2},[r.directions.up_left]:{x:-n.INV_SQRT2,y:-n.INV_SQRT2},[r.directions.down]:{x:0,y:1},[r.directions.down_right]:{x:n.INV_SQRT2,y:n.INV_SQRT2},[r.directions.down_left]:{x:-n.INV_SQRT2,y:n.INV_SQRT2}};class l extends s.ControllableChar{constructor(t,e,i,s,n,a,r){super(t,e,i,s,n,a,r,!0),this.arrow_inputs=null,this.cursors=this.game.input.keyboard.createCursorKeys()}update_arrow_inputs(){this.arrow_inputs=1*+this.cursors.right.isDown|2*+this.cursors.left.isDown|4*+this.cursors.up.isDown|8*+this.cursors.down.isDown,this.required_direction=_[this.arrow_inputs]}set_speed_factors(t=!1){if(t&&this.data.tile_event_manager.on_event)return;let e=_[this.arrow_inputs];this.climbing?null===e?(this.x_speed=this.y_speed=0,this.idle_climbing=!0):(1==(1&e)&&--e,this.set_direction(e),this.idle_climbing=!1,this.x_speed=c[e].x,this.y_speed=c[e].y):null!==e||this.force_direction?(this.force_direction?e=this.current_direction:(this.current_direction=e,1&this.game.time.frames&&(this.desired_direction=r.get_transition_directions(this.desired_direction,e))),this.x_speed=c[e].x,this.y_speed=c[e].y):this.x_speed=this.y_speed=0}check_interactable_objects(t,e){let i=0;for(i=0;i<t.interactable_objects.length;++i){const s=t.interactable_objects[i].sprite.body;if(s&&!(e.bodyA!==s.data&&e.bodyB!==s.data||e.bodyA!==this.sprite.body.data&&e.bodyB!==this.sprite.body.data)){const e=t.interactable_objects[i];if([r.base_actions.WALK,r.base_actions.DASH].includes(this.current_action)&&this.data.map.collision_layer===e.base_collision_layer){if(this.trying_to_push=!0,null===this.push_timer){this.trying_to_push_direction=this.current_direction;const i=t.events[a.TileEvent.get_location_key(this.tile_x_pos,this.tile_y_pos)];let s=!1;if(i&&i.forEach(t=>{t.type===a.event_types.CLIMB&&t.is_set&&t.activation_directions.includes(this.trying_to_push_direction)&&(s=!0)}),!s){let i=e.get_current_position(t);switch(this.trying_to_push_direction){case r.directions.up:i.y-=1;break;case r.directions.down:i.y+=1;break;case r.directions.left:i.x-=1;break;case r.directions.right:i.x+=1}e.position_allowed(i.x,i.y)&&(this.push_timer=this.game.time.events.add(Phaser.Timer.QUARTER,o.normal_push.bind(this,this.game,this.data,e)))}}break}}}i===t.interactable_objects.length&&(this.trying_to_push=!1)}collision_dealer(t){let e=[];for(let i=0;i<this.game.physics.p2.world.narrowphase.contactEquations.length;++i){const s=this.game.physics.p2.world.narrowphase.contactEquations[i];s.bodyA===this.sprite.body.data&&e.push(s.normalA),this.check_interactable_objects(t,s)}if(e.length&&[r.base_actions.WALK,r.base_actions.DASH,r.base_actions.CLIMB].includes(this.current_action))if(Math.abs(this.sprite.body.velocity.x)<13&&Math.abs(this.sprite.body.velocity.y)<13){let t=new Array(e.length);e.forEach((e,i)=>{Math.abs(e[0])<.1&&(e[0]=0),Math.abs(e[1])<.1&&(e[1]=0),Math.abs(e[0])>.9&&(e[0]=Math.sign(e[0])),Math.abs(e[1])>.9&&(e[1]=Math.sign(e[1])),t[i]=r.range_360(Math.atan2(e[1],-e[0]))});const i=r.range_360(Math.atan2(-this.sprite.body.velocity.temp_y,this.sprite.body.velocity.temp_x));t.forEach(t=>{if(t>=i-n.degree15&&t<=i+n.degree15)return this.sprite.body.velocity.temp_x=0,void(this.sprite.body.velocity.temp_y=0)}),this.stop_by_colliding=!0,this.force_direction=!1}else if(this.current_action!==r.base_actions.CLIMB)if(this.stop_by_colliding=!1,1===e.length){const t=h[r.range_360(Math.atan2(e[0][1],-e[0][0])+n.degree15)/n.degree30|0],i=_[this.arrow_inputs]-t&7;1===i||7===i?(this.force_direction=!0,this.set_direction(t+(i<<1)&7)):this.force_direction=!1}else this.force_direction=!1;else this.stop_by_colliding=!1;else this.stop_by_colliding=!1,this.force_direction=!1;this.apply_speed()}update(t){this.update_arrow_inputs(),this.set_speed_factors(!0),this.set_current_action(),this.calculate_speed(),this.collision_dealer(t),this.set_action(!0),this.update_shadow()}config_body(t){this.game.physics.p2.enable(this.sprite,!1),this.reset_anchor(),this.sprite.body.clearShapes(),this.body_radius=n.HERO_BODY_RADIUS,this.sprite.body.setCircle(this.body_radius,0,0),this.sprite.body.setCollisionGroup(t.hero_collision_group),this.sprite.body.mass=1,this.sprite.body.damping=0,this.sprite.body.angularDamping=0,this.sprite.body.inertia=0,this.sprite.body.setZeroRotation(),this.sprite.body.fixedRotation=!0}}e.Hero=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Footsteps=void 0;const s=i(0),n=Phaser.Timer.SECOND<<1,a=Phaser.Timer.QUARTER,r=Phaser.Timer.QUARTER,o=s.base_actions.IDLE,_=s.directions.down,h="none",c="right",l="left";e.Footsteps=class{constructor(t,e){this.game=t,this.data=e,this.x_pos=0,this.y_pos=0,this.current_action=o,this.current_direction=_,this.anchor_x=.5,this.anchor_y=.5,this.group=this.game.add.group(),this.group.send_to_back=!0,this.group.base_collision_layer=0,this.dead_steps=new Array(20),this.dead_index=0,this.foot_forward=h,this.can_make_footprint=!0,this.footsteps_time_interval=a,this.new_step_timer=this.game.time.create(!1),this.expire_timer=this.game.time.create(!1),this.footsteps_sprite_base=this.data.info.misc_sprite_base_list.footprints}set_new_step_timer(){this.can_make_footprint=!1,this.new_step_timer.add(this.footsteps_time_interval,()=>{this.can_make_footprint=!0}),this.new_step_timer.start()}set_expire_timer(t,e){this.expire_timer.add(n,()=>{t.animations.play(e)},this),this.expire_timer.start()}kill_step(t){20===this.dead_index?t.destroy():(t.kill(),this.dead_steps[this.dead_index++]=t)}position_footsteps(t){t.scale.x=this.foot_forward===c?-1:1,t.rotation=(this.current_direction+2)*Math.PI/4}create_step(t,e){this.data.npc_group.getIndex(this.group)<0&&this.data.npc_group.add(this.group),this.current_direction=t,this.current_action=e,this.update_foot();const i=this.current_action===s.base_actions.IDLE?"double":"single",n=this.footsteps_sprite_base.getAnimationKey("footprints",i);let a;if(0===this.dead_index){const t=this.footsteps_sprite_base.getActionKey("footprints");a=this.group.create(0,0,t),a.anchor.setTo(this.anchor_x,this.anchor_y),this.footsteps_sprite_base.setAnimation(a,"footprints")}else a=this.dead_steps[--this.dead_index],a.reset(0,0);const r=a.animations.getAnimation(n);r.stop(!0),this.group.base_collision_layer=this.data.map.collision_layer,a.x=this.data.hero.shadow.x,a.y=this.data.hero.shadow.y,this.position_footsteps(a),r.onComplete.addOnce(()=>{this.kill_step(a)}),this.set_expire_timer(a,n),this.set_new_step_timer()}update_foot(){this.footsteps_time_interval=this.current_action===s.base_actions.WALK?a:r,this.current_action===s.base_actions.IDLE?this.foot_forward=h:this.foot_forward=this.foot_forward===l?c:l}clean_all(t=!1){this.new_step_timer.stop(!0),this.expire_timer.stop(!0),this.group.children.forEach(e=>{t?e.destroy():(e.animations.currentAnim.stop(!0),e.animations.currentAnim.onComplete.removeAll(),e.kill())}),this.dead_steps=this.group.children.slice(),this.dead_index=this.group.children.length}destroy(){this.clean_all(!0),this.new_step_timer.destroy(),this.expire_timer.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TileEventManager=void 0;const s=i(0),n=i(4);class a{constructor(){this.climb_event=!1,this.queue=[]}add(t,e,i,s=!1){switch(t.type){case n.event_types.CLIMB:t.active&&t.is_set&&t.activation_directions.includes(e)&&(this.climb_event=!0)}s?i():this.queue.push({event:t,fire_function:i})}process_queue(){this.climb_event&&(this.queue=this.queue.filter(t=>t.event.type!==n.event_types.JUMP)),this.queue.forEach(t=>t.fire_function())}}e.TileEventManager=class{constructor(t,e,i,s){this.game=t,this.data=e,this.hero=i,this.collision=s,this.event_timers={},this.on_event=!1,this.walking_on_pillars_tiles=new Set,this.triggered_events={}}set_triggered_event(t){this.triggered_events[t.id]=t}unset_triggered_event(t){delete this.triggered_events[t.id]}event_triggered(t){return t.id in this.triggered_events}fire_triggered_events(){Object.keys(this.triggered_events).forEach(t=>{const e=this.triggered_events[t];e.type===n.event_types.SPEED?e.unset():e.fire()})}fire_event(t,e){this.hero.current_direction===e&&(t.type!==n.event_types.CLIMB||this.hero.idle_climbing?[n.event_types.TELEPORT,n.event_types.JUMP,n.event_types.SLIDER].includes(t.type)&&t.fire():t.fire(e))}check_tile_events(t,e){let i=new a;for(let a=0;a<e.events[t].length;++a){const r=e.events[t][a];if(r.activation_collision_layers.includes(e.collision_layer)&&(r.type===n.event_types.JUMP&&r.jump_near_collision(),r.is_active(this.hero.current_direction)))if(r.type===n.event_types.SPEED)this.hero.extra_speed!==r.speed&&i.add(r,this.hero.current_direction,r.fire.bind(r),!0);else if(r.type!==n.event_types.TELEPORT||r.advance_effect)if([n.event_types.STEP,n.event_types.COLLISION].includes(r.type)&&!this.event_triggered(r))i.add(r,this.hero.current_direction,r.set.bind(r));else{if(r.activation_directions.includes(this.hero.current_direction)&&[s.base_actions.WALK,s.base_actions.DASH,s.base_actions.CLIMB].includes(this.hero.current_action)){if(this.event_timers[r.id]&&!this.event_timers[r.id].timer.expired)continue;i.add(r,this.hero.current_direction,()=>{this.event_timers[r.id]=this.game.time.events.add(350,this.fire_event.bind(this,r,this.hero.current_direction))})}}else i.add(r,this.hero.current_direction,this.fire_event.bind(this,r,this.hero.current_direction))}i.process_queue()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameEventManager=e.interaction_patterns=void 0;const s=i(0),n=i(19),a=i(20);e.interaction_patterns={TIK_TAK_TOE:"tik_tak_toe",CROSS:"cross"};class r{constructor(t,e){this.game=t,this.data=e,this.on_event=!1,this.control_enable=!0,this.fire_next_step=()=>{},this.set_controls()}set_controls(){this.data.enter_input.add(()=>{this.data.hero.in_action()||this.data.in_battle||!this.control_enable||(this.on_event?(this.control_enable=!1,this.fire_next_step()):this.search_for_npc())})}search_for_npc(){for(let t=0;t<this.data.map.npcs.length;++t){const e=this.data.map.npcs[t];if(s.is_close(this.data.hero.current_direction,this.data.hero.sprite.x,this.data.hero.sprite.y,e.sprite.x,e.sprite.y,e.talk_range_factor)){this.data.hero.stop_char(),this.on_event=!0,this.data.force_stop_movement=!0,this.control_enable=!1,this.set_npc_event(e);break}}}set_npc_event(t){t.npc_type===a.npc_types.NORMAL?t.message?this.manage_npc_dialog(t):this.fire_npc_events(t):t.npc_type===a.npc_types.SHOP&&(this.data.shop_open||(this.set_npc_and_hero_directions(t),this.data.shop_menu.open_menu(t.shop_key,()=>{this.on_event=!1,this.reset_npc_direction(t),this.data.force_stop_movement=!1,this.control_enable=!0})))}set_npc_and_hero_directions(t){const e=t.sprite.x,i=t.sprite.y,n=this.data.dbs.npc_db[t.key_name].interaction_pattern,a=r.get_interaction_directions(this.data.hero.sprite.x,this.data.hero.sprite.y,e,i,n,t.body_radius);this.data.hero.set_direction(a.hero_direction),this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[a.hero_direction]),t.play(s.base_actions.IDLE,s.reverse_directions[a.target_direction])}reset_npc_direction(t){const e=this.data.dbs.npc_db[t.key_name].initial_action,i=this.data.dbs.npc_db[t.key_name].actions[e].initial_direction;t.play(e,i)}manage_npc_dialog(t){const e=new n.DialogManager(this.game,this.data);e.set_dialog(t.message,t.avatar,this.data.hero.current_direction),this.set_npc_and_hero_directions(t),this.fire_next_step=e.next.bind(e,e=>{e&&(this.on_event=!1,this.data.force_stop_movement=!1,this.reset_npc_direction(t),this.fire_npc_events(t)),this.control_enable=!0}),this.fire_next_step()}fire_npc_events(t){t.events.forEach(t=>{t.fire()})}static get_interaction_directions(t,i,n,a,r,o){let _,h;if(r===e.interaction_patterns.CROSS){let e=t+(-a-n),r=-t+(-a+n);-i>=e&&-i>=r?_=s.directions.up:-i<=e&&-i>=r?_=s.directions.right:-i<=e&&-i<=r?_=s.directions.down:-i>=e&&-i<=r&&(_=s.directions.left)}return t<=n-o&&i>=a+o?(h=s.directions.up_right,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down_left:_):t<=n-o&&i>=a-o&&i<=a+o?(h=s.directions.right,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.left:_):t<=n-o&&i<=a-o?(h=s.directions.down_right,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up_left:_):t>=n-o&&t<=n+o&&i<=a-o?(h=s.directions.down,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up:_):t>=n+o&&i<=a-o?(h=s.directions.down_left,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.up_right:_):t>=n+o&&i>=a-o&&i<=a+o?(h=s.directions.left,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.right:_):t>=n+o&&i>=a+o?(h=s.directions.up_left,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down_right:_):t>=n-o&&t<=n+o&&i>=a+o&&(h=s.directions.up,_=r===e.interaction_patterns.TIK_TAK_TOE?s.directions.down:_),{hero_direction:h,target_direction:_}}}e.GameEventManager=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleEvent=void 0;const s=i(15),n=i(14);class a extends n.GameEvent{constructor(t,e,i,s){super(t,e,n.event_types.BATTLE),this.background_key=i,this.enemy_party_key=s}fire(){this.data.hero.stop_char(!0),this.battle=new s.Battle(this.game,this.data,this.background_key,this.enemy_party_key),this.battle.start_battle()}}e.BattleEvent=a},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleLog=void 0;const n=i(1),a=i(13),r=i(8),o=i(0),_=i(7);e.BattleLog=class{constructor(t){this.game=t,this.x=t.camera.x,this.y=t.camera.y,this.logs=[],this.logs.push(this.create(this.y+139)),this.logs.push(this.create(this.y+151))}create(t){const e=this.game.add.bitmapText(this.x+3,t,"gs-bmp-font","",n.FONT_SIZE);return e.tint=n.DEFAULT_FONT_COLOR,e.smoothed=!1,e.autoRound=!0,e}add(t){let e;const i=new Promise(t=>{e=t});return""===this.logs[0].text?(this.logs[0].setText(t),this.logs[1].setText(""),e()):""===this.logs[1].text?(this.logs[1].setText(t),e()):(this.game.add.tween(this.logs[0]).to({y:this.y+127},50,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.logs[1]).to({y:this.y+139},50,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.logs[0].y=this.y+151,this.logs[0].setText(t),this.logs.reverse(),e()})),i}add_ability(t,e,i,n){return s(this,void 0,void 0,(function*(){switch(e.msg_type){case a.ability_msg_types.ATTACK:yield this.add(t.name+" attacks!");break;case a.ability_msg_types.CAST:yield this.add(`${t.name} casts ${e.name}!`);break;case a.ability_msg_types.UNLEASH:yield this.add(`${t.name} unleashes ${e.name}!`);break;case a.ability_msg_types.SUMMON:yield this.add(`${t.name} summons ${e.name}!`);break;case a.ability_msg_types.USE:yield this.add(`${t.name} uses ${e.name}!`);break;case a.ability_msg_types.DEFEND:yield this.add(t.name+" is defending!");break;case a.ability_msg_types.ITEM_UNLEASH:yield this.add(`${t.name}'s ${i}`),yield this.add(`lets out a howl! ${e.name}!`);break;case a.ability_msg_types.SET_DJINN:yield this.add(`${n} is set to ${t.name}!`)}}))}add_recover_effect(t){return s(this,void 0,void 0,(function*(){const e=t.char;switch(t.type){case r.effect_types.MAX_HP:case r.effect_types.MAX_PP:case r.effect_types.ATTACK:case r.effect_types.DEFENSE:case r.effect_types.AGILITY:case r.effect_types.LUCK:yield this.add(`${e.name}'s ${r.effect_names[t.type]} returns to normal!`);break;case r.effect_types.POWER:case r.effect_types.RESIST:yield this.add(`${e.name}'s ${o.element_names[t.attribute]} ${r.effect_names[t.type]} returns to normal!`);break;case r.effect_types.TEMPORARY_STATUS:case r.effect_types.PERMANENT_STATUS:yield this.add(_.on_remove_status_msg[t.status_key_name](e))}}))}add_damage(t,e,i=!1){return s(this,void 0,void 0,(function*(){const s=i?"PP":"HP",n=i?"current_pp":"current_hp",a=i?"max_pp":"max_hp";t>=0?(e[n]-t<0&&(t=e[n]),yield this.add(`${e.name} takes ${t.toString()} damage!`)):e[n]>=e[a]?yield this.add(`${e.name}'s ${s} is fully restored`):yield this.add(`${e.name} recovers ${Math.abs(t).toString()} ${s}!`)}))}clear(){this.logs[0].setText(""),this.logs[1].setText("")}destroy(){this.logs[0].destroy(),this.logs[1].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainBattleMenu=void 0;const s=i(22),n=i(24),a=i(0),r=i(1),o=i(5),_=i(45),h=i(46),c=i(47),l=i(49),d=i(50),p=i(15),u=i(7),g=i(12),m=i(3);e.MainBattleMenu=class{constructor(t,e,i,o,p,u){this.game=t,this.data=e,this.on_abilities_choose=p,this.choose_targets=u,this.chars_status_window=new s.CharsStatusWindow(this.game,this.data,!0,!0),this.start_buttons_keys=["fight","flee","status"],this.shift_propagation_priority=0,this.esc_propagation_priority=o,this.enter_propagation_priority=i,this.start_horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.start_buttons_keys,this.start_buttons_keys.map(t=>a.capitalize(t)),this.start_button_press.bind(this),this.enter_propagation_priority,void 0,void 0,76,!0),this.inner_buttons_keys=["attack","psynergy","djinni","summon","item","defend"],this.description_window=new _.DescriptionWindow(this.game),this.djinn_window=new c.DjinnWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1,this.shift_propagation_priority),this.psynergy_window=new h.PsynergyWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.item_window=new l.ItemWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.summon_window=new d.SummonWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.group=this.game.add.group(),this.avatar_sprite=this.group.create(0,r.GAME_HEIGHT-r.AVATAR_SIZE),this.avatar_sprite.alpha=0,this.inner_horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.inner_buttons_keys,this.inner_buttons_keys.map(t=>a.capitalize(t)),this.inner_button_press.bind(this),this.enter_propagation_priority,this.inner_menu_cancel.bind(this),this.esc_propagation_priority,60,!0)}start_button_press(t){switch(this.start_buttons_keys[t]){case"fight":this.start_horizontal_menu.close();let t=[];o.Djinn.has_standby_djinn(this.data.info.djinni_list,g.MainChar.get_active_players(this.data.info.party_data,p.MAX_CHARS_IN_BATTLE))||t.push("summon"),this.current_buttons=this.inner_buttons_keys.filter(e=>!t.includes(e)),this.inner_horizontal_menu.mount_buttons(t),this.abilities={},this.data.info.party_data.members.slice(0,p.MAX_CHARS_IN_BATTLE).forEach(t=>{this.abilities[t.key_name]=[]}),this.djinni_already_used=a.ordered_elements.reduce((t,e)=>(t[e]=0,t),{}),this.inner_horizontal_menu.open();let e=this.data.info.party_data.members[this.current_char_index];for(;e.is_paralyzed()||e.has_permanent_status(u.permanent_status.DOWNED);)if(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"",targets:[]}),++this.current_char_index,e=this.data.info.party_data.members[this.current_char_index],this.current_char_index>=p.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length){this.current_char_index=0,this.on_abilities_choose(this.abilities);break}this.set_avatar()}}inner_button_press(t){switch(this.current_buttons[t]){case"attack":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("attack","attack",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"attack",targets:t,type:"attack"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index]);break;case"psynergy":this.on_ability_choose(this.psynergy_window,!1,"psynergy");break;case"djinni":this.on_ability_choose(this.djinn_window,!0,"djinni",this.psynergy_window);break;case"summon":this.on_ability_choose(this.summon_window,!0,"summon",this.djinni_already_used);break;case"item":this.on_ability_choose(this.item_window,!1,"item");break;case"defend":this.inner_horizontal_menu.deactivate(!0),this.choose_targets("defend","defend",t=>{t?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:"defend",targets:t,type:"defend"}),this.inner_horizontal_menu.activate(),this.change_char(1)):this.inner_horizontal_menu.activate()},this.data.info.party_data.members[this.current_char_index])}}on_ability_choose(t,e,i,...s){this.inner_horizontal_menu.deactivate(!0),this.description_window.open(e),t.open(this.data.info.party_data.members[this.current_char_index],(e,s)=>{if(e){let n;if("djinni"===i&&this.data.info.djinni_list[e].status===o.djinn_status.STANDBY)n=e,e="set_djinn";else if("summon"===i){const t=this.data.dbs.summons_db[e].requirements;this.djinni_already_used=m.mapValues(this.djinni_already_used,(e,i)=>e+t[i])}this.description_window.hide(),this.choose_targets(e,i,s=>{s?(this.abilities[this.data.info.party_data.members[this.current_char_index].key_name].push({key_name:e,targets:s,type:i,djinn_key_name:n}),t.close(),this.description_window.close(),this.inner_horizontal_menu.activate(),this.change_char(1)):(this.description_window.show(),t.show())},this.data.info.party_data.members[this.current_char_index],s)}else t.is_open()&&t.close(),this.description_window.close(),this.inner_horizontal_menu.activate()},this.description_window.set_description.bind(this.description_window),...s)}change_char(t,e=!1){const i=this.data.info.party_data.members[this.current_char_index],s=this.abilities[i.key_name].length;if(i.turns!==s&&s||(this.current_char_index+=t),this.current_char_index>=p.MAX_CHARS_IN_BATTLE||this.current_char_index>=this.data.info.party_data.members.length)this.current_char_index=0,this.on_abilities_choose(this.abilities);else if(this.current_char_index>=0){const i=this.data.info.party_data.members[this.current_char_index];if(e){const t=this.abilities[i.key_name].pop();if("summon"===t.type){const e=this.data.dbs.summons_db[t.key_name].requirements;this.djinni_already_used=m.mapValues(this.djinni_already_used,(t,i)=>t-e[i])}}i.is_paralyzed()||i.has_permanent_status(u.permanent_status.DOWNED)?this.change_char(t,e):(this.set_avatar(),this.inner_horizontal_menu.close(void 0,!1),this.inner_horizontal_menu.open())}else this.current_char_index=0,this.inner_menu_cancel()}set_avatar(){this.avatar_sprite.alpha=1,this.avatar_sprite.loadTexture("avatars",this.data.info.party_data.members[this.current_char_index].key_name)}hide_avatar(){this.avatar_sprite.alpha=0}inner_menu_cancel(){const t=this.data.info.party_data.members[this.current_char_index].key_name;this.current_char_index>0||1===this.abilities[t].length?this.change_char(-1,!0):(this.inner_horizontal_menu.close(),this.hide_avatar(),this.start_horizontal_menu.open())}update_position(){this.chars_status_window.update_position(!0),this.start_horizontal_menu.update_position(),this.inner_horizontal_menu.update_position(),this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}is_active(){return this.start_horizontal_menu.menu_active||this.inner_horizontal_menu.menu_active}open_menu(){this.current_char_index=0,this.start_horizontal_menu.open(),this.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.hide_avatar(),this.start_horizontal_menu.close(),this.inner_horizontal_menu.close())}destroy_menu(){this.chars_status_window.destroy(),this.inner_horizontal_menu.destroy(),this.start_horizontal_menu.destroy(),this.description_window.destroy(),this.djinn_window.destroy(),this.psynergy_window.destroy(),this.item_window.destroy(),this.summon_window.destroy(),this.group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DescriptionWindow=void 0;const s=i(2);e.DescriptionWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,0,40,236,28),this.description=this.base_window.set_text_in_position("",8,12)}update_position(t){t?this.base_window.update_position({y:32}):this.base_window.update_position({y:40})}set_description(t){this.base_window.update_text(t,this.description)}open(t=!1){this.is_open=!0,this.update_position(t),this.base_window.show(void 0,!1)}show(){this.base_window.show(void 0,!1)}hide(){this.base_window.close(void 0,!1)}close(){this.is_open=!1,this.base_window.close(void 0,!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PsynergyWindow=void 0;const s=i(2),n=i(1),a=i(6),r=i(7),o=n.YELLOW_FONT_COLOR,_=n.RED_FONT_COLOR,h=90+n.FONT_SIZE;e.PsynergyWindow=class{constructor(t,e,i,n){this.game=t,this.data=e,this.window_open=!1,this.window_active=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.misc_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.base_window=new s.Window(this.game,72,72,164,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(48,136,"buttons","psynergy"),this.group.alpha=0,this.cursor_control=new a.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_ability.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_ability_index.bind(this),this.set_ability_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.signal_bindings=this.set_control(),this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,152,8),this.highlight_bar.endFill()}get_cursor_x(){return this.expanded,66}get_cursor_y(){return(this.expanded,83)+16*this.ability_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_ability_index(){return this.ability_index}set_ability_index(t){this.ability_index=t}get_max_elem_on_page(){return this.abilities.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&!this.expanded&&(this.data.enter_input.halt(),this.choosen_ability=this.abilities[this.ability_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t,e){this.set_abilities_list(),this.ability_index>=this.abilities.length&&(this.ability_index=this.abilities.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_ability(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=5+this.ability_index*(n.ICON_HEIGHT+2)+4}set_abilities_list(){this.clear_sprites(!1),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=10,s=5+t*(n.ICON_HEIGHT+2),a=i+(n.ICON_WIDTH>>1),r=s+(n.ICON_HEIGHT>>1),h=10+n.ICON_WIDTH+2;let c=n.DEFAULT_FONT_COLOR;this.psy_sealed?c=n.PURPLE_FONT_COLOR:this.char.current_pp<this.data.info.abilities_list[e].pp_cost&&(c=n.RED_FONT_COLOR);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,h,s+4,!1,!1,c);this.text_sprites_in_window.push(l);const d=this.base_window.set_text_in_position("PP",96,s+4,!1,!1,c);this.text_sprites_in_window.push(d),this.icon_sprites_in_window.push(this.base_window.create_at_group(a,r,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5),this.misc_sprites_in_window.push(this.base_window.create_at_group(129,s+5,this.data.info.abilities_list[e].element+"_star")),this.misc_sprites_in_window.push(this.base_window.create_at_group(137,s+4,"ranges",void 0,this.data.info.abilities_list[e].range.toString()));const p=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,126,s+4,!0,!1,c);this.text_sprites_in_window.push(p),this.expanded&&(this.gained_abilities.includes(e)?(this.base_window.update_text_color(o,l),this.base_window.update_text_color(o,p),this.base_window.update_text_color(o,d)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(_,l),this.base_window.update_text_color(_,p),this.base_window.update_text_color(_,d)))}}set_abilities(){if(this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability),this.all_abilities=this.current_abilities,this.expanded){const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list&&this.data.info.abilities_list[t].is_battle_ability);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),this.psy_info_1_text=this.base_window.set_text_in_position("",40,89),this.psy_info_2_text=this.base_window.set_text_in_position("",40,h),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(o,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(_,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(o,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(_,this.psy_info_2_text))}}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.expanded?(this.base_window.update_size({height:108}),this.base_window.update_position({x:0,y:40})):(this.base_window.update_size({height:84}),this.base_window.update_position({x:72,y:72})),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(t=!0){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.misc_sprites_in_window.length;++t)this.base_window.remove_from_group(this.misc_sprites_in_window[t]);this.misc_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);t&&(this.psy_info_1_text&&(this.base_window.remove_text(this.psy_info_1_text),this.psy_info_1_text=null),this.psy_info_2_text&&(this.base_window.remove_text(this.psy_info_2_text),this.psy_info_2_text=null)),this.text_sprites_in_window=[]}open(t,e,i,s=!1,n=null,a=null){this.char=t,this.psy_sealed=this.char.has_temporary_status(r.temporary_status.SEAL),this.djinni=[n],this.next_djinni_status=[a],this.close_callback=e,this.choosen_ability=null,this.expanded=s,this.page_index=0,this.ability_index=0,this.set_description=i,this.group.alpha=1,this.update_position(),this.mount_window(),this.set_highlight_bar(),this.expanded?(this.button.alpha=0,this.highlight_bar.alpha=0):(this.cursor_control.activate(),this.button.alpha=1,this.highlight_bar.alpha=1),this.set_description&&this.set_description(this.data.info.abilities_list[this.abilities[this.ability_index]].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnWindow=void 0;const s=i(2),n=i(6),a=i(5),r=i(48);e.DjinnWindow=class{constructor(t,e,i,a,o){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.shift_propagation_priority=o+1,this.base_window=new s.Window(this.game,160,72,76,84),this.base_window.init_page_indicator_bar(),this.stats_window=new r.DjinnStatsWindow(this.game,this.data),this.group=this.game.add.group(),this.button=this.group.create(140,136,"buttons","djinni"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,64,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.djinn_names=[],this.stars_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_djinn.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active||this.psynergy_window_open)return;this.data.enter_input.halt();const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];t.status!==a.djinn_status.RECOVERY&&(this.choosen_ability=t.ability_key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.psynergy_window_open&&(this.data.shift_input.halt(),this.cursor_control.deactivate(),this.psynergy_window.open(this.char,void 0,void 0,!0,this.data.info.djinni_list[this.djinni[this.djinn_index]],this.get_next_status()),this.psynergy_window_open=!0)},this,this.shift_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).onUp.add(()=>{this.window_open&&this.window_active&&this.psynergy_window_open&&(this.cursor_control.activate(),this.psynergy_window.close(),this.psynergy_window_open=!1)})]}get_cursor_x(){return 154}get_cursor_y(){return 84+16*this.djinn_index}is_open(){return this.window_open}is_active(){return this.window_active&&!this.psynergy_window_open}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_djinn_index(){return this.djinn_index}set_djinn_index(t){this.djinn_index=t}get_max_elem_on_page(){return this.djinni.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}call_set_description(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];if(this.set_description)switch(t.status){case a.djinn_status.SET:this.set_description(t.description);break;case a.djinn_status.STANDBY:this.set_description("Ready to summon. Choose to set it again.");break;case a.djinn_status.RECOVERY:this.set_description("This Djinn is still recovering.")}}change_page(t,e){this.config_page(),this.djinn_index>=this.djinni.length&&(this.djinn_index=this.djinni.length-1,this.cursor_control.set_cursor_position()),this.call_set_description(),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.update_stats()}change_djinn(t,e){this.call_set_description(),this.set_highlight_bar(),this.update_stats()}set_highlight_bar(){this.highlight_bar.y=8+16*this.djinn_index}config_page(){this.clear_sprites(),this.djinni=this.all_djinni.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.djinni.length;++t){const e=this.data.info.djinni_list[this.djinni[t]],i=8+16*t,s=this.base_window.create_at_group(9,i+1,e.element+"_star");let n;switch(this.stars_sprites.push(s),e.status){case a.djinn_status.SET:n=a.djinn_font_colors[a.djinn_status.SET];break;case a.djinn_status.STANDBY:n=a.djinn_font_colors[a.djinn_status.STANDBY];break;case a.djinn_status.RECOVERY:n=a.djinn_font_colors[a.djinn_status.RECOVERY]}const r=this.base_window.set_text_in_position(e.name,17,i,!1,!1,n);if(this.djinn_names.push(r),e.status===a.djinn_status.RECOVERY){const t=this.base_window.set_text_in_position((e.recovery_turn+1).toString(),67,i,!0,!1,a.djinn_font_colors[a.djinn_status.RECOVERY]);this.djinn_names.push(t)}}}set_page_number(){const t=this.all_djinni.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}get_next_status(){let t;switch(this.data.info.djinni_list[this.djinni[this.djinn_index]].status){case a.djinn_status.SET:t=a.djinn_status.STANDBY;break;case a.djinn_status.STANDBY:t=a.djinn_status.SET;break;case a.djinn_status.RECOVERY:t=a.djinn_status.RECOVERY}return t}update_stats(){const t=this.data.info.djinni_list[this.djinni[this.djinn_index]];this.stats_window.set_djinn(t,this.get_next_status())}mount_window(){this.all_djinni=this.char.djinni,this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page(),this.update_stats()}clear_sprites(){this.stars_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_names.forEach(t=>{this.base_window.remove_text(t)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.psynergy_window=s,this.psynergy_window_open=!1,this.group.alpha=1,this.djinn_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.stats_window.open(this.char),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.call_set_description(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.stats_window.open(this.char),this.update_stats(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.stats_window.close(),this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.stats_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.stats_window.destroy(),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnStatsWindow=void 0;const s=i(2),n=i(1),a=["max_hp","max_pp","atk","def","agi","luk"];e.DjinnStatsWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,64,156,84);const i=["HP","PP","Attack","Defense","Agility","Luck"];this.before_stats={},this.after_stats={},this.up_arrows={},this.down_arrows={};for(let t=0;t<a.length;++t)this.base_window.set_text_in_position(i[t],8,16+t*n.FONT_SIZE),this.before_stats[a[t]]=this.base_window.set_text_in_position("",78,16+t*n.FONT_SIZE,!0),this.after_stats[a[t]]=this.base_window.set_text_in_position("",126,16+t*n.FONT_SIZE,!0),this.up_arrows[a[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_up"),this.down_arrows[a[t]]=this.base_window.create_at_group(80,15+t*n.FONT_SIZE,"stat_down");this.hide_arrows(),this.before_class_text=this.base_window.set_text_in_position("",8,8),this.after_class_text=this.base_window.set_text_in_position("",88,8),this.base_window.create_at_group(80,16,"arrow_change").rotation=-n.degree90,this.base_window.create_at_group(33,73,"shift_keyboard",0),this.base_window.create_at_group(32,72,"shift_keyboard"),this.base_window.set_text_in_position(": Psy. Gained",55,72),this.window_open=!1}hide_arrows(){for(let t=0;t<a.length;++t)this.down_arrows[a[t]].alpha=0,this.up_arrows[a[t]].alpha=0}set_stats(){this.base_window.update_text(this.char.class.name,this.before_class_text);const t=this.char.preview_djinn_change(a,[this.djinn.key_name],[this.next_djinni_status]);this.base_window.update_text(t.class_name,this.after_class_text);for(let e=0;e<a.length;++e){const i=a[e],s=this.char[i],n=t[i];this.base_window.update_text(s.toString(),this.before_stats[i]),this.base_window.update_text(n.toString(),this.after_stats[i]),s>n?this.down_arrows[i].alpha=1:s<n&&(this.up_arrows[i].alpha=1)}}set_djinn(t,e){this.djinn=t,this.next_djinni_status=e,this.hide_arrows(),this.set_stats()}open(t){this.char=t,this.djinn=null,this.next_djinni_status=null,this.hide_arrows(),this.base_window.show(()=>{this.window_open=!0},!1)}close(){this.base_window.close(()=>{this.window_open=!1},!1)}destroy(){this.base_window.destroy(!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemWindow=void 0;const s=i(2),n=i(6),a=i(1),r=i(9),o=i(3);e.ItemWindow=class{constructor(t,e,i,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.base_window=new s.Window(this.game,120,72,116,84),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(96,136,"buttons","item"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,104,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.item_names=[],this.other_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_item.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_item_index.bind(this),this.set_item_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this))}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.item_obj=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{if(!this.window_open||!this.window_active)return;this.data.enter_input.halt();const t=this.data.info.items_list[this.items[this.item_index].key_name];t.use_type!==r.use_types.NO_USE&&this.data.info.abilities_list[t.use_ability].is_battle_ability&&(this.choosen_ability=t.use_ability,this.item_obj=this.items[this.item_index],this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 116}get_cursor_y(){return 84+16*this.item_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_item_index(){return this.item_index}set_item_index(t){this.item_index=t}get_max_elem_on_page(){return this.items.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.item_index>=this.items.length&&(this.item_index=this.items.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}change_item(t,e){this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.set_highlight_bar()}set_highlight_bar(){this.highlight_bar.y=8+16*this.item_index}config_page(){this.clear_sprites(),this.items=this.all_items.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.items.length;++t){const e=this.data.info.items_list[this.items[t].key_name],i=8+16*t,s=i-4;if(this.other_sprites.push(this.base_window.create_at_group(8,s,"items_icons",void 0,this.items[t].key_name)),this.items[t].equipped&&this.other_sprites.push(this.base_window.create_at_group(15,s+8,"equipped")),this.items[t].quantity>1){let e=this.game.add.bitmapText(15,s+8,"gs-item-bmp-font",this.items[t].quantity.toString());this.base_window.add_sprite_to_group(e),this.other_sprites.push(e)}let n=a.DEFAULT_FONT_COLOR;e.use_type!==r.use_types.NO_USE&&this.data.info.abilities_list[e.use_ability].is_battle_ability||(n=a.YELLOW_FONT_COLOR);const o=this.base_window.set_text_in_position(e.name,26,i,!1,!1,n);this.item_names.push(o)}}set_page_number(){const t=this.all_items.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){this.all_items=this.char.items,this.all_items=o.sortBy(this.all_items,[t=>this.data.info.items_list[t.key_name].use_type===r.use_types.NO_USE||!this.data.info.abilities_list[this.data.info.items_list[t.key_name].use_ability].is_battle_ability]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.item_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i){this.char=t,this.close_callback=e,this.set_description=i,this.group.alpha=1,this.item_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.update_position(),this.set_highlight_bar(),this.mount_window(),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.items_list[this.items[this.item_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability,this.item_obj)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SummonWindow=void 0;const s=i(2),n=i(6),a=i(1),r=i(5),o=i(51),_=i(15),h=i(12),c=i(3);e.SummonWindow=class{constructor(t,e,i,a){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.base_window=new s.Window(this.game,104,88,132,68),this.base_window.init_page_indicator_bar(),this.group=this.game.add.group(),this.button=this.group.create(80,136,"buttons","summon"),this.group.alpha=0,this.highlight_bar=this.game.add.graphics(0,0),this.highlight_bar.blendMode=PIXI.blendModes.SCREEN,this.highlight_bar.alpha=0,this.base_window.add_sprite_to_group(this.highlight_bar),this.highlight_bar.beginFill(this.base_window.color,1),this.highlight_bar.drawRect(8,0,120,8),this.highlight_bar.endFill(),this.signal_bindings=this.set_control(),this.summon_names=[],this.other_sprites=[],this.cursor_control=new n.CursorControl(this.game,!0,!0,this.get_max_pages.bind(this),this.get_max_elem_on_page.bind(this),this.group,this.change_page.bind(this),this.change_summon.bind(this),this.get_page_index.bind(this),this.set_page_index.bind(this),this.get_summon_index.bind(this),this.set_summon_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.djinn_numbers_window=new o.SummonDjinnStandbyWindow(t)}set_control(){return[this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_ability=null,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.choosen_ability=this.summons[this.summon_index].key_name,this.hide(this.close_callback))},this,this.enter_propagation_priority)]}get_cursor_x(){return 98}get_cursor_y(){return 100+16*this.summon_index}is_open(){return this.window_open}is_active(){return this.window_active}get_page_index(){return this.page_index}set_page_index(t){this.page_index=t}get_summon_index(){return this.summon_index}set_summon_index(t){this.summon_index=t}get_max_elem_on_page(){return this.summons.length}get_max_pages(){return this.page_number}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}change_page(t,e){this.config_page(),this.summon_index>=this.summons.length&&(this.summon_index=this.summons.length-1,this.cursor_control.set_cursor_position()),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}change_summon(t,e){this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.set_highlight_bar(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements)}set_highlight_bar(){this.highlight_bar.y=8+16*this.summon_index}config_page(){this.clear_sprites(),this.summons=this.all_summons.slice(4*this.page_index,4*(this.page_index+1));for(let t=0;t<this.summons.length;++t){const e=this.data.info.abilities_list[this.summons[t].key_name],i=8+16*t,s=i-3;this.other_sprites.push(this.base_window.create_at_group(10,s,"abilities_icons",void 0,this.summons[t].key_name));let n=a.DEFAULT_FONT_COLOR;this.summons[t].available||(n=a.RED_FONT_COLOR);const r=this.base_window.set_text_in_position(e.name,28,i,!1,!1,n);this.summon_names.push(r)}}set_page_number(){const t=this.all_summons.length;this.page_number=1+((t-1)/4|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}mount_window(){const t=r.Djinn.get_standby_djinni(this.data.info.djinni_list,h.MainChar.get_active_players(this.data.info.party_data,_.MAX_CHARS_IN_BATTLE));for(let e in t)t[e]-=this.djinni_already_used[e];this.all_summons=c.map(this.data.dbs.summons_db,e=>{const i=c.every(e.requirements,(e,i)=>e<=t[i]);return Object.assign({},e,{available:i,index:i?-e.index:e.index})}),this.all_summons=c.sortBy(this.all_summons,[t=>t.index]),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index),this.config_page()}clear_sprites(){this.summon_names.forEach(t=>{this.base_window.remove_text(t)}),this.other_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)})}open(t,e,i,s){this.char=t,this.close_callback=e,this.set_description=i,this.djinni_already_used=s,this.group.alpha=1,this.summon_index=0,this.page_index=0,this.choosen_ability=null,this.highlight_bar.alpha=1,this.djinn_numbers_window.open(),this.update_position(),this.set_highlight_bar(),this.mount_window(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.cursor_control.activate(),this.set_description&&this.set_description(this.data.info.abilities_list[this.summons[this.summon_index].key_name].description),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0},!1)}show(){this.group.alpha=1,this.highlight_bar.alpha=1,this.cursor_control.activate(),this.djinn_numbers_window.open(),this.djinn_numbers_window.set_numbers(this.summons[this.summon_index].requirements),this.base_window.show(()=>{this.window_active=!0},!1)}hide(t){this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.group.alpha=0,this.highlight_bar.alpha=0,this.cursor_control.deactivate(),this.djinn_numbers_window.close(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_ability)},!1)}destroy(){this.signal_bindings.forEach(t=>{t.detach()}),this.base_window.destroy(!1),this.group.destroy(),this.cursor_control.destroy(),this.djinn_numbers_window.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SummonDjinnStandbyWindow=void 0;const s=i(2),n=i(0);e.SummonDjinnStandbyWindow=class{constructor(t){this.game=t,this.base_window=new s.Window(this.game,160,64,76,20),this.texts={},this.graphics={},this.timers={};for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.base_window.create_at_group(9+16*t,9,e+"_star"),this.texts[e]=this.base_window.set_text_in_position("",22+16*t,8,!0),this.graphics[e]=this.game.add.graphics(0,0),this.graphics[e].blendMode=PIXI.blendModes.SCREEN,this.base_window.add_sprite_to_group(this.graphics[e]),this.graphics[e].beginFill(this.base_window.color,1),this.graphics[e].drawRect(8+16*t,8,16,8),this.graphics[e].endFill()}this.window_open=!1}blink(t,e){this.timers[t]=this.game.time.create(!1),this.timers[t].loop(150,()=>{e.alpha=+!e.alpha}),this.timers[t].start()}set_numbers(t){for(let e in t){const i=t[e];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null),i?this.blink(e,this.graphics[e]):this.graphics[e].alpha=0,this.base_window.update_text(i.toString(),this.texts[e])}}open(){this.base_window.show(void 0,!1),this.window_open=!0}close(){this.base_window.close(void 0,!1),this.window_open=!1;for(let t=0;t<n.ordered_elements.length;++t){const e=n.ordered_elements[t];this.timers[e]&&(this.timers[e].destroy(),this.timers[e]=null)}}destroy(){this.base_window.destroy(!1);for(let t in this.timers)this.timers[t]&&this.timers[t].destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ChoosingTargetWindow=void 0;const s=i(2),n=i(1),a=i(0),r=i(3);e.ChoosingTargetWindow=class{constructor(t,e){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,136,0,20),this.window_open=!1,this.group=this.game.add.group()}update_position(){this.group.x=this.game.camera.x,this.group.y=this.game.camera.y}set_button(){const t=this.group.create(this.x-24,136,"buttons",this.action);this.sprites.push(t)}set_info(){const t=this.base_window.set_text_in_position(this.ability_name,this.ability_name_x,8);if(this.texts.push(t),this.element&&this.element!==a.elements.NO_ELEMENT&&"summon"!==this.action){const t=this.base_window.create_at_group(this.star_x,9,this.element+"_star");this.window_sprites.push(t)}if(this.icon_sprite_sheet&&"item"!==this.action){const t=this.base_window.create_at_group(9,5,this.icon_sprite_sheet,void 0,this.ability_key_name);this.window_sprites.push(t)}if("psynergy"===this.action){const t=this.base_window.set_text_in_position(this.quantities[0].toString(),123,8,!0);this.texts.push(t);const e=this.base_window.set_text_in_position("PP",96,8);this.texts.push(e)}else if("summon"===this.action){const t=r.pickBy(this.data.dbs.summons_db[this.ability_key_name].requirements,t=>t);let e=0;a.ordered_elements.forEach(i=>{if(!(i in t))return;const s=0===e?97:113,n=this.base_window.create_at_group(s,9,i+"_star");this.window_sprites.push(n);const a=this.base_window.set_text_in_position(t[i].toString(),s+6+1,8);this.texts.push(a),++e})}else if("item"===this.action){if(this.icon_group=this.game.add.group(),this.icon_group.create(0,0,this.icon_sprite_sheet,this.ability_key_name).anchor.setTo(.5,.5),this.item_obj.equipped&&this.icon_group.create(0,0,"equipped"),this.item_obj.quantity>1){let t=this.game.add.bitmapText(0,0,"gs-item-bmp-font",this.item_obj.quantity.toString());this.icon_group.add(t)}this.base_window.add_sprite_to_group(this.icon_group),this.icon_group.x=9+(n.ICON_WIDTH>>1),this.icon_group.y=5+(n.ICON_HEIGHT>>1),this.window_sprites.push(this.icon_group)}}open(t,e,i,s,n,a){switch(this.action=t,this.ability_name=e,this.element=i,this.ability_key_name=s,this.quantities=n,this.action){case"attack":this.width=84,this.x=88,this.ability_name_x=24;break;case"psynergy":this.width=140,this.x=64,this.ability_name_x=24,this.star_x=129,this.icon_sprite_sheet="abilities_icons";break;case"djinni":this.width=76,this.x=88,this.ability_name_x=24,this.star_x=9;break;case"summon":this.width=132,this.x=80,this.ability_name_x=24,this.icon_sprite_sheet="abilities_icons";break;case"item":this.width=124,this.x=72,this.ability_name_x=32,this.icon_sprite_sheet="items_icons",this.item_obj=a}this.base_window.update_size({width:this.width}),this.base_window.update_position({x:this.x}),this.base_window.show(void 0,!1),this.sprites=[],this.window_sprites=[],this.texts=[],this.update_position(),this.set_button(),this.set_info(),this.window_open=!0}close(){this.sprites.forEach(t=>{t.destroy()}),this.texts.forEach(t=>{this.base_window.remove_text(t)}),this.window_sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.sprites=[],this.window_sprites=[],this.texts=[],this.base_window.close(void 0,!1),this.icon_group&&(this.icon_group.destroy(),this.icon_group=null),this.window_open=!1,this.element=void 0,this.icon_sprite_sheet=void 0}destroy(){this.base_window.destroy(!1),this.group.destroy(),this.icon_group&&this.icon_group.destroy()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EnemyAI=void 0;const s=i(7);e.EnemyAI=class{static roll_action(t,e,i){let n=!1;return{key_name:"attack",targets:e.map((t,e)=>{let i=!t.has_permanent_status(s.permanent_status.DOWNED);const a={magnitude:i&&!n?1:null,target:{instance:i&&!n?t:null},type:"attack"};return i&&!n&&(n=!0),a})}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleFormulas=e.DELUSION_MISS_CHANCE=e.EVASION_CHANCE=e.CRITICAL_CHANCE=void 0;const s=i(0),n=i(7),a=i(1),r=i(3);e.CRITICAL_CHANCE=1/32,e.EVASION_CHANCE=1/32,e.DELUSION_MISS_CHANCE=.66;e.BattleFormulas=class{static player_turn_speed(t,e=!1,i=!1){return(t+(t*r.random(0,65535)>>20))*(i?.5:1)+(e?1e4:0)}static enemy_turn_speed(t,e,i,s=!1){const n=s?1e4:0;if(1===e)return t+n;if(2===i)return(t>>1)+n;if(3===i)switch(e){case 2:return 3*t/4+n;case 3:return(t>>1)+n}return(t>>1)+n}static base_damage(t,e){const i=t.current_atk-e.current_def;return(i<0?0:i)/2}static special_physical_attack(t,e,i,s){return this.base_damage(t,e)*i+s}static power_multiplier(t,e,i,n=!0){let o=100,_=100;if(i!==s.elements.NO_ELEMENT){if(_=e[i+"_resist_current"],void 0!==t){o=t[i+"_power_current"]}}return 1+r.clamp(o-_,a.ELEM_ATTR_MIN,a.ELEM_ATTR_MAX)/(n?200:400)}static physical_attack(t,e,i,s,n){return this.special_physical_attack(t,e,i,s)*this.power_multiplier(t,e,n,!1)}static psynergy_damage(t,e,i,s){return i+this.power_multiplier(t,e,s,!0)}static item_damage(t,e,i){return e+this.power_multiplier(void 0,t,i,!0)}static heal_ability(t,e,i){let n=100;if(i!==s.elements.NO_ELEMENT){n=t[i+"_power_current"]}return e*n/100}static summon_damage(t,e,i){return e+t.max_hp*i*.03}static ailment_success(t,e,i,s,n,a){const r=n+"_level_current";return 3*(t[r]-e[r]-(e.current_luk>>1))/100+i+(a=void 0===a?0:a)*s>=Math.random()}static ailment_recovery(t,e,i){return 655*(3*t.current_luk-5*e+100*i)>=r.random(0,65535)}static battle_poison_damage(t,e){let i=0;switch(e){case n.permanent_status.POISON:i=1;break;case n.permanent_status.VENOM:i=2}return i*t.max_hp/10|0}static summon_power(t){return 5*((t=r.clamp(t,0,4))*t+t)}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimationManager=void 0;const n=i(56);e.BattleAnimationManager=class{constructor(t,e){this.game=t,this.data=e,this.animations={},this.not_available=new Set,this.render_function=null}load_animation(t){return s(this,void 0,void 0,(function*(){if(t in this.animations||this.not_available.has(t)||"no_animation"===t)return;const e=t+"_battle_animation",i=t+"_battle_recipe",s=this.game.load.atlasJSONHash(e,`assets/images/abilities_animations/${t}.png`,`assets/images/abilities_animations/${t}.json`),a=this.game.load.json(i,`assets/dbs/abilities_animations/${t}_db.json`);let r,o=!0;const _=new Promise(t=>{r=t});let h;s.onFileComplete.addOnce((t,e,i)=>{o=o&&i,r()});const c=new Promise(t=>{h=t});let l;a.onFileComplete.addOnce((t,e,i)=>{o=o&&i,h()});const d=new Promise(t=>l=t);if(this.game.load.onLoadComplete.addOnce(l),this.game.load.start(),yield Promise.all([_,c,d]),o){const e=this.game.cache.getJSON(t+"_battle_recipe");this.animations[t]=new n.BattleAnimation(this.game,e.key_name,e.sprites,e.x_sequence,e.y_sequence,e.x_ellipse_axis_factor_sequence,e.y_ellipse_axis_factor_sequence,e.x_scale_sequence,e.y_scale_sequence,e.x_anchor_sequence,e.y_anchor_sequence,e.alpha_sequence,e.rotation_sequence,e.stage_angle_sequence,e.hue_angle_sequence,e.tint_sequence,e.grayscale_sequence,e.colorize_sequence,e.custom_filter_sequence,e.play_sequence,e.set_frame_sequence,e.blend_mode_sequence,e.is_party_animation)}else this.not_available.add(t)}))}animation_available(t){return t in this.animations}play(t,e,i,n,a,r){return s(this,void 0,void 0,(function*(){if(!(t in this.animations))return;const s=t+"_battle_animation";let o;this.animations[t].initialize(s,e,i,n,a,r.battle_group,r.camera_angle,[r.battle_bg,r.battle_bg2]);const _=new Promise(t=>{o=t});this.render_function=this.animations[t].render.bind(this.animations[t]),this.animations[t].play(o),yield _,this.render_function=null}))}render(){this.render_function&&this.render_function()}destroy(){for(let t in this.animations)this.game.cache.removeTextureAtlas(t+"_battle_animation"),this.game.cache.removeJSON(t+"_battle_recipe")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BattleAnimation=void 0;const s=i(1),n=i(0),a=i(21);class r{constructor(t,e,i,s,n,a,r,o,_,h,c,l,d,p,u,g,m,y,b,f,w,v,x){this.game=t,this.key_name=e,this.sprites_keys=i,this.x_sequence=s,this.y_sequence=n,this.x_ellipse_axis_factor_sequence=a,this.y_ellipse_axis_factor_sequence=r,this.x_scale_sequence=o,this.y_scale_sequence=_,this.x_anchor_sequence=h,this.y_anchor_sequence=c,this.alpha_sequence=l,this.rotation_sequence=d,this.stage_angle_sequence=p,this.hue_angle_sequence=u,this.tint_sequence=g,this.grayscale_sequence=m,this.colorize_sequence=y,this.custom_filter_sequence=b,this.play_sequence=f,this.set_frame_sequence=w,this.blend_mode_sequence=v,this.is_party_animation=x,this.running=!1}initialize(t,e,i,s,n,a,r,o){this.sprites=[],this.sprites_prev_properties={},this.stage_prev_value=void 0,this.x0=this.game.camera.x,this.y0=this.game.camera.y,this.caster_sprite=e,this.targets_sprites=i,this.background_sprites=o,this.group_caster=s,this.group_enemy=n,this.super_group=a,this.stage_camera=r,this.trails_objs=[];for(let e=0;e<this.sprites_keys.length;++e){const i=this.sprites_keys[e];let r;if(i.trails&&(r=this.initialize_trail_textures(i.trail_frame_diff,i.trails_mode)),!i.per_target){const e=i.count?i.count:1;for(let o=0;o<e;++o){const e=this.game.add.sprite(this.x0,this.y0,t);let o,_;a.getChildIndex(s)<a.getChildIndex(n)?(o=s,_=n):(o=n,_=s),"over"===i.position?a.addChild(e):"between"===i.position?a.addChildAt(e,a.getChildIndex(_)):"behind"===i.position&&a.addChildAt(e,a.getChildIndex(o));const h=Phaser.Animation.generateFrameNames(i.key_name+"/",1,e.animations.frameTotal,"",3);e.animations.add(i.key_name,h),e.animations.frameName=h[0],e.data.battle_index=this.sprites.length,e.data.trails=i.trails,e.data.trails_info=r,i.trails&&(e.data.x_history=new Array(r.frame_diff+1).fill(e.x-this.game.camera.x),e.data.y_history=new Array(r.frame_diff+1).fill(e.y-this.game.camera.y)),this.sprites.push(e)}}}this.set_filters()}initialize_trail_textures(t,e){switch(e){case"screen":e=PIXI.blendModes.SCREEN;break;case"normal":e=PIXI.blendModes.NORMAL}const i=this.game.add.renderTexture(s.GAME_WIDTH,s.GAME_HEIGHT);let n=this.game.add.sprite(this.game.camera.x,this.game.camera.y,i);n.blendMode=e,n.alpha=.6;const a=this.game.add.renderTexture(s.GAME_WIDTH,s.GAME_HEIGHT);let r=this.game.add.sprite(this.game.camera.x,this.game.camera.y,a);return r.blendMode=e,r.alpha=.4,this.trails_objs=this.trails_objs.concat(i,a,n,r),{texture_1:i,texture_2:a,frame_diff:t}}set_filters(){this.caster_filter=this.game.add.filter("ColorFilters"),this.targets_filter=this.game.add.filter("ColorFilters"),this.background_filter=this.game.add.filter("ColorFilters"),this.sprites_filters=[],this.caster_sprite.filters=[this.caster_filter],this.targets_sprites.forEach(t=>{t.filters=[this.targets_filter]}),this.background_sprites.forEach(t=>{t.filters=[this.background_filter]}),this.sprites.forEach((t,e)=>{this.sprites_filters.push(this.game.add.filter("ColorFilters")),t.filters=[this.sprites_filters[e]]})}play(t){this.running=!0,this.promises=[],this.play_number_property_sequence(this.x_sequence,"x"),this.play_number_property_sequence(this.y_sequence,"y"),this.play_number_property_sequence(this.x_ellipse_axis_factor_sequence,"ellipses_semi_major"),this.play_number_property_sequence(this.y_ellipse_axis_factor_sequence,"ellipses_semi_minor"),this.play_number_property_sequence(this.alpha_sequence,"alpha"),this.play_number_property_sequence(this.rotation_sequence,"rotation"),this.play_number_property_sequence(this.x_scale_sequence,"x","scale"),this.play_number_property_sequence(this.y_scale_sequence,"y","scale"),this.play_number_property_sequence(this.x_anchor_sequence,"x","anchor"),this.play_number_property_sequence(this.y_anchor_sequence,"y","anchor"),this.play_number_property_sequence(this.hue_angle_sequence,"hue_adjust","filter"),this.play_number_property_sequence(this.grayscale_sequence,"gray","filter"),this.play_sprite_sequence(),this.play_blend_modes(),this.play_filter_property(this.tint_sequence,"tint"),this.play_filter_property(this.colorize_sequence,"colorize","colorize_intensity"),this.play_filter_property(this.custom_filter_sequence),this.play_stage_angle_sequence(),this.unmount_animation(t)}unmount_animation(t){Promise.all(this.promises).then(()=>{this.caster_filter=null,this.targets_filter=null,this.background_filter=null,this.sprites_filters=[],this.caster_sprite.filters=void 0,this.targets_sprites.forEach(t=>{t.filters=void 0}),this.background_sprites.forEach(t=>{t.filters=void 0}),this.sprites.forEach(t=>{t.destroy()}),this.trails_objs.forEach(t=>{t.destroy(!0)}),this.running=!1,void 0!==t&&t()})}get_sprites(t,e){return e?"background"===t.sprite_index?"filter"===e?[this.background_filter]:this.background_sprites.forEach(t=>t[e]):"caster"===t.sprite_index?"filter"===e?[this.caster_filter]:[this.caster_sprite[e]]:"targets"===t.sprite_index?"filter"===e?[this.targets_filter]:this.targets_sprites.forEach(t=>t[e]):"filter"===e?Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites_filters[t]):[this.sprites_filters[t.sprite_index]]:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t][e]):[this.sprites[t.sprite_index][e]]:"background"===t.sprite_index?this.background_sprites:"caster"===t.sprite_index?[this.caster_sprite]:"targets"===t.sprite_index?this.targets_sprites:Array.isArray(t.sprite_index)?t.sprite_index.map(t=>this.sprites[t]):[this.sprites[t.sprite_index]]}play_number_property_sequence(t,e,i){let a={},o={};for(let _=0;_<t.length;++_){const h=t[_];h.sprite_index in o||(o[h.sprite_index]=!0),h.sprite_index in a&&(o[h.sprite_index]=!1);let c=this.get_sprites(h,i),l=!1;c.forEach((t,i)=>{let _;_=t.data?t.key+"_"+t.data.battle_index:i,void 0===this.sprites_prev_properties[_]&&(this.sprites_prev_properties[_]={}),void 0===this.sprites_prev_properties[_][e]&&(this.sprites_prev_properties[_][e]=t[e]);const c=Array.isArray(h.to)?h.to[i]:h.to;let d=c;if("target"===c){const t=Array.isArray(h.shift)?h.shift[i]:h.shift;d=this.targets_sprites[this.targets_sprites.length>>1][e]+(void 0===t?0:t)}if(["rotation","hue_adjust"].includes(e)&&(this.sprites_prev_properties[_][e]=n.range_360(this.sprites_prev_properties[_][e]),t[e]=this.sprites_prev_properties[_][e],d=r.get_angle_by_direction(this.sprites_prev_properties[_][e],c,h.direction,"rotation"===e),Math.abs(this.sprites_prev_properties[_][e]-d)>s.degree360&&(d-=Math.sign(d)*s.degree360)),d=h.is_absolute?d:this.sprites_prev_properties[_][e]+c,h.yoyo||(this.sprites_prev_properties[_][e]=d),"initial"===h.tween)t[e]=d;else{h.sprite_index in a||(a[h.sprite_index]={[i]:[]}),i in a[h.sprite_index]||(a[h.sprite_index][i]=[]);const s=Array.isArray(h.start_delay)?h.start_delay[i]:h.start_delay;if("instantly"===h.duration){let i;if(!l){let t=new Promise(t=>{i=t});this.promises.push(t),l=!0}this.game.time.events.add(s,()=>{t[e]=d,h.force_stage_update&&this.stage_camera.update(),h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),void 0!==i&&i()})}else{const r=this.game.add.tween(t).to({[e]:d},Array.isArray(h.duration)?h.duration[i]:h.duration,h.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),o[h.sprite_index],s,0,void 0!==h.yoyo&&h.yoyo);if(!l){let i,s=new Promise(t=>{i=t});this.promises.push(s),r.onStart.addOnce(()=>{h.force_stage_update&&(this.stage_camera.spining=!0)}),r.onComplete.addOnce(()=>{h.is_absolute&&["rotation","hue_adjust"].includes(e)&&(t[e]=n.range_360(t[e])),i(),h.force_stage_update&&(this.stage_camera.spining=!1)}),l=!0}a[h.sprite_index][i].length&&a[h.sprite_index][i][a[h.sprite_index][i].length-1].chain(r),a[h.sprite_index][i].push(r)}}})}}play_sprite_sequence(){for(let t=0;t<this.play_sequence.length;++t){const e=this.play_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{e.reverse?t.animations.getAnimation(e.animation_key).reversed=!0:t.animations.getAnimation(e.animation_key).reversed=!1,t.animations.play(e.animation_key,e.frame_rate,e.repeat),e.wait?t.animations.currentAnim.onComplete.addOnce(()=>{e.hide_on_complete&&(t.alpha=0),s()}):s()})})}}play_blend_modes(){for(let t=0;t<this.blend_mode_sequence.length;++t){const e=this.blend_mode_sequence[t];this.get_sprites(e).forEach((t,i)=>{let s,n=new Promise(t=>{s=t});this.promises.push(n);const a=Array.isArray(e.start_delay)?e.start_delay[i]:e.start_delay;this.game.time.events.add(a,()=>{switch(e.mode){case"screen":t.blendMode=PIXI.blendModes.SCREEN;break;case"normal":t.blendMode=PIXI.blendModes.NORMAL}}),s()})}}play_filter_property(t,e,...i){for(let s=0;s<t.length;++s){const n=t[s];this.get_sprites(n).forEach((t,s)=>{let a,r=new Promise(t=>{a=t});this.promises.push(r);const o=Array.isArray(n.start_delay)?n.start_delay[s]:n.start_delay;this.game.time.events.add(o,()=>{const s=void 0!==n.filter?n.filter:e;t.filters[0][s]=n.value,i.forEach(e=>{t.filters[0][e]=n[e]})}),a()})}}play_stage_angle_sequence(){let t=[];for(let e=0;e<this.stage_angle_sequence.length;++e){const i=this.stage_angle_sequence[e];let o;if(void 0===this.stage_prev_value&&(this.stage_prev_value=this.stage_camera.rad),"default"===i.to?o=a.DEFAULT_POS_ANGLE:i.is_absolute?(this.stage_prev_value=n.range_360(this.stage_prev_value),this.stage_camera.rad=this.stage_prev_value,o=r.get_angle_by_direction(this.stage_prev_value,i.to,i.direction,!0),Math.abs(this.stage_prev_value-o)>s.degree360&&(o-=Math.sign(o)*s.degree360)):o=this.stage_prev_value+i.to,this.stage_prev_value=o,"initial"===i.tween)i.is_absolute?this.stage_camera.rad=o:this.stage_camera.rad+=o;else{const e=this.game.add.tween(this.stage_camera).to({rad:o},i.duration,i.tween.split(".").reduce((t,e)=>t[e],Phaser.Easing),0===t.length,i.start_delay);let s,a=new Promise(t=>{s=t});this.promises.push(a),e.onStart.addOnce(()=>{this.stage_camera.spining=!0}),e.onComplete.addOnce(()=>{i.is_absolute&&(this.stage_camera.rad=n.range_360(this.stage_camera.rad)),this.stage_camera.spining=!1,s()}),t.length&&t[t.length-1].chain(e),t.push(e)}}}render(){let t=!0;this.sprites.forEach(e=>{e.data.trails&&(e.data.x_history.unshift(e.x),e.data.y_history.unshift(e.y),t&&(e.data.trails_info.texture_1.clear(),e.data.trails_info.texture_2.clear(),t=!1),e.data.trails_info.texture_1.renderXY(e,e.data.x_history[e.data.trails_info.frame_diff>>1],e.data.y_history[e.data.trails_info.frame_diff>>1]),e.data.trails_info.texture_2.renderXY(e,e.data.x_history.pop(),e.data.y_history.pop()))})}static get_angle_by_direction(t,e,i,a=!1){let r;if(r=a?(e=s.degree360-e)<t?"counter_clockwise":"clockwise":e>t?"counter_clockwise":"clockwise",r===i)return e;const o=e%s.degree360-t%s.degree360,_=Math.sign(o)*s.degree360-o,h=t%s.degree360-_;if("closest"===i){let i,a;return h>0?(a=h-n.range_360(t),i=s.degree360-a):(i=e-n.range_360(t),a=s.degree360-i),Math.abs(i)<Math.abs(a)?e:h}return h}}e.BattleAnimation=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.load_databases=void 0;const s=i(3);e.load_databases=function(t,e){e.init_db=t.cache.getJSON("init_db"),e.npc_db=t.cache.getJSON("npc_db"),e.interactable_objects_db=t.cache.getJSON("interactable_objects_db"),e.misc_animations_db=t.cache.getJSON("misc_animations_db"),e.classes_db=t.cache.getJSON("classes_db"),e.abilities_db=t.cache.getJSON("abilities_db"),e.items_db=t.cache.getJSON("items_db"),e.djinni_db=t.cache.getJSON("djinni_db"),e.enemies_db=t.cache.getJSON("enemies_db"),e.enemies_parties_db=t.cache.getJSON("enemies_parties_db"),e.maps_db=t.cache.getJSON("maps_db"),e.main_chars_db=t.cache.getJSON("main_chars_db"),e.summons_db=t.cache.getJSON("summons_db"),e.shopkeep_dialog_db=t.cache.getJSON("shopkeep_dialog_db"),e.shops_db=t.cache.getJSON("shops_db"),e.shopkeep_dialog_db=s.mapKeys(e.shopkeep_dialog_db,t=>t.key_name),e.interactable_objects_db=s.mapKeys(e.interactable_objects_db,t=>t.key_name),e.enemies_parties_db=s.mapKeys(e.enemies_parties_db,t=>t.key_name),e.npc_db=s.mapKeys(e.npc_db,t=>t.key_name),e.summons_db=s.mapKeys(e.summons_db,(t,e)=>(t.index=parseInt(e),t.key_name))}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_game_data=void 0;const n=i(59),a=i(60),r=i(66),o=i(67),_=i(68),h=i(69),c=i(76),l=i(92),d=i(93),p=i(106);e.initialize_game_data=function(t,e){return s(this,void 0,void 0,(function*(){let i;const s=new Promise(t=>{i=t});let u;e.info.maps_list=h.initialize_maps(t,e,e.dbs.maps_db,i),yield s,e.info.classes_list=n.initialize_classes(e.dbs.classes_db);const g=new Promise(t=>{u=t});let m;e.info.enemies_list=_.initialize_enemies(t,e.dbs.enemies_db,u),yield g,e.info.djinni_list=o.initialize_djinni(e.dbs.djinni_db);const y=new Promise(t=>{m=t});let b;e.info.djinni_sprites=o.initialize_djinni_sprites(t,m),yield y;const f=new Promise(t=>{b=t});let w;e.info.abilities_list=a.initialize_abilities(t,e.dbs.abilities_db,b),yield f;const v=new Promise(t=>{w=t});let x;e.info.items_list=r.initialize_items(t,e.dbs.items_db,w),yield v,e.info.party_data={members:[],coins:e.dbs.init_db.coins,game_tickets:{coins_remaining:300,tickets_bought:0}};const k=new Promise(t=>{x=t});let E;e.info.main_char_list=n.initialize_main_chars(t,e.info,e.dbs.main_chars_db,e.dbs.classes_db,x),yield k;const j=new Promise(t=>{E=t});e.info.misc_sprite_base_list=l.initialize_misc_data(t,e.dbs.misc_animations_db,E),yield j,e.info.shops_list=p.initialize_shops(e.dbs.shops_db),e.info.field_abilities_list=a.initialize_field_abilities(t,e),e.shop_menu=new d.ShopMenu(t,e),e.main_menu=c.initialize_menu(t,e)}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_main_chars=e.initialize_classes=void 0;const s=i(23),n=i(12);e.initialize_classes=function(t){let e={};for(let i=0;i<t.classes.length;++i){const n=t.classes[i];e[n.key_name]=new s.Classes(n.key_name,n.name,n.required_venus_level,n.required_mercury_level,n.required_mars_level,n.required_jupiter_level,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,n.ability_level_pairs,n.class_type,n.vulnerabilities)}return e},e.initialize_main_chars=function(t,e,i,s,a){let r=[],o={};for(let a=0;a<i.length;++a){const _=i[a],h=new n.MainCharBase(_.key_name,_.actions.map(t=>t.key),_.walk_speed,_.dash_speed,_.climb_speed,_.push_speed);o[_.key_name]=new n.MainChar(_.key_name,e,h,_.name,_.hp_curve,_.pp_curve,_.atk_curve,_.def_curve,_.agi_curve,_.luk_curve,_.exp_curve,_.starting_level,s.class_table,_.battle_scale,_.venus_level_base,_.mercury_level_base,_.mars_level_base,_.jupiter_level_base,_.venus_power_base,_.mercury_power_base,_.mars_power_base,_.jupiter_power_base,_.venus_resist_base,_.mercury_resist_base,_.mars_resist_base,_.jupiter_resist_base,_.innate_abilities,_.in_party,_.djinni,_.items,_.battle_animations_variations),_.in_party&&e.party_data.members.push(o[_.key_name]);for(let t=0;t<_.actions.length;++t){const e=_.actions[t];h.setActionSpritesheet(e.key,e.spritesheet_img,e.spritesheet),h.setActionDirections(e.key,e.directions,e.directions_frames_number),h.setActionFrameRate(e.key,e.frame_rate),h.setActionLoop(e.key,e.loop)}let c;h.generateAllFrames();const l=new Promise(t=>{c=t});r.push(l),h.loadSpritesheets(t,!0,c)}return Promise.all(r).then(a),o}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_field_abilities=e.initialize_abilities=void 0;const s=i(13),n=i(61),a=i(64),r=i(65);e.initialize_abilities=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Ability(i.key_name,i.name,i.description,i.type,i.element,i.battle_target,i.range,i.pp_cost,i.ability_power,i.effects_outside_battle,i.is_battle_ability,i.is_field_psynergy,i.effects,i.ability_category,i.battle_animation_key,i.priority_move,i.has_critical,i.crit_mult_factor,i.can_switch_to_unleash,i.can_be_evaded,i.use_diminishing_ratio,i.msg_type,i.affects_pp,i.has_animation_variation)}return t.load.atlasJSONHash("abilities_icons","assets/images/icons/abilities/abilities_icons.png","assets/images/icons/abilities/abilities_icons.json").onLoadComplete.addOnce(i),t.load.start(),n},e.initialize_field_abilities=function(t,e){return{move:new n.MoveFieldPsynergy(t,e),frost:new a.FrostFieldPsynergy(t,e),growth:new r.GrowthFieldPsynergy(t,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MoveFieldPsynergy=void 0;const s=i(1),n=i(18),a=i(0),r=i(16);class o extends r.FieldAbilities{constructor(t,e){super(t,e,"move",26,"cast",!0),this.set_bootstrap_method(this.init_move.bind(this)),this.set_cast_finisher_method(this.unset_hue_shifter.bind(this)),this.hand_sprite_base=this.data.info.misc_sprite_base_list.move_hand;const i=this.hand_sprite_base.getActionKey("move_hand");this.hand_sprite=this.game.add.sprite(0,0,i),this.hand_sprite.visible=!1,this.hand_sprite_base.setAnimation(this.hand_sprite,"move_hand"),this.emitter=null,this.final_emitter=null,this.set_controls(),this.controls_active=!1}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.right,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.left,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.UP).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.up,this.fire_push())}),this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).onDown.add(()=>{this.controls_active&&(this.controllable_char.trying_to_push_direction=a.directions.down,this.fire_push())}),this.data.esc_input.add(()=>{this.controls_active&&(this.controls_active=!1,this.finish_hand(),this.unset_hero_cast_anim())})}fire_push(){if(this.data.map.collision_layer===this.target_object.base_collision_layer){let t=this.target_object.get_current_position(this.data.map);switch(this.controllable_char.trying_to_push_direction){case a.directions.up:t.y-=1;break;case a.directions.down:t.y+=1;break;case a.directions.left:t.x-=1;break;case a.directions.right:t.x+=1}!this.target_object.position_allowed(t.x,t.y)||this.controllable_char.tile_x_pos===t.x&&this.controllable_char.tile_y_pos===t.y||(this.controls_active=!1,n.target_only_push(this.game,this.data,this.target_object,(t,e)=>{const i=this.hand_sprite.x+t,n=this.hand_sprite.y+e;this.game.add.tween(this.hand_sprite).to({x:i,y:n},s.PUSH_TIME,Phaser.Easing.Linear.None,!0),this.game.time.events.add(s.PUSH_TIME>>1,()=>{let t=!1;if([a.directions.up,a.directions.down].includes(this.cast_direction)&&[a.directions.left,a.directions.right].includes(this.controllable_char.trying_to_push_direction)?(this.cast_direction=a.join_directions(this.cast_direction,this.controllable_char.trying_to_push_direction),t=!0):[a.directions.up,a.directions.down].includes(this.controllable_char.trying_to_push_direction)&&[a.directions.left,a.directions.right].includes(this.cast_direction)&&(this.cast_direction=a.join_directions(this.controllable_char.trying_to_push_direction,this.cast_direction),t=!0),!t)return;this.controllable_char.set_direction(this.cast_direction),this.controllable_char.sprite.animations.stop();const e=a.reverse_directions[this.cast_direction];this.controllable_char.sprite.animations.play("cast_"+e,0),this.controllable_char.sprite.animations.frameName=`cast/${e}/01`})},()=>{Math.pow(this.controllable_char.sprite.body.x-this.target_object.sprite.body.x,2)+Math.pow(this.controllable_char.sprite.body.y-this.target_object.sprite.body.y,2)<=Math.pow(s.HERO_BODY_RADIUS+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,2)&&(this.controllable_char.sprite.body.x=(this.controllable_char.tile_x_pos+.5)*this.data.map.sprite.tileWidth,this.controllable_char.sprite.body.y=(this.controllable_char.tile_y_pos+.5)*this.data.map.sprite.tileHeight,this.controllable_char.shadow.x=this.controllable_char.sprite.body.x,this.controllable_char.shadow.y=this.controllable_char.sprite.body.y),this.controllable_char.sprite.body.velocity.x=this.controllable_char.sprite.body.velocity.y=0,this.finish_hand(),this.unset_hero_cast_anim()},!1,()=>{this.data.map.sort_sprites()}))}}set_hand(){this.data.overlayer_group.add(this.hand_sprite),this.data.overlayer_group.bringToTop(this.hand_sprite),this.hand_sprite.visible=!0,this.hand_sprite.scale.setTo(1,1),this.hand_sprite.send_to_front=!0,this.hand_sprite.base_collision_layer=this.data.map.collision_layer,this.hand_sprite.animations.currentAnim.stop(!0),this.hand_sprite.frameName=this.hand_sprite_base.getFrameName("move_hand",a.reverse_directions[this.cast_direction],0),this.hand_sprite.anchor.x=.5,this.hand_sprite.centerX=this.controllable_char.sprite.centerX,this.hand_sprite.centerY=this.controllable_char.sprite.centerY}translate_hand(){let t=this.hand_sprite.centerX,e=this.hand_sprite.centerY;switch(this.cast_direction){case a.directions.up:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y):e-=16;break;case a.directions.down:this.target_found?(t=this.target_object.sprite.centerX,e=this.target_object.sprite.y-this.target_object.sprite.height+this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius):e+=16;break;case a.directions.right:this.target_found?(t=this.target_object.sprite.x-2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t+=16;break;case a.directions.left:this.target_found?(t=this.target_object.sprite.x+2*this.data.dbs.interactable_objects_db[this.target_object.key_name].body_radius,e=this.target_object.sprite.centerY):t-=16}this.game.add.tween(this.hand_sprite).to({centerX:t,centerY:e},200,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{const t=this.hand_sprite_base.getAnimationKey("move_hand",a.reverse_directions[this.cast_direction]);this.hand_sprite.animations.play(t),this.target_found?(this.target_object.sprite.filters=[this.target_object.color_filter],this.target_hueshift_timer=this.game.time.create(!1),this.target_hueshift_timer.loop(5,()=>{this.target_object.color_filter.hue_adjust=2*Math.random()*Math.PI}),this.target_hueshift_timer.start(),this.controls_active=!0):this.game.time.events.add(700,()=>{this.finish_hand(),this.unset_hero_cast_anim()})})}finish_hand(){let t=this.game.time.create(!1),e={x:1};t.loop(40,()=>{this.hand_sprite.scale.x=this.hand_sprite.scale.x>0?-e.x:e.x}),t.start();let i=this.hand_sprite.y-10;this.game.add.tween(this.hand_sprite).to({y:i},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(e).to({x:0},350,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.hand_sprite.scale).to({y:0},350,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.start_final_emitter(this.hand_sprite.x,this.hand_sprite.y),this.stop_casting(),t.stop(),this.data.overlayer_group.remove(this.hand_sprite,!1),this.unset_emitter()})}set_emitter(){let t=0,e=0;switch(this.cast_direction){case a.directions.up:e=-16;break;case a.directions.down:e=16;break;case a.directions.left:t=-16;break;case a.directions.right:t=16}this.emitter=this.game.add.emitter(this.controllable_char.sprite.centerX+t,this.controllable_char.sprite.centerY+e,150),this.emitter.makeParticles("psynergy_particle"),this.emitter.minParticleSpeed.setTo(-15,-15),this.emitter.maxParticleSpeed.setTo(15,15),this.emitter.gravity=0,this.emitter.width=52,this.emitter.height=52,this.emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_emitter(){this.emitter.start(!1,Phaser.Timer.QUARTER,15,0),this.emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)})}unset_emitter(){this.emitter.destroy()}set_final_emitter(){this.final_emitter_particles_count=8,this.final_emitter=this.game.add.emitter(0,0,this.final_emitter_particles_count),this.final_emitter.makeParticles("psynergy_particle"),this.final_emitter.gravity=300,this.final_emitter.forEach(t=>{t.animations.add("vanish",null,4,!0,!1)})}start_final_emitter(t,e){this.final_emitter.x=t,this.final_emitter.y=e;let i=Phaser.Timer.QUARTER;this.final_emitter.start(!0,i,null,this.final_emitter_particles_count),this.final_emitter.forEach(t=>{t.animations.play("vanish"),t.animations.currentAnim.setFrame(Math.random()*t.animations.frameTotal|0)}),this.game.time.events.add(i,()=>{this.unset_final_emitter()})}unset_final_emitter(){this.final_emitter.destroy()}unset_hue_shifter(){this.target_found&&(this.target_object.sprite.filters=void 0,this.target_hueshift_timer.stop())}init_move(){this.set_emitter(),this.set_final_emitter(),this.search_for_target(),this.set_hand(),this.field_psynergy_window.close(),this.translate_hand(),this.start_emitter()}}e.MoveFieldPsynergy=o},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.tint_map_layers=e.init_cast_aura=void 0,e.init_cast_aura=function(t,e,i,n,a,r,o){e.filters=[n];let _=[],h=!1,c=[];for(let s=0;s<2;++s){let n=i.create(0,0,"psynergy_aura"),a=i.create(0,0,"psynergy_aura");n.base_collision_layer=e.base_collision_layer,a.base_collision_layer=e.base_collision_layer,n.sort_function=()=>{i.setChildIndex(n,i.getChildIndex(e))},n.sort_function(),a.sort_function=()=>{i.setChildIndex(a,i.getChildIndex(e)+1)},a.sort_function();const r=(e.height+a.height-8)/3|0;a.anchor.setTo(.5,0),a.centerX=e.centerX,a.centerY=e.centerY+(e.height>>1)+(a.height>>1);const o=a.y;a.scale.setTo(0,0),n.anchor.setTo(.5,0),n.centerX=e.centerX,n.centerY=e.centerY+(e.height>>1)+(n.height>>1);const l=n.y;n.scale.setTo(0,0);let d=[{aura:a,initial_y:o,scale_factor:1},{aura:n,initial_y:l,scale_factor:-1}];_.push([]);for(let e=0;e<d.length;++e){let i,n=d[e].aura,a=d[e].initial_y,o=d[e].scale_factor,l=t.add.tween(n).to({y:a-r},250,Phaser.Easing.Linear.None),p=t.add.tween(n).to({y:a-2*r},250,Phaser.Easing.Linear.None),u=t.add.tween(n).to({y:a-3*r},250,Phaser.Easing.Linear.None);c.push(new Promise(t=>{i=t})),u.onComplete.add(()=>{n.y=a,h?i():(l.start(),g.start())});let g=t.add.tween(n.scale).to({x:o,y:o},375,Phaser.Easing.Quadratic.Out),m=t.add.tween(n.scale).to({x:0,y:0},375,Phaser.Easing.Quadratic.Out);_[s].push({aura:n,tween_a:l,tween_aa:g,tween_b:p,tween_c:u,tween_cc:m}),l.chain(p),p.chain(u),g.chain(m),s>0&&(g.onComplete.addOnce(()=>{_[0][e].aura.y=a,_[0][e].tween_a.start(),_[0][e].tween_aa.start()}),l.start(),g.start())}}let l=16,d=t.time.create(!1),p=t.time.create(!1);return d.loop(50,()=>{n.tint=l%2==0?[1,1,1]:[-1,-1,-1],--l,0===l&&(n.gray=.4,d.stop(),void 0!==a&&a(),p.start())}),p.loop(100,()=>{n.hue_adjust=2*Math.random()*Math.PI}),d.start(),()=>s(this,void 0,void 0,(function*(){void 0!==o&&o(),h=!0,p.stop(),d.stop(),n.tint=[-1,-1,-1],n.gray=0,n.hue_adjust=0,e.filters=void 0,yield Promise.all(c);for(let t=0;t<_.length;++t)for(let e=0;e<_[t].length;++e)_[t][e].tween_a.stop(),_[t][e].tween_aa.stop(),_[t][e].tween_b.stop(),_[t][e].tween_c.stop(),_[t][e].tween_cc.stop(),i.remove(_[t][e].aura,!0);void 0!==r&&r()}))},e.tint_map_layers=function(t,e,i,s){i.colorize_intensity=0,i.gray=0,i.colorize=Math.random();for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=[i];return t.add.tween(i).to({colorize_intensity:.4,gray:1},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0),()=>{t.add.tween(i).to({colorize_intensity:0,gray:0},Phaser.Timer.QUARTER,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{i.colorize=-1;for(let t=0;t<e.layers.length;++t)e.layers[t].sprite.filters=void 0;void 0!==s&&s()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FieldPsynergyWindow=void 0;const s=i(2),n=i(0),a=i(1),r=(a.GAME_WIDTH>>1)-5,o=(a.GAME_HEIGHT>>1)+a.HERO_BODY_RADIUS+6;e.FieldPsynergyWindow=class{constructor(t,e){this.game=t,this.data=e,this.window=new s.Window(this.game,r,o,10,20),this.text=this.window.set_single_line_text("",!1,!0)}vertical_adjust(){let t=this.data.hero.sprite.y-this.game.camera.y;return t>90?t-90-56:0}open(t,e){const i=n.capitalize(t);this.window.update_text(i,this.text),this.window.update_size({width:10+this.text.text.width,height:20}),this.window.update_position({x:r-(this.text.text.width>>1)|0,y:o+this.vertical_adjust()|0}),this.window.show(()=>{void 0!==e&&e()},!1)}close(t){this.window.close(()=>{void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FrostFieldPsynergy=void 0;const s=i(1),n=i(0),a=i(11),r=i(16),o=i(3),_=7*Math.PI;class h extends r.FieldAbilities{constructor(t,e){super(t,e,"frost",12,"cast",!0),this.set_bootstrap_method(this.init_snowflakes.bind(this))}init_snowflakes(){this.field_psynergy_window.close();for(let t=0;t<16;++t){let e=this.data.overlayer_group.create(0,0,"frost_snowflake");e.anchor.setTo(.5,.5);const i=o.random(5,8)/10,a=Math.random()*s.degree360;e.scale.setTo(i,i),e.rotation=a;let r=this.controllable_char.sprite.centerX,h=this.controllable_char.sprite.centerY+12;switch(this.cast_direction){case n.directions.left:r-=16;break;case n.directions.right:r+=16;break;case n.directions.up:h-=14;break;case n.directions.down:h+=12}let c={rad:_};const l=Math.sign(Math.random()-.5),d=Math.sign(Math.random()-.5),p=this.game.add.tween(c).to({rad:-Math.PI},1650,Phaser.Easing.Linear.None,!0,t*(Phaser.Timer.QUARTER/5));p.onUpdateCallback(()=>{e.centerX=8*l*Math.exp(.15*c.rad)*Math.cos(c.rad)+r,e.centerY=8*d*Math.exp(.15*c.rad)*Math.sin(c.rad)+h}),p.onComplete.addOnce(()=>{e.destroy(),15===t&&(this.target_found?this.init_pillar():(this.unset_hero_cast_anim(),this.stop_casting()))})}}init_pillar(){this.target_object.get_events().forEach(t=>{t.is_set?(t.deactivate(),t.is_set=!1):(t.activate(),t.is_set=!0,a.JumpEvent.active_jump_surroundings(this.data,n.get_surroundings(t.x,t.y,!1,2),this.target_object.collider_layer_shift+this.target_object.base_collision_layer))}),this.target_object.sprite.send_to_back=!1,this.data.map.sort_sprites(),this.target_object.custom_data.color_filters=this.game.add.filter("ColorFilters"),this.target_object.sprite.filters=[this.target_object.custom_data.color_filters];let t=16,e=this.game.time.create(!1);e.loop(50,()=>{this.target_object.custom_data.color_filters.tint=t%2==0?[1,1,1]:[-1,-1,-1],--t,0===t&&(e.stop(),this.grow_pillar())}),e.start()}grow_pillar(){this.target_object.sprite.animations.play("frost_pool_pillar"),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.set_permanent_blink(),this.unset_hero_cast_anim(),this.stop_casting()})}set_permanent_blink(){let t=this.game.time.create(!1),e=this.target_object;t.loop(150,()=>{e.custom_data.color_filters.hue_adjust=5.3,this.game.time.events.add(20,()=>{e.custom_data.color_filters.hue_adjust=0})}),t.start(),e.sprite.events.onDestroy.add(()=>{t.destroy()})}}e.FrostFieldPsynergy=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GrowthFieldPsynergy=void 0;const s=i(0),n=i(16),a=i(3);class r extends n.FieldAbilities{constructor(t,e){super(t,e,"growth",12,"cast",!0),this.set_bootstrap_method(this.init_bubbles.bind(this))}set_emitter(){let t=0,e=0,i=0,n=0,a=this.controllable_char.sprite.centerX,r=this.controllable_char.sprite.centerY+5,o=0,_=0;switch(this.increase_duration=0,this.cast_direction){case s.directions.up:e=-60,n=-55,t=i=35,r-=7,o=6,_=18,this.increase_duration=80;break;case s.directions.down:e=60,n=55,t=i=35,r+=12,o=6,_=18,this.increase_duration=80;break;case s.directions.left:t=-60,i=-55,e=n=35,a-=16,o=18,_=12;break;case s.directions.right:t=60,i=55,e=n=35,a+=16,o=18,_=12}this.emitter=this.game.add.emitter(a,r,20),this.emitter.makeParticles("psynergy_ball"),this.emitter.minParticleSpeed.setTo(i,n),this.emitter.maxParticleSpeed.setTo(t,e),this.emitter.gravity=0,this.emitter.width=o,this.emitter.height=_,this.particle_filter=this.game.add.filter("ColorFilters"),this.particle_filter.hue_adjust=3,this.emitter.maxParticleScale=.5,this.emitter.minParticleScale=.4,this.emitter.forEach(t=>{t.filters=[this.particle_filter],t.animations.add("shine",["ball/01","ball/02","ball/03"],4,!1,!1)})}init_bubbles(){this.field_psynergy_window.close(),this.set_emitter(),this.emitter.start(!1,100+this.increase_duration,8,0),this.emitter.forEach(t=>{t.animations.play("shine")}),this.game.time.events.add(Phaser.Timer.SECOND,()=>{this.target_found?this.grow_sprout():this.miss_target()})}grow_sprout(){this.emitter.destroy(),this.target_object.get_events().forEach(t=>{t.activate()}),this.target_object.sprite.animations.play("growth_growing",8,!1),this.target_object.sprite.animations.currentAnim.onComplete.addOnce(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}miss_target(){this.emitter.destroy();let t=this.controllable_char.sprite.centerX,e=this.controllable_char.sprite.centerY+17;switch(this.cast_direction){case s.directions.up:e-=16;break;case s.directions.down:e+=16;break;case s.directions.left:t-=16;break;case s.directions.right:t+=16}const i=Phaser.Animation.generateFrameNames("growth/no_target/",0,6,"",2);let n=new Array(5);for(let s=0;s<5;++s){let r,o=this.data.overlayer_group.create(t+a.random(-13,13),e+a.random(-13,13),"growth_growth");o.anchor.setTo(.5,1),o.animations.add("no_target",i,10,!1,!1),n.push(new Promise(t=>{r=t})),this.game.time.events.add(40*s,()=>{o.animations.play("no_target"),o.animations.currentAnim.onComplete.addOnce(()=>{o.destroy(),r()})})}Promise.all(n).then(()=>{this.unset_hero_cast_anim(),this.stop_casting()})}}e.GrowthFieldPsynergy=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_items=void 0;const s=i(9);e.initialize_items=function(t,e,i){let n={};for(let t=0;t<e.length;++t){const i=e[t];n[i.key_name]=new s.Item(i.key_name,i.name,i.type,i.description,i.use_type,i.curses_when_equipped,i.cant_be_removed,i.rare_item,i.important_item,i.carry_up_to_30,i.effects,i.attribute,i.unleash_ability,i.unleash_rate,i.use_ability,i.equipable_chars,i.price,i.granted_ability)}return t.load.atlasJSONHash("items_icons","assets/images/icons/items/items_icons.png","assets/images/icons/items/items_icons.json").onLoadComplete.addOnce(i),t.load.start(),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_djinni_sprites=e.initialize_djinni=void 0;const s=i(5),n=i(10),a=i(0);e.initialize_djinni=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Djinn(n.key_name,n.name,n.description,n.element,n.ability_key_name,n.hp_boost,n.pp_boost,n.atk_boost,n.def_boost,n.agi_boost,n.luk_boost,i)}return e},e.initialize_djinni_sprites=function(t,e){const i=["set","standby"],s={set:["down"],standby:["left","down"]},r={set:6,standby:2},o="assets/images/spritesheets/djinn/";let _=[],h={};for(let e in a.elements){const c=a.elements[e];if(c===a.elements.NO_ELEMENT)continue;h[c]=new n.SpriteBase(c+"_djinn",i);for(let t=0;t<i.length;++t){const e=i[t];h[c].setActionSpritesheet(e,`${o}${c}_djinn.png`,`${o}${c}_djinn.json`),h[c].setActionDirections(e,s[e],new Array(s[e].length).fill(4)),h[c].setActionFrameRate(e,r[e])}let l;h[c].generateAllFrames();const d=new Promise(t=>{l=t});_.push(d),h[c].loadSpritesheets(t,!0,l)}return Promise.all(_).then(e),h}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_enemies=void 0;const s=i(25);e.initialize_enemies=function(t,e,i){let n=[],a={};for(let i=0;i<e.length;++i){let r={data:e[i],sprite_base:null};r.sprite_base=new s.EnemyBase(r.data.key_name);const o=r.data.battle_spritesheet;if(void 0!==o){let e;r.sprite_base.setActionSpritesheet("battle",o.spritesheet_img,o.spritesheet),r.sprite_base.setActionDirections("battle",o.positions,o.frames_number),r.sprite_base.setActionFrameRate("battle",o.frame_rate),r.sprite_base.setActionLoop("battle",o.loop),r.sprite_base.generateAllFrames();const i=new Promise(t=>{e=t});n.push(i),r.sprite_base.loadSpritesheets(t,!0,e)}a[r.data.key_name]=r}return Promise.all(n).then(i),a}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_maps=void 0;const s=i(70);e.initialize_maps=function(t,e,i,n){let a={};for(let n=0;n<i.length;++n){const r=i[n];a[r.key_name]=new s.Map(t,e,r.name,r.key_name,r.tileset_key_name,r.collision_key_names,r.tileset_files.image,r.tileset_files.json,r.collision_files,r.lazy_load)}let r=[];for(let t in a){if(a[t].lazy_load)continue;let e;const i=new Promise(t=>{e=t});r.push(i),a[t].load_map_assets(!0,e)}return Promise.all(r).then(n),a}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Map=void 0;const n=i(0),a=i(20),r=i(26),o=i(4),_=i(1),h=i(11),c=i(71),l=i(27),d=i(72),p=i(73),u=i(74),g=i(14),m=i(3),y=i(75);e.Map=class{constructor(t,e,i,s,n,a,r,o,_,h){this.game=t,this.data=e,this.name=i,this.key_name=s,this.tileset_name=n,this.physics_names=a,this.tileset_image_url=r,this.tileset_json_url=o,this.physics_jsons_url=_,this.sprite=null,this.events={},this.npcs=[],this.interactable_objects=[],this.collision_layers_number=this.physics_names.length,this.collision_sprite=this.game.add.sprite(0,0),this.collision_sprite.width=this.collision_sprite.height=0,this.color_filter=this.game.add.filter("ColorFilters"),this.collision_layer=null,this.show_footsteps=!1,this.assets_loaded=!1,this.lazy_load=void 0!==h&&h,this.layers=[]}sort_sprites(){let t=new Array(this.data.npc_group.children.length),e=new Array(this.data.npc_group.children.length),i=new Array(this.data.npc_group.children.length);this.data.npc_group.children.forEach((s,n)=>{s.y_sort=parseInt(s.base_collision_layer.toString()+s.y.toString()),s.sort_function?i[n]=s:s.send_to_back?t[n]=s:s.send_to_front&&(e[n]=s)}),this.data.npc_group.sort("y_sort",Phaser.Group.SORT_ASCENDING);let s=this.data.npc_group.getChildIndex(this.data.hero.sprite)-1;s>=-1&&s<this.data.npc_group.children.length&&(-1===s&&(s=0),this.data.npc_group.setChildIndex(this.data.hero.shadow,s)),t.forEach(t=>{t&&this.data.npc_group.sendToBack(t)}),e.forEach(t=>{t&&this.data.npc_group.bringToTop(t)}),i.forEach(t=>{t&&t.sort_function()})}freeze_body(){this.collision_sprite.body.velocity.y=this.collision_sprite.body.velocity.x=0}update(){this.freeze_body(),this.npcs.forEach(t=>t.update()),this.sort_sprites()}load_map_assets(t,e){let i,s,n=new Promise(t=>{i=t});this.game.load.tilemap(this.key_name,this.tileset_json_url,null,Phaser.Tilemap.TILED_JSON).onLoadComplete.addOnce(i);let a=new Promise(t=>{s=t});this.game.load.image(this.key_name,this.tileset_image_url).onLoadComplete.addOnce(s);let r=[];for(let t=0;t<this.physics_names.length;++t){let e,i=new Promise(t=>{e=t});r.push(i),this.game.load.physics(this.physics_names[t],this.physics_jsons_url[t]).onLoadComplete.addOnce(e)}t&&(Promise.all([n,a,...r]).then(()=>{this.assets_loaded=!0,e()}),this.game.load.start())}config_body(t,e){this.game.physics.p2.enable(this.collision_sprite,!1),this.collision_sprite.body.clearShapes(),this.collision_sprite.body.loadPolygon(this.physics_names[e],this.physics_names[e]),this.collision_sprite.body.setCollisionGroup(t.map_collision_group),this.collision_sprite.body.damping=_.MAP_DAMPING,this.collision_sprite.body.angularDamping=_.MAP_DAMPING,this.collision_sprite.body.setZeroRotation(),this.collision_sprite.body.dynamic=!1,this.collision_sprite.body.static=!0}config_all_bodies(t,e){this.npcs.forEach(e=>e.config_body(t)),this.interactable_objects.forEach(e=>e.config_body(t)),this.config_body(t,e)}get_current_tile(t,e){return void 0!==e?this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e):this.layers.map(e=>this.sprite.getTile(t.tile_x_pos,t.tile_y_pos,e.name)).filter(t=>t)}get_layer(t){return m.find(this.layers,{name:t})}create_tile_events(t){const e=JSON.parse(t),i=o.TileEvent.get_location_key(e.x,e.y);if(i in this.events||(this.events[i]=[]),e.type===o.event_types.CLIMB){const t=new l.ClimbEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,void 0===e.change_to_collision_layer?null:e.change_to_collision_layer);this.events[i].push(t)}else if(e.type===o.event_types.SPEED){const t=new u.SpeedEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.speed);this.events[i].push(t)}else if(e.type===o.event_types.TELEPORT){const t=new c.TeleportEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.target,e.x_target,e.y_target,e.advance_effect,e.dest_collision_layer?e.dest_collision_layer:0);this.events[i].push(t)}else if(e.type===o.event_types.SLIDER){const t=new y.SliderEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.x_target,e.y_target,e.dest_collision_layer?e.dest_collision_layer:0,e.show_dust);this.events[i].push(t)}else if(e.type===o.event_types.JUMP){const t=new h.JumpEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.initially_active||e.initially_active,void 0===e.is_set||e.is_set);this.events[i].push(t)}else if(e.type===o.event_types.STEP){const t=new d.StepEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,n.directions[e.step_direction]);this.events[i].push(t)}else if(e.type===o.event_types.COLLISION){const t=new p.CollisionEvent(this.game,this.data,e.x,e.y,n.map_directions(e.activation_directions),e.activation_collision_layers?e.activation_collision_layers:[0],!1,void 0===e.active||e.active,e.dest_collision_layer);this.events[i].push(t)}}create_npcs(t){const e=JSON.parse(t),i=this.data.dbs.npc_db[e.key_name].initial_action;this.npcs.push(new a.NPC(this.game,this.data,e.key_name,e.initial_x,e.initial_y,i,this.data.dbs.npc_db[e.key_name].actions[i].initial_direction,e.enable_footsteps,e.npc_type,e.movement_type,e.message,e.thought_message,e.avatar?e.avatar:null,e.shop_key,void 0===e.base_collision_layer?0:e.base_collision_layer,e.talk_range_factor,void 0===e.events?[]:e.events))}create_interactable_objects(t){const e=JSON.parse(t),i=new r.InteractableObjects(this.game,this.data,e.key_name,e.x,e.y,void 0===e.allowed_tiles?[]:e.allowed_tiles,void 0===e.base_collision_layer?0:e.base_collision_layer,e.collider_layer_shift,e.not_allowed_tiles,e.object_drop_tiles,e.intermediate_collider_layer_shift);this.interactable_objects.push(i);for(let t in this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys){this.data.dbs.interactable_objects_db[e.key_name].psynergy_keys[t].interaction_type===r.interactable_object_interaction_types.ONCE&&(i.custom_data[t+"_casted"]=!1)}this.data.dbs.interactable_objects_db[e.key_name].pushable&&void 0!==e.block_stair_collider_layer_shift&&(i.custom_data.block_stair_collider_layer_shift=e.block_stair_collider_layer_shift)}config_interactable_object(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.interactable_objects.length;++t){const e=this.interactable_objects[t],i=e.key_name;let s=new r.InteractableObjects_Sprite(e.key_name,[i]);e.sprite_info=s,s.setActionSpritesheet(i,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.image,this.data.dbs.interactable_objects_db[e.key_name].spritesheet.json),s.setActionDirections(i,this.data.dbs.interactable_objects_db[e.key_name].actions.animations,this.data.dbs.interactable_objects_db[e.key_name].actions.frames_count),s.setActionFrameRate(i,this.data.dbs.interactable_objects_db[e.key_name].actions.frame_rate),s.setActionLoop(i,this.data.dbs.interactable_objects_db[e.key_name].actions.loop),s.generateAllFrames(),yield new Promise(t=>{s.loadSpritesheets(this.game,!0,()=>{e.initial_config(this.sprite),e.initialize_related_events(this.events,this),t()})})}}))}config_npc(){return s(this,void 0,void 0,(function*(){for(let t=0;t<this.npcs.length;++t){const e=this.npcs[t],i=this.data.dbs.npc_db[e.key_name];let s=[];e.movement_type===a.npc_movement_types.IDLE&&(s=[n.base_actions.IDLE]);const r=new a.NPC_Sprite(e.key_name,s);for(let t=0;t<s.length;++t){const n=s[t];r.setActionSpritesheet(n,`assets/images/spritesheets/npc/${e.key_name}_${n}.png`,`assets/images/spritesheets/npc/${e.key_name}_${n}.json`),r.setActionDirections(n,i.actions[n].directions,i.actions[n].frames_count),r.setActionFrameRate(n,i.actions[n].frame_rate),r.setActionLoop(n,i.actions[n].loop)}r.generateAllFrames(),yield new Promise(t=>{r.loadSpritesheets(this.game,!0,()=>{e.set_shadow(i.shadow_key,this.data.npc_group,e.base_collision_layer,i.shadow_anchor_x,i.shadow_anchor_y),e.set_sprite(this.data.npc_group,r,this.sprite,e.base_collision_layer,i.anchor_x,i.anchor_y),e.set_sprite_as_npc(),e.play(),t()})})}}))}config_layers(t,e){for(let i=0;i<this.layers.length;++i){let s=this.sprite.createLayer(this.layers[i].name);this.layers[i].sprite=s,this.layers[i].sprite.layer_z=this.layers[i].properties.z,s.resizeWorld(),void 0!==this.layers[i].properties.blendMode&&(s.blendMode=PIXI.blendModes[this.layers[i].properties.blendMode]),void 0!==this.layers[i].alpha&&(s.alpha=this.layers[i].alpha);let n=this.layers[i].properties.over.toString().split(",");n=n.length>this.collision_layer?0|n[this.collision_layer]:0|n[0],0!==n?t.add(s):e.add(s)}}mount_map(t){return s(this,void 0,void 0,(function*(){if(!this.assets_loaded){let t;const e=new Promise(e=>t=e);this.load_map_assets(!0,t),yield e}this.collision_layer=t,this.events={},o.TileEvent.reset(),g.GameEvent.reset(),this.sprite=this.game.add.tilemap(this.key_name),this.sprite.addTilesetImage(this.tileset_name,this.key_name);for(let t=0;t<this.sprite.tilesets.length;++t){const e=this.sprite.tilesets[t];for(let t in e.tileProperties)e.tileProperties[t].index=t}for(let t in this.sprite.properties){const e=this.sprite.properties[t];t.startsWith("event")?this.create_tile_events(e):t.startsWith("npc")?this.create_npcs(e):t.startsWith("interactable_object")&&this.create_interactable_objects(e)}return this.layers=this.sprite.layers.sort((t,e)=>t.properties.over!==e.properties.over||t.properties.z!==e.properties.z?t-e:void 0),this.config_layers(this.data.overlayer_group,this.data.underlayer_group),yield this.config_interactable_object(),yield this.config_npc(),this.sprite.properties.footprint&&(this.show_footsteps=!0),this}))}unset_map(){this.data.underlayer_group.removeAll(),this.data.overlayer_group.removeAll(),this.collision_sprite.body.clearShapes(),this.show_footsteps&&this.data.hero.footsteps.clean_all();let t=[];for(let e=0;e<this.data.npc_group.children.length;++e){let i=this.data.npc_group.children[e];(i.is_npc||i.is_interactable_object)&&(i.is_interactable_object&&i.interactable_object.custom_data.blocking_stair_block&&(i.interactable_object.custom_data.blocking_stair_block.destroy(),i.interactable_object.custom_data.blocking_stair_block=void 0),t.push(i))}for(let e=0;e<t.length;++e){let i=t[e];this.data.npc_group.remove(i,!0)}this.npcs=[],this.interactable_objects=[],this.data.npc_group.removeAll(),this.data.npc_group.add(this.data.hero.shadow),this.data.npc_group.add(this.data.hero.sprite)}}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))((function(n,a){function r(t){try{_(s.next(t))}catch(t){a(t)}}function o(t){try{_(s.throw(t))}catch(t){a(t)}}function _(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,o)}_((s=s.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.TeleportEvent=void 0;const n=i(0),a=i(4),r=i(1),o=i(3);class _ extends a.TileEvent{constructor(t,e,i,s,n,r,o,_,h,c,l,d,p){super(t,e,a.event_types.TELEPORT,i,s,n,r,o,_,null),this.target=h,this.x_target=c,this.y_target=l,this.advance_effect=d,this.dest_collision_layer=p}fire(){if(this.check_position()&&this.data.hero_movement_allowed())if(this.data.tile_event_manager.on_event=!0,this.data.hero.teleporting=!0,this.advance_effect){if(!this.data.hero.stop_by_colliding)return this.data.tile_event_manager.on_event=!1,void(this.data.hero.teleporting=!1);this.data.hero.play(n.base_actions.WALK,n.reverse_directions[n.directions.up]),this.open_door(),this.game.physics.p2.pause();const t=400,e=this.data.map.sprite.tileWidth*(this.x+.5),i=this.data.hero.sprite.y-15;this.game.add.tween(this.data.hero.shadow).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0),this.game.add.tween(this.data.hero.sprite.body).to({x:e,y:i},t,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.camera_fade_in()})}else this.camera_fade_in()}camera_fade_in(){this.data.hero.stop_char(!0),this.data.hero.set_direction(this.activation_directions[0]),this.data.hero.play(n.base_actions.IDLE,n.reverse_directions[this.data.hero.current_direction]),this.game.camera.fade(),this.game.camera.onFadeComplete.addOnce(()=>{this.game.camera.lerp.setTo(1,1),this.change_map()})}change_map(){return s(this,void 0,void 0,(function*(){this.data.map.unset_map();const t=this.target,e=this.dest_collision_layer;this.data.hero.shadow.base_collision_layer=e,this.data.hero.sprite.base_collision_layer=e,this.data.map=yield this.data.info.maps_list[t].mount_map(e),this.game.camera.setBoundsToWorld(),this.game.camera.bounds.width<r.GAME_WIDTH&&(this.game.camera.bounds.width=r.GAME_WIDTH),this.game.camera.bounds.height<r.GAME_HEIGHT&&(this.game.camera.bounds.height=r.GAME_HEIGHT),this.data.collision.config_collision_groups(this.data.map),this.data.map.config_all_bodies(this.data.collision,this.data.map.collision_layer),this.data.collision.config_collisions(this.data.map,this.data.map.collision_layer,this.data.npc_group),this.game.physics.p2.updateBoundsCollisionGroup(),this.data.debug.update_debug_physics(this.data.hero.sprite.body.debug),this.data.hero.sprite.body.x=(this.x_target+.5)*this.data.map.sprite.tileWidth,this.data.hero.sprite.body.y=(this.y_target+.5)*this.data.map.sprite.tileHeight,this.game.physics.p2.resume(),this.camera_fade_out()}))}camera_fade_out(){this.data.hero.update_shadow(),this.data.map.npcs.forEach(t=>t.update()),this.game.camera.flash(0),this.game.camera.onFlashComplete.addOnce(()=>{this.game.camera.lerp.setTo(r.CAMERA_LERP,r.CAMERA_LERP),this.data.tile_event_manager.on_event=!1,this.data.hero.teleporting=!1})}open_door(){const t=o.find(this.data.map.sprite.layers,{name:this.data.map.sprite.properties.door_layer}),e=this.data.map.sprite.getTile(this.x,this.y-1,t.name),i=e.properties.door_type,s=o.filter(this.data.map.sprite.tilesets[0].tileProperties,t=>t.door_type===i&&"close_door"in t&&t.id===e.properties.id);let n,a,r,_,h,c,l;for(let e=0;e<s.length;++e)n=s[e],a=1+(0|n.index),r=n.close_door,_=n.base_offset.split(","),h=this.x+(0|_[0]),c=this.y+(0|_[1])-1,l=parseInt(o.findKey(this.data.map.sprite.tilesets[0].tileProperties,{open_door:r}))+1,this.data.map.sprite.replace(a,l,h,c,1,1,t.name)}}e.TeleportEvent=_},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StepEvent=void 0;const s=i(0),n=i(4);class a extends n.TileEvent{constructor(t,e,i,s,a,r,o,_,h){super(t,e,n.event_types.STEP,i,s,a,r,o,_,null),this.step_direction=h,this.next_x=0,this.next_y=0,this.shift_y=0}set(){let t,e,i=this.y;this.step_direction===s.directions.up?e=-(this.data.map.sprite.tileHeight/4|0):this.step_direction===s.directions.down&&(e=this.data.map.sprite.tileHeight/4|0),this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right&&(t=this.x+1),this.next_x=t,this.next_y=i,this.shift_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.sprite.body.y+=this.shift_y):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.StepEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CollisionEvent=void 0;const s=i(0),n=i(4);class a extends n.TileEvent{constructor(t,e,i,s,a,r,o,_,h){super(t,e,n.event_types.COLLISION,i,s,a,r,o,_,null),this.dest_collision_layer=h,this.next_x=0,this.next_y=0}set(){let t=this.x,e=this.y;this.activation_directions[0]===s.directions.left?t=this.x-1:this.activation_directions[0]===s.directions.right?t=this.x+1:this.activation_directions[0]===s.directions.up?e=this.y-1:this.activation_directions[0]===s.directions.down&&(e=this.y+1),this.next_x=t,this.next_y=e,this.data.tile_event_manager.set_triggered_event(this)}fire(){this.data.hero.tile_x_pos===this.next_x&&this.data.hero.tile_y_pos===this.next_y?(this.data.tile_event_manager.unset_triggered_event(this),this.data.collision.change_map_body(this.data,this.dest_collision_layer)):this.check_position()||this.data.tile_event_manager.unset_triggered_event(this)}}e.CollisionEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SpeedEvent=void 0;const s=i(4);class n extends s.TileEvent{constructor(t,e,i,n,a,r,o,_,h){super(t,e,s.event_types.SPEED,i,n,a,r,o,_,null),this.speed=h}unset(){this.data.tile_event_manager.event_triggered(this)&&!this.check_position()&&(this.data.tile_event_manager.unset_triggered_event(this),this.data.hero.extra_speed-=this.speed)}fire(){this.data.tile_event_manager.event_triggered(this)||(this.data.tile_event_manager.set_triggered_event(this),this.data.hero.extra_speed+=this.speed)}}e.SpeedEvent=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SliderEvent=void 0;const s=i(0),n=i(4);class a extends n.TileEvent{constructor(t,e,i,s,a,r,o,_,h,c,l,d){super(t,e,n.event_types.SLIDER,i,s,a,r,o,_,null),this.x_target=h,this.y_target=c,this.dest_collision_layer=l,this.show_dust=void 0===d||d}fire(){if(!this.data.hero.stop_by_colliding||!this.check_position()||!this.data.hero_movement_allowed(!1))return;this.data.tile_event_manager.on_event=!0,this.data.hero.sliding=!0,this.game.physics.p2.pause();const t=this.data.map.sprite.tileWidth*(this.x+.5),e=this.data.map.sprite.tileHeight*(this.y+.6),i=this.data.map.sprite.tileHeight*this.y;this.data.hero.play(s.base_actions.JUMP,s.reverse_directions[s.directions.down],!1),this.game.time.events.add(200,()=>{this.data.hero.shadow.visible=!1,this.data.hero.current_action=s.base_actions.IDLE,this.data.hero.play(s.base_actions.IDLE,s.reverse_directions[s.directions.down],!1),this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:[i,e]},150,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.show_dust&&this.dust_animation();const t=e+1.2*this.data.map.sprite.tileHeight;this.game.add.tween(this.data.hero.sprite.body).to({y:t},70,Phaser.Easing.Quadratic.Out,!0).onComplete.addOnce(()=>{this.data.hero.set_frame(s.directions.down_right),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down_left),this.game.time.events.add(40,()=>{this.data.hero.set_frame(s.directions.down)})});const t=this.data.map.sprite.tileWidth*(this.x_target+.5),e=this.data.map.sprite.tileHeight*(this.y_target+.5),i=60*Math.abs(this.y_target-this.y);this.game.add.tween(this.data.hero.sprite.body).to({x:t,y:e},i,Phaser.Easing.Linear.None,!0).onComplete.addOnce(()=>{this.data.hero.play(),this.data.hero.update_shadow(),this.data.hero.shadow.visible=!0,this.dest_collision_layer!==this.data.map.collision_layer&&this.data.collision.change_map_body(this.data,this.dest_collision_layer),this.game.time.events.add(80,()=>{this.data.hero.sliding=!1,this.game.physics.p2.resume(),this.data.tile_event_manager.on_event=!1})})})})})}dust_animation(){const t=this.data.info.misc_sprite_base_list.dust,e=this.data.map.sprite.tileWidth*(this.x+.5);for(let i=0;i<6;++i)this.game.time.events.add(40*i,()=>{const i=this.data.hero.sprite.body.x-Math.random()*this.data.map.sprite.tileWidth+(this.data.map.sprite.tileWidth>>1),s=this.data.hero.sprite.body.y-Math.random()*this.data.map.sprite.tileHeight+(this.data.map.sprite.tileHeight>>1),n=this.data.npc_group.create(i,s,"dust");n.base_collision_layer=this.dest_collision_layer,n.anchor.setTo(.5,.5),this.game.add.tween(n).to({x:i+(i<e?-1:1)*(this.data.map.sprite.tileHeight/3),y:s-(this.data.map.sprite.tileHeight>>1)},400,Phaser.Easing.Linear.None,!0),this.data.npc_group.setChildIndex(n,this.data.npc_group.getChildIndex(this.data.hero.sprite)),t.setAnimation(n,"dust");const a=t.getAnimationKey("dust","spread");n.animations.getAnimation(a).onComplete.addOnce(()=>{n.destroy()}),n.animations.play(a)})}}e.SliderEvent=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_menu=e.MainMenu=void 0;const s=i(0),n=i(24),a=i(77),r=i(78),o=i(85),_=i(22);class h{constructor(t,e){this.game=t,this.data=e,this.chars_status_window=new _.CharsStatusWindow(this.game,this.data),this.buttons_keys=["psynergy","djinni","item","status"];let i=0,h=0;this.horizontal_menu=new n.HorizontalMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>s.capitalize(t)),this.button_press.bind(this),h,this.close_menu.bind(this),i),++i,++h,this.psynergy_menu=new a.MainPsynergyMenu(this.game,this.data,i,h),this.item_menu=new r.MainItemMenu(this.game,this.data,i,h),this.djinn_menu=new o.MainDjinnMenu(this.game,this.data,i,h,0,0)}button_press(t){switch(this.buttons_keys[t]){case"psynergy":this.button_press_action(this.psynergy_menu);break;case"djinni":this.button_press_action(this.djinn_menu);break;case"item":this.button_press_action(this.item_menu)}}button_press_action(t){this.horizontal_menu.deactivate(),t.open_menu(t=>{this.horizontal_menu.activate(),this.chars_status_window.update_chars_info(),t&&this.close_menu()})}update_position(){this.chars_status_window.update_position(!0),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_menu(){this.horizontal_menu.open(),this.chars_status_window.update_position(),this.chars_status_window.update_chars_info(),this.chars_status_window.show()}close_menu(){this.is_active()&&(this.data.menu_open=!1,this.horizontal_menu.close(),this.chars_status_window.close())}}e.MainMenu=h,e.initialize_menu=function(t,e){return e.spacebar_input.add(()=>{e.hero.in_action()||e.in_battle||!e.created||e.game_event_manager.on_event||(e.menu_open?e.main_menu.is_active()&&e.main_menu.close_menu():(e.menu_open=!0,e.hero.stop_char(),e.hero.update_shadow(),e.main_menu.open_menu()))},this),new h(t,e)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainPsynergyMenu=void 0;const s=i(28),n=i(29),a=i(30),r=i(2),o=i(1),_=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,h=(132-2*(o.INSIDE_BORDER_WIDTH+1)-8*o.ICON_WIDTH)/7;e.MainPsynergyMenu=class{constructor(t,e,i,o){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=o+1,this.chars_menu=new s.CharsMenu(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.close_menu.bind(this),this.enter_propagation_priority,this.esc_propagation_priority),this.basic_info_window=new n.BasicInfoWindow(this.game),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new r.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_psynergy=!1,this.guide_window_msgs={choosing_char:"Whose Psynergy?",choosing_psynergy:"Which Psynergy?"},this.description_window=new r.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.psynergy_overview_window=new r.Window(this.game,104,24,132,76),this.shortcuts_window=new r.Window(this.game,104,104,132,28),this.shortcuts_window.set_text(["Use a keyboard number","to set a shorcut."],void 0,7,3),this.psynergy_choose_window=new a.ItemPsynergyChooseWindow(this.game,this.data,!0,this.psynergy_change.bind(this),this.psynergy_choose.bind(this),this.esc_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}char_change(t){this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_psynergy_icons())}char_choose(t){this.is_open&&(this.chars_menu.deactivate(),this.choosing_psynergy=!0,this.set_guide_window_text(),this.psynergy_choose_window.open(t,()=>{this.choosing_psynergy=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text()}))}psynergy_change(t){this.set_description_window_text(t.description)}psynergy_choose(t){t.key_name in this.data.info.field_abilities_list&&(this.close_menu(!0),this.data.info.field_abilities_list[t.key_name].cast(this.data.hero,this.data.info.party_data.members[this.selected_char_index].key_name))}set_guide_window_text(){this.choosing_psynergy?this.guide_window.update_text(this.guide_window_msgs.choosing_psynergy,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_psynergy?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_psynergy_icons(){this.psynergy_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].abilities.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].abilities[e];if(i in this.data.info.abilities_list){const e=this.data.info.abilities_list[i];if(e.is_field_psynergy||e.effects_outside_battle){const e=_+1+Math.ceil(t%8*(h+o.ICON_WIDTH)),s=_+5+(t/8|0)*(3+o.ICON_HEIGHT);this.psynergy_overview_window.create_at_group(e,s,"abilities_icons",void 0,i),++t}}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_psynergy_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.psynergy_overview_window.show(void 0,!1),this.shortcuts_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.psynergy_overview_window.close(void 0,!1),this.shortcuts_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainItemMenu=void 0;const s=i(28),n=i(29),a=i(30),r=i(2),o=i(1),_=i(79),h=i(84),c=i(9),l=o.INSIDE_BORDER_WIDTH+o.OUTSIDE_BORDER_WIDTH,d=(132-2*(o.INSIDE_BORDER_WIDTH+11)-5*o.ICON_WIDTH)/4;e.MainItemMenu=class{constructor(t,e,i,o){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=o+1,this.chars_menu=new s.CharsMenu(this.game,this.data,this.char_choose.bind(this),this.char_change.bind(this),this.char_choose_cancel.bind(this),this.esc_propagation_priority,this.enter_propagation_priority),this.basic_info_window=new n.BasicInfoWindow(this.game),this.item_change_stats_window=new h.StatsCheckWithItemWindow(this.game,this.data),this.selected_char_index=0,this.is_open=!1,this.close_callback=null,this.set_control(),this.guide_window=new r.Window(this.game,104,0,132,20),this.guide_window_text=this.guide_window.set_single_line_text(""),this.choosing_item=!1,this.guide_window_msgs={choosing_char:"Whose item?",choosing_item:"Which item?"},this.description_window=new r.Window(this.game,0,136,236,20),this.description_window_text=this.description_window.set_single_line_text(""),this.arrange_window=new r.Window(this.game,104,104,132,28),this.arrange_window_text=this.arrange_window.set_text(["Arrange info here..."],void 0,7,3),this.item_overview_window=new r.Window(this.game,104,24,132,76),this.item_choose_window=new a.ItemPsynergyChooseWindow(this.game,this.data,!1,this.item_change.bind(this),this.item_choose.bind(this),this.esc_propagation_priority),this.item_options_window=new _.ItemOptionsWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.choosing_give_destination=!1}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}shift_item_overview(t){t?this.item_overview_window.group.y+=16:this.item_overview_window.group.y-=16}char_change(t){if(this.is_open&&(this.selected_char_index=t,this.basic_info_window.set_char(this.data.info.party_data.members[t]),this.set_item_icons(),this.choosing_give_destination))if(this.item_options_window.item.type===c.item_types.ABILITY_GRANTOR);else if(this.item_options_window.item.type!==c.item_types.GENERAL_ITEM){const e=Object.assign({},this.item_options_window.item_obj,{equipped:!1});this.item_change_stats_window.open(this.data.info.party_data.members[t],this.item_options_window.item,e),this.item_change_stats_window.compare_items()}}char_choose(t){if(this.is_open)if(this.choosing_give_destination){if(this.data.info.party_data.members[t].key_name===this.item_options_window.char.key_name)return;this.chars_menu.deactivate(),this.after_char_choose_on_give(this.data.info.party_data.members[t],()=>{this.choosing_give_destination=!1},()=>{this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16})})}else this.chars_menu.deactivate(),this.choosing_item=!0,this.set_guide_window_text(),this.item_choose_window.open(t,()=>{this.on_item_choose_close()})}on_item_choose_close(){this.choosing_item=!1,this.chars_menu.activate(),this.set_guide_window_text(),this.set_description_window_text(),this.set_item_icons(),this.item_change_stats_window.window_open&&this.item_change_stats_window.close()}char_choose_cancel(){this.choosing_give_destination?(this.chars_menu.deactivate(),this.choosing_give_destination=!1,this.shift_item_overview(!1),this.item_choose_window.show(),this.item_options_window.show(),this.item_overview_window.update_size({height:this.item_overview_window.height-16}),this.after_char_choose_on_give(null),this.char_change(this.item_choose_window.char_index),this.item_options_window.item.type===c.item_types.ABILITY_GRANTOR||this.item_options_window.item.type!==c.item_types.GENERAL_ITEM&&(this.item_change_stats_window.open(this.data.info.party_data.members[this.item_choose_window.char_index],this.item_options_window.item,this.item_options_window.item_obj),this.item_change_stats_window.compare_items()),this.chars_menu.set_char_by_index(this.item_choose_window.char_index),this.item_options_window.stats_window.compare_items(!0)):this.close_menu()}item_change(t,e){this.set_description_window_text(t.description),this.item_change_stats_window.window_open&&this.item_change_stats_window.close(),t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&this.item_change_stats_window.open(this.data.info.party_data.members[this.selected_char_index],t,e)}item_choose(t,e){this.item_options_window.open(e,t,this.data.info.party_data.members[this.selected_char_index],this.item_change_stats_window,t=>{this.choosing_give_destination=!0,this.shift_item_overview(!0),this.item_overview_window.update_size({height:this.item_overview_window.height+16}),this.item_choose_window.hide(),this.item_options_window.hide(),this.chars_menu.activate(),this.char_change(this.selected_char_index),this.after_char_choose_on_give=t},e=>{this.item_choose_window.activate(),t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&this.item_change_stats_window.compare_items(),e&&this.item_choose_window.close()},()=>{t.type===c.item_types.ABILITY_GRANTOR||t.type!==c.item_types.GENERAL_ITEM&&(this.item_change_stats_window.update_info(!1),this.item_change_stats_window.hide_arrows())})}set_guide_window_text(){this.choosing_item?this.guide_window.update_text(this.guide_window_msgs.choosing_item,this.guide_window_text):this.guide_window.update_text(this.guide_window_msgs.choosing_char,this.guide_window_text)}set_description_window_text(t){this.choosing_item?this.description_window.update_text(t,this.description_window_text):this.description_window.update_text(this.data.info.party_data.coins+"    Coins",this.description_window_text)}set_item_icons(){this.item_overview_window.remove_from_group();let t=0;for(let e=0;e<this.data.info.party_data.members[this.selected_char_index].items.length;++e){const i=this.data.info.party_data.members[this.selected_char_index].items[e],s=i.key_name;if(s in this.data.info.items_list){const e=l+11+Math.ceil(t%5*(d+o.ICON_WIDTH)),n=l+12+(t/5|0)*(3+o.ICON_HEIGHT);if(this.item_overview_window.create_at_group(e,n,"items_icons",void 0,s),i.equipped&&this.item_overview_window.create_at_group(e+7,n+8,"equipped"),i.quantity>1){let t=this.game.add.bitmapText(e+7,n+8,"gs-item-bmp-font",i.quantity.toString());this.item_overview_window.add_sprite_to_group(t)}++t}}}open_menu(t){this.close_callback=t,this.chars_menu.open(this.selected_char_index),this.basic_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.set_item_icons(),this.set_guide_window_text(),this.set_description_window_text(),this.guide_window.show(void 0,!1),this.description_window.show(void 0,!1),this.item_overview_window.show(void 0,!1),this.arrange_window.show(void 0,!1),this.is_open=!0}close_menu(t=!1){this.chars_menu.close(),this.basic_info_window.close(),this.is_open=!1,this.guide_window.close(void 0,!1),this.description_window.close(void 0,!1),this.item_overview_window.close(void 0,!1),this.arrange_window.close(void 0,!1),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemOptionsWindow=void 0;const s=i(2),n=i(1),a=i(6),r=i(80),o=i(81),_=i(83),h=8+n.FONT_SIZE;e.ItemOptionsWindow=class{constructor(t,e,i,h){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.text_sprites={use:this.base_window.set_text_in_position("Use",8,32),equip:this.base_window.set_text_in_position("Equip",48,32),details:this.base_window.set_text_in_position("Details",88,32),give:this.base_window.set_text_in_position("Give",8,32+n.FONT_SIZE),remove:this.base_window.set_text_in_position("Remove",48,32+n.FONT_SIZE),drop:this.base_window.set_text_in_position("Drop",88,32+n.FONT_SIZE)},this.option_active={use:!0,equip:!0,details:!0,give:!0,remove:!0,drop:!0},this.horizontal_index=0,this.vertical_index=0,this.esc_propagation_priority=i+1,this.enter_propagation_priority=h+1,this.cursor_control=new a.CursorControl(this.game,!0,!0,()=>3,()=>2,this.group,this.on_change.bind(this),this.on_change.bind(this),this.get_horizontal_index.bind(this),this.set_horizontal_index.bind(this),this.get_vertical_index.bind(this),this.set_vertical_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.give_item_options_window=new _.GiveItemOptionsWindow(this.game,this.data,this.esc_propagation_priority+2,this.enter_propagation_priority+2),this.item_quantity_manager_window=new o.ItemQuantityManagerWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority),this.drop_item_window=new r.DropItemWindow(this.game,this.data,this.esc_propagation_priority+1,this.enter_propagation_priority+1),this.action_message_window=new s.Window(this.game,122,66,67,20),this.set_control()}hide(){this.base_window.group.alpha=0}show(){this.base_window.group.alpha=1}hide_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=0}show_text(){for(let t in this.text_sprites)this.text_sprites[t].text.alpha=this.text_sprites[t].shadow.alpha=1}is_open(){return this.window_open}is_active(){return this.window_active}get_cursor_x(){return 8+40*this.horizontal_index-15}get_cursor_y(){return 32+n.FONT_SIZE*this.vertical_index+4}get_vertical_index(){return this.vertical_index}set_vertical_index(t){this.vertical_index=t}get_horizontal_index(){return this.horizontal_index}set_horizontal_index(t){this.horizontal_index=t}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.action_message_window.open?this.action_message_window.close():this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.action_message_window.open?this.action_message_window.close():this.on_choose())},this,this.enter_propagation_priority)}set_available_options(){!this.item.use_ability||this.item.broken?(this.text_sprites.use.text.tint=6316128,this.option_active.use=!1):(this.text_sprites.use.text.tint=16777215,this.option_active.use=!0),this.item.equipable&&!this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.equip.text.tint=16777215,this.option_active.equip=!0):(this.text_sprites.equip.text.tint=6316128,this.option_active.equip=!1),this.data.info.party_data.members.length<=1?(this.text_sprites.give.text.tint=6316128,this.option_active.give=!1):(this.text_sprites.give.text.tint=16777215,this.option_active.give=!0),this.item.equipable&&this.item_obj.equipped&&this.item.equipable_chars.includes(this.char.key_name)?(this.text_sprites.remove.text.tint=16777215,this.option_active.remove=!0):(this.text_sprites.remove.text.tint=6316128,this.option_active.remove=!1),this.item.important_item?(this.text_sprites.drop.text.tint=6316128,this.option_active.drop=!1):(this.text_sprites.drop.text.tint=16777215,this.option_active.drop=!0)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,h),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open_action_message_window(t,e){this.action_message_window.set_text([t]),this.cursor_control.deactivate(),void 0!==this.stats_update_callback&&this.stats_update_callback(),this.action_message_window.show(void 0,!0,()=>{e()})}on_choose(){if(0===this.horizontal_index)1===this.vertical_index&&this.option_active.give&&(this.deactivate(),this.give_item_options_window.open(this.item_obj,this.item,this.char,!0,!1),this.give_item_options_window.deactive(),this.on_give_callback((t,e,i)=>{if(null===t)this.give_item_options_window.close(),this.activate();else if(t.key_name!==this.char.key_name){this.give_item_options_window.close();let s={key_name:this.item_obj.key_name,equipped:!1,quantity:this.item_obj.quantity};this.item.equipable_chars.includes(t.key_name)?this.give_item_options_window.open(s,this.item,t,!1,!0,(e,n)=>{e?(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,n),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())}):this.item_obj.quantity>1?this.item_quantity_manager_window.open(s,this.item,this.char,e=>{e>0?(this.activate(),s.quantity=e,this.char.remove_item(this.item_obj,e),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})):(this.close(this.close_callback.bind(this,!0)),i())},t):(this.activate(),this.char.remove_item(this.item_obj,this.item_obj.quantity),t.add_item(s.key_name,s.quantity,!1),i(),this.open_action_message_window("Given.",()=>{this.close(this.close_callback.bind(this,!0))})),e()}}));else if(1===this.horizontal_index)0===this.vertical_index&&this.option_active.equip&&(this.char.equip_item(this.item_obj.index),this.open_action_message_window("Equipped.",()=>{this.close(this.close_callback)})),1===this.vertical_index&&this.option_active.remove&&(this.char.unequip_item(this.item_obj.index),this.open_action_message_window("Removed.",()=>{this.close(this.close_callback)}));else if(2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop){this.deactivate();let t=(t=1)=>{this.drop_item_window.open(this.item_obj,this.item,this.char,t,t=>{this.activate(),t&&this.open_action_message_window("Dropped it.",()=>{this.close(this.close_callback)})})};this.item_obj.quantity>1?this.item_quantity_manager_window.open(this.item_obj,this.item,this.char,e=>{e>0?t(e):this.activate()}):t()}}on_change(){this.stats_window.hide_arrows(),this.stats_window.show(),0===this.horizontal_index?(0===this.vertical_index&&this.option_active.use&&this.stats_window.hide(),1===this.vertical_index&&this.option_active.give&&this.item_obj.equipped&&this.stats_window.compare_items(!0)):1===this.horizontal_index?(0===this.vertical_index&&this.option_active.equip&&this.stats_window.compare_items(),1===this.vertical_index&&this.option_active.remove&&this.stats_window.compare_items(!0)):2===this.horizontal_index&&1===this.vertical_index&&this.option_active.drop&&this.item_obj.equipped&&this.stats_window.compare_items(!0)}open(t,e,i,s,n,a,r,o){this.item_obj=t,this.item=e,this.char=i,this.stats_window=s,this.cursor_control.activate(),this.on_give_callback=n,this.close_callback=a,this.stats_update_callback=r,this.update_position(),this.set_header(),this.set_available_options(),this.on_change(),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==o&&o()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}activate(){this.set_header(),this.set_available_options(),this.on_change(),this.cursor_control.activate(),this.window_active=!0}deactivate(){this.unset_header(),this.cursor_control.deactivate(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DropItemWindow=void 0;const s=i(2),n=i(6);e.DropItemWindow=class{constructor(t,e,i,a){this.game=t,this.data=e,this.base_window=new s.Window(this.game,104,26,132,76),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=a+1,this.base_window.set_text(["Are you sure you","want to drop it?"],16,22,1),this.base_window.set_text_in_position("Yes",32,46),this.base_window.set_text_in_position("No",32,62),this.icon_name=this.base_window.set_text_in_position("",32,8),this.icon=null,this.item_count_sprite=null,this.group=this.game.add.group(),this.answer_index=0,this.dropped=!1,this.cursor_control=new n.CursorControl(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,this.dropped)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.on_choose())},this,this.enter_propagation_priority)}get_cursor_x(){return 16}get_cursor_y(){return 5+(this.answer_index?62:46)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+26}set_info(){this.base_window.update_text(this.item.name,this.icon_name),this.icon=this.base_window.create_at_group(16,4,"items_icons",void 0,this.item.key_name),this.quantity_to_remove>1&&(this.item_count_sprite=this.game.add.bitmapText(23,12,"gs-item-bmp-font",this.quantity_to_remove.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_info(){this.base_window.remove_from_group(this.icon),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}on_choose(){0===this.answer_index&&(this.char.remove_item(this.item_obj,this.quantity_to_remove),this.dropped=!0),this.close(this.close_callback.bind(this,this.dropped))}open(t,e,i,s,n,a){this.item_obj=t,this.item=e,this.char=i,this.quantity_to_remove=s,this.answer_index=0,this.cursor_control.activate(),this.set_info(),this.update_position(),this.dropped=!1,this.close_callback=n,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)}close(t){this.cursor_control.deactivate(),this.unset_info(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemQuantityManagerWindow=void 0;const s=i(2),n=i(1),a=i(82),r=16+n.FONT_SIZE,o=r+n.FONT_SIZE;e.ItemQuantityManagerWindow=class{constructor(t,e,i,n){this.game=t,this.data=e,this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.x=104,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,132,52),this.group=this.game.add.group(),this.group.alpha=0,this.base_window.set_text_in_position("How many?",40,8),this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.choosen_quantity=1,this.item_counter=new a.ItemCounter(this.game,this.group,56,40,this.on_change.bind(this)),this.remaining_with_char_count=this.base_window.set_text_in_position("",37,o,!0),this.new_amount_with_dest_char_count=this.base_window.set_text_in_position("",94,o,!0),this.to_remove_count=this.base_window.set_text_in_position("",53,40,!0),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.choosen_quantity=0,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback))},this,this.enter_propagation_priority)}on_change(t){this.choosen_quantity=t,this.base_window.update_text(this.choosen_quantity.toString(),this.to_remove_count),this.base_window.update_text((this.item_obj.quantity-this.choosen_quantity).toString(),this.remaining_with_char_count),this.destination_char&&this.base_window.update_text((this.dest_item_obj.quantity+this.choosen_quantity).toString(),this.new_amount_with_dest_char_count)}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,r),this.destination_char&&(this.dest_char_name=this.base_window.set_text_in_position(this.destination_char.name,84,r)),this.item_name=this.base_window.set_text_in_position(this.item.name,27,16),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.destination_char&&(this.base_window.remove_text(this.dest_char_name),this.base_window.update_text("",this.new_amount_with_dest_char_count)),this.base_window.remove_text(this.item_name),this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}update_position(){this.group.x=this.game.camera.x+this.x,this.group.y=this.game.camera.y+this.y}open(t,e,i,s,n,a){if(this.item_obj=t,this.item=e,this.char=i,this.destination_char=n,this.destination_char){const e=this.destination_char.items.filter(e=>e.key_name===t.key_name);this.dest_item_obj=e.length?e[0]:{key_name:null,index:null,quantity:0}}this.choosen_quantity=1,this.close_callback=s,this.update_position(),this.set_header(),this.item_counter.config(this.item_obj.quantity,this.choosen_quantity),this.group.alpha=1,this.on_change(this.choosen_quantity),this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==a&&a()},!1)}close(t){this.unset_header(),this.item_counter.deactivate(),this.group.alpha=0,this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t(this.choosen_quantity)},!1)}activate(){this.set_header(),this.item_counter.activate(),this.on_change(this.choosen_quantity),this.window_active=!0}deactivate(){this.unset_header(),this.item_counter.deactivate(),this.window_active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ItemCounter=void 0;e.ItemCounter=class{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.choose_timer_repeat=this.game.time.create(!1),this.choose_timer_start=this.game.time.create(!1),this.index_change_time=Phaser.Timer.QUARTER/2,this.right_pressed=!1,this.left_pressed=!1,this.set_controls(),this.create_grid()}set_controls(){this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.active&&(this.left_pressed&&(this.left_pressed=!1,this.stop_timers()),this.right_pressed=!0,this.set_change_timers(1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onUp.add(()=>{this.active&&this.right_pressed&&(this.right_pressed=!1,this.stop_timers())}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.active&&(this.right_pressed&&(this.right_pressed=!1,this.stop_timers()),this.left_pressed=!0,this.set_change_timers(-1))}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onUp.add(()=>{this.active&&this.left_pressed&&(this.left_pressed=!1,this.stop_timers())})}set_change_timers(t){this.advance_step(t),this.choose_timer_start.add(Phaser.Timer.QUARTER,()=>{this.choose_timer_repeat.loop(this.index_change_time,this.advance_step.bind(this,t)),this.choose_timer_repeat.start()}),this.choose_timer_start.start()}stop_timers(){this.choose_timer_start.stop(),this.choose_timer_repeat.stop()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=0;t<this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=30;t>this.available_items_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e){this.clear(),this.current_quantity=e,this.available_items_count=t,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear()}activate(){this.active=!0}deactivate(){this.active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GiveItemOptionsWindow=void 0;const s=i(2),n=i(1),a=i(6),r=8+n.FONT_SIZE,o=r+n.FONT_SIZE;e.GiveItemOptionsWindow=class{constructor(t,e,i,n){this.game=t,this.data=e,this.esc_propagation_priority=i,this.enter_propagation_priority=n,this.base_window=new s.Window(this.game,104,0,132,36),this.item_obj=null,this.item=null,this.char=null,this.window_open=!1,this.window_active=!1,this.choosing_char=!1,this.asking_for_equip=!1,this.group=this.game.add.group(),this.answer_index=0,this.yes_text=this.base_window.set_text_in_position("Yes",112,8),this.no_text=this.base_window.set_text_in_position("No",112,24),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.cursor_control=new a.CursorControl(this.game,!1,!0,void 0,()=>2,this.group,void 0,void 0,void 0,void 0,this.get_answer_index.bind(this),this.set_answer_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_cursor_x.bind(this),this.get_cursor_y.bind(this)),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&(this.data.esc_input.halt(),this.close(this.close_callback.bind(this,!1,!1)))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.close(this.close_callback.bind(this,!0,0===this.answer_index)))},this,this.enter_propagation_priority)}get_cursor_x(){return 96}get_cursor_y(){return 5+(this.answer_index?24:8)}is_active(){return this.window_active}is_open(){return this.window_open}get_answer_index(){return this.answer_index}set_answer_index(t){this.answer_index=t}update_position(){this.group.x=this.game.camera.x+104,this.group.y=this.game.camera.y+0}set_header(){this.icon_sprite=this.base_window.create_at_group(8,8,"items_icons",void 0,this.item.key_name),this.char_name=this.base_window.set_text_in_position(this.char.name,27,8),this.item_name=this.base_window.set_text_in_position(this.item.name,27,r),this.choosing_char?this.action_text=this.base_window.set_text_in_position("Give it to whom?",27,o):this.asking_for_equip&&(this.yes_text.text.alpha=this.no_text.text.alpha=1,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=1,this.action_text=this.base_window.set_text_in_position("Equip this item?",8,o)),this.equip_sprite=null,this.item_obj.equipped&&(this.equip_sprite=this.base_window.create_at_group(15,16,"equipped")),this.item_count_sprite=null,this.item_obj.quantity>1&&(this.item_count_sprite=this.game.add.bitmapText(15,16,"gs-item-bmp-font",this.item_obj.quantity.toString()),this.base_window.add_sprite_to_group(this.item_count_sprite))}unset_header(){this.base_window.remove_from_group(this.icon_sprite),this.base_window.remove_text(this.char_name),this.base_window.remove_text(this.item_name),this.base_window.remove_text(this.action_text),this.yes_text.text.alpha=this.no_text.text.alpha=0,this.yes_text.shadow.alpha=this.no_text.shadow.alpha=0,this.equip_sprite&&this.base_window.remove_from_group(this.equip_sprite),this.item_count_sprite&&this.base_window.remove_from_group(this.item_count_sprite)}open(t,e,i,s,n,a,r){this.item_obj=t,this.item=e,this.char=i,this.choosing_char=s,this.asking_for_equip=n,this.answer_index=0,this.asking_for_equip&&this.cursor_control.activate(),this.set_header(),this.update_position(),this.close_callback=a,this.base_window.show(()=>{this.window_open=!0,this.window_active=!0,void 0!==r&&r()},!1)}close(t){this.cursor_control.deactivate(),this.unset_header(),this.base_window.close(()=>{this.window_open=!1,this.window_active=!1,void 0!==t&&t()},!1)}active(){this.window_active=!0,this.cursor_control.activate()}deactive(){this.window_active=!1,this.cursor_control.deactivate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StatsCheckWithItemWindow=void 0;const s=i(2),n=i(9),a=i(8),r=i(3);e.StatsCheckWithItemWindow=class{constructor(t,e){this.game=t,this.data=e,this.char=null,this.window_open=!1,this.x=0,this.y=40,this.base_window=new s.Window(this.game,this.x,this.y,100,92),this.avatar_group=t.add.group(),this.avatar_group.alpha=0,this.x_avatar=this.x+8,this.y_avatar=this.y+8,this.avatar=null,this.up_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"up_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"up_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"up_arrow")},this.down_arrows={[a.effect_types.ATTACK]:this.base_window.create_at_group(53,46,"down_arrow"),[a.effect_types.DEFENSE]:this.base_window.create_at_group(53,62,"down_arrow"),[a.effect_types.AGILITY]:this.base_window.create_at_group(53,78,"down_arrow")},this.preview_stats_texts={[a.effect_types.ATTACK]:this.base_window.set_text_in_position("0",94,48,!0),[a.effect_types.DEFENSE]:this.base_window.set_text_in_position("0",94,64,!0),[a.effect_types.AGILITY]:this.base_window.set_text_in_position("0",94,80,!0)},this.hide_arrows(),this.base_window.set_text_in_position("Lv",48,24),this.base_window.set_text_in_position("Attack",8,40),this.base_window.set_text_in_position("Defense",8,56),this.base_window.set_text_in_position("Agility",8,72),this.name_text=this.base_window.set_text_in_position("0",40,8),this.lv_text=this.base_window.set_text_in_position("0",80,24),this.attack_text=this.base_window.set_text_in_position("0",40,48,!0),this.defense_text=this.base_window.set_text_in_position("0",40,64,!0),this.agility_text=this.base_window.set_text_in_position("0",40,80,!0)}update_position(){this.avatar_group.x=this.game.camera.x+this.x_avatar,this.avatar_group.y=this.game.camera.y+this.y_avatar}hide(){this.base_window.group.alpha=0,this.avatar_group.alpha=0}show(){this.window_open&&(this.base_window.group.alpha=1,this.avatar_group.alpha=1)}update_info(t=!0){this.base_window.update_text(this.char.name,this.name_text),this.base_window.update_text(this.char.level.toString(),this.lv_text),this.base_window.update_text(this.char.current_atk.toString(),this.attack_text),this.base_window.update_text(this.char.current_def.toString(),this.defense_text),this.base_window.update_text(this.char.current_agi.toString(),this.agility_text),this.avatar&&this.avatar.destroy(),this.avatar=this.avatar_group.create(0,0,"avatars",this.char.key_name),t&&this.compare_items()}set_compare_arrows(t,e,i,s){let n,o=r.find(this.item.effects,{type:t});if(void 0!==o){const i=null===this.char.equip_slots[e]?null:this.char.equip_slots[e].key_name;n=this.char.preview_stats_by_effect(t,o,i)}if(null===this.char.equip_slots[e]){if(void 0===o)return;this.update_preview_text(n,t),this.up_arrows[t].alpha=1}else{if(void 0===r.find(this.data.info.items_list[this.char.equip_slots[e].key_name].effects,{type:t})&&void 0===o)return;(void 0===o||s)&&(o={type:t,quantity:0,operator:a.effect_operators.PLUS},n=this.char.preview_stats_by_effect(t,o,this.char.equip_slots[e].key_name));const _=this.char[i];n>_?(this.up_arrows[t].alpha=1,this.update_preview_text(n,t)):n<_&&(this.down_arrows[t].alpha=1,this.update_preview_text(n,t))}}update_preview_text(t,e){this.preview_stats_texts[e].text.alpha=1,this.preview_stats_texts[e].shadow.alpha=1,this.base_window.update_text(t.toString(),this.preview_stats_texts[e])}hide_arrows(){for(let t in this.up_arrows)this.up_arrows[t].alpha=0,this.down_arrows[t].alpha=0,this.preview_stats_texts[t].text.alpha=0,this.preview_stats_texts[t].shadow.alpha=0}compare_items(t=!1){if(this.hide_arrows(),this.item_obj.equipped&&!t)return;if(!this.item.equipable_chars.includes(this.char.key_name))return;let e;switch(this.item.type){case n.item_types.WEAPONS:e="weapon";break;case n.item_types.HEAD_PROTECTOR:e="head";break;case n.item_types.CHEST_PROTECTOR:e="chest";break;case n.item_types.ARMOR:e="body"}this.set_compare_arrows(a.effect_types.ATTACK,e,"current_atk",t),this.set_compare_arrows(a.effect_types.DEFENSE,e,"current_def",t),this.set_compare_arrows(a.effect_types.AGILITY,e,"current_agi",t)}open(t,e,i,s){this.update_position(),this.avatar_group.alpha=1,this.char=t,this.item=e,this.item_obj=i,this.update_info(),this.base_window.show(()=>{this.window_open=!0,void 0!==s&&s()},!1)}close(t){this.avatar_group.alpha=0,this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MainDjinnMenu=void 0;const s=i(86),n=i(87),a=i(91);e.MainDjinnMenu=class{constructor(t,e,i,r,o,_){this.game=t,this.data=e,this.esc_propagation_priority=i+1,this.enter_propagation_priority=r+1,this.shift_propagation_priority=o+1,this.spacebar_propagation_priority=_+1,this.is_open=!1,this.close_callback=null,this.selected_char_index=0,this.set_control(),this.chars_quick_info_window=new s.CharsQuickInfoDjinnWindow(this.game),this.djinn_action_window=new a.DjinnActionWindow(this.game),this.djinni_list_window=new n.DjinnListWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.shift_propagation_priority,this.spacebar_propagation_priority)}set_control(){this.data.esc_input.add(()=>{this.is_open&&(this.data.esc_input.halt(),this.close_menu())},this,this.esc_propagation_priority)}open_menu(t){this.close_callback=t,this.selected_char_index=0,this.chars_quick_info_window.open(this.data.info.party_data.members[this.selected_char_index]),this.djinni_list_window.open(this.chars_quick_info_window,this.djinn_action_window),this.djinn_action_window.open(),this.is_open=!0}close_menu(t=!1){this.is_open=!1,this.chars_quick_info_window.close(),this.djinni_list_window.close(),this.djinn_action_window.close(),null!==this.close_callback&&this.close_callback(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CharsQuickInfoDjinnWindow=void 0;const s=i(2),n=i(1),a=8+n.FONT_SIZE;e.CharsQuickInfoDjinnWindow=class{constructor(t){this.game=t,this.char=null,this.window_open=!1,this.x=0,this.y=0,this.char=null,this.base_window=new s.Window(this.game,this.x,this.y,100,36),this.char_name=this.base_window.set_text_in_position("",8,8),this.char_class=this.base_window.set_text_in_position("",8,a),this.base_window.set_text_in_position("Lv",56,8),this.level_number=this.base_window.set_text_in_position("",94,8,!0)}update_text(){this.base_window.update_text(this.char.name,this.char_name),this.base_window.update_text(this.char.class.name,this.char_class),this.base_window.update_text(this.char.level.toString(),this.level_number)}set_char(t){this.char=t,this.update_text()}open(t,e){this.char=t,this.update_text(),this.base_window.show(()=>{this.window_open=!0,void 0!==e&&e()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnListWindow=void 0;const s=i(2),n=i(5),a=i(6),r=i(1),o=i(0),_=i(88),h=i(89),c=i(90),l=0,d=1,p=2;e.DjinnListWindow=class{constructor(t,e,i,n,r,o){this.game=t,this.data=e,this.base_window=new s.Window(this.game,0,40,236,116),this.group=this.game.add.group(),this.group.alpha=0,this.chars_sprites_group=this.game.add.group(),this.group.add(this.chars_sprites_group),this.window_open=!1,this.window_active=!1,this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.shift_propagation_priority=r+1,this.spacebar_propagation_priority=o+1,this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.close_callback=null,this.chars_sprites={},this.djinns_sprites=[],this.djinn_description=this.base_window.set_text_in_position("",8,104),this.page_number_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight=this.get_highlight_bar(),this.on_action_bar_highlight.alpha=0,this.cursor_control=new a.CursorControl(this.game,!0,!0,this.get_max_chars.bind(this),this.get_max_djinn.bind(this),this.group,this.on_char_change.bind(this),this.on_djinn_change.bind(this),this.get_char_index.bind(this),this.set_char_index.bind(this),this.get_djinn_index.bind(this),this.set_djinn_index.bind(this),this.is_open.bind(this),this.is_active.bind(this),this.get_x_cursor.bind(this),this.get_y_cursor.bind(this)),this.sizes=[],this.djinn_names=[],this.active_djinn_sprite=null,this.djinn_status_change_header_window=new _.DjinnModeHeaderWindow(this.game,this.data),this.djinn_char_stats_window_left=new h.DjinnCharStatsWindow(this.game),this.djinn_char_stats_window_right=new h.DjinnCharStatsWindow(this.game,120),this.djinn_psynergy_window=new c.DjinnPsynergyWindow(this.game,this.data,this.esc_propagation_priority,this.enter_propagation_priority,this.spacebar_propagation_priority),this.init_djinn_sprites(),this.init_djinni_status_texts(),this.set_control()}get_highlight_bar(){const t=this.game.add.graphics(0,0);return t.blendMode=PIXI.blendModes.SCREEN,this.group.add(t),t.beginFill(this.base_window.color,1),t.drawRect(0,0,48,8),t.endFill(),t}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+40}set_control(){this.data.esc_input.add(()=>{this.window_open&&this.window_active&&this.setting_djinn_status&&(this.data.esc_input.halt(),this.cancel_djinn_status_set(!0))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&this.window_active&&(this.data.enter_input.halt(),this.setting_djinn_status?this.set_djinn_operation():this.on_choose())},this,this.enter_propagation_priority),this.data.shift_input.add(()=>{this.window_open&&this.window_active&&!this.setting_djinn_status&&(this.data.shift_input.halt(),this.change_djinn_status(this.selected_char_index,this.selected_djinn_index))},this,this.shift_propagation_priority)}get_x_cursor(){return 16+56*this.selected_char_index-14}get_y_cursor(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index||this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?24-r.FONT_SIZE:24+this.selected_djinn_index*r.FONT_SIZE+3}is_open(){return this.window_open}is_active(){return this.window_active}get_char_index(){return this.selected_char_index}set_char_index(t){this.selected_char_index=t}get_djinn_index(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.setting_djinn_status_djinn_index:this.selected_djinn_index}set_djinn_index(t){this.selected_djinn_index=t}get_max_chars(){return this.sizes.length}get_max_djinn(){return this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?1:this.sizes[this.selected_char_index]}init_djinn_sprites(){for(let t=0;t<4;++t){this.djinns_sprites.push({});for(let e in o.elements){const i=o.elements[e];if(i===o.elements.NO_ELEMENT)continue;const s=50+56*t;this.djinns_sprites[t][i]=this.chars_sprites_group.create(s,23,i+"_djinn_set"),this.djinns_sprites[t][i].anchor.setTo(.5,1),this.djinns_sprites[t][i].scale.x=-1,this.djinns_sprites[t][i].alpha=0}}}init_djinni_status_texts(){this.djinni_status_texts=[];for(let t=0;t<4;++t){const e=16+56*t,i=16;this.djinni_status_texts.push(this.base_window.set_text_in_position("",e,i))}}set_djinn_sprite(t=!0){const e=this.data.info.party_data.members[this.selected_char_index];if(this.setting_djinn_status&&this.selected_djinn_index===e.djinni.length)return;const i=this.data.info.djinni_list[e.djinni[this.selected_djinn_index]];null!==this.active_djinn_sprite&&(this.active_djinn_sprite.alpha=0,this.active_djinn_sprite.animations.stop());const s=this.djinns_sprites[this.selected_char_index][i.element];let a,r;switch(this.active_djinn_sprite=s,t&&(s.scale.setTo(0,0),this.game.add.tween(s.scale).to({x:-1,y:1},Phaser.Timer.QUARTER>>1,Phaser.Easing.Linear.None,!0)),s.alpha=1,i.status){case n.djinn_status.RECOVERY:r="left";case n.djinn_status.STANDBY:r="down",a="standby";break;case n.djinn_status.SET:r="down",a="set"}this.data.info.djinni_sprites[i.element].setAnimation(s,a),s.animations.play(a+"_"+r)}load_page(){this.sizes=new Array(this.data.info.party_data.members.length),this.djinn_names=[],this.stars=[];for(let t=0;t<4;++t){const e=4*this.page_index+t;if(e>=this.data.info.party_data.members.length)continue;const i=this.data.info.party_data.members[e],s=i.key_name;if(!(s in this.chars_sprites)){const t=i.sprite_base.getActionKey(o.base_actions.IDLE);this.chars_sprites[s]=this.chars_sprites_group.create(0,0,t),this.chars_sprites[s].anchor.setTo(.5,1),i.sprite_base.setAnimation(this.chars_sprites[s],o.base_actions.IDLE)}const n=i.sprite_base.getAnimationKey(o.base_actions.IDLE,o.reverse_directions[o.directions.down]);this.chars_sprites[s].animations.play(n);const a=32+56*t;this.chars_sprites[s].x=a,this.chars_sprites[s].y=23,this.chars_sprites[s].alpha=1,this.djinn_names.push([]),this.stars.push([]),this.update_djinn_list(t)}}update_djinn_list(t){this.djinn_names[t].forEach(t=>{this.base_window.remove_text(t)}),this.stars[t].forEach(t=>{this.base_window.remove_from_group(t,!0)});const e=this.data.info.party_data.members[t].djinni;let i=[],s=[];for(let a=0;a<e.length;++a){const o=this.data.info.djinni_list[e[a]],_=17+56*t,h=25+a*r.FONT_SIZE;s.push(this.base_window.create_at_group(_,h,o.element+"_star"));const c=24+56*t,l=24+a*r.FONT_SIZE;let d;switch(o.status){case n.djinn_status.SET:d=n.djinn_font_colors[n.djinn_status.SET];break;case n.djinn_status.STANDBY:d=n.djinn_font_colors[n.djinn_status.STANDBY];break;case n.djinn_status.RECOVERY:d=n.djinn_font_colors[n.djinn_status.RECOVERY]}const p=this.base_window.set_text_in_position(o.name,c,l,!1,!1,d);i.push(p)}this.sizes[t]=e.length,this.djinn_names[t]=i,this.stars[t]=s}unset_page(){for(let t in this.chars_sprites)this.chars_sprites[t].animations.stop(),this.chars_sprites[t].alpha=0;this.base_window.remove_from_group();for(let t=0;t<this.djinn_names.length;++t){const e=this.djinn_names[t];for(let t=0;t<e.length;++t)this.base_window.remove_text(e[t])}}set_highlight_bar(){this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length?this.page_number_bar_highlight.alpha=0:(this.page_number_bar_highlight.alpha=1,this.page_number_bar_highlight.x=16+56*this.selected_char_index,this.page_number_bar_highlight.y=24+this.selected_djinn_index*r.FONT_SIZE),this.setting_djinn_status&&this.selected_char_index!==this.setting_djinn_status_char_index?(this.on_action_bar_highlight.alpha=1,this.on_action_bar_highlight.x=16+56*this.setting_djinn_status_char_index,this.on_action_bar_highlight.y=24+this.setting_djinn_status_djinn_index*r.FONT_SIZE):this.on_action_bar_highlight.alpha=0}update_djinn_description(){if(this.setting_djinn_status&&this.selected_djinn_index===this.data.info.party_data.members[this.selected_char_index].djinni.length)this.base_window.update_text("",this.djinn_description);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.base_window.update_text(e.description,this.djinn_description)}}set_action_text(){if(this.setting_djinn_status);else{const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];this.djinn_action_window.set_action_text(e.status)}}on_char_change(t,e){this.selected_char_index=e,this.setting_djinn_status&&this.selected_char_index===this.setting_djinn_status_char_index?this.selected_djinn_index=this.setting_djinn_status_djinn_index:this.selected_djinn_index>=this.sizes[this.selected_char_index]&&(this.selected_djinn_index=this.sizes[this.selected_char_index]-1,this.cursor_control.set_cursor_position()),this.set_highlight_bar();const i=this.data.info.party_data.members[this.selected_char_index];this.chars_quick_info_window.set_char(i),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_djinn_change(t,e){this.selected_djinn_index=e,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite()}on_choose(){const t=this.data.info.party_data.members[this.selected_char_index],e=this.data.info.djinni_list[t.djinni[this.selected_djinn_index]];if(!this.setting_djinn_status&&e.status!==n.djinn_status.RECOVERY){for(let t in this.chars_sprites)this.chars_sprites[t].y-=r.FONT_SIZE;for(let t=0;t<4;++t)for(let e in o.elements){const i=o.elements[e];i!==o.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y-=r.FONT_SIZE)}for(let i=0;i<4;++i){let s;if(i===this.selected_char_index)switch(e.status){case n.djinn_status.SET:s=o.capitalize(n.djinn_status.STANDBY);break;case n.djinn_status.STANDBY:s=o.capitalize(n.djinn_status.SET)}else{const e=this.data.info.party_data.members[i];if(void 0===e)continue;e.djinni.length<t.djinni.length?(s="Give",++this.sizes[i]):s="Trade"}this.base_window.update_text(s,this.djinni_status_texts[i])}this.setting_djinn_status_char_index=this.selected_char_index,this.setting_djinn_status_djinn_index=this.selected_djinn_index,this.setting_djinn_status=!0,this.djinn_action_window.set_action_for_specific_djinn(t,e),this.darken_font_color(),this.cursor_control.set_cursor_position()}}darken_font_color(t=!0){const e=this.data.info.party_data.members[this.setting_djinn_status_char_index];for(let i=0;i<this.djinn_names[this.setting_djinn_status_char_index].length;++i){const s=this.data.info.djinni_list[e.djinni[i]],a=t?o.change_brightness(n.djinn_font_colors[s.status],.7):n.djinn_font_colors[s.status];t&&i===this.setting_djinn_status_djinn_index||this.base_window.update_text_color(a,this.djinn_names[this.setting_djinn_status_char_index][i])}}cancel_djinn_status_set(t=!1){if(this.setting_djinn_status){for(let t in this.chars_sprites)this.chars_sprites[t].y+=r.FONT_SIZE;for(let t=0;t<4;++t){for(let e in o.elements){const i=o.elements[e];i!==o.elements.NO_ELEMENT&&(this.djinns_sprites[t][i].y+=r.FONT_SIZE)}this.base_window.update_text("",this.djinni_status_texts[t]);const e=this.data.info.party_data.members[t];void 0!==e&&(this.sizes[t]=e.djinni.length)}t&&(this.selected_char_index=this.setting_djinn_status_char_index,this.selected_djinn_index=this.setting_djinn_status_djinn_index,this.set_highlight_bar()),this.darken_font_color(!1),this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.set_cursor_position()}}set_djinn_operation(){const t=this.data.info.party_data.members[this.setting_djinn_status_char_index],e=this.data.info.djinni_list[t.djinni[this.setting_djinn_status_djinn_index]];if(this.setting_djinn_status_char_index!==this.selected_char_index){const i=this.data.info.party_data.members[this.selected_char_index];let s,a,r,o,_,h;this.selected_djinn_index===i.djinni.length?(s=[e.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?"irrelevant":e.status],r=[e],o=[e],_="Give"):(h=this.data.info.djinni_list[i.djinni[this.selected_djinn_index]],s=[h.status===n.djinn_status.STANDBY?"irrelevant":h.status,e.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],a=[e.status===n.djinn_status.STANDBY?"irrelevant":e.status,h.status===n.djinn_status.STANDBY?"irrelevant":n.djinn_status.STANDBY],r=[h,e],o=[e,h],_="Trade"),this.djinn_char_stats_window_left.open(t,r,s,_),this.djinn_char_stats_window_right.open(i,o,a,_),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.open([t,i],o,s,_),this.deactivate(),this.view_state=l,this.djinn_psynergy_window.open(t,r,s,s=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),this.djinn_char_stats_window_right.close(),s&&("Trade"===_?(t.replace_djinn(e.key_name,h.key_name),i.replace_djinn(h.key_name,e.key_name)):"Give"===_&&(t.remove_djinn(e.key_name),i.add_djinn(e.key_name),this.selected_djinn_index=0),this.update_djinn_list(this.selected_char_index),this.update_djinn_list(this.setting_djinn_status_char_index),this.cancel_djinn_status_set()),this.activate()},!0,()=>{switch(++this.view_state,this.view_state>p&&(this.view_state=l),this.view_state){case l:this.djinn_psynergy_window.base_window.close(void 0,!1),this.djinn_char_stats_window_left.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:120}),this.djinn_status_change_header_window.set_action_info_text(`: ${t.name}'s Psy`);break;case d:this.djinn_psynergy_window.update_info(t,r,s),this.djinn_psynergy_window.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.close(void 0,!1),this.djinn_status_change_header_window.set_action_info_text(`: ${i.name}'s Psy`);break;case p:this.djinn_psynergy_window.update_info(i,o,a),this.djinn_char_stats_window_left.base_window.close(void 0,!1),this.djinn_char_stats_window_right.base_window.show(void 0,!1),this.djinn_char_stats_window_right.base_window.update_position({x:0}),this.djinn_status_change_header_window.set_action_info_text(": Status")}},_)}else{let i;switch(e.status){case n.djinn_status.SET:i=n.djinn_status.STANDBY;break;case n.djinn_status.STANDBY:i=n.djinn_status.SET}this.deactivate(),this.djinn_status_change_header_window.open([t],[e],[i]),this.djinn_char_stats_window_left.open(t,[e],[i]),this.djinn_psynergy_window.open(t,[e],[i],t=>{this.djinn_status_change_header_window.close(),this.djinn_char_stats_window_left.close(),t&&(this.change_djinn_status(this.setting_djinn_status_char_index,this.setting_djinn_status_djinn_index),this.cancel_djinn_status_set()),this.activate()})}}change_djinn_status(t,e){const i=this.data.info.party_data.members[t],s=this.data.info.djinni_list[i.djinni[e]];s.status===n.djinn_status.SET?(s.set_status(n.djinn_status.STANDBY,i),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.STANDBY],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1)):s.status===n.djinn_status.STANDBY&&(s.set_status(n.djinn_status.SET,i),this.base_window.update_text_color(n.djinn_font_colors[n.djinn_status.SET],this.djinn_names[t][e]),this.chars_quick_info_window.update_text(),this.set_action_text(),this.set_djinn_sprite(!1))}open(t,e,i,s){this.selected_char_index=0,this.selected_djinn_index=0,this.page_index=0,this.group.alpha=1,this.setting_djinn_status_char_index=-1,this.setting_djinn_status_djinn_index=-1,this.setting_djinn_status=!1,this.chars_quick_info_window=t,this.djinn_action_window=e,this.load_page(),this.update_position(),this.set_highlight_bar(),this.set_action_text(),this.update_djinn_description(),this.set_djinn_sprite(),this.cursor_control.activate(),this.window_open=!0,this.window_active=!0,this.changing_djinn_status=!1,this.close_callback=i,this.base_window.show(void 0,!1),s&&s()}close(t){this.window_open=!1,this.window_active=!1,this.cursor_control.deactivate(),this.unset_page(),this.group.alpha=0,this.base_window.close(void 0,!1),t&&t()}activate(){this.window_active=!0,this.cursor_control.activate()}deactivate(){this.window_active=!1,this.cursor_control.deactivate()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnModeHeaderWindow=void 0;const s=i(2),n=i(0),a=i(5),r=i(1),o=[32,99],_=[21,37],h=[16,117],c=[34,34];e.DjinnModeHeaderWindow=class{constructor(t,e){this.game=t,this.data=e,this.window_open=!1,this.x=0,this.y=0,this.base_window=new s.Window(this.game,this.x,this.y,236,36),this.group=t.add.group(),this.ok_msg_text=this.base_window.set_text_in_position("Is this OK?",104,24),this.djinn_status_text=this.base_window.set_text_in_position("",104,8),this.djinn_name_before_text=this.base_window.set_text_in_position("",56,8),this.djinn_name_after_text=this.base_window.set_text_in_position("",56,24),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow=this.base_window.create_at_group(64,16,"arrow_change"),this.spacebar_key={shadow:this.base_window.create_at_group(133,25,"spacebar_keyboard",0),text:this.base_window.create_at_group(132,24,"spacebar_keyboard")},this.action_info_text=this.base_window.set_text_in_position("",this.spacebar_key.text.width+132+2,24),this.init_arrow_blinks()}update_position(){this.group.x=this.game.camera.x+0,this.group.y=this.game.camera.y+0}init_arrow_blinks(){this.djinn_status_arrow_blink_timer=this.game.time.create(!1),this.djinn_status_arrow_blink_timer.loop(90,()=>{this.djinn_status_arrow.alpha=this.djinn_status_arrow.alpha?0:1}),this.djinn_status_arrow_blink_timer.start(),this.djinn_status_arrow_blink_timer.pause()}set_action_info_text(t){this.base_window.update_text(t,this.action_info_text)}mount_window(){this.update_position(),1===this.chars.length?(this.action_text=n.capitalize(this.next_djinni_status[0]),this.base_window.update_text(this.action_text,this.djinn_status_text,104),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=0,this.base_window.update_text("",this.action_info_text),this.base_window.update_text_position({x:104,y:24},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),this.base_window.update_text_position({x:56,y:8},this.djinn_name_before_text),this.base_window.update_text_position({x:56},this.djinn_name_after_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.next_djinni_status[0]],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(49,9,this.djinni[0].element+"_star")),this.sprites.push(this.base_window.create_at_group(49,25,this.djinni[0].element+"_star")),this.djinn_status_arrow.alpha=1,this.djinn_status_arrow_blink_timer.resume()):(this.base_window.update_text(this.action_text,this.djinn_status_text,132),this.spacebar_key.text.alpha=this.spacebar_key.shadow.alpha=1,this.base_window.update_text(`: ${this.chars[0].name}'s Psy`,this.action_info_text),this.base_window.update_text_position({x:132,y:16},this.ok_msg_text),this.base_window.update_text(this.djinni[0].name,this.djinn_name_before_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[0].status],this.djinn_name_before_text),"Trade"===this.action_text?(this.sprites.push(this.base_window.create_at_group(44,9,this.djinni[0].element+"_star")),this.base_window.update_text(this.djinni[1].name,this.djinn_name_after_text),this.base_window.update_text_color(a.djinn_font_colors[this.djinni[1].status],this.djinn_name_after_text),this.sprites.push(this.base_window.create_at_group(44,25,this.djinni[1].element+"_star")),this.base_window.update_text_position({x:51},this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8},this.djinn_name_before_text)):"Give"===this.action_text&&(this.base_window.update_text("",this.djinn_name_after_text),this.base_window.update_text_position({x:51,y:8+r.FONT_SIZE},this.djinn_name_before_text),this.sprites.push(this.base_window.create_at_group(44,9+r.FONT_SIZE,this.djinni[0].element+"_star"))),this.djinn_status_arrow.alpha=0),this.set_char_and_djinn_sprite()}set_char_and_djinn_sprite(){for(let t=0;t<this.chars.length;++t){const e=this.chars[t],i=this.djinni[t];let s,a;["Trade","Give"].includes(this.action_text)?(s=o[t],a=_[t]):(s=32,a=31);const r=e.sprite_base.getActionKey(n.base_actions.IDLE),l=this.base_window.create_at_group(h[t],c[t],r);l.anchor.setTo(.5,1);const d=e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down]);if(l.animations.add(d,e.sprite_base.animations.idle.down,e.sprite_base.actions.idle.frame_rate,!0),l.animations.play(d,e.sprite_base.actions.idle.frame_rate,!0),this.sprites.push(l),"Give"===this.action_text&&1===t)break;const p=this.group.create(s,a,i.element+"_djinn_"+i.status);if(p.anchor.setTo(.5,1),p.scale.x=-.8,p.scale.y=.8,this.data.info.djinni_sprites[i.element].setAnimation(p,i.status),p.animations.play(i.status+"_down"),this.djinn_sprites.push(p),["Trade","Give"].includes(this.action_text)){const e=0===t?1:-1,i=17*e,n=33*e,r=5*-e,o=this.game.add.tween(p).to({y:[a,a+r,a+r,a],x:[s,s+i,s+i+n,s+i+n+i]},700,Phaser.Easing.Linear.None,!0,0,-1,!1);o.repeatDelay(300),this.tweens.push(o)}}}unmount_window(){this.sprites.forEach(t=>{this.base_window.remove_from_group(t,!0)}),this.djinn_sprites.forEach(t=>{t.destroy()}),this.tweens.forEach(t=>{t.stop()}),this.sprites=[],this.djinn_sprites=[],this.tweens=[],this.djinn_status_arrow.alpha=0,this.djinn_status_arrow_blink_timer.paused||this.djinn_status_arrow_blink_timer.pause()}open(t,e,i,s,n){this.chars=t,this.djinni=e,this.next_djinni_status=i,this.action_text=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnCharStatsWindow=void 0;const s=i(2),n=i(1),a=i(0),r=["HP","PP","Attack","Defense","Agility","Luck"],o=["max_hp","max_pp","atk","def","agi","luk"],_=a.ordered_elements.slice().reverse();e.DjinnCharStatsWindow=class{constructor(t,e=0){this.game=t,this.window_open=!1,this.sprites=[],this.base_window=new s.Window(this.game,e,40,116,116),this.char_name_text=this.base_window.set_text_in_position("",48,8),this.base_window.set_text_in_position("Lv",48,24),this.level_number_text=this.base_window.set_text_in_position("",110,24,!0),this.class_text=this.base_window.set_text_in_position("",8,40),this.new_class_text=this.base_window.set_text_in_position("",8,56),this.djinn_number_texts={},_.forEach((t,e)=>{const i=110-17*e;this.djinn_number_texts[t]=this.base_window.set_text_in_position("",i,48,!0)}),this.stats_current_texts={},this.stats_next_texts={},r.forEach((t,e)=>{const i=64+e*n.FONT_SIZE;this.base_window.set_text_in_position(t,8,i);let s=0;["HP","PP"].includes(t)&&(s=-8),this.stats_current_texts[t]=this.base_window.set_text_in_position("",78+s,i,!0),this.stats_next_texts[t]=this.base_window.set_text_in_position("",110,i,!0)}),this.class_name_arrow=this.base_window.create_at_group(24,48,"arrow_change"),this.init_arrow_blinks()}init_arrow_blinks(){this.class_name_arrow_blink_timer=this.game.time.create(!1),this.class_name_arrow_blink_timer.loop(90,()=>{this.class_name_arrow.alpha=this.class_name_arrow.alpha?0:1}),this.class_name_arrow_blink_timer.start(),this.class_name_arrow_blink_timer.pause(),this.class_name_arrow.alpha=0}mount_window(){const t=this.base_window.create_at_group(8,8,"avatars",void 0,this.char.key_name);this.sprites.push(t),this.base_window.update_text(this.char.name,this.char_name_text),this.base_window.update_text(this.char.level.toString(),this.level_number_text),this.base_window.update_text(this.char.class.name,this.class_text),_.forEach((t,e)=>{this.base_window.update_text(this.char[t+"_djinni"].length.toString(),this.djinn_number_texts[t]);const i=97-17*e,s=this.base_window.create_at_group(i,49,t+"_star");this.sprites.push(s)});const e=this.char.preview_djinn_change(o,this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);e.class_key_name!==this.char.class.key_name?(this.base_window.update_text(e.class_name,this.new_class_text),this.class_name_arrow_blink_timer.resume()):this.base_window.update_text("",this.new_class_text),r.forEach((t,i)=>{const s=this.char[o[i]],a=e[o[i]];this.base_window.update_text(s.toString(),this.stats_current_texts[t]),this.base_window.update_text(a.toString(),this.stats_next_texts[t]);const r=64+i*n.FONT_SIZE-3;let _=0;if(["HP","PP"].includes(t)&&(_=-8),s!==a){const t=this.base_window.create_at_group(78+_,r,"stat_"+(a>s?"up":"down"));this.sprites.push(t)}})}unmount_window(){this.sprites.forEach(t=>{t.destroy()}),this.class_name_arrow.alpha=0,this.class_name_arrow_blink_timer.paused||this.class_name_arrow_blink_timer.pause()}open(t,e,i,s,n){this.char=t,this.djinni=e,this.next_djinni_status=i,this.action=s,this.mount_window(),this.base_window.show(()=>{this.window_open=!0,void 0!==n&&n()},!1)}close(t){this.unmount_window(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnPsynergyWindow=void 0;const s=i(2),n=i(1),a=n.YELLOW_FONT_COLOR,r=n.RED_FONT_COLOR,o=97+n.FONT_SIZE;e.DjinnPsynergyWindow=class{constructor(t,e,i,n,a){this.game=t,this.data=e,this.window_open=!1,this.text_sprites_in_window=[],this.icon_sprites_in_window=[],this.esc_propagation_priority=i+1,this.enter_propagation_priority=n+1,this.spacebar_propagation_priority=a+1,this.base_window=new s.Window(this.game,120,40,116,116),this.base_window.init_page_indicator_bar(),this.base_window.set_text_in_position("PP",86,8),this.psy_info_1_text=this.base_window.set_text_in_position("",8,96),this.psy_info_2_text=this.base_window.set_text_in_position("",8,o),this.set_control()}set_control(){this.data.esc_input.add(()=>{this.window_open&&(this.data.esc_input.halt(),this.execute_operation=!1,this.close(this.close_callback))},this,this.esc_propagation_priority),this.data.enter_input.add(()=>{this.window_open&&(this.data.enter_input.halt(),this.execute_operation=!0,this.close(this.close_callback))},this,this.enter_propagation_priority),this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT).onDown.add(()=>{this.window_open&&this.change_page(1)}),this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT).onDown.add(()=>{this.window_open&&this.change_page(-1)}),this.data.spacebar_input.add(()=>{this.window_open&&(this.data.spacebar_input.halt(),void 0!==this.spacebar_callback&&this.spacebar_callback())},this,this.spacebar_propagation_priority)}set_page_number(){const t=this.all_abilities.length;this.page_number=1+((t-1)/5|0),this.page_index>=this.page_number&&(this.page_index=this.page_number-1)}change_page(t){this.page_index+=t,this.page_index===this.page_number?this.page_index=0:this.page_index<0&&(this.page_index=this.page_number-1),this.set_abilities_list(),this.base_window.set_page_indicator_highlight(this.page_number,this.page_index)}set_abilities_list(){this.clear_sprites(),this.abilities=this.all_abilities.slice(5*this.page_index,5*(this.page_index+1));for(let t=0;t<this.abilities.length;++t){const e=this.abilities[t],i=8,s=12+t*(n.ICON_HEIGHT+2),o=i+(n.ICON_WIDTH>>1),_=s+(n.ICON_HEIGHT>>1),h=8+n.ICON_WIDTH+2,c=this.base_window.set_text_in_position(this.data.info.abilities_list[e].name,h,s+4);this.text_sprites_in_window.push(c),this.icon_sprites_in_window.push(this.base_window.create_at_group(o,_,"abilities_icons",void 0,e)),this.icon_sprites_in_window[t].anchor.setTo(.5,.5);const l=this.base_window.set_text_in_position(this.data.info.abilities_list[e].pp_cost,109,s+4,!0);this.text_sprites_in_window.push(l),this.gained_abilities.includes(e)?(this.base_window.update_text_color(a,c),this.base_window.update_text_color(a,l)):this.lost_abilities.includes(e)&&(this.base_window.update_text_color(r,c),this.base_window.update_text_color(r,l))}}set_abilities(){this.current_abilities=this.char.abilities.filter(t=>t in this.data.info.abilities_list);const t=this.char.preview_djinn_change([],this.djinni.map(t=>t.key_name),this.next_djinni_status,this.action);this.next_abilities=t.abilities.filter(t=>t in this.data.info.abilities_list);let e=new Set(this.current_abilities),i=new Set(this.next_abilities);this.gained_abilities=[...i].filter(t=>!e.has(t)),this.lost_abilities=[...e].filter(t=>!i.has(t)),this.intersection_abilities=[...e].filter(t=>i.has(t)),this.all_abilities=this.gained_abilities.concat(this.intersection_abilities,this.lost_abilities),0===this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* No change",this.psy_info_1_text),this.base_window.update_text_color(n.DEFAULT_FONT_COLOR,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&0===this.lost_abilities.length?(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):0===this.gained_abilities.length&&this.lost_abilities.length?(this.base_window.update_text("* Psynergy Lost",this.psy_info_1_text),this.base_window.update_text_color(r,this.psy_info_1_text),this.base_window.update_text("",this.psy_info_2_text)):this.gained_abilities.length&&this.lost_abilities.length&&(this.base_window.update_text("* Psynergy Gained",this.psy_info_1_text),this.base_window.update_text_color(a,this.psy_info_1_text),this.base_window.update_text("* Psynergy Lost",this.psy_info_2_text),this.base_window.update_text_color(r,this.psy_info_2_text))}mount_window(){this.set_abilities(),this.set_abilities_list(),this.set_page_number(),this.base_window.set_page_indicator(this.page_number,this.page_index)}clear_sprites(){for(let t=0;t<this.icon_sprites_in_window.length;++t)this.base_window.remove_from_group(this.icon_sprites_in_window[t]);this.icon_sprites_in_window=[];for(let t=0;t<this.text_sprites_in_window.length;++t)this.base_window.remove_text(this.text_sprites_in_window[t]);this.text_sprites_in_window=[]}update_info(t,e,i){this.clear_sprites(),this.base_window.unset_page_indicator(),this.char=t,this.djinni=e,this.next_djinni_status=i,this.page_index=0,this.mount_window()}open(t,e,i,s,n=!1,a,r,o){this.char=t,this.djinni=e,this.next_djinni_status=i,this.close_callback=s,this.execute_operation=!1,this.page_index=0,this.mount_window(),this.spacebar_callback=a,this.action=r,n?this.window_open=!0:this.base_window.show(()=>{this.window_open=!0,void 0!==o&&o()},!1)}close(t){this.clear_sprites(),this.base_window.unset_page_indicator(),this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t(this.execute_operation)},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DjinnActionWindow=void 0;const s=i(2),n=i(5);e.DjinnActionWindow=class{constructor(t){this.game=t,this.window_open=!1,this.base_window=new s.Window(this.game,104,0,132,36),this.action_description_text=this.base_window.set_text_in_position("",8,8),this.char_name_text=this.base_window.set_text_in_position("",8,16),this.djinn_name_text=this.base_window.set_text_in_position("",64,16),this.star_sprite=null,this.shift_key={shadow:this.base_window.create_at_group(9,25,"shift_keyboard",0),text:this.base_window.create_at_group(8,24,"shift_keyboard")},this.action_text=this.base_window.set_text_in_position("",31,24)}set_action_text(t){switch(this.base_window.update_text("Choose a djinn.",this.action_description_text),this.base_window.update_text("",this.char_name_text),this.base_window.update_text("",this.djinn_name_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=1,this.star_sprite&&(this.star_sprite.destroy(),this.star_sprite=null),t){case n.djinn_status.SET:this.base_window.update_text(": Standby",this.action_text);break;case n.djinn_status.STANDBY:this.base_window.update_text(": Set",this.action_text)}}set_action_for_specific_djinn(t,e){this.star_sprite=this.base_window.create_at_group(57,17,e.element+"_star"),this.base_window.update_text("What will you do?",this.action_description_text),this.base_window.update_text(t.name+"'s",this.char_name_text),this.base_window.update_text(e.name,this.djinn_name_text),this.base_window.update_text("",this.action_text),this.shift_key.text.alpha=this.shift_key.shadow.alpha=0}open(t){this.base_window.show(()=>{this.window_open=!0,void 0!==t&&t()},!1)}close(t){this.base_window.close(()=>{this.window_open=!1,void 0!==t&&t()},!1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_misc_data=void 0;const s=i(10);e.initialize_misc_data=function(t,e,i){let n={},a=[];for(let i=0;i<e.length;++i){const r=e[i],o=new s.SpriteBase(r.key_name,r.actions.map(t=>t.key_name));n[r.key_name]=o;for(let t=0;t<r.actions.length;++t){const e=r.actions[t];o.setActionSpritesheet(e.key_name,e.spritesheet.image,e.spritesheet.json),o.setActionDirections(e.key_name,e.animations,e.frames_count),o.setActionFrameRate(e.key_name,e.frame_rate),o.setActionLoop(e.key_name,e.loop)}let _;o.generateAllFrames();const h=new Promise(t=>{_=t});a.push(h),o.loadSpritesheets(t,!0,_)}return Promise.all(a).then(i),n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopMenu=void 0;const s=i(94),n=i(95),a=i(96),r=i(0),o=i(97),_=i(98),h=i(99),c=i(100),l=i(101),d=i(2),p=i(103),u=i(104),g=i(105),m=i(31),y=i(3);e.ShopMenu=class{constructor(t,e){this.game=t,this.data=e,this.shop_key=null,this.close_callback=null,this.items_db=this.data.info.items_list,this.shops_db=y.mapKeys(this.data.dbs.shops_db,t=>t.key_name),this.shopkeep_dialog_db=this.data.dbs.shopkeep_dialog_db,this.normal_item_list={},this.artifact_list={},this.buttons_keys=["buy","sell","artifacts","repair"],this.windows_mode="buy",this.current_index=0,this.cursor_manager=new u.CursorManager(this.game),this.control_manager=new g.ControlManager(this.game),this.horizontal_menu=new m.ButtonSelectMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>r.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},this.control_manager),this.npc_dialog=new s.ShopkeepDialog(this.game,this.data,this),this.yesno_action=new c.YesNoMenu(this.game,this.data,this.control_manager),this.inv_win=new o.InventoryWindow(this.game,this.data,this,this.on_inv_win_change.bind(this)),this.buy_select=new _.BuySelectMenu(this.game,this.data,this,this.on_buy_select_change.bind(this)),this.eq_compare=new h.EquipCompare(this.game,this.data),this.quant_win=new l.ShopItemQuantityWindow(this.game,this.data,this.cursor_manager),this.char_display=new p.ShopCharDisplay(this.game,this.data,this,this.on_char_display_change.bind(this)),this.item_price_win=new d.Window(this.game,0,64,116,28),this.your_coins_win=new d.Window(this.game,144,56,92,28),this.item_desc_win=new d.Window(this.game,0,136,236,20),this.buy_menu=new n.BuyArtifactsMenu(this.game,this.data,this),this.sell_menu=new a.SellRepairMenu(this.game,this.data,this),this.your_coins_label=this.your_coins_win.set_text_in_position("Your Coins: ",8,8),this.your_coins_text=this.your_coins_win.set_text_in_position("",85,16,!0),this.item_name_text=this.item_price_win.set_text_in_position("",8,8),this.item_price_label=this.item_price_win.set_text_in_position("Price",8,16),this.item_price_val_text=this.item_price_win.set_text_in_position("",77,16,!0),this.item_price_coins_label=this.item_price_win.set_text_in_position("Coins",80,16),this.item_desc_text=this.item_desc_win.set_text_in_position("",8,8)}on_char_display_change(t){this.eq_compare.is_open&&this.eq_compare.change_character(t),this.inv_win.is_open&&this.inv_win.change_character(t)}on_inv_win_change(t,e){if(this.item_price_win.open&&this.sell_menu.active){let i=this.sell_menu.is_repair_menu,s=this.inv_win.item_grid[t][e];if(s){let t=this.data.info.items_list[s.key_name].price,e=this.data.info.items_list[s.key_name].important_item,n=t;n=i?t*(1/4)|0:t*(s.broken?.5:3/4)|0,this.update_item_info(s.key_name,n,i?!s.broken:e,!i||s.broken,e)}}}on_buy_select_change(t){this.update_item_info(t)}set_item_lists(){let t=[],e=[],i=this.shops_db[this.shop_key].item_list;for(let s=0;s<i.length;s++){let n=this.items_db[i[s].key_name];0!==i[s].quantity&&(!0===n.rare_item?e.push(n):t.push(n))}this.normal_item_list=y.mapKeys(t,t=>t.key_name),this.artifact_list=y.mapKeys(e,t=>t.key_name)}update_your_coins(){this.your_coins_win.update_text(String(this.data.info.party_data.coins),this.your_coins_text)}update_item_info(t,e,i=!1,s=!1,n=!1){let a=this.data.info.items_list[t];this.item_desc_win.update_text(a.description,this.item_desc_text),this.item_price_win.update_text(a.name,this.item_name_text);let r=i?"":"Coins";this.item_price_win.update_text(r,this.item_price_coins_label);let o="Price";i&&!s?o="It's not broken.":i&&n&&(o="We can't buy that."),this.item_price_win.update_text(o,this.item_price_label);let _=e||a.price,h=i?"":_;this.item_price_win.update_text(h,this.item_price_val_text)}alternate_window_pos(t){this.windows_mode!==t&&("buy"===t?(this.item_price_win.update_position({x:0,y:64}),this.item_desc_win.update_position({x:0,y:136}),this.your_coins_win.update_position({x:144,y:56}),this.windows_mode="buy"):(this.item_price_win.update_position({x:120,y:64}),this.item_desc_win.update_position({x:0,y:40}),this.your_coins_win.update_position({x:0,y:72}),this.windows_mode="sell"))}button_press(){switch(this.horizontal_menu.deactivate(!0),this.current_index=this.horizontal_menu.selected_button_index,this.buttons_keys[this.horizontal_menu.selected_button_index]){case"buy":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!1);break;case"sell":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!1);break;case"artifacts":this.alternate_window_pos("buy"),this.buy_menu.open_menu(!0);break;case"repair":this.alternate_window_pos("sell"),this.sell_menu.open_menu(!0)}this.npc_dialog.is_active||this.npc_dialog.close_dialog()}update_position(){this.npc_dialog.update_position(),this.horizontal_menu.update_position()}is_active(){return this.horizontal_menu.menu_active}open_horizontal_menu(t="cancel_option"){this.npc_dialog.is_active?this.npc_dialog.update_dialog(t):this.npc_dialog.open(this.shop_key),this.horizontal_menu.open(void 0,this.current_index)}open_menu(t,e){this.shop_key=t,this.close_callback=e,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.set_item_lists(),this.data.shop_open=!0,this.open_horizontal_menu()}end_dialog(){this.shop_key=null,this.npc_dialog.close(),this.data.shop_open=!1,this.control_manager.reset(),this.close_callback&&this.close_callback(),this.close_callback=null}close_menu(){this.is_active()&&(this.horizontal_menu.close(),this.npc_dialog.update_dialog("goodbye"),this.normal_item_list={},this.artifact_list={},this.current_index=0,this.control_manager.reset(),this.control_manager.actions.enter.callback=this.end_dialog.bind(this),this.control_manager.set_actions())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopkeepDialog=void 0;const s=i(19),n=i(3);e.ShopkeepDialog=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.dialog_manager=new s.DialogManager(this.game,this.data),this.messages=null,this.current_message=null,this.is_active=!1}open(t){this.shop_key=t,this.avatar_key=this.parent.shops_db[t].avatar_key,this.dialog_key=this.parent.shops_db[t].dialog_key,this.messages=n.mapKeys(this.data.shop_menu.shopkeep_dialog_db[this.dialog_key].messages,t=>t.key),this.update_dialog("welcome")}update_position(){this.dialog_manager.update_position()}replace_text(t,e,i,s){do{t.includes("${HERO}")&&(t=t.replace("${HERO}",e)),t.includes("${ITEM}")&&(t=t.replace("${ITEM}",i)),t.includes("${PRICE}")&&(t=t.replace("${PRICE}",s))}while(t.includes("${HERO}")||t.includes("${ITEM}")||t.includes("${PRICE}"));return t}get_message(t){return this.messages[t].text}update_dialog(t,e=!1,i=!0,s){this.current_message=i?this.messages[t].text:t,this.is_active=!0,this.dialog_manager.quick_next(this.current_message,s,this.avatar_key,void 0,{x:40,y:0},{x:0,y:0},e)}close_dialog(t,e=!0){this.is_active=!1,this.dialog_manager.kill_dialog(t,e)}close(){this.close_dialog(void 0,!1),this.shop_key=null,this.avatar_key=null,this.dialog_key=null,this.messages=null,this.current_message=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuyArtifactsMenu=void 0;const s=i(9);e.BuyArtifactsMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.control_manager=this.parent.control_manager,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.buy_select=this.parent.buy_select,this.eq_compare=this.parent.eq_compare,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_artifacts_menu=null,this.item_list={},this.selected_item=null,this.buy_select_pos={page:0,index:0,is_last:!1},this.old_item=null,this.selected_character=null,this.selected_char_index=0,this.active=!1}update_game_ticket_step(){let t=this.data.info.party_data.game_tickets.tickets_bought;return t>=1&&t<6?300:t>=6&&t<11?500:t>=11&&t<16?1e3:t>=16&&t<21?2e3:t>=21&&t<26?4e3:t>=26?8e3:void 0}check_game_ticket(){let t=!1;this.data.info.party_data.game_tickets.coins_remaining-=this.data.info.items_list[this.selected_item.key_name].price,this.data.info.party_data.game_tickets.coins_remaining<=0&&(t=!0,this.data.info.party_data.game_tickets.tickets_bought+=1,this.data.info.party_data.game_tickets.coins_remaining+=this.update_game_ticket_step()),t?(this.npc_dialog.update_dialog("game_ticket",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_inventory_view.bind(this,!0),enter:this.open_inventory_view.bind(this,!0)})):this.open_buy_select()}sell_old_equip(t){let e=t.rare_item?"after_sell_artifact":"after_sell_normal";if(this.npc_dialog.update_dialog(e,!0),t.rare_item){let e=this.data.info.shops_list[this.parent.shop_key].item_list,i=!1;for(let s=0;s<e.length;s++)(e[s].key_name=t.key_name)&&(i=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=1);i||this.data.info.shops_list[this.parent.shop_key].item_list.push({key_name:t.key_name,quantity:1})}for(let e=0;e<this.selected_character.items.length;e++)this.selected_character.items[e].key_name===t.key_name&&this.selected_character.items.splice(e,1);let i=this.old_item.broken?.5*this.old_item.price:this.old_item.price*(3/4);this.data.info.party_data.coins+=0|i,this.parent.update_your_coins(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}equip_new_item(){let t=this.data.info.items_list[this.selected_item.key_name].type,e=this.selected_character.equip_slots;switch(this.npc_dialog.update_dialog("equip_compliment",!0),this.old_item=null,t){case s.item_types.WEAPONS:e.weapon&&(this.old_item=this.data.info.items_list[e.weapon.key_name]);break;case s.item_types.ARMOR:e.body&&(this.old_item=this.data.info.items_list[e.body.key_name]);break;case s.item_types.CHEST_PROTECTOR:e.chest&&(this.old_item=this.data.info.items_list[e.chest.key_name]);break;case s.item_types.HEAD_PROTECTOR:e.head&&(this.old_item=this.data.info.items_list[e.head.key_name]);break;case s.item_types.RING:e.ring&&(this.old_item=this.data.info.items_list[e.ring.key_name]);break;case s.item_types.LEG_PROTECTOR:e.boots&&(this.old_item=this.data.info.items_list[e.boots.key_name]);break;case s.item_types.UNDERWEAR:e.underwear&&(this.old_item=this.data.info.items_list[e.underwear.key_name])}if(this.old_item)for(let t=0;t<this.selected_character.items.length;t++){if(this.selected_character.items[t].key_name===this.old_item.key_name){this.selected_character.unequip_item(t);break}}for(let t=this.selected_character.items.length-1;t>0;t--){if(this.selected_character.items[t].key_name===this.selected_item.key_name){this.selected_character.equip_item(t);break}}if(this.old_item){let t=()=>{let t=this.old_item.broken?.5*this.old_item.price:this.old_item.price*(3/4),e=this.npc_dialog.get_message("sell_current");e=this.npc_dialog.replace_text(e,void 0,this.old_item.name,String(0|t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.sell_old_equip.bind(this,this.old_item),no:()=>{let t=this.old_item.rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}},{x:56,y:40})};this.control_manager.set_control(!1,!1,!1,!1,{esc:t.bind(this),enter:t.bind(this)})}else this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}on_purchase_success(t=!1,e=!1){let i=1,s=e?"game_ticket":this.selected_item.key_name,n=this.data.info.items_list[s];if(this.quant_win.is_open&&!e&&(i=this.quant_win.chosen_quantity),this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price*i<0&&!e)this.npc_dialog.update_dialog("not_enough_coins",!0),this.parent.cursor_manager.hide(),this.quant_win.is_open&&this.quant_win.close(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this),enter:this.open_buy_select.bind(this)});else{this.npc_dialog.update_dialog("after_buy",!0),this.parent.cursor_manager.hide(),this.quant_win.is_open&&this.quant_win.close(),e||(this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*i);let s=!1;for(let t=0;t<this.selected_character.items.length;t++){this.selected_character.items[t].key_name===n.key_name&&this.data.info.items_list[n.key_name].carry_up_to_30&&(s=!0,this.selected_character.items[t].quantity+=i)}let a=this.selected_character.items.length;if(s||(n.equipable?this.selected_character.items.push({key_name:n.key_name,quantity:1,equipped:!1,index:a}):this.selected_character.items.push({key_name:n.key_name,quantity:i,index:a})),e)this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this),enter:this.open_buy_select.bind(this)});else{let e=this.data.info.shops_list[this.parent.shop_key].item_list;for(let t=0;t<e.length;t++)e[t].key_name===this.selected_item.key_name&&-1!==e[t].quantity&&(this.data.info.shops_list[this.parent.shop_key].item_list[t].quantity-=i);if(this.parent.set_item_lists(),this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,this.buy_select.items=this.item_list,t){let t=()=>{let t=this.npc_dialog.get_message("equip_now");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open_menu({yes:this.equip_new_item.bind(this),no:this.check_game_ticket.bind(this)},{x:56,y:40})};this.control_manager.set_control(!1,!1,!1,!1,{esc:t.bind(this),enter:t.bind(this)})}else this.control_manager.set_control(!1,!1,!1,!1,{esc:this.check_game_ticket.bind(this),enter:this.check_game_ticket.bind(this)})}}}on_buy_equip_select(){if(this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1)}else if(this.data.info.items_list[this.selected_item.key_name].equipable_chars.includes(this.selected_character.key_name))this.on_purchase_success(!0);else{let t=this.npc_dialog.get_message("cant_equip");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1),this.yesno_action.open_menu({yes:this.on_purchase_success.bind(this),no:this.open_equip_compare.bind(this)},{x:56,y:40})}}on_buy_item_select(t=!1){this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index;let e=0;for(let t=0;t<this.selected_character.items.length;t++){let i=this.selected_character.items[t];i.key_name===this.selected_item.key_name&&(e=i.quantity)}if(15===this.selected_character.items.length){let t=this.npc_dialog.get_message("inventory_full");t=this.npc_dialog.replace_text(t,this.selected_character.name),this.npc_dialog.update_dialog(t,!1,!1)}else if(30===e){let t=this.data.info.items_list[this.selected_item.key_name].name,e=this.npc_dialog.get_message("stack_full");e=this.npc_dialog.replace_text(e,this.selected_character.name,t),this.npc_dialog.update_dialog(e,!1,!1)}else if(t)this.on_purchase_success(!1,t);else if(this.data.info.party_data.coins-this.data.info.items_list[this.selected_item.key_name].price<0&&!t)this.npc_dialog.update_dialog("not_enough_coins",!0),this.parent.cursor_manager.hide(),this.quant_win.is_open&&this.quant_win.close(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this),enter:this.open_buy_select.bind(this)});else{this.npc_dialog.update_dialog("buy_quantity");let t=this.data.info.shops_list[this.parent.shop_key].item_list.filter(t=>t.key_name===this.selected_item.key_name)[0],e={key_name:t.key_name,quantity:-1===t.quantity?30:t.quantity},i=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),s=0!==i.length?i[0]:null;this.quant_win.is_open||this.quant_win.open(e,s,!0),this.control_manager.set_control(!0,!1,!0,!1,{right:this.quant_win.increase_amount.bind(this.quant_win),left:this.quant_win.decrease_amount.bind(this.quant_win),esc:this.open_inventory_view.bind(this),enter:this.on_purchase_success.bind(this)},100)}}on_cancel_char_select(){this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.char_display.is_open&&this.char_display.close(),this.open_buy_select()}on_cancel_game_ticket(){this.npc_dialog.update_dialog("game_ticket_decline",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_cancel_char_select.bind(this),enter:this.on_cancel_char_select.bind(this)})}open_equip_compare(){this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index)},this.item_desc_win.open&&this.item_desc_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.npc_dialog.update_dialog("character_select");let t=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.char_display.is_open||this.char_display.open(this.selected_char_index),this.eq_compare.is_open||this.eq_compare.open(t,this.selected_item.key_name),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:this.on_cancel_char_select.bind(this),enter:this.on_buy_equip_select.bind(this)})}open_inventory_view(t=!1){!t&&this.buy_select.is_open&&(this.buy_select_pos={page:this.buy_select.current_page,index:this.buy_select.selected_index,is_last:this.buy_select.is_last(this.buy_select.current_page,this.buy_select.selected_index)}),this.item_desc_win.open&&this.item_desc_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.quant_win.is_open&&this.quant_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),t?this.npc_dialog.update_dialog("game_ticket_select"):this.npc_dialog.update_dialog("character_select");let e=t?"game_ticket":this.selected_item.key_name;this.char_display.is_open?this.char_display.select_char(this.selected_char_index):this.char_display.open(this.selected_char_index);let i=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.inv_win.is_open&&this.inv_win.close(),this.inv_win.open(i,e,!0),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:t?this.on_cancel_game_ticket.bind(this):this.on_cancel_char_select.bind(this),enter:this.on_buy_item_select.bind(this,t)})}on_buy_select(){this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.data.info.items_list[this.selected_item.key_name].equipable?this.open_equip_compare():this.open_inventory_view()}open_buy_select(t="sell_follow_up"){0===Object.keys(this.item_list).length?this.close_menu():(this.buy_select_pos.is_last&&(0===this.buy_select_pos.index?(this.buy_select_pos.page-=1,this.buy_select_pos.index=6):this.buy_select_pos.index-=1),this.npc_dialog.update_dialog(t),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.buy_select.is_open||this.buy_select.open(this.item_list,this.buy_select_pos.index,this.buy_select_pos.page),this.control_manager.reset(),this.selected_item=this.buy_select.pages[this.buy_select.current_page][this.buy_select.selected_index],this.parent.update_item_info(this.selected_item.key_name),this.parent.update_your_coins(),this.item_desc_win.open||this.item_desc_win.show(),this.item_price_win.open||this.item_price_win.show(),this.your_coins_win.open||this.your_coins_win.show(),this.control_manager.set_control(!0,!0,!0,!1,{right:this.buy_select.next_item.bind(this.buy_select),left:this.buy_select.previous_item.bind(this.buy_select),up:this.buy_select.previous_page.bind(this.buy_select),down:this.buy_select.next_page.bind(this.buy_select),esc:this.close_menu.bind(this),enter:this.on_buy_select.bind(this)}))}open_menu(t){this.is_artifacts_menu=t,this.active=!0,this.item_list=this.is_artifacts_menu?this.parent.artifact_list:this.parent.normal_item_list,t?0===Object.keys(this.item_list).length?(this.npc_dialog.update_dialog("no_artifacts",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.close_menu.bind(this),enter:this.close_menu.bind(this)})):(this.npc_dialog.update_dialog("artifacts_menu",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_buy_select.bind(this,"buy_select"),enter:this.open_buy_select.bind(this,"buy_select")})):this.open_buy_select("buy_select")}close_menu(){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.your_coins_win.open&&this.your_coins_win.close(),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.yesno_action.is_open&&this.yesno_action.close_menu(),this.quant_win.is_open&&this.quant_win.close(),this.buy_select.is_open&&this.buy_select.close(),this.eq_compare.is_open&&this.eq_compare.close(),this.parent.cursor_manager.hide(),this.is_artifacts_menu=null,this.item_list={},this.selected_item=null,this.old_item=null,this.buy_select_pos={page:0,index:0,is_last:!1},this.active=!1,this.control_manager.reset(),this.parent.horizontal_menu.activate(),this.parent.open_horizontal_menu()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SellRepairMenu=void 0;const s=6*Phaser.Timer.SECOND;e.SellRepairMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.parent=i,this.control_manager=this.parent.control_manager,this.item_desc_win=this.parent.item_desc_win,this.your_coins_win=this.parent.your_coins_win,this.item_price_win=this.parent.item_price_win,this.char_display=this.parent.char_display,this.inv_win=this.parent.inv_win,this.quant_win=this.parent.quant_win,this.yesno_action=this.parent.yesno_action,this.npc_dialog=this.parent.npc_dialog,this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.selected_char_index=0,this.active=!1}on_item_repair(){if(this.npc_dialog.dialog_manager.window.open){this.npc_dialog.dialog_manager.window.close();let t=this.npc_dialog.dialog_manager.dialog_crystal;(t.visible=!0)&&(t.visible=!1)}this.inv_win.kill_item_at(this.inv_win_pos.line,this.inv_win_pos.col),this.control_manager.reset(),this.game.time.events.add(s,()=>{this.selected_item.broken=!1,this.data.info.party_data.coins-=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,this.npc_dialog.update_dialog("repair_done",!0),this.parent.update_your_coins(),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})},this)}on_repair_item_select(){if(this.inv_win_pos=this.inv_win.cursor_pos,this.item_desc_win.open&&this.item_desc_win.close(),this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.selected_item.broken){let t=this.data.info.items_list[this.selected_item.key_name].price*(1/4)|0,e=this.npc_dialog.get_message("repair_deal");e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name,String(t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:()=>{this.npc_dialog.update_dialog("repair_deal_accept",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_item_repair.bind(this),enter:this.on_item_repair.bind(this)})},no:()=>{this.npc_dialog.update_dialog("repair_deal_decline",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})}},{x:56,y:40})}else{let t="breaks_when_use"===this.data.info.items_list[this.selected_item.key_name].use_type?"cant_repair":"repair_decline",e=this.npc_dialog.get_message(t);e=this.npc_dialog.replace_text(e,void 0,this.data.info.items_list[this.selected_item.key_name].name),this.npc_dialog.update_dialog(e,!0,!1),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"repair_follow_up",this.inv_win_pos)})}}on_sale_success(t=1){let e=this.data.info.items_list[this.selected_item.key_name].rare_item?"after_sell_artifact":"after_sell_normal";this.npc_dialog.update_dialog(e,!0);let i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;this.data.info.party_data.coins+=i*t,this.parent.update_your_coins();for(let e=0;e<this.selected_character.items.length;e++){this.selected_character.items[e].key_name===this.selected_item.key_name&&(this.selected_character.items[e].quantity-=t,0===this.selected_character.items[e].quantity&&this.selected_character.items.splice(e,1))}if(this.data.info.items_list[this.selected_item.key_name].rare_item){let e=!1,i=this.data.info.shops_list[this.parent.shop_key].item_list;for(let s=0;s<i.length;s++)i[s].key_name===this.selected_item.key_name&&(e=!0,this.data.info.shops_list[this.parent.shop_key].item_list[s].quantity+=t);e||i.push({key_name:this.selected_item.key_name,quantity:t})}this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(this.selected_character.key_name,void 0,!1),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}on_sell_item_select(){if(this.inv_win_pos=this.inv_win.cursor_pos,this.item_desc_win.open&&this.item_desc_win.close(),this.selected_item=this.inv_win.item_grid[this.inv_win_pos.line][this.inv_win_pos.col],this.data.info.items_list[this.selected_item.key_name].important_item)this.npc_dialog.update_dialog("cant_sell",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)});else if(1===this.selected_item.quantity){let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"sell_artifact":"sell_normal",e=this.npc_dialog.get_message(t),i="sell_normal"===t?this.data.info.items_list[this.selected_item.key_name].name:void 0,s=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,i,String(s)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.on_sale_success.bind(this),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sale_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}},{x:56,y:40})}else{this.npc_dialog.update_dialog("sell_quantity_select");let t=this.selected_character.items.filter(t=>t.key_name===this.selected_item.key_name),e=0!==t.length?t[0]:null;this.quant_win.is_open||this.quant_win.open(e),this.control_manager.set_control(!0,!1,!0,!1,{right:this.quant_win.increase_amount.bind(this.quant_win),left:this.quant_win.decrease_amount.bind(this.quant_win),esc:this.on_character_select.bind(this,"sell_follow_up",this.selected_char_index,this.inv_win_pos),enter:()=>{let t=1;t=this.quant_win.chosen_quantity,this.quant_win.close(),this.parent.cursor_manager.hide();let e=this.npc_dialog.get_message("sell_quantity_confirm"),i=this.data.info.items_list[this.selected_item.key_name].price*(this.selected_item.broken?.5:3/4)|0;e=this.npc_dialog.replace_text(e,void 0,void 0,String(i*t)),this.npc_dialog.update_dialog(e,!1,!1),this.yesno_action.open_menu({yes:this.on_sale_success.bind(this,t),no:()=>{let t=this.data.info.items_list[this.selected_item.key_name].rare_item?"decline_sell_artifact":"decline_sell_normal";this.npc_dialog.update_dialog(t,!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos),enter:this.on_character_select.bind(this,"sell_follow_up",this.inv_win_pos)})}},{x:56,y:40})}})}}on_character_select(t="sell_follow_up",e={line:0,col:0}){this.quant_win.is_open&&this.quant_win.close(),this.item_desc_win.open||this.item_desc_win.show(),this.item_price_win.open||this.item_price_win.show(),t&&this.npc_dialog.update_dialog(t),this.selected_character=this.char_display.lines[this.char_display.current_line][this.char_display.selected_index],this.selected_char_index=this.char_display.selected_index,this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(this.selected_character.key_name,void 0,!1),this.inv_win.set_cursor(e.line,e.col),this.inv_win.item_grid[e.line][e.col]||this.inv_win.previous_col(),this.control_manager.set_control(!0,!0,!0,!0,{right:this.inv_win.next_col.bind(this.inv_win),left:this.inv_win.previous_col.bind(this.inv_win),up:this.inv_win.previous_line.bind(this.inv_win),down:this.inv_win.next_line.bind(this.inv_win),esc:this.open_inventory_view.bind(this),enter:this.is_repair_menu?this.on_repair_item_select.bind(this):this.on_sell_item_select.bind(this)})}open_inventory_view(t="sell_follow_up"){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.quant_win.is_open&&this.quant_win.close(),this.npc_dialog.update_dialog(t),this.your_coins_win.open||this.your_coins_win.show(),this.parent.update_your_coins(),this.char_display.is_open?this.char_display.select_char(this.selected_char_index):this.char_display.open(this.selected_char_index),this.game.world.bringToTop(this.char_display.char_group);let e=this.selected_character?this.selected_character.key_name:this.data.info.party_data.members[0].key_name;this.inv_win.is_open&&this.inv_win.close(),this.inv_win.is_open||this.inv_win.open(e,void 0,!1),this.control_manager.set_control(!0,!0,!0,!1,{right:this.char_display.next_char.bind(this.char_display),left:this.char_display.previous_char.bind(this.char_display),up:this.char_display.previous_line.bind(this.char_display),down:this.char_display.next_line.bind(this.char_display),esc:this.close_menu.bind(this),enter:this.on_character_select.bind(this)})}open_menu(t){this.is_repair_menu=t,this.active=!0,t?(this.npc_dialog.update_dialog("repair_menu",!0),this.control_manager.set_control(!1,!1,!1,!1,{esc:this.open_inventory_view.bind(this,"repair_select"),enter:this.open_inventory_view.bind(this,"repair_select")})):this.open_inventory_view("sell_select")}close_menu(){this.item_desc_win.open&&this.item_desc_win.close(),this.item_price_win.open&&this.item_price_win.close(),this.your_coins_win.open&&this.your_coins_win.close(),this.char_display.is_open&&this.char_display.close(),this.inv_win.is_open&&this.inv_win.close(),this.yesno_action.is_open&&this.yesno_action.close_menu(),this.quant_win.is_open&&this.quant_win.close(),this.parent.cursor_manager.hide(),this.is_repair_menu=null,this.selected_item=null,this.inv_win_pos={line:0,col:0},this.selected_character=null,this.active=!1,this.control_manager.reset(),this.parent.horizontal_menu.activate(),this.parent.open_horizontal_menu()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InventoryWindow=void 0;const s=i(2),n=i(0);e.InventoryWindow=class{constructor(t,e,i,n){this.game=t,this.data=e,this.parent=i,this.on_change=n,this.close_callback=null,this.expanded=!1,this.is_open=!1,this.window=new s.Window(this.game,128,96,108,60),this.text=this.window.set_text_in_position("",8,8),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.item_grid=[],this.selected_item=null,this.cursor_pos={line:0,col:0},this.sprite_group=this.window.define_internal_group("sprites",{x:16,y:8}),this.icon_group=this.window.define_internal_group("icons",{x:23,y:16})}check_expand(t){if(t&&this.set_text(),this.expanded===t)return;let e=t?1:-1;this.window.update_size({height:this.window.height+8*e}),this.window.update_position({y:this.window.y-8*e}),this.sprite_group.y=this.sprite_group.y+8*e,this.icon_group.y=this.icon_group.y+8*e,this.window.update(),this.expanded=t}set_text(){let t=null,e=!1,i=!1;for(let s=0;s<3;s++){for(let n=0;n<5;n++){if(!this.item_grid[s][n]){i=!0;break}if(this.item_grid[s][n].key_name===this.selected_item){t=this.item_grid[s][n],e=!0;break}}if(e||i)break}e?this.window.update_text("You have "+t.quantity,this.text):this.window.update_text("None in stock",this.text),this.text.text.alpha=1,this.text.shadow.alpha=1}change_character(t){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.make_item_grid(),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.icon_group),this.expanded&&this.set_text(),this.set_sprites()}make_item_grid(){this.item_grid=[];let t=this.char.items.filter(t=>t.key_name in this.data.info.items_list),e=[];for(let i=0;i<1+(t.length/5|0);i++){let s=[];for(let e=0;e<5;e++)t[5*i+e]&&s.push(t[5*i+e]);e.push(s)}this.item_grid=e}kill_item_at(t,e){let i=this.sprite_group.children.filter(i=>!0===i.alive&&"items_icons"===i.key&&i.x===16*e&&i.y===16*t),s=this.sprite_group.children.filter(i=>!0===i.alive&&"item_border"===i.key&&i.x===16*e&&i.y===16*t);if(i[0].kill(),s[0].kill(),this.item_grid[t][e].broken){this.sprite_group.children.filter(i=>!0===i.alive&&"broken"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}if(this.item_grid[t][e].equipped){this.icon_group.children.filter(i=>!0===i.alive&&"equipped"===i.key&&i.x===16*e&&i.y===16*t)[0].kill()}}next_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col<this.item_grid[this.cursor_pos.line].length-1?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col+1):this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,0):this.set_cursor(this.cursor_pos.line+1,0))}previous_col(){1===this.item_grid.length&&1===this.item_grid[this.cursor_pos.line].length||(this.cursor_pos.col>0?this.set_cursor(this.cursor_pos.line,this.cursor_pos.col-1):0===this.cursor_pos.line?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.cursor_pos.line-1,4))}next_line(){1!==this.item_grid.length&&(this.cursor_pos.line===this.item_grid.length-1?this.set_cursor(0,this.cursor_pos.col):this.cursor_pos.col>this.item_grid[this.cursor_pos.line+1].length-1?this.set_cursor(this.cursor_pos.line+1,this.item_grid[this.cursor_pos.line+1].length-1):this.set_cursor(this.cursor_pos.line+1,this.cursor_pos.col))}previous_line(){1!==this.item_grid.length&&(0===this.cursor_pos.line?this.cursor_pos.col>this.item_grid[this.item_grid.length-1].length-1?this.set_cursor(this.item_grid.length-1,this.item_grid[this.item_grid.length-1].length-1):this.set_cursor(this.item_grid.length-1,this.cursor_pos.col):this.set_cursor(this.cursor_pos.line-1,this.cursor_pos.col))}set_cursor(t,e){this.cursor_pos={line:t,col:e},this.parent.cursor_manager.move_to(136+16*e,112+16*t,"point",!0),this.on_change(t,e)}set_sprites(){let t=!1;for(let e=0;e<3;e++){for(let i=0;i<5;i++){if(!this.item_grid[e][i]){t=!0;break}let s=this.data.info.items_list[this.item_grid[e][i].key_name],n=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),a=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);if(n.length>0&&a.length>0?(a[0].reset(16*i,16*e),n[0].reset(16*i,16*e),n[0].frameName=s.key_name):(this.window.create_at_group(16*i,16*e,"item_border",void 0,void 0,"sprites"),this.window.create_at_group(16*i,16*e,"items_icons",void 0,s.key_name,"sprites")),this.item_grid[e][i].broken){let t=this.sprite_group.children.filter(t=>!1===t.alive&&"broken"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"broken",void 0,void 0,"sprites")}if(this.item_grid[e][i].equipped){let t=this.icon_group.children.filter(t=>!1===t.alive&&"equipped"===t.key);t.length>0?t[0].reset(16*i,16*e):this.window.create_at_group(16*i,16*e,"equipped",void 0,void 0,"icons")}if(this.item_grid[e][i].quantity>1){let t=this.icon_group.children.filter(t=>!1===t.alive&&void 0!==t.text);if(t.length>0)t[0].text=this.item_grid[e][i].quantity.toString(),t[0].reset(16*i,16*e),t[0].x+=8-t[0].width;else{let t=this.game.add.bitmapText(16*i,16*e,"gs-item-bmp-font",this.item_grid[e][i].quantity.toString());t.x+=8-t.width,this.window.add_to_internal_group("icons",t)}}}if(t)break}this.sprite_group.alpha=1}open(t,e,i=!1,s,n){this.char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.make_item_grid(),this.check_expand(i),this.set_sprites(),this.is_open=!0,this.close_callback=s,this.window.show(n,!1)}close(t=!1){n.kill_all_sprites(this.sprite_group,t),n.kill_all_sprites(this.icon_group,t),this.text.text.alpha=0,this.text.shadow.alpha=0,this.char=null,this.selected_item=null,this.cursor_pos={line:0,col:0},this.item_grid=[],this.check_expand(!1),this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BuySelectMenu=void 0;const s=i(2),n=i(0),a=Phaser.Timer.QUARTER,r=Phaser.Timer.QUARTER>>1;e.BuySelectMenu=class{constructor(t,e,i,n){this.game=t,this.data=e,this.parent=i,this.on_change=n,this.close_callback=null,this.window=new s.Window(this.game,0,96,236,28),this.items={},this.selected_index=0,this.current_page=0,this.pages=[],this.tweens={item:null,bg:null},this.is_open=!1,this.sprite_group=this.game.add.group(),this.sprite_group.x=16,this.sprite_group.y=112,this.tag_group=this.game.add.group(),this.tag_group.x=24,this.tag_group.y=104,this.text_group=this.game.add.group(),this.text_group.x=39,this.text_group.y=131,this.bg_group=this.game.add.group(),this.bg_group.x=36,this.bg_group.y=132,this.arrow_group=this.game.add.group(),this.arrow_group.x=224,this.arrow_group.y=80,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,52,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[]}update_group_pos(){this.sprite_group.x=16+this.game.camera.x,this.sprite_group.y=112+this.game.camera.y,this.tag_group.x=24+this.game.camera.x,this.tag_group.y=104+this.game.camera.y,this.text_group.x=39+this.game.camera.x,this.text_group.y=131+this.game.camera.y,this.bg_group.x=36+this.game.camera.x,this.bg_group.y=132+this.game.camera.y,this.arrow_group.x=224+this.game.camera.x,this.arrow_group.y=80+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=52,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_page<this.pages.length-1&&(e=!0),this.current_page>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},r,Phaser.Easing.Linear.None).to({y:20},r,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:60},r,Phaser.Easing.Linear.None).to({y:52},r,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_text(t,e){let i=this.text_group.children.filter(t=>!1===t.alive&&0!==t.tint),s=this.text_group.children.filter(t=>!1===t.alive&&0===t.tint),n=null,a=null;i.length>0&&s.length>0?(i[0].text=t,i[0].reset(32*e,0),s[0].text=t,s[0].reset(32*e,0),n=i[0],a=s[0]):(a=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),n=this.game.add.bitmapText(32*e,0,"gs-shop-bmp-font",t),a.rotation=Math.PI/2,n.rotation=Math.PI/2,a.tint=0,this.text_group.add(a),this.text_group.add(n)),a.y-=n.width-1,n.y-=n.width,a.x-=1;let r=this.bg_group.children.filter(t=>!1===t.alive);if(r.length>0)r[0].clear(),r[0].beginFill(16741120,1),r[0].drawRect(0,0,-(n.height+1),-(n.width+1)),r[0].endFill(),r[0].reset(32*e,0);else{let t=this.game.add.graphics(32*e,0);t.beginFill(16741120,1),t.drawRect(0,0,-(n.height+1),-(n.width+1)),t.endFill(),this.bg_group.add(t)}this.game.world.bringToTop(this.text_group)}make_pages(){let t=Object.keys(this.items).length,e=Array.from(Object.keys(this.items)),i=t%7==0?t/7|0:1+(t/7|0);for(let t=0;t<i;t++){let i=[];for(let s=7*t;s<7*(t+1)&&e[s];s++)i.push(this.items[e[s]]);this.pages[t]=i}}set_sprites(t){for(let e=0;e<this.pages[t].length;e++){let i=this.sprite_group.children.filter(t=>!1===t.alive&&"items_icons"===t.key),s=this.sprite_group.children.filter(t=>!1===t.alive&&"item_border"===t.key);i.length>0&&s.length>0?(s[0].reset(32*e,0),s[0].scale.x=1,s[0].scale.y=1,i[0].frameName=this.pages[t][e].key_name,i[0].scale.x=1,i[0].scale.y=1,i[0].reset(32*e,0)):(this.sprite_group.create(32*e,0,"item_border").anchor.setTo(.5,.5),this.sprite_group.create(32*e,0,"items_icons",this.pages[t][e].key_name).anchor.setTo(.5,.5));let n=this.tag_group.children.filter(t=>!1===t.alive);n.length>0?n[0].reset(32*e,0):this.tag_group.create(32*e,0,"price_tag");let a=this.data.info.items_list[this.pages[t][e].key_name].price;this.set_text(a.toString(),e)}this.set_item(this.selected_index%7)}change_page(t,e){if(1===this.pages.length)return;this.clear_arrow_tweens(),Object.keys(this.items).length<7*t||(this.current_page=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.pages[this.current_page].length&&(this.selected_index=this.pages[this.current_page].length-1),n.kill_all_sprites(this.sprite_group),n.kill_all_sprites(this.tag_group),n.kill_all_sprites(this.text_group),n.kill_all_sprites(this.bg_group),this.unset_item(this.selected_index),this.set_sprites(t),this.check_arrows(),this.change_item(this.selected_index))}next_page(t){if(1===this.pages.length||this.current_page+1===this.pages.length)return;let e=this.current_page+1;this.change_page(e,t)}previous_page(t){if(1===this.pages.length||this.current_page-1<0)return;let e=this.current_page-1;this.change_page(e,t)}change_item(t){this.unset_item(this.selected_index),this.selected_index=t,this.set_item(this.selected_index),this.set_cursor(this.selected_index),this.on_change(this.pages[this.current_page][this.selected_index].key_name)}next_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index+1===this.pages[this.current_page].length?this.current_page+1===this.pages.length?1===this.pages.length?this.change_item(0):this.change_page(0,0):this.next_page(0):this.change_item(this.selected_index+1))}previous_item(){1===this.pages[this.current_page].length&&1===this.pages.length||(this.selected_index-1<0?this.current_page-1<0?1===this.pages.length?this.change_item(this.pages[this.current_page].length-1):this.change_page(this.pages.length-1,this.pages[this.pages.length-1].length-1):this.previous_page(this.pages[this.current_page-1].length-1):this.change_item(this.selected_index-1))}set_item(t){this.game.world.bringToTop(this.sprite_group),this.game.world.bringToTop(this.parent.cursor_manager.group);let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)s[e]=this.game.add.tween(n[e][t].scale).to({x:1.55,y:1.55},a,Phaser.Easing.Linear.None,!0,0,-1,!0);this.tweens={item:s[0],bg:s[1]}}is_last(t,e){return t===this.pages.length-1&&e===this.pages[t].length-1}unset_item(t){let e=this.sprite_group.children.filter(t=>!0===t.alive&&"items_icons"===t.key),i=this.sprite_group.children.filter(t=>!0===t.alive&&"item_border"===t.key),s=[this.tweens.item,this.tweens.bg],n=[e,i];for(let e=0;e<2;e++)n[e][t]&&n[e][t].scale.setTo(1,1),s[e]&&(this.game.tweens.remove(s[e]),s[e]=null)}set_cursor(t){this.parent.cursor_manager.move_to(0+32*t,112,"point")}open(t,e=0,i=0,s,n){this.items=t,this.current_page=i,this.selected_index=e,this.is_open=!0,this.make_pages(),this.check_arrows(),this.set_sprites(this.current_page),this.set_cursor(this.selected_index),this.update_group_pos(),this.close_callback=s,this.window.show(n,!1)}close(t=!1){this.unset_item(this.selected_index),n.kill_all_sprites(this.sprite_group,t),n.kill_all_sprites(this.tag_group,t),n.kill_all_sprites(this.text_group,t),n.kill_all_sprites(this.bg_group,t),this.items={},this.pages=[],this.selected_index=0,this.current_page=0,this.is_open=!1,this.set_arrows(!1,!1),this.window.close(this.close_callback,!1),this.close_callback=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EquipCompare=void 0;const s=i(2),n=i(0),a=i(9),r=i(8),o=i(3);e.EquipCompare=class{constructor(t,e){this.game=t,this.data=e,this.close_callback=null,this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window=new s.Window(this.game,128,88,108,68),this.text_group=this.window.define_internal_group("texts",{x:8,y:8}),this.arrow_group=this.window.define_internal_group("arrows",{x:65,y:7}),this.cant_equip_text=this.window.set_text_in_position("Can't equip",14,32,!1,!1,this.window.font_color,!1,void 0,!0),this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0,this.atk_label_text=this.init_text_sprite("ATK",0,0,!1),this.def_label_text=this.init_text_sprite("DEF",0,16,!1),this.agi_label_text=this.init_text_sprite("AGL",0,32,!1),this.item_name_text=this.init_text_sprite("",0,48,!1),this.curr_atk_text=this.init_text_sprite("",53,0,!0),this.curr_def_text=this.init_text_sprite("",53,16,!0),this.curr_agi_text=this.init_text_sprite("",53,32,!0),this.new_atk_text=this.init_text_sprite("",93,0,!0),this.new_def_text=this.init_text_sprite("",93,16,!0),this.new_agi_text=this.init_text_sprite("",93,32,!0),this.text_group.alpha=0,this.arrow_group.alpha=0}init_text_sprite(t,e,i,s){let n=this.window.set_text_in_position(t,e,i,s);return this.window.add_to_internal_group("texts",n.shadow),this.window.add_to_internal_group("texts",n.text),n}make_arrow(t,e){if(0===t)return;let i=16*e+(t>0?-1:0),s=t>0?"up_arrow":"down_arrow",n=this.arrow_group.children.filter(t=>!1===t.alive&&t.key===s);n.length>0?n[0].reset(0,i):this.window.create_at_group(0,i,s,void 0,void 0,"arrows")}compare_items(t,e,i,s){let n={};t&&(n=o.mapKeys(this.data.info.items_list[t].effects,t=>t.type));let a=o.mapKeys(this.data.info.items_list[e].effects,t=>t.type),_=0,h=0;if(n[i])switch(n[i].operator){case r.effect_operators.PLUS:_=n[i].quantity;break;case r.effect_operators.MINUS:_=-1*n[i].quantity;break;case r.effect_operators.TIMES:_=n[i].quantity*s;break;case r.effect_operators.DIVIDE:_=n[i].quantity/s|0}if(a[i])switch(a[i].operator){case r.effect_operators.PLUS:h=a[i].quantity;break;case r.effect_operators.MINUS:h=-1*a[i].quantity;break;case r.effect_operators.TIMES:h=a[i].quantity*s;break;case r.effect_operators.DIVIDE:h=-s/a[i].quantity|0}return h-_}display_stat(t,e,i){let s=null,n=null,a=0;switch(t){case r.effect_types.ATTACK:s=this.new_atk_text,n=this.curr_atk_text,a=0;break;case r.effect_types.DEFENSE:s=this.new_def_text,n=this.curr_def_text,a=1;break;case r.effect_types.AGILITY:s=this.new_agi_text,n=this.curr_agi_text,a=2}s.text.alpha=0===i?0:1,s.shadow.alpha=0===i?0:1,this.window.update_text(String(e),n),0!==i&&(this.window.update_text(String(e+i),s),this.make_arrow(i,a))}change_character(t){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],n.kill_all_sprites(this.arrow_group),this.show_stat_compare()}show_stat_compare(){if(!this.data.info.items_list[this.selected_item].equipable_chars.includes(this.selected_char.key_name))return void this.show_cant_equip();this.cant_equip_text.text.alpha=0,this.cant_equip_text.shadow.alpha=0;let t=this.data.info.items_list[this.selected_item].type,e=null,i=this.selected_char.equip_slots;switch(t){case a.item_types.WEAPONS:i.weapon&&(e=this.data.info.items_list[i.weapon.key_name].key_name);break;case a.item_types.ARMOR:i.body&&(e=this.data.info.items_list[i.body.key_name].key_name);break;case a.item_types.CHEST_PROTECTOR:i.chest&&(e=this.data.info.items_list[i.chest.key_name].key_name);break;case a.item_types.HEAD_PROTECTOR:i.head&&(e=this.data.info.items_list[i.head.key_name].key_name);break;case a.item_types.RING:i.ring&&(e=this.data.info.items_list[i.ring.key_name].key_name);break;case a.item_types.LEG_PROTECTOR:i.boots&&(e=this.data.info.items_list[i.boots.key_name].key_name);break;case a.item_types.UNDERWEAR:i.underwear&&(e=this.data.info.items_list[i.underwear.key_name].key_name)}let s=this.compare_items(e,this.selected_item,r.effect_types.ATTACK,this.selected_char.atk),n=this.compare_items(e,this.selected_item,r.effect_types.DEFENSE,this.selected_char.def),o=this.compare_items(e,this.selected_item,r.effect_types.AGILITY,this.selected_char.agi);this.display_stat(r.effect_types.ATTACK,this.selected_char.atk,s),this.display_stat(r.effect_types.DEFENSE,this.selected_char.def,n),this.display_stat(r.effect_types.AGILITY,this.selected_char.agi,o);let _=this.data.info.items_list[e]?this.data.info.items_list[e].name:"";this.window.update_text(_,this.item_name_text);for(let t=0;t<3;t++)this.window.draw_separator(4,19+16*t,108,19+16*t,!1);this.text_group.alpha=1,this.arrow_group.alpha=1}show_cant_equip(){this.text_group.alpha=0,this.arrow_group.alpha=0,this.window.clear_separators(),this.cant_equip_text.text.alpha=1,this.cant_equip_text.shadow.alpha=1}open(t,e,i,s){this.selected_char=this.data.info.party_data.members.filter(e=>e.key_name===t)[0],this.selected_item=e,this.show_stat_compare(),this.is_open=!0,this.close_callback=i,this.window.show(s,!1)}close(t=!1){n.kill_all_sprites(this.arrow_group,t),t&&n.kill_all_sprites(this.text_group,t),this.selected_item=null,this.selected_char=null,this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.YesNoMenu=void 0;const s=i(31),n=i(0);e.YesNoMenu=class{constructor(t,e,i){this.game=t,this.data=e,this.control_manager=i,this.yes_callback=null,this.no_callback=null,this.buttons_keys=["yes","no"],this.is_open=!1,this.menu=new s.ButtonSelectMenu(this.game,this.data,this.buttons_keys,this.buttons_keys.map(t=>n.capitalize(t)),{on_press:this.button_press.bind(this),on_cancel:this.close_menu.bind(this)},this.control_manager),this.menu.title_window.update_size({width:36})}update_position(t,e){if(void 0!==t){let e=this.menu.title_window.x-this.menu.x;this.menu.x=t,this.menu.title_window.x=t+e}void 0!==e&&(this.menu.y=e,this.menu.title_window.y=e),this.menu.update_position(),this.menu.title_window.send_to_front()}button_press(){switch(this.buttons_keys[this.menu.selected_button_index]){case"yes":this.close_menu(this.yes_callback);break;case"no":this.close_menu(this.no_callback)}}is_active(){return this.menu.menu_active}open_menu(t,e){this.yes_callback=t.yes,this.no_callback=t.no,this.data.hero.in_action()&&(this.data.hero.stop_char(),this.data.hero.update_shadow()),this.is_open=!0,this.menu.open(void 0,0,!0,{active_default:1.1,max_scale:1.2}),e&&this.update_position(e.x,e.y)}close_menu(t){void 0===t&&(t=this.no_callback),this.is_active()&&(this.menu.close(),this.is_open=!1,t())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopItemQuantityWindow=void 0;const s=i(102),n=i(2);e.ShopItemQuantityWindow=class{constructor(t,e,i){this.game=t,this.data=e,this.cursor_manager=i,this.close_callback=null,this.window=new n.Window(this.game,56,32,180,20),this.item_counter=new s.ShopItemCounter(this.game,this.window.group,8,8,this.on_change.bind(this)),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.quantity_text=this.window.set_text_in_position(String(this.chosen_quantity),93,8,!0),this.coins_val_text=this.window.set_text_in_position("",141,8,!0),this.coins_label_text=this.window.set_text_in_position("Coins",144,8)}on_change(t){this.chosen_quantity=t,this.window.update_text(String(this.chosen_quantity),this.quantity_text),this.window.update_text(String(this.base_price*this.chosen_quantity),this.coins_val_text)}increase_amount(){this.item_counter.advance_step(1)}decrease_amount(){this.item_counter.advance_step(-1)}open(t,e,i=!1,s,n){this.cursor_manager.move_to(132,46,"wiggle"),this.base_price=this.data.info.items_list[t.key_name].price,this.window.update_text(String(this.base_price),this.coins_val_text);let a=e?e.quantity:0,r=-1===t.quantity?30:t.quantity;r+a>30&&(r=30-a),i&&this.base_price*r>this.data.info.party_data.coins&&(r=this.data.info.party_data.coins/this.base_price|0),this.item_counter.config(r,this.chosen_quantity,a),this.is_open=!0,this.close_callback=s,this.window.show(n,!1)}close(){this.item_counter.deactivate(),this.item_counter.clear(),this.cursor_manager.clear_tweens(),this.chosen_quantity=1,this.base_price=0,this.is_open=!1,this.window.close(this.close_callback,!1),this.close_callback=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopItemCounter=void 0;e.ShopItemCounter=class{constructor(t,e,i,s,n){this.game=t,this.group=e,this.available_items_count=0,this.disabled_count=0,this.x=i,this.y=s,this.on_change=void 0===n?()=>{}:n,this.current_quantity=1,this.internal_group=this.game.add.group(),this.internal_group.x=this.x,this.internal_group.y=this.y,this.graphics=this.game.add.graphics(0,0),this.active_bar_graphics=this.game.add.graphics(0,0),this.inactive_bar_graphics=this.game.add.graphics(0,0),this.disabled_bar_graphics=this.game.add.graphics(0,0),this.internal_group.add(this.graphics),this.internal_group.add(this.active_bar_graphics),this.internal_group.add(this.inactive_bar_graphics),this.internal_group.add(this.disabled_bar_graphics),this.group.add(this.internal_group),this.active=!1,this.create_grid()}advance_step(t){this.current_quantity+=t,this.current_quantity>this.available_items_count?this.current_quantity=1:0===this.current_quantity&&(this.current_quantity=this.available_items_count),this.active_bar_graphics.clear();for(let t=this.disabled_count;t<this.disabled_count+this.current_quantity;++t){this.active_bar_graphics.lineStyle(1,16298096);const e=2*t+1;this.active_bar_graphics.moveTo(e,0),this.active_bar_graphics.lineTo(e,6)}this.on_change(this.current_quantity)}create_grid(){this.graphics.lineStyle(1,0),this.graphics.moveTo(0,0),this.graphics.lineTo(61,0),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,0),this.graphics.lineTo(60,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(60,7),this.graphics.lineTo(0,7),this.graphics.lineStyle(1,0),this.graphics.moveTo(0,7),this.graphics.lineTo(0,0);for(let t=0;t<29;++t){this.graphics.lineStyle(1,0);const e=2+2*t;this.graphics.moveTo(e,0),this.graphics.lineTo(e,6)}}create_inactive_bar(){for(let t=0;t<this.disabled_count;++t){this.disabled_bar_graphics.lineStyle(1,16711680);const e=2*t+1;this.disabled_bar_graphics.moveTo(e,0),this.disabled_bar_graphics.lineTo(e,6)}for(let t=30;t>this.available_items_count+this.disabled_count;--t){this.inactive_bar_graphics.lineStyle(1,10000536);const e=2*t-1;this.inactive_bar_graphics.moveTo(e,0),this.inactive_bar_graphics.lineTo(e,6)}}config(t,e,i){this.clear(),this.current_quantity=e,this.available_items_count=t,this.disabled_count=i,this.active=!0,this.create_inactive_bar(),this.advance_step(0)}clear(){this.active_bar_graphics.clear(),this.inactive_bar_graphics.clear(),this.disabled_bar_graphics.clear(),this.current_quantity=1,this.available_items_count=0,this.disabled_count=0}activate(){this.active=!0}deactivate(){this.active=!1}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ShopCharDisplay=void 0;const s=i(2),n=i(0),a=Phaser.Timer.QUARTER>>1;e.ShopCharDisplay=class{constructor(t,e,i,n){this.game=t,this.data=e,this.parent=i,this.on_change=n,this.close_callback=null,this.window=new s.Window(this.game,0,112,100,20),this.char_group=this.game.add.group(),this.char_group.x=0,this.char_group.y=96,this.char_group.alpha=1,this.arrow_group=this.game.add.group(),this.arrow_group.x=96,this.arrow_group.y=100,this.up_arrow=this.arrow_group.create(16,20,"green_arrow"),this.up_arrow.rotation=Math.PI,this.down_arrow=this.arrow_group.create(0,24,"green_arrow"),this.up_arrow.alpha=0,this.down_arrow.alpha=0,this.arrow_tweens=[],this.lines=[],this.current_line=0,this.selected_index=0,this.is_active=!1,this.is_open=!1}update_group_pos(){this.char_group.x=0+this.game.camera.x,this.char_group.y=96+this.game.camera.y,this.arrow_group.x=96+this.game.camera.x,this.arrow_group.y=100+this.game.camera.y}set_arrows(t=!1,e=!1){this.up_arrow.x=16,this.up_arrow.y=20,this.down_arrow.x=0,this.down_arrow.y=24,this.up_arrow.alpha=t?1:0,this.down_arrow.alpha=e?1:0}check_arrows(){let t=!1,e=!1;this.current_line<this.lines.length-1&&(e=!0),this.current_line>0&&(t=!0),this.set_arrows(t,e),this.init_arrow_tweens(),this.game.world.bringToTop(this.arrow_group)}init_arrow_tweens(){let t=this.game.add.tween(this.up_arrow).to({y:12},a,Phaser.Easing.Linear.None).to({y:20},a,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(t);let e=this.game.add.tween(this.down_arrow).to({y:32},a,Phaser.Easing.Linear.None).to({y:24},a,Phaser.Easing.Linear.None).loop();this.arrow_tweens.push(e),t.start(),e.start()}clear_arrow_tweens(){for(let t=0;t<this.arrow_tweens.length;t++)this.game.tweens.remove(this.arrow_tweens.pop())}set_chars(){for(let t=0;t<this.lines[this.current_line].length;++t){let e=this.lines[this.current_line][t],i=null,s=this.char_group.children.filter(t=>!1===t.alive&&t.key===e.sprite_base.getActionKey(n.base_actions.IDLE));i=s.length>0?s[0].reset(24*t,0):this.char_group.create(24*t,0,e.sprite_base.getActionKey(n.base_actions.IDLE)),e.sprite_base.setAnimation(i,n.base_actions.IDLE),i.animations.play(e.sprite_base.getAnimationKey(n.base_actions.IDLE,n.reverse_directions[n.directions.down]))}}make_lines(){let t=this.data.info.party_data.members.length,e=t%4==0?t/4|0:1+(t/4|0);for(let t=0;t<e;t++){let e=[];for(let i=4*t;i<4*(t+1)&&this.data.info.party_data.members[i];i++)e.push(this.data.info.party_data.members[i]);this.lines[t]=e}}change_line(t,e){this.clear_arrow_tweens(),this.data.info.party_data.members.length<4*t||(this.current_line=t,void 0!==e?this.selected_index=e:null!==this.selected_index&&this.selected_index>=this.lines[this.current_line].length&&(this.selected_index=this.lines[this.current_line].length-1),n.kill_all_sprites(this.char_group),this.set_chars(),this.check_arrows(),this.select_char(this.selected_index))}next_line(t){if(1===this.lines.length||this.current_line+1===this.lines.length)return;let e=this.current_line+1;this.change_line(e,t)}previous_line(t){if(1===this.lines.length||this.current_line-1<0)return;let e=this.current_line-1;this.change_line(e,t)}select_char(t){this.selected_index=t,this.parent.cursor_manager.move_to(0+24*t,118,"wiggle");let e=this.data.info.party_data.members[4*this.current_line+this.selected_index];this.on_change(e.key_name)}next_char(){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index+1===this.lines[this.current_line].length?this.current_line+1===this.lines.length?1===this.lines.length?this.select_char(0):this.change_line(0,0):this.next_line(0):this.select_char(this.selected_index+1))}previous_char(){1===this.lines[this.current_line].length&&1===this.lines.length||(this.selected_index-1<0?this.current_line-1<0?1===this.lines.length?this.select_char(this.lines[this.current_line].length-1):this.change_line(this.lines.length-1,this.lines[this.lines.length-1].length-1):this.previous_line(this.lines[this.current_line-1].length-1):this.select_char(this.selected_index-1))}activate(){this.parent.cursor_manager.move_to(0+24*this.selected_index,118,"wiggle"),this.is_active=!0}deactivate(){this.parent.cursor_manager.clear_tweens(),this.is_active=!1}open(t=0,e,i){this.selected_index=t,this.current_line=0,this.make_lines(),this.update_group_pos(),this.check_arrows(),this.set_chars(),this.char_group.alpha=1,this.is_open=!0,this.close_callback=e,this.activate(),this.window.show(i,!1)}close(t=!1){this.is_open=!1,this.deactivate(),n.kill_all_sprites(this.char_group,t),this.lines=[],this.current_line=0,this.selected_index=0,this.is_active=!1,this.is_open=!1,this.char_group.alpha=0,this.set_arrows(!1,!1),this.window.close(this.close_callback,!1),this.close_callback=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CursorManager=void 0;const s=Phaser.Timer.QUARTER>>1,n=Phaser.Timer.QUARTER>>1;e.CursorManager=class{constructor(t){this.game=t,this.group=this.game.add.group(),this.group.visible=!1,this.group.x=0,this.group.y=0,this.cursor=this.group.create(0,0,"cursor"),this.active_tween=null,this.current_tween=null,this.cursor_default_pos={x:0,y:0}}clear_tweens(){this.active_tween&&this.game.tweens.remove(this.active_tween),this.active_tween=null,this.cursor.x=this.cursor_default_pos.x,this.cursor.y=this.cursor_default_pos.y}init_tween(t){switch(this.clear_tweens(),this.group.visible||this.show(),t){case"wiggle":this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+-4,y:this.cursor.y+4},s,Phaser.Easing.Linear.None).to({x:this.cursor.x+-8,y:this.cursor.y+0},s,Phaser.Easing.Linear.None).to({x:this.cursor.x+-4,y:this.cursor.y+4},s,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},s,Phaser.Easing.Linear.None).loop();break;case"point":this.active_tween=this.game.add.tween(this.cursor).to({x:this.cursor.x+-6,y:this.cursor.y+6},s,Phaser.Easing.Linear.None).to({x:this.cursor.x,y:this.cursor.y},s,Phaser.Easing.Linear.None).loop()}this.current_tween=t,this.active_tween&&this.active_tween.start()}move_to(t,e,i,s=!0){if(this.group.visible||this.show(),this.cursor_default_pos={x:t+this.game.camera.x,y:e+this.game.camera.y},this.game.world.bringToTop(this.cursor.parent),s){let s=this.game.add.tween(this.cursor).to({x:t+this.game.camera.x,y:e+this.game.camera.y},n,Phaser.Easing.Linear.None,!0);void 0!==i&&s.onComplete.addOnce(this.init_tween.bind(this,i),this)}else this.cursor.x=t+this.game.camera.x,this.cursor.y=e+this.game.camera.y,void 0!==i&&this.init_tween(i)}hide(){this.group.visible=!1}show(){this.group.visible=!0}destroy(){this.group.remove(this.cursor,!0),this.group=null,this.cursor=null,this.active_tween=null}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControlManager=void 0;const s=i(0),n=i(3),a=Phaser.Timer.QUARTER>>1,r=["left","right","up","down"],o=["spacebar","esc","enter","shift"];e.ControlManager=class{constructor(t){this.game=t,this.disabled=!1,this.initialized=!1,this.loop_time=a;let e=[{key:s.reverse_directions[s.directions.left],pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.LEFT},{key:s.reverse_directions[s.directions.right],pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.RIGHT},{key:s.reverse_directions[s.directions.up],pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.UP},{key:s.reverse_directions[s.directions.down],pressed:!1,callback:null,loop:!0,phaser_key:Phaser.Keyboard.DOWN}],i=[{key:s.action_inputs.SPACEBAR,callback:null,phaser_key:Phaser.Keyboard.SPACEBAR},{key:s.action_inputs.ESC,callback:null,phaser_key:Phaser.Keyboard.ESC},{key:s.action_inputs.ENTER,callback:null,phaser_key:Phaser.Keyboard.ENTER},{key:s.action_inputs.SHIFT,callback:null,phaser_key:Phaser.Keyboard.SHIFT}];this.directions=n.mapKeys(e,t=>t.key),this.actions=n.mapKeys(i,t=>t.key),this.signal_bindings=[],this.loop_start_timer=this.game.time.create(!1),this.loop_repeat_timer=this.game.time.create(!1)}get_opposite_dir(t){switch(t){case s.reverse_directions[s.directions.right]:return s.reverse_directions[s.directions.left];case s.reverse_directions[s.directions.left]:return s.reverse_directions[s.directions.right];case s.reverse_directions[s.directions.up]:return s.reverse_directions[s.directions.down];case s.reverse_directions[s.directions.down]:return s.reverse_directions[s.directions.up]}}set_control(t,e,i=!0,n=!1,a,r){this.initialized&&this.reset(),t&&(i||(this.directions[s.reverse_directions[s.directions.left]].loop=!1,this.directions[s.reverse_directions[s.directions.right]].loop=!1),this.directions[s.reverse_directions[s.directions.left]].callback=a.left,this.directions[s.reverse_directions[s.directions.right]].callback=a.right),e&&(n||(this.directions[s.reverse_directions[s.directions.up]].loop=!1,this.directions[s.reverse_directions[s.directions.down]].loop=!1),this.directions[s.reverse_directions[s.directions.up]].callback=a.up,this.directions[s.reverse_directions[s.directions.down]].callback=a.down),a.enter&&(this.actions[s.action_inputs.ENTER].callback=a.enter),a.esc&&(this.actions[s.action_inputs.ESC].callback=a.esc),a.shift&&(this.actions[s.action_inputs.SHIFT].callback=a.shift),a.spacebar&&(this.actions[s.action_inputs.SPACEBAR].callback=a.spacebar),r&&(this.loop_time=r),this.set_directions(),this.set_actions()}set_directions(){let t=Object.keys(this.directions).length;for(let e=0;e<t;e++)if(this.directions[r[e]].callback)if(this.directions[r[e]].loop){let t=this.game.input.keyboard.addKey(this.directions[r[e]].phaser_key).onDown.add(()=>{this.disabled||(this.directions[this.get_opposite_dir(r[e])].pressed&&(this.directions[this.get_opposite_dir(r[e])].pressed=!1,this.stop_timers()),this.directions[r[e]].pressed=!0,this.set_loop_timers(r[e]))}),i=this.game.input.keyboard.addKey(this.directions[r[e]].phaser_key).onUp.add(()=>{this.disabled||(this.directions[r[e]].pressed=!1,this.stop_timers())});this.signal_bindings.push(t),this.signal_bindings.push(i)}else{let t=this.game.input.keyboard.addKey(this.directions[r[e]].phaser_key).onDown.add(()=>{this.disabled||this.directions[r[e]].callback()});this.signal_bindings.push(t)}this.initialized||(this.initialized=!0)}set_actions(){let t=Object.keys(this.actions).length;for(let e=0;e<t;e++)if(this.actions[o[e]].callback){let t=this.game.input.keyboard.addKey(this.actions[o[e]].phaser_key).onDown.add(()=>{this.disabled||this.actions[o[e]].callback()});this.signal_bindings.push(t)}this.initialized||(this.initialized=!0)}set_loop_timers(t){this.change_index(t),this.loop_start_timer.add(Phaser.Timer.QUARTER,()=>{this.loop_repeat_timer.loop(this.loop_time,this.change_index.bind(this,t)),this.loop_repeat_timer.start()}),this.loop_start_timer.start()}change_index(t){this.directions[t].callback()}stop_timers(){this.loop_start_timer.stop(),this.loop_repeat_timer.stop()}disable(){this.disabled=!0,this.stop_timers()}enable(){this.disabled=!1}reset(){let t=Object.keys(this.directions).length,e=Object.keys(this.actions).length;for(let e=0;e<t;e++)this.directions[r[e]].pressed=!1,this.directions[r[e]].loop=!0,this.directions[r[e]].callback=null;for(let t=0;t<e;t++)this.actions[o[t]].callback=null;this.signal_bindings.forEach(t=>{t.detach()}),this.signal_bindings=[],this.initialized&&(this.initialized=!1),this.loop_time!==a&&(this.loop_time=a)}destroy(){this.loop_start_timer.destroy(),this.loop_repeat_timer.destroy(),this.signal_bindings.forEach(t=>{t.detach()})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize_shops=void 0;const s=i(107);e.initialize_shops=function(t){let e={};for(let i=0;i<t.length;++i){const n=t[i];e[n.key_name]=new s.Shop(n.key_name,n.dialog_key,n.avatar_key,n.item_list)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Shop=void 0;e.Shop=class{constructor(t,e,i,s){this.key_name=t,this.dialog_key=e,this.avatar_key=i,this.item_list=s}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21hZ2ljX251bWJlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9UaWxlRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Eamlubi50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3V0aWxzL0N1cnNvckNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9QbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9FZmZlY3QudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9JdGVtLnRzIiwid2VicGFjazovLy8uL2Jhc2UvU3ByaXRlQmFzZS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL0p1bXBFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL01haW5DaGFyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvQWJpbGl0eS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2dhbWVfZXZlbnRzL0dhbWVFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9maWVsZF9hYmlsaXRpZXMvRmllbGRBYmlsaXRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Db250cm9sbGFibGVDaGFyLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW50ZXJhY3RhYmxlX29iamVjdHMvcHVzaC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3V0aWxzL0RpYWxvZ01hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9OUEMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvQmF0dGxlU3RhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL0NoYXJzU3RhdHVzV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2UvQ2xhc3Nlcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3N1cHBvcnRfbWVudXMvSG9yaXpvbnRhbE1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9FbmVteS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL0ludGVyYWN0YWJsZU9iamVjdHMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9DbGltYkV2ZW50LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9DaGFyc01lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL0Jhc2ljSW5mb1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvc3VwcG9ydF9tZW51cy9CdXR0b25TZWxlY3RNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2UvR29sZGVuU3VuLnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9iYXNlL2RlYnVnL0RlYnVnLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2Fzc2V0c19sb2FkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9Db2xsaXNpb24udHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9IZXJvLnRzIiwid2VicGFjazovLy8uL2Jhc2UvdXRpbHMvRm9vdHN0ZXBzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvdGlsZV9ldmVudHMvVGlsZUV2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2dhbWVfZXZlbnRzL0dhbWVFdmVudE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9nYW1lX2V2ZW50cy9CYXR0bGVFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9CYXR0bGVMb2cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tYWluX21lbnVzL01haW5CYXR0bGVNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvRGVzY3JpcHRpb25XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9Qc3luZXJneVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0RqaW5uV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9iYXR0bGUvRGppbm5TdGF0c1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvYmF0dGxlL0l0ZW1XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9TdW1tb25XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9TdW1tb25EamlublN0YW5kYnlXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2JhdHRsZS9DaG9vc2luZ1RhcmdldFdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2JhdHRsZS9FbmVteUFJLnRzIiwid2VicGFjazovLy8uL2Jhc2UvYmF0dGxlL0JhdHRsZUZvcm11bGFzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvYmF0dGxlL0JhdHRsZUFuaW1hdGlvbk1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9iYXR0bGUvQmF0dGxlQW5pbWF0aW9uLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2RhdGFiYXNlc19sb2FkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvaW5pdGlhbGl6ZV9pbmZvLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL21haW5fY2hhcnMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvYWJpbGl0aWVzLnRzIiwid2VicGFjazovLy8uL2Jhc2UvZmllbGRfYWJpbGl0aWVzL01vdmVGaWVsZFBzeW5lcmd5LnRzIiwid2VicGFjazovLy8uL2Jhc2UvZmllbGRfYWJpbGl0aWVzL3BzeW5lcmd5X2Nhc3QudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL0ZpZWxkUHN5bmVyZ3lXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9maWVsZF9hYmlsaXRpZXMvRnJvc3RGaWVsZFBzeW5lcmd5LnRzIiwid2VicGFjazovLy8uL2Jhc2UvZmllbGRfYWJpbGl0aWVzL0dyb3d0aEZpZWxkUHN5bmVyZ3kudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvaXRlbXMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvZGppbm5pLnRzIiwid2VicGFjazovLy8uL2Jhc2UvaW5pdGlhbGl6ZXJzL2VuZW1pZXMudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvbWFwcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL01hcC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL1RlbGVwb3J0RXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9TdGVwRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9Db2xsaXNpb25FdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3RpbGVfZXZlbnRzL1NwZWVkRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS90aWxlX2V2ZW50cy9TbGlkZXJFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL21haW5fbWVudXMvTWFpbk1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tYWluX21lbnVzL01haW5Qc3luZXJneU1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tYWluX21lbnVzL01haW5JdGVtTWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvaXRlbS9JdGVtT3B0aW9uc1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvaXRlbS9Ecm9wSXRlbVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvaXRlbS9JdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2UvdXRpbHMvSXRlbXNDb3VudGVyLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9pdGVtL0dpdmVJdGVtT3B0aW9uc1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvaXRlbS9TdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9tYWluX21lbnVzL01haW5Eamlubk1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0NoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL2RqaW5uL0RqaW5uTGlzdFdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5Nb2RlSGVhZGVyV2luZG93LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9kamlubi9EamlubkNoYXJTdGF0c1dpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5Qc3luZXJneVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvZGppbm4vRGppbm5BY3Rpb25XaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS9pbml0aWFsaXplcnMvbWlzY19kYXRhLnRzIiwid2VicGFjazovLy8uL2Jhc2UvbWFpbl9tZW51cy9TaG9wTWVudS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3Mvc2hvcC9TaG9wa2VlcERpYWxvZy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3Mvc2hvcC9CdXlBcnRpZmFjdHNNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL1NlbGxSZXBhaXJNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL0ludmVudG9yeVdpbmRvdy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3Mvc2hvcC9CdXlTZWxlY3RNZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL0VxdWlwQ29tcGFyZS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3dpbmRvd3MvWWVzTm9NZW51LnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL1Nob3BJdGVtUXVhbnRpdHlXaW5kb3cudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS93aW5kb3dzL3Nob3AvU2hvcEl0ZW1Db3VudGVyLnRzIiwid2VicGFjazovLy8uL2Jhc2Uvd2luZG93cy9zaG9wL1Nob3BDaGFyRGlzcGxheS50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL3V0aWxzL0N1cnNvck1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vYmFzZS91dGlscy9Db250cm9sTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL2luaXRpYWxpemVycy9zaG9wcy50cyIsIndlYnBhY2s6Ly8vLi9iYXNlL1Nob3AudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyYW5nZV8zNjAiLCJhbmdsZSIsIm51bWJlcnMiLCJkZWdyZWUzNjAiLCJpc19pbnNpZGVfc2VjdG9yIiwicXVhZHJhbnRzIiwicmFkaXVzIiwicmFuZ2VfZmFjdG9yIiwieCIsInkiLCJ0YXJnZXRfeCIsInRhcmdldF95IiwicmFuZ2VfcmFkaXVzX3NxdWFyZWQiLCJ0YXJnZXRfcmFkaXVzX3NxdWFyZWQiLCJNYXRoIiwicG93IiwidGFyZ2V0X2FuZ2xlIiwiYXRhbjIiLCJhbmdsZXMiLCJkZWdyZWU5MCIsIlBJIiwiZGVncmVlMjcwIiwiYmV0d2Vlbl9hbmdsZXMiLCJsZW5ndGgiLCJxdWFkcmFudCIsInN0YXJ0X2FuZ2xlIiwicmdiMmhzdiIsImciLCJiIiwidiIsIm1heCIsIm1pbiIsImgiLCJoc3YycmdiIiwiZiIsImsiLCJlbGVtZW50cyIsIlZFTlVTIiwiTUVSQ1VSWSIsIk1BUlMiLCJKVVBJVEVSIiwiTk9fRUxFTUVOVCIsIm9yZGVyZWRfZWxlbWVudHMiLCJlbGVtZW50X25hbWVzIiwiZGlyZWN0aW9ucyIsInJpZ2h0IiwiZG93bl9yaWdodCIsImRvd24iLCJkb3duX2xlZnQiLCJsZWZ0IiwidXBfbGVmdCIsInVwIiwidXBfcmlnaHQiLCJkaXJlY3Rpb25zX2NvdW50Iiwia2V5cyIsInJldmVyc2VfZGlyZWN0aW9ucyIsImJhc2VfYWN0aW9ucyIsIklETEUiLCJXQUxLIiwiREFTSCIsIlBVU0giLCJDTElNQiIsIkNBU1QiLCJKVU1QIiwiYWN0aW9uX2lucHV0cyIsIlNQQUNFQkFSIiwiRU5URVIiLCJTSElGVCIsIkVTQyIsImRpcmVjdGlvbiIsImFyciIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInZhbHMiLCJkaXJfMSIsImRpcl8yIiwiXyIsInJhbmRvbSIsImN1cnJlbnRfZGlyZWN0aW9uIiwiSEVST19CT0RZX1JBRElVUyIsInRyYW5zaXRpb25zIiwiZGVzaXJlZF9kaXJlY3Rpb24iLCJnYW1lIiwidGV4dCIsIml0YWxpYyIsImZvbnRfbmFtZSIsInRleHRfc3ByaXRlIiwiYWRkIiwiYml0bWFwVGV4dCIsIkZPTlRfU0laRSIsInRleHRfd2lkdGgiLCJ3aWR0aCIsImRlc3Ryb3kiLCJncm91cCIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwicGFyZW50IiwicmVtb3ZlIiwia2lsbCIsIndpdGhfZGlhZ29uYWxzIiwic2hpZnQiLCJzdXJyb3VuZGluZ3MiLCJkaWFnIiwiY29uY2F0IiwiZGlycyIsInB1c2giLCJsb3dlciIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIm1hdGNoIiwidG9VcHBlckNhc2UiLCJoZXgiLCJwZXJjZW50IiwidG9TdHJpbmciLCJzbGljZSIsInBhcnNlSW50Iiwic3Vic3RyIiwiYmV2ZWwiLCJHQU1FX1dJRFRIIiwiR0FNRV9IRUlHSFQiLCJUQVJHRVRfRlBTIiwiSU5WX1NRUlQyIiwic3FydCIsIkRFTFRBX1RJTUVfRkFDVE9SIiwiTUFQX0RBTVBJTkciLCJERUZBVUxUX1dJTkRPV19DT0xPUiIsIkRFRkFVTFRfRk9OVF9DT0xPUiIsIllFTExPV19GT05UX0NPTE9SIiwiUkVEX0ZPTlRfQ09MT1IiLCJCTFVFX0ZPTlRfQ09MT1IiLCJQVVJQTEVfRk9OVF9DT0xPUiIsIklOU0lERV9CT1JERVJfV0lEVEgiLCJPVVRTSURFX0JPUkRFUl9XSURUSCIsIldJTkRPV19QQURESU5HX0giLCJXSU5ET1dfUEFERElOR19UT1AiLCJXSU5ET1dfUEFERElOR19CT1RUT00iLCJTUEFDRV9CRVRXRUVOX0xJTkVTIiwiTUFYX0RJQUdfV0lOX1dJRFRIIiwiTUFYX0xJTkVTX1BFUl9ESUFHX1dJTiIsIk1BWF9ESUFHX1dJTl9IRUlHSFQiLCJQVVNIX1RJTUUiLCJJQ09OX1dJRFRIIiwiSUNPTl9IRUlHSFQiLCJkZWdyZWUxNSIsImRlZ3JlZTMwIiwiZGVncmVlNjAiLCJkZWdyZWUxODAiLCJkZWdyZWU1NDAiLCJDQU1FUkFfTEVSUCIsIkVMRU1fQVRUUl9NSU4iLCJFTEVNX0FUVFJfTUFYIiwiQVZBVEFSX1NJWkUiLCJUUkFOU0lUSU9OX1RJTUUiLCJQaGFzZXIiLCJUaW1lciIsIlFVQVJURVIiLCJoZWlnaHQiLCJuZWVkX3Bvc191cGRhdGUiLCJjb2xvciIsImZvbnRfY29sb3IiLCJ0aGlzIiwiZ3JhcGhpY3MiLCJzZXBhcmF0b3JzX2dyYXBoaWNzIiwiZHJhd19iYWNrZ3JvdW5kIiwiZHJhd19ib3JkZXJzIiwiYWxwaGEiLCJvcGVuIiwibGluZXNfc3ByaXRlcyIsImV4dHJhX3Nwcml0ZXMiLCJpbnRlcm5hbF9ncm91cHMiLCJjbGVhciIsInhfMCIsInlfMCIsInhfMSIsInlfMSIsInZlcnRpY2FsIiwibGlnaHRlciIsInV0aWxzIiwiY2hhbmdlX2JyaWdodG5lc3MiLCJkYXJrZXIiLCJjb2xvcnMiLCJsaW5lU3R5bGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJiZWdpbkZpbGwiLCJkcmF3UmVjdCIsImVuZEZpbGwiLCJuZXdfc2l6ZSIsIm5ld19wb3NpdGlvbiIsInJlbGF0aXZlIiwiY2FtZXJhIiwicG9zaXRpb24iLCJpbnRlcm5hbF9ncm91cCIsImRlc3Ryb3lfaW50ZXJuYWxfZ3JvdXAiLCJzcHJpdGUiLCJzaG93X2NhbGxiYWNrIiwiYW5pbWF0ZSIsImNsb3NlX2NhbGxiYWNrIiwicGFnZV9pbmRpY2F0b3JfaXNfc2V0IiwidHdlZW4iLCJ0byIsIkVhc2luZyIsIkxpbmVhciIsIk5vbmUiLCJvbkNvbXBsZXRlIiwiYWRkT25jZSIsImZvcmNlIiwiaW50ZXJuYWxfZ3JvdXBfa2V5IiwiZ2V0X2ludGVybmFsX2dyb3VwIiwiZnJhbWUiLCJ0aW50IiwiYnJpbmdUb1RvcCIsInNtb290aGVkIiwiYXV0b1JvdW5kIiwibGluZXMiLCJwYWRkaW5nX3giLCJwYWRkaW5nX3kiLCJzcGFjZV9iZXR3ZWVuX2xpbmVzIiwic2hhZG93IiwidG9wX3NoaWZ0IiwieF9wb3MiLCJ5X3BvcyIsImFuaW1fcHJvbWlzZSIsImFuaW1fcHJvbWlzZV9yZXNvbHZlIiwibGluZXNfcHJvbWlzZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxpbmUiLCJ0ZXh0X3Nwcml0ZV9zaGFkb3ciLCJyZW1vdmVfc21vb3RoIiwid29yZHMiLCJzcGxpdCIsImxpbmVfcHJvbWlzZV9yZXNvbHZlIiwid29yZHNfaW5kZXgiLCJyZXBlYXRlciIsInRpbWUiLCJldmVudHMiLCJyZXBlYXQiLCJwb3AiLCJ0aGVuIiwiYWxsIiwicmlnaHRfYWxpZ24iLCJpbml0aWFsX3giLCJpc19jZW50ZXJfcG9zIiwid2l0aF9iZyIsInRleHRfYmciLCJjZW50ZXJYIiwiY2VudGVyWSIsImFkZF90b19pbnRlcm5hbF9ncm91cCIsImFkZGVkX3RvX2ludGVybmFsIiwibmV3X3RleHQiLCJ0ZXh0X3NoYWRvd19wYWlyIiwibmV3X3giLCJuZXdfeSIsInNldFRleHQiLCJ1cGRhdGVfdGV4dF9wb3NpdGlvbiIsImNhbGxiYWNrIiwidW5zZXRfcGFnZV9pbmRpY2F0b3IiLCJkZXN0cm95X2NhbGxiYWNrIiwib25fZGVzdHJveSIsInBhZ2VfbnVtYmVyX2JhciIsImFkZF9zcHJpdGVfdG9fZ3JvdXAiLCJwYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0IiwiYmxlbmRNb2RlIiwiUElYSSIsImJsZW5kTW9kZXMiLCJTQ1JFRU4iLCJwYWdlX2luZGljYXRvcnMiLCJwYWdlX2luZGljYXRvcl9hcnJvd190aW1lciIsInBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93IiwiY3JlYXRlX2F0X2dyb3VwIiwic2NhbGUiLCJwYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93IiwicGFnZV9udW1iZXIiLCJwYWdlX2luZGV4IiwiUEFHRV9OVU1CRVJfSEVJR0hUIiwic2V0X3RleHRfaW5fcG9zaXRpb24iLCJzZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0Iiwic2V0X3BhZ2VfaW5kaWNhdG9yX2Fycm93IiwiY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3giLCJydW5uaW5nIiwicGF1c2VkIiwicmVzdW1lIiwibG9vcCIsInN0YXJ0IiwicmVtb3ZlX3RleHQiLCJwYXVzZSIsIkZVTkNfRVJST1JfVEVYVCIsIlBMQUNFSE9MREVSIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwic291cmNlIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwiam9pbiIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsImUiLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFwcGx5IiwiZnVuYyIsInRoaXNBcmciLCJhcmdzIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiaW5kZXgiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwicmVzdWx0IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJjb3VudEhvbGRlcnMiLCJwbGFjZWhvbGRlciIsImRlYnVyckxldHRlciIsImVzY2FwZUh0bWxDaGFyIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJ0ZXN0IiwibWFwVG9BcnJheSIsInNpemUiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb0FycmF5Iiwic2V0Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIkVycm9yIiwiU3RyaW5nIiwiVHlwZUVycm9yIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpY2UiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3R4Tm93Iiwibm93IiwiY3R4U2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwiY2VpbCIsIm5hdGl2ZUZsb29yIiwiZmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiZGF0YSIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJudW1iZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUx0IiwiYmFzZU1hcCIsImlzQXJyYXlMaWtlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwic29ydCIsImJhc2VTb3J0QnkiLCJvYmpDcml0ZXJpYSIsImNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwib3JkZXIiLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiaW5kZXhPZiIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIk1BWF9BUlJBWV9MRU5HVEgiLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsImNoYXJBdCIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsIm9sZEFycmF5Iiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJuZXh0IiwiZG9uZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ24iLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZpbHRlciIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInRhcmdldCIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsImV2ZW50X3R5cGVzIiwiU1BFRUQiLCJURUxFUE9SVCIsIlNURVAiLCJDT0xMSVNJT04iLCJTTElERVIiLCJUaWxlRXZlbnQiLCJhY3RpdmF0aW9uX2RpcmVjdGlvbnMiLCJhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMiLCJkeW5hbWljIiwiYWN0aXZlIiwib3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QiLCJsb2NhdGlvbl9rZXkiLCJnZXRfbG9jYXRpb25fa2V5IiwiaWRfaW5jcmVtZW50ZXIiLCJnZXRfZGlyZWN0aW9ucyIsInBvc3NpYmxlX2RpcmVjdGlvbnMiLCJzcGxpdF9kaXJlY3Rpb24iLCJoZXJvIiwidGlsZV94X3BvcyIsInRpbGVfeV9wb3MiLCJyZXNldCIsImRqaW5uX3N0YXR1cyIsIlNFVCIsIlNUQU5EQlkiLCJSRUNPVkVSWSIsImRqaW5uX2ZvbnRfY29sb3JzIiwia2V5X25hbWUiLCJkZXNjcmlwdGlvbiIsImVsZW1lbnQiLCJhYmlsaXR5X2tleV9uYW1lIiwiaHBfYm9vc3QiLCJwcF9ib29zdCIsImF0a19ib29zdCIsImRlZl9ib29zdCIsImFnaV9ib29zdCIsImx1a19ib29zdCIsInN0YXR1cyIsInJlY292ZXJ5X3R1cm4iLCJjaGFyIiwidXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzIiwidXBkYXRlX2NsYXNzIiwidXBkYXRlX2F0dHJpYnV0ZXMiLCJ1cGRhdGVfYWJpbGl0aWVzIiwiZGppbm5pX2xpc3QiLCJtZW1iZXJzIiwiZGppbm5pIiwiZGppbm5fa2V5cyIsInN0YW5kYnlfZGppbm5pIiwiZmxhdCIsImRqaW5uaV9rZXlzIiwicmVxdWlyZW1lbnRzIiwicmVxX2NvdW50ZXIiLCJwbGF5ZXIiLCJwbGF5ZXJfZGppbm5pIiwicmVjb3ZlcnlfY291bnRlciIsImoiLCJkamlubiIsInNldF9zdGF0dXMiLCJCb29sZWFuIiwiSU5ERVhfQ0hBTkdFX1RJTUUiLCJDVVJTT1JfVFdFRU5fVElNRSIsImlzX3JpZ2h0X2xlZnQiLCJpc191cF9kb3duIiwibWF4X3JpZ2h0X2xlZnRfZ2V0dGVyIiwibWF4X3VwX2Rvd25fZ2V0dGVyIiwiYmFzZV9ncm91cCIsIm9uX3JpZ2h0X2xlZnRfY2hhbmdlIiwib25fdXBfZG93bl9jaGFuZ2UiLCJyaWdodF9sZWZ0X2luZGV4X2dldHRlciIsInJpZ2h0X2xlZnRfaW5kZXhfc2V0dGVyIiwidXBfZG93bl9pbmRleF9nZXR0ZXIiLCJ1cF9kb3duX2luZGV4X3NldHRlciIsIm9wZW5fY2hlY2tlciIsImFjdGl2ZV9jaGVja2VyIiwiY3Vyc29yX2Jhc2VfeF9nZXR0ZXIiLCJjdXJzb3JfYmFzZV95X2dldHRlciIsInJpZ2h0X3ByZXNzZWQiLCJsZWZ0X3ByZXNzZWQiLCJ1cF9wcmVzc2VkIiwiZG93bl9wcmVzc2VkIiwiY2hvb3NlX3RpbWVyX3JlcGVhdCIsImNob29zZV90aW1lcl9zdGFydCIsImluaXRfY3Vyc29yIiwiaW5pdF9jdXJzb3JfdHdlZW4iLCJzaWduYWxfYmluZGluZ3MiLCJzZXRfY29udHJvbCIsImtleWJvYXJkIiwiYWRkS2V5IiwiS2V5Ym9hcmQiLCJSSUdIVCIsIm9uRG93biIsInN0b3BfdGltZXJzIiwic2V0X2NoYW5nZV90aW1lcnMiLCJvblVwIiwiTEVGVCIsIlVQIiwiRE9XTiIsInJpZ2h0X2xlZnQiLCJjaGFuZ2VfaW5kZXgiLCJvbl9jaGFuZ2UiLCJiZWZvcmVfaW5kZXgiLCJzZXRfY3Vyc29yX3Bvc2l0aW9uIiwic3RvcCIsImN1cnNvcl9ncm91cCIsImN1cnNvciIsImN1cnNvcl90d2VlbiIsInR3ZWVucyIsImlzUnVubmluZyIsImlzUGF1c2VkIiwic2lnbmFsX2JpbmRpbmciLCJkZXRhY2giLCJmaWdodGVyX3R5cGVzIiwiQUxMWSIsIkVORU1ZIiwidGVtcG9yYXJ5X3N0YXR1cyIsIkRFTFVTSU9OIiwiU1RVTiIsIlNMRUVQIiwiU0VBTCIsIkRFQVRIX0NVUlNFIiwicGVybWFuZW50X3N0YXR1cyIsIkRPV05FRCIsIlBPSVNPTiIsIlZFTk9NIiwiRVFVSVBfQ1VSU0UiLCJIQVVOVCIsIm9uX2NhdGNoX3N0YXR1c19tc2ciLCJmaWdodGVyX3R5cGUiLCJvbl9yZW1vdmVfc3RhdHVzX21zZyIsImVmZmVjdHMiLCJpbml0X2VmZmVjdF90dXJuc19jb3VudCIsImVmZmVjdF90dXJuc19jb3VudCIsImVmZmVjdF90eXBlcyIsIk1BWF9IUCIsIk1BWF9QUCIsIkFUVEFDSyIsIkRFRkVOU0UiLCJBR0lMSVRZIiwiTFVDSyIsIlBPV0VSIiwiUkVTSVNUIiwiZWZmZWN0IiwiVEVNUE9SQVJZX1NUQVRVUyIsInN0YXR1c19rZXlfbmFtZSIsImF0dHJpYnV0ZSIsImVmZmVjdF9vYmoiLCJlZmZlY3Rfb3duZXJfaW5zdGFuY2UiLCJjaGFuZ2VzIiwiRWZmZWN0IiwicXVhbnRpdHkiLCJxdWFudGl0eV9pc19hYnNvbHV0ZSIsInJhdGUiLCJjaGFuY2UiLCJhZGRfc3RhdHVzIiwidHVybnNfcXVhbnRpdHkiLCJ2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0IiwiZGFtYWdlX2Zvcm11bGFfa2V5X25hbWUiLCJ1c2FnZSIsIm9uX2Nhc3RlciIsInJlbGF0aXZlX3RvX3Byb3BlcnR5Iiwic3ViX2VmZmVjdCIsImVmZmVjdF9tc2ciLCJzaG93X21zZyIsImFwcGx5X2VmZmVjdCIsImVmZmVjdF90b19yZW1vdmUiLCJkZWxldGUiLCJDVVJSRU5UX0hQIiwiQ1VSUkVOVF9QUCIsIkhQX1JFQ09WRVJZIiwiUFBfUkVDT1ZFUlkiLCJDUklUSUNBTFMiLCJDT1VOVEVSX1NUUklLRSIsIlBFUk1BTkVOVF9TVEFUVVMiLCJUVVJOUyIsIkVOQ09VTlRFUlMiLCJGTEVFIiwiRU5EX1RIRV9ST1VORCIsIkFCSUxJVFlfUE9XRVIiLCJTRVRfREpJTk4iLCJEQU1BR0VfTU9ESUZJRVIiLCJEQU1BR0VfSU5QVVQiLCJlZmZlY3RfdHlwZV9zdGF0IiwiZWZmZWN0X25hbWVzIiwiZWZmZWN0X29wZXJhdG9ycyIsIlBMVVMiLCJNSU5VUyIsIlRJTUVTIiwiRElWSURFIiwiZWZmZWN0X3VzYWdlcyIsIk5PVF9BUFBMWSIsIk9OX1VTRSIsIk9OX1RBS0UiLCJCQVRUTEVfUk9VTkRfU1RBUlQiLCJCQVRUTEVfUk9VTkRfRU5EIiwiUExBWUVSX1RVUk5fU1RBUlQiLCJQTEFZRVJfVFVSTl9FTkQiLCJhdXJhIiwiZG91YmxlIiwidHVybl9jb3VudCIsImluaXRfc3ViX2VmZmVjdCIsImEiLCJkaXJlY3RfdmFsdWUiLCJiZWZvcmVfdmFsdWUiLCJhZnRlcl92YWx1ZSIsInZhbHVlX3RvX3VzZSIsInZhcmlhdGlvbiIsImFwcGx5X29wZXJhdG9yIiwiYmFzZV92YWx1ZSIsImN1cnJlbnRfcHJvcCIsIm1heF9wcm9wIiwibWluX3ZhbHVlIiwicmVzdWx0X29iaiIsImFwcGx5X2dlbmVyYWxfdmFsdWUiLCJyZXN1bHRfY3VycmVudF9ocCIsImNoZWNrX2NhcHMiLCJyZXN1bHRfY3VycmVudF9wcCIsImFkZF9wZXJtYW5lbnRfc3RhdHVzIiwicmVtb3ZlX3Blcm1hbmVudF9zdGF0dXMiLCJhZGRfdGVtcG9yYXJ5X3N0YXR1cyIsInJlbW92ZV90ZW1wb3Jhcnlfc3RhdHVzIiwic3RhdCIsImFwcGx5X3N1YmVmZmVjdCIsIml0ZW1fdHlwZXMiLCJXRUFQT05TIiwiQVJNT1IiLCJDSEVTVF9QUk9URUNUT1IiLCJIRUFEX1BST1RFQ1RPUiIsIkxFR19QUk9URUNUT1IiLCJBQklMSVRZX0dSQU5UT1IiLCJMVUNLWV9DSEFSTSIsIlJJTkciLCJVTkRFUldFQVIiLCJHRU5FUkFMX0lURU0iLCJTSElSVCIsInVzZV90eXBlcyIsIk1VTFRJUExFX1VTRVMiLCJTSU5HTEVfVVNFIiwiQlJFQUtTX1dIRU5fVVNFIiwiTk9fVVNFIiwidXNlX3R5cGUiLCJjdXJzZXNfd2hlbl9lcXVpcHBlZCIsImNhbnRfYmVfcmVtb3ZlZCIsInJhcmVfaXRlbSIsImltcG9ydGFudF9pdGVtIiwiY2FycnlfdXBfdG9fMzAiLCJ1bmxlYXNoX2FiaWxpdHkiLCJ1bmxlYXNoX3JhdGUiLCJ1c2VfYWJpbGl0eSIsImVxdWlwYWJsZV9jaGFycyIsInByaWNlIiwiZ3JhbnRlZF9hYmlsaXR5IiwiYnJva2VuIiwiZXF1aXBhYmxlIiwiYW5pbWF0aW9ucyIsImRhc2hfc3BlZWQiLCJ3YWxrX3NwZWVkIiwiY2xpbWJfc3BlZWQiLCJwdXNoX3NwZWVkIiwiZnJhbWVfY291bnRzIiwiZnJhbWVfY291bnRfaXNfYXJyYXkiLCJmcmFtZV9jb3VudCIsImZyYW1lX3JhdGUiLCJ0aGlzX2ZyYW1lX3JhdGUiLCJzcHJpdGVzaGVldF9pbWFnZV91cmwiLCJzcHJpdGVzaGVldF9qc29uX3VybCIsInNwcml0ZXNoZWV0IiwiZm9yY2VfbG9hZCIsIm9uX2xvYWRfY29tcGxldGUiLCJhY3Rpb25fa2V5IiwiZ2V0QWN0aW9uS2V5IiwibG9hZGVyIiwibG9hZCIsImF0bGFzSlNPTkhhc2giLCJvbkxvYWRDb21wbGV0ZSIsInN1ZmZpeCIsInplcm9QYWQiLCJBbmltYXRpb24iLCJnZW5lcmF0ZUZyYW1lTmFtZXMiLCJhbmltX2tleSIsImdldEFuaW1hdGlvbktleSIsInRvTG9jYWxlU3RyaW5nIiwibWluaW11bUludGVnZXJEaWdpdHMiLCJ1c2VHcm91cGluZyIsIkp1bXBFdmVudCIsImlzX3NldCIsInN1cGVyIiwic3RvcF9ieV9jb2xsaWRpbmciLCJjaGVja19wb3NpdGlvbiIsImhlcm9fbW92ZW1lbnRfYWxsb3dlZCIsImp1bXBfZGlyZWN0aW9uIiwianVtcF9vZmZzZXQiLCJuZXh0X3Bvc2l0aW9uIiwic2lkZV9wb3NpdGlvbiIsInNpZGVfcG9zX2tleSIsImV2ZW50IiwiaW50ZXJhY3RhYmxlX29iamVjdF9mb3VuZCIsImludGVyYWN0YWJsZV9vYmplY3RzIiwiaW50ZXJhY3RhYmxlX29iamVjdCIsImNvbGxpc2lvbl9sYXllciIsImJhc2VfY29sbGlzaW9uX2xheWVyIiwiY3VycmVudF94IiwiY3VycmVudF95IiwibmV4dF9wb3Nfa2V5IiwibmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0IiwiYWN0aXZlX2p1bXBfZXZlbnRfZm91bmQiLCJpc19hY3RpdmUiLCJnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uIiwic2V0X2p1bXBfY29sbGlzaW9uIiwidW5zZXRfc2V0X2p1bXBfY29sbGlzaW9uIiwianVtcGluZyIsInRpbGVfZXZlbnRfbWFuYWdlciIsIm9uX2V2ZW50IiwidHdlZW5fb2JqIiwiaGVyb194IiwidGlsZVdpZHRoIiwiaGVyb195IiwidGlsZUhlaWdodCIsInBoeXNpY3MiLCJwMiIsInBsYXkiLCJjdXJyZW50QW5pbSIsInZpc2libGUiLCJib2R5IiwicmV2ZXJzZU9uY2UiLCJjdXJyZW50X3Bvc19rZXkiLCJjdXJyZW50X3BvcyIsImdldF9zdXJyb3VuZGluZ3MiLCJyaWdodF9kaXJlY3Rpb24iLCJjbGVhcl9ib2RpZXMiLCJjb2xsaWRlcyIsImNvbGxpc2lvbiIsIm1hcF9jb2xsaXNpb25fZ3JvdXAiLCJjb2xsaXNpb25fc3ByaXRlIiwiaGVyb19jb2xsaXNpb25fZ3JvdXAiLCJkeW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyIsImNvbmNhdF9rZXlzIiwiYm9kaWVzX3Bvc2l0aW9ucyIsImF0X2xlYXN0X29uZV9keW5hbWljX2FuZF9ub3RfZGlhZyIsInN1cnJvdW5kaW5nX2tleSIsInN1cnJvdW5kaW5nX2V2ZW50Iiwic2lkZV9ldmVudF9zdXJyb3VuZGluZ3MiLCJ3YWxraW5nX29uX3BpbGxhcnNfdGlsZXMiLCJib2RpZXNfcG9zaXRpb24iLCJwb3MiLCJyZW1vdmVDb2xsaXNpb25Hcm91cCIsInBvc19hcnJheSIsImNyZWF0ZUJvZHkiLCJjbGVhclNoYXBlcyIsInNldFJlY3RhbmdsZSIsInNldENvbGxpc2lvbkdyb3VwIiwiZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwIiwiZGFtcGluZyIsImFuZ3VsYXJEYW1waW5nIiwic2V0WmVyb1JvdGF0aW9uIiwiZml4ZWRSb3RhdGlvbiIsInN0YXRpYyIsImRlYnVnIiwiZXZlbnRfa2V5IiwiZHluYW1pY19mb3VuZCIsInRoaXNfZXZlbnQiLCJ0YXJnZXRfbGF5ZXIiLCJzdXJyb3VuZGluZyIsInRoaXNfa2V5Iiwic3Vycl9ldmVudCIsImFjdGl2YXRlX2F0IiwiTWFpbkNoYXJCYXNlIiwiU3ByaXRlQmFzZSIsIk1haW5DaGFyIiwiUGxheWVyIiwiaW5mbyIsInNwcml0ZV9iYXNlIiwiaHBfY3VydmUiLCJwcF9jdXJ2ZSIsImF0a19jdXJ2ZSIsImRlZl9jdXJ2ZSIsImFnaV9jdXJ2ZSIsImx1a19jdXJ2ZSIsImV4cF9jdXJ2ZSIsInN0YXJ0aW5nX2xldmVsIiwiY2xhc3NfdGFibGUiLCJiYXR0bGVfc2NhbGUiLCJ2ZW51c19sZXZlbF9iYXNlIiwibWVyY3VyeV9sZXZlbF9iYXNlIiwibWFyc19sZXZlbF9iYXNlIiwianVwaXRlcl9sZXZlbF9iYXNlIiwidmVudXNfcG93ZXJfYmFzZSIsIm1lcmN1cnlfcG93ZXJfYmFzZSIsIm1hcnNfcG93ZXJfYmFzZSIsImp1cGl0ZXJfcG93ZXJfYmFzZSIsInZlbnVzX3Jlc2lzdF9iYXNlIiwibWVyY3VyeV9yZXNpc3RfYmFzZSIsIm1hcnNfcmVzaXN0X2Jhc2UiLCJqdXBpdGVyX3Jlc2lzdF9iYXNlIiwiaW5uYXRlX2FiaWxpdGllcyIsImluX3BhcnR5IiwiaXRlbXMiLCJiYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zIiwibGV2ZWwiLCJjdXJyZW50X2V4cCIsImVsZW1lbnRfYWZpbml0eSIsInZlbnVzX2RqaW5uaSIsIm1lcmN1cnlfZGppbm5pIiwibWFyc19kamlubmkiLCJqdXBpdGVyX2RqaW5uaSIsImluaXRfZGppbm5pIiwiaHBfZXh0cmEiLCJwcF9leHRyYSIsImF0a19leHRyYSIsImRlZl9leHRyYSIsImFnaV9leHRyYSIsImx1a19leHRyYSIsImhwX3JlY292ZXJ5IiwicHBfcmVjb3ZlcnkiLCJlcXVpcF9zbG90cyIsIndlYXBvbiIsImNoZXN0IiwicmluZyIsImJvb3RzIiwidW5kZXJ3ZWFyIiwiZXF1aXBwZWRfYWJpbGl0aWVzIiwiaW5pdF9pdGVtcyIsImFiaWxpdGllcyIsInR1cm5zIiwiY2xhc3MiLCJjaG9vc2VfcmlnaHRfY2xhc3MiLCJjbGFzc2VzX2xpc3QiLCJ2ZW51c19sZXZlbF9jdXJyZW50IiwibWVyY3VyeV9sZXZlbF9jdXJyZW50IiwibWFyc19sZXZlbF9jdXJyZW50IiwianVwaXRlcl9sZXZlbF9jdXJyZW50IiwicmV0dXJuX2RhdGEiLCJzdGF0cyIsIm1heF9ocCIsIm1heF9wcCIsImF0ayIsImRlZiIsImFnaSIsImx1ayIsImV4cCIsInVwZGF0ZV9hbGwiLCJpdGVtX29iaiIsImVxdWlwcGVkIiwiZXF1aXBfaXRlbSIsIml0ZW1fa2V5X25hbWUiLCJlcXVpcCIsImZvdW5kIiwiaXRlbXNfbGlzdCIsIml0ZW1fb2JqX3RvX3JlbW92ZSIsImFkanVzdF9pbmRleCIsInVuZXF1aXBfaXRlbSIsImluaXRpYWxpemUiLCJpdGVtIiwiYWRkX2VmZmVjdCIsInJlbW92ZV9lZmZlY3QiLCJhYmlsaXR5IiwiZGppbm5fa2V5X25hbWUiLCJ0aGlzX2RqaW5uaV9saXN0Iiwib2xkX2RqaW5uX2tleV9uYW1lIiwibmV3X2RqaW5uX2tleV9uYW1lIiwicmVtb3ZlX2RqaW5uIiwiYWRkX2RqaW5uIiwiZGppbm5pX2tleV9uYW1lIiwiZGppbm5pX25leHRfc3RhdHVzIiwicHJldmlvdXNfY2xhc3MiLCJ2ZW51c19sdiIsIm1lcmN1cnlfbHYiLCJtYXJzX2x2IiwianVwaXRlcl9sdiIsImx2X3NoaWZ0IiwicmV0dXJuX29iaiIsImNsYXNzX25hbWUiLCJjbGFzc19rZXlfbmFtZSIsImFiaWxpdHlfbGV2ZWxfcGFpcnMiLCJwcmV2aWV3X3N0YXRzX2J5X2RqaW5uIiwicHJldmlld19vYmoiLCJzZXRfbWF4X3N0YXQiLCJlZmZlY3RfdHlwZSIsInByZXZpZXciLCJzdGF0X2tleSIsImN1cnJldF9rZXkiLCJib29zdF9rZXkiLCJjdXJ2ZV9rZXkiLCJleHRyYV9rZXkiLCJwcmV2aW91c192YWx1ZSIsInRoaXNfZGppbm5pIiwiZmlyc3RfaW5kZXgiLCJwcmV2aWV3X3ZhbHVlIiwicHJldmlld192YWx1ZV9hcHBsaWVkIiwiYW1vdW50IiwidmVudXNfcG93ZXJfY3VycmVudCIsIm1lcmN1cnlfcG93ZXJfY3VycmVudCIsIm1hcnNfcG93ZXJfY3VycmVudCIsImp1cGl0ZXJfcG93ZXJfY3VycmVudCIsInZlbnVzX3Jlc2lzdF9jdXJyZW50IiwibWVyY3VyeV9yZXNpc3RfY3VycmVudCIsIm1hcnNfcmVzaXN0X2N1cnJlbnQiLCJqdXBpdGVyX3Jlc2lzdF9jdXJyZW50IiwiaW5pdF9lbGVtZW50YWxfYXR0cmlidXRlcyIsInBvd2VyX2tleSIsInJlc2lzdF9rZXkiLCJwYXJ0eV9kYXRhIiwiaGFzX3Blcm1hbmVudF9zdGF0dXMiLCJhYmlsaXR5X3R5cGVzIiwiSEVBTElORyIsIkVGRkVDVF9PTkxZIiwiQURERURfREFNQUdFIiwiTVVMVElQTElFUiIsIkJBU0VfREFNQUdFIiwiU1VNTU9OIiwiVVRJTElUWSIsIkRJUkVDVF9EQU1BR0UiLCJhYmlsaXR5X21zZ190eXBlcyIsIlVTRSIsIlVOTEVBU0giLCJERUZFTkQiLCJJVEVNX1VOTEVBU0giLCJOT19NU0ciLCJhYmlsaXR5X3RhcmdldF90eXBlcyIsIk5PX1RBUkdFVCIsIlVTRVIiLCJhYmlsaXR5X2NhdGVnb3JpZXMiLCJQU1lORVJHWSIsIkRKSU5OIiwiSVRFTSIsIldFQVBPTl9VTkxFQVNIIiwiTk9STUFMIiwiZGltaW5pc2hpbmdfcmF0aW9zIiwiU1RBTkRBUkQiLCIxMSIsIjkiLCI3IiwiNSIsIjMiLCIxIiwiRElNSU5JU0giLCJTVEFUVVMiLCJiYXR0bGVfdGFyZ2V0IiwicHBfY29zdCIsImFiaWxpdHlfcG93ZXIiLCJlZmZlY3RzX291dHNpZGVfYmF0dGxlIiwiaXNfYmF0dGxlX2FiaWxpdHkiLCJpc19maWVsZF9wc3luZXJneSIsImFiaWxpdHlfY2F0ZWdvcnkiLCJiYXR0bGVfYW5pbWF0aW9uX2tleSIsInByaW9yaXR5X21vdmUiLCJoYXNfY3JpdGljYWwiLCJjcml0X211bHRfZmFjdG9yIiwiY2FuX3N3aXRjaF90b191bmxlYXNoIiwiY2FuX2JlX2V2YWRlZCIsInVzZV9kaW1pbmlzaGluZ19yYXRpbyIsIm1zZ190eXBlIiwiYWZmZWN0c19wcCIsImhhc19hbmltYXRpb25fdmFyaWF0aW9uIiwiYWJpbGl0eV90eXBlIiwiQkFUVExFIiwiR2FtZUV2ZW50IiwiTUFYX0NIQVJTX0lOX0JBVFRMRSIsImJhdHRsZV9waGFzZXMiLCJiYWNrZ3JvdW5kX2tleSIsImVuZW15X3BhcnR5X2tleSIsImFsbGllc19pbmZvIiwic3ByaXRlX2tleSIsImluc3RhbmNlIiwiZW50ZXJlZF9pbl9iYXR0bGUiLCJlbmVtaWVzX3BhcnR5X2RhdGEiLCJkYnMiLCJlbmVtaWVzX3BhcnRpZXNfZGIiLCJlbmVtaWVzX3BhcnR5X25hbWUiLCJlbmVtaWVzX2luZm8iLCJ0aGlzX2VuZW1pZXNfbGlzdCIsImJhdHRsZV9rZXlzX2NvdW50IiwiY291bnRlciIsIm1lbWJlcl9pbmZvIiwicXRkIiwiYmF0dGxlX2tleV9zdWZmaXgiLCJuYW1lX3N1ZmZpeCIsImdldF9lbmVteV9pbnN0YW5jZSIsImVuZW1pZXNfbGlzdCIsImJhdHRsZV9rZXkiLCJlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSIsImVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSIsImJhdHRsZV9zdGFnZSIsIkJhdHRsZVN0YWdlIiwiYmF0dGxlX2xvZyIsIkJhdHRsZUxvZyIsImJhdHRsZV9tZW51IiwiTWFpbkJhdHRsZU1lbnUiLCJvbl9hYmlsaXRpZXNfY2hvb3NlIiwiY2hvb3NlX3RhcmdldHMiLCJ0YXJnZXRfd2luZG93IiwiQ2hvb3NpbmdUYXJnZXRXaW5kb3ciLCJhbmltYXRpb25fbWFuYWdlciIsIkJhdHRsZUFuaW1hdGlvbk1hbmFnZXIiLCJiYXR0bGVfcGhhc2UiLCJjb250cm9sc19lbmFibGVkIiwib25fZ29pbmdfZWZmZWN0cyIsImFsbGllc19kZWZlYXRlZCIsImVuZW1pZXNfZGVmZWF0ZWQiLCJiYXR0bGVfZmluaXNoaW5nIiwic2V0X2NvbnRyb2xzIiwiZW50ZXJfaW5wdXQiLCJpbl9iYXR0bGUiLCJoYWx0IiwiY2hlY2tfcGhhc2VzIiwiYWR2YW5jZV9sb2dfcmVzb2x2ZSIsImFsbGllc19hYmlsaXRpZXMiLCJjbG9zZV9tZW51IiwicmVzZXRfcG9zaXRpb25zIiwiY2hvb3NpbmdfYWN0aW9ucyIsImFiaWxpdHlfa2V5IiwiY2FzdGVyIiwidGhpc19hYmlsaXR5IiwiYWJpbGl0aWVzX2xpc3QiLCJxdWFudGl0aWVzIiwidGFyZ2V0cyIsIndpbmRvd19vcGVuIiwiY2xvc2UiLCJjaGVja19wYXJ0aWVzIiwiYmF0dGxlX3BoYXNlX25vbmUiLCJiYXR0bGVfcGhhc2VfbWVudSIsImJhdHRsZV9waGFzZV9yb3VuZF9zdGFydCIsImJhdHRsZV9waGFzZV9jb21iYXQiLCJiYXR0bGVfcGhhc2Vfcm91bmRfZW5kIiwiYmF0dGxlX3BoYXNlX2VuZCIsImJhdHRsZV9pbnN0YW5jZSIsImluaXRpYWxpemVfc3RhZ2UiLCJhbGxpZXNfbWFwX3Nwcml0ZSIsImVuZW1pZXNfbWFwX3Nwcml0ZSIsInNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24iLCJvcGVuX21lbnUiLCJlbmVteV9tZW1iZXJzIiwiZW5lbWllc19hYmlsaXRpZXMiLCJmcm9tRW50cmllcyIsImVuZW15IiwiRW5lbXlBSSIsInJvbGxfYWN0aW9uIiwiY2hhcl9rZXkiLCJ0aGlzX2NoYXIiLCJtYWluX2NoYXJfbGlzdCIsInNwZWVkIiwiQmF0dGxlRm9ybXVsYXMiLCJwbGF5ZXJfdHVybl9zcGVlZCIsImN1cnJlbnRfYWdpIiwidGhpc19lbmVteSIsImVuZW15X3R1cm5fc3BlZWQiLCJ0dXJuc19hY3Rpb25zIiwibG9hZF9hbmltYXRpb24iLCJjdXJyZW50X2hwIiwid2FpdF9mb3Jfa2V5IiwiaXNfcGFyYWx5emVkIiwiaXRlbV9uYW1lIiwiaGFzX3RlbXBvcmFyeV9zdGF0dXMiLCJjdXJyZW50X3BwIiwiZGppbm5fbmFtZSIsImFkZF9hYmlsaXR5Iiwic3VtbW9uc19kYiIsIkRqaW5uIiwiZ2V0X3N0YW5kYnlfZGppbm5pIiwiZ2V0X2FjdGl2ZV9wbGF5ZXJzIiwicmVxdWlyZW1lbnQiLCJzZXRfdG9fcmVjb3ZlcnkiLCJjaGFyc19zdGF0dXNfd2luZG93IiwidXBkYXRlX2NoYXJzX2luZm8iLCJhbmltYXRpb25fYXZhaWxhYmxlIiwiY2FzdGVyX3Nwcml0ZSIsInRhcmdldF9zcHJpdGVzIiwibWFnbml0dWRlIiwiZ3JvdXBfY2FzdGVyIiwiZ3JvdXBfYWxsaWVzIiwiZ3JvdXBfZW5lbWllcyIsImdyb3VwX3Rha2VyIiwicHJldmVudF9jYW1lcmFfYW5nbGVfb3ZlcmZsb3ciLCJhcHBseV9kYW1hZ2UiLCJhcHBseV9lZmZlY3RzIiwic2V0X3N0YWdlX2RlZmF1bHRfcG9zaXRpb24iLCJwb3dlciIsInN1bW1vbl9wb3dlciIsInBvaXNvbl9zdGF0dXMiLCJpc19wb2lzb25lZCIsImRhbWFnZSIsImJhdHRsZV9wb2lzb25fZGFtYWdlIiwicG9pc29uX25hbWUiLCJjaGVja19kb3duZWQiLCJ0aGlzX2VmZmVjdCIsImdldF9lZmZlY3RfdHVybnNfY291bnQiLCJpbmNyZWFzZWRfY3JpdCIsImFjYyIsInRhcmdldF9pbmZvIiwidGFyZ2V0X2luc3RhbmNlIiwiRVZBU0lPTl9DSEFOQ0UiLCJERUxVU0lPTl9NSVNTX0NIQU5DRSIsIkNSSVRJQ0FMX0NIQU5DRSIsIm11bHRfbW9kIiwiYWRkX21vZCIsInBoeXNpY2FsX2F0dGFjayIsInBzeW5lcmd5X2RhbWFnZSIsImhlYWxfYWJpbGl0eSIsImRqaW5uX3VzZWQiLCJzdW1tb25fZGFtYWdlIiwicmF0aW9zIiwiQWJpbGl0eSIsImdldF9kaW1pbmlzaGluZ19yYXRpb3MiLCJhZGRfZGFtYWdlIiwiY3VycmVudF9wcm9wZXJ0eSIsIm1heF9wcm9wZXJ0eSIsImRpX2VmZmVjdCIsImVmZmVjdF9yZXN1bHQiLCJlZmZlY3RfZGFtYWdlIiwidnVsbmVyYWJpbGl0eSIsInZ1bG5lcmFiaWxpdGllcyIsImFpbG1lbnRfc3VjY2VzcyIsInNldF9lZmZlY3RfdHVybnNfY291bnQiLCJwb2lzb25fZWZmZWN0IiwicmVtb3ZlZCIsImFkZF9yZWNvdmVyX2VmZmVjdCIsImRpZmYiLCJlbGVtZW50X2luZm8iLCJhYnMiLCJlZmZlY3RzX3RvX3JlbW92ZSIsImVmZmVjdF9ncm91cHMiLCJhdm9pZF9tc2ciLCJnZXRfZWZmZWN0X3R1cm5zX2tleSIsImNoYXJfa2V5X25hbWUiLCJlZmZlY3RfdHVybl9rZXkiLCJkamlubl9rZXkiLCJ0b3RhbF9leHAiLCJleHBfcmV3YXJkIiwiY2hhbmdlIiwiYWRkX2V4cCIsImdhaW5lZF9hYmlsaXRpZXMiLCJzdGF0X3RleHQiLCJ0b3RhbF9jb2lucyIsImNvaW5zX3Jld2FyZCIsIml0ZW1fcmV3YXJkIiwiaXRlbV9yZXdhcmRfY2hhbmNlIiwidW5zZXRfYmF0dGxlIiwidW5zZXRfc3RhZ2UiLCJkZXN0cm95X21lbnUiLCJ1cGRhdGVfc3RhZ2UiLCJyZW5kZXIiLCJ0YXJnZXRfbWF4X3JhbmdlIiwiYWN0aW9uX2tleV9uYW1lIiwibmVlZF90YXJnZXQiLCJib290c3RyYXBfbWV0aG9kIiwiY2FzdF9maW5pc2hlciIsImNvbnRyb2xsYWJsZV9jaGFyIiwidGFyZ2V0X2ZvdW5kIiwidGFyZ2V0X29iamVjdCIsInN0b3BfY2FzdGluZyIsImZpZWxkX3BzeW5lcmd5X3dpbmRvdyIsIkZpZWxkUHN5bmVyZ3lXaW5kb3ciLCJjYXN0X2RpcmVjdGlvbiIsIm1pbl94IiwibWF4X3giLCJtaW5feSIsIm1heF95IiwiYm9keV9yYWRpdXMiLCJzcXJfZGlzdGFuY2UiLCJpbnRlcmFjdGFibGVfb2JqZWN0c19kYiIsInBzeW5lcmd5X2tleXMiLCJpdGVtX3hfcHgiLCJpdGVtX3lfcHgiLCJ5X2NvbmRpdGlvbiIsInRoaXNfc3FyX2Rpc3RhbmNlIiwiaW50ZXJhY3Rpb25fdHlwZSIsImludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXMiLCJPTkNFIiwiY2FzdGVkX3Byb3BlcnR5IiwiY3VzdG9tX2RhdGEiLCJjYXN0ZXJfa2V5X25hbWUiLCJjYXN0aW5nX3BzeW5lcmd5IiwicmVzZXRfbWFwIiwid2luZG93Iiwic2VuZF90b19mcm9udCIsInN0b3BfY2hhciIsImdldF9jYXN0X2RpcmVjdGlvbiIsInNldF9kaXJlY3Rpb24iLCJzZWFyY2hfZm9yX3RhcmdldCIsInNldF90YXJnZXRfY2FzdGVkIiwic2V0X2hlcm9fY2FzdF9hbmltIiwiaW5pdF9jYXN0X2F1cmEiLCJucGNfZ3JvdXAiLCJjb2xvcl9maWx0ZXIiLCJ0aW50X21hcF9sYXllcnMiLCJkZWZhdWx0X2FuY2hvciIsImluaXRpYWxfeSIsImluaXRpYWxfYWN0aW9uIiwiaW5pdGlhbF9kaXJlY3Rpb24iLCJlbmFibGVfZm9vdHN0ZXBzIiwieF9zcGVlZCIsInlfc3BlZWQiLCJleHRyYV9zcGVlZCIsImZvcmNlX2RpcmVjdGlvbiIsImNsaW1iaW5nIiwicHVzaGluZyIsInNsaWRpbmciLCJ0ZWxlcG9ydGluZyIsImlkbGVfY2xpbWJpbmciLCJzcHJpdGVfaW5mbyIsImN1cnJlbnRfYWN0aW9uIiwicmVxdWlyZWRfZGlyZWN0aW9uIiwidHJ5aW5nX3RvX3B1c2giLCJ0cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24iLCJwdXNoX3RpbWVyIiwiZm9vdHN0ZXBzIiwiRm9vdHN0ZXBzIiwiYWxsb3dfY2xpbWJpbmciLCJtYXBfc3ByaXRlIiwibGF5ZXIiLCJhbmNob3JfeCIsImFuY2hvcl95Iiwicm91bmRQeCIsImFuY2hvciIsInNldFRvIiwic2hhZG93X2FuY2hvcl94Iiwic2hhZG93X2FuY2hvcl95IiwiTVVMVElQTFkiLCJkaXNhYmxlUm91bmRQeCIsImZvbGxvdyIsIkNhbWVyYSIsIkZPTExPV19MT0NLT04iLCJmb2N1c09uIiwiYW5pbWF0aW9uIiwiZ2V0U3ByaXRlQWN0aW9uIiwibG9hZFRleHR1cmUiLCJhbmltYXRpb25fa2V5IiwiZ2V0QW5pbWF0aW9uIiwic2V0QW5pbWF0aW9uIiwiYW5pbWF0aW9uX29iaiIsImZyYW1lX2luZGV4IiwiZnJhbWVfbmFtZSIsImdldEZyYW1lTmFtZSIsImZyYW1lTmFtZSIsImNoYW5nZV9zcHJpdGUiLCJ2ZWxvY2l0eSIsInNldF9hY3Rpb24iLCJjaGVja19vbl9ldmVudCIsInRpbGVzIiwiZ2V0X2N1cnJlbnRfdGlsZSIsInRpbGUiLCJkaXNhYmxlX2Zvb3RwcmludCIsInNob3dfZm9vdHN0ZXBzIiwidGlsZV9hYmxlX3RvX3Nob3dfZm9vdHByaW50IiwiY2FuX21ha2VfZm9vdHByaW50IiwiY3JlYXRlX3N0ZXAiLCJzaGlmdF9wcmVzc2VkIiwiaXNEb3duIiwiZGVsdGFfdGltZSIsImVsYXBzZWRNUyIsInRlbXBfeCIsInRlbXBfeSIsImNhbGN1bGF0ZV9zcGVlZCIsImFwcGx5X3NwZWVkIiwiZmlyZV9wdXNoX21vdmVtZW50IiwicHVzaF9lbmQiLCJiZWZvcmVfbW92ZSIsInRhcmdldF9vbmx5IiwiZW5hYmxlX3BoeXNpY3NfYXRfZW5kIiwib25fcHVzaF91cGRhdGUiLCJleHBlY3RlZF9wb3NpdGlvbiIsInBvc2l0aXZlX2xpbWl0IiwibmVnYXRpdmVfbGltaXQiLCJ0d2Vlbl94IiwidHdlZW5feSIsImV2ZW50X3NoaWZ0X3giLCJldmVudF9zaGlmdF95Iiwic2hpZnRfZXZlbnRzIiwic3ByaXRlcyIsInByZXZfeCIsInByZXZfeSIsInByb21pc2VzIiwiYmxvY2tpbmdfc3RhaXJfYmxvY2siLCJwcm9taXNlX3Jlc29sdmUiLCJkZXN0X3giLCJkZXN0X3kiLCJ0aGlzX3R3ZWVuIiwib25VcGRhdGVDYWxsYmFjayIsImRyb3BfZm91bmQiLCJvYmplY3RfZHJvcF90aWxlcyIsImRyb3BfdGlsZSIsImRlc3RfeV9zaGlmdF9weCIsImNoYW5nZV9jb2xsaWRlcl9sYXllciIsImRlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyIiwiYW5pbWF0aW9uX2R1cmF0aW9uIiwiUXVhZHJhdGljIiwiSW4iLCJkdXN0X2FuaW1hdGlvbiIsIm9iamVjdF9ldmVudHMiLCJnZXRfZXZlbnRzIiwib2xkX3giLCJvbGRfeSIsIm5ld19ldmVudF9sb2NhdGlvbl9rZXkiLCJuZXdfc3Vycm91bmRpbmdzIiwiYWN0aXZlX2p1bXBfc3Vycm91bmRpbmdzIiwiY29sbGlkZXJfbGF5ZXJfc2hpZnQiLCJvbGRfc3Vycm91bmRpbmdzIiwib2xkX3N1cnJvdW5kaW5nIiwib2xkX2tleSIsIm9sZF9zdXJyX2V2ZW50IiwiZGVhY3RpdmF0ZV9hdCIsIm9yaWdpbl94Iiwib3JpZ2luX3kiLCJkdXN0X3Nwcml0ZV9iYXNlIiwibWlzY19zcHJpdGVfYmFzZV9saXN0IiwidGhpc19hbmdsZSIsImNvcyIsInNpbiIsImR1c3Rfc3ByaXRlIiwic2V0Q2hpbGRJbmRleCIsImdldENoaWxkSW5kZXgiLCJyZXNvbHZlX2Z1bmMiLCJpdGFsaWNfZm9udCIsInBhcnRzIiwiZmluaXNoZWQiLCJhdmF0YXIiLCJhdmF0YXJfd2luZG93IiwiaGVyb19kaXJlY3Rpb24iLCJkaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZSIsImRpYWxvZ19jcnlzdGFsIiwiZGlhbG9nX2NyeXN0YWxfYW5pbV9rZXkiLCJkaWFsb2dfY3J5c3RhbF90d2VlbiIsInNob3dfY3J5c3RhbCIsIndpbl9wb3MiLCJjdXN0b21fcG9zIiwiY3VzdG9tX2F2YXRhcl9wb3MiLCJtb3VudF93aW5kb3ciLCJnZXRfZGlhbG9nX3dpbmRvd19wb3NpdGlvbiIsIldpbmRvdyIsInNob3ciLCJuZXh0X2NhbGxiYWNrIiwic2V0X3RleHQiLCJyZWFsX3giLCJyZWFsX3kiLCJ0d2Vlbl90b195IiwiSW5PdXQiLCJhdmF0YXJfcG9zIiwiZ2V0X2F2YXRhcl9wb3NpdGlvbiIsIndpbmRvd19zaXplIiwic2V0X2F2YXRhciIsInNldF9oZXJvX2RpcmVjdGlvbiIsIm1heF9lZmVjdGl2ZV93aWR0aCIsIndpbmRvd3MiLCJsaW5lX3dpZHRoIiwibWF4X3dpbmRvd193aWR0aCIsImdldF90ZXh0X3dpZHRoIiwibGluZV90ZXh0Iiwic2V0X2RpYWxvZyIsImRpYWxvZ19vbmx5IiwiZGVzdHJveV9jcnlzdGFsIiwiTlBDX1Nwcml0ZSIsIm5wY19tb3ZlbWVudF90eXBlcyIsIldBTEtfQVJPVU5EIiwibnBjX3R5cGVzIiwiSU5OIiwiU0hPUCIsIk5QQyIsIkNvbnRyb2xsYWJsZUNoYXIiLCJucGNfdHlwZSIsIm1vdmVtZW50X3R5cGUiLCJ0aG91Z2h0X21lc3NhZ2UiLCJzaG9wX2tleSIsInRhbGtfcmFuZ2VfZmFjdG9yIiwiZXZlbnRzX2luZm8iLCJzZXRfZXZlbnRzIiwiaXNfbnBjIiwiZXZlbnRfaW5mbyIsIkJhdHRsZUV2ZW50IiwidXBkYXRlX3NoYWRvdyIsImNvbGxpc2lvbl9vYmoiLCJlbmFibGUiLCJucGNfZGIiLCJyZXNldF9hbmNob3IiLCJwb2x5Z29uIiwibW91bnRfY29sbGlzaW9uX3BvbHlnb24iLCJjb2xsaXNpb25fYm9keV9iZXZlbCIsImFkZFBvbHlnb24iLCJvcHRpbWFsRGVjb21wIiwic2tpcFNpbXBsZUNoZWNrIiwicmVtb3ZlQ29sbGluZWFyUG9pbnRzIiwibnBjX2NvbGxpc2lvbl9ncm91cHMiLCJDRU5URVJfWCIsIkNFTlRFUl9ZIiwiQ0FNRVJBX1NQRUVEIiwiU0VNSV9NQUpPUl9BWElTIiwiU0VNSV9NSU5PUl9BWElTIiwiREVGQVVMVF9QT1NfQU5HTEUiLCJSQU5HRVMiLCJCQVRUTEVfQ1VSU09SX1NDQUxFUyIsImNhbWVyYV9hbmdsZSIsInJhZCIsInNwaW5pbmciLCJ1cGRhdGVfc3ByaXRlX3Byb3BlcnRpZXMiLCJvbGRfY2FtZXJhX2FuZ2xlIiwiYmF0dGxlX2dyb3VwIiwiY3JvcF9ncm91cCIsImFsbGllc19jb3VudCIsImVuZW1pZXNfY291bnQiLCJzaGlmdF9mcm9tX21pZGRsZV9lbmVteSIsInNoaWZ0X2Zyb21fbWlkZGxlX2FsbHkiLCJjaG9vc2luZ190YXJnZXRzIiwic2V0X3RhcmdldHMiLCJlc2NfaW5wdXQiLCJjaG9vc2luZ190YXJnZXRzX2ZpbmlzaGVkIiwicGFydHlfY291bnQiLCJwYXJ0eV9pbmZvIiwidGFyZ2V0X3R5cGUiLCJhYmlsaXR5X2Nhc3RlciIsInJhbmdlX2N1cnNvcl9wb3NpdGlvbiIsImFiaWxpdHlfcmFuZ2UiLCJjaG9vc2luZ190YXJnZXRzX2NhbGxiYWNrIiwiY2hhbmdlX3RhcmdldCIsInR3ZWVuX3RvX3BvcyIsImdyb3VwX2luZm8iLCJncm91cF9sZW5ndGgiLCJncm91cF9oYWxmX2xlbmd0aCIsInRhcmdldF9zcHJpdGVfaW5kZXgiLCJzZXRfYmF0dGxlX2N1cnNvcnNfcG9zaXRpb24iLCJibGFja19iZyIsImJhdHRsZV9iZyIsInRpbGVTcHJpdGUiLCJiYXR0bGVfYmcyIiwiYmdfaGVpZ2h0Iiwic2V0X3Nwcml0ZSIsImlzX2FsbHkiLCJlbGxpcHNlc19zZW1pX21ham9yIiwiZWxsaXBzZXNfc2VtaV9taW5vciIsImlzX0FsbHkiLCJmaXJzdF9hbGx5X2NoYXIiLCJsYXN0X2FsbHlfY2hhciIsImZpcnN0X2VuZW15X2NoYXIiLCJsYXN0X2VuZW15X2NoYXIiLCJ1cHBlcl9yZWN0IiwibG93ZXJfeSIsImxvd2VyX3JlY3QiLCJpbml0aWFsaXplX3Nwcml0ZXMiLCJpbnRpYWxpemVfY3JvcF9yZWN0YW5nbGVzIiwicHJvbWlzZSIsImluZGV4X3NoaWZ0ZWQiLCJwb3NfeCIsInBvc195IiwidGhpc19zY2FsZV94Iiwic2lnbiIsInRoaXNfc2NhbGVfeSIsImNlbnRlcl9zaGlmdCIsImN1cnNvcnMiLCJjdXJzb3Jfc3ByaXRlIiwidGFyZ2V0X2luZGV4IiwidGFyZ2V0X3Nwcml0ZSIsInRoaXNfc2NhbGUiLCJjdXJzb3JzX3R3ZWVucyIsImN1cnNvcl9jb3VudCIsInVuc2V0X2JhdHRsZV9jdXJzb3JzIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsImRlbHRhIiwic3dhcENoaWxkcmVuIiwieiIsInJlbGF0aXZlX2FuZ2xlIiwiYW5nbGVfcG9zaXRpb24iLCJnZXRfYW5nbGUiLCJlbGxpcHNlX3Bvc2l0aW9uIiwic2hpZnRfZnJvbV9taWRkbGUiLCJnZXRfc2NhbGUiLCJvbl9mYWRlX2NvbXBsZXRlIiwib25fZmxhc2hfY29tcGxldGUiLCJmYWRlIiwib25GYWRlQ29tcGxldGUiLCJyZXNldEZYIiwiaXNfeCIsImVsbGlwc2UiLCJhdGFuIiwidGFuIiwiZGVmYXVsdF9zY2FsZSIsIlNUQVRVU19CQVJfQ09MT1JfR09PRCIsIlNUQVRVU19CQVJfQ09MT1JfQkFEIiwiU1RBUlNfWCIsIlNUQVJTX1kiLCJTVEFOREJZX0NPVU5UX1giLCJTVEFOREJZX0NPVU5UX1NISUZUX1kiLCJkamlubmlfaW5mbyIsIm5hbWVfeSIsInN0YXR1c193aW5faGVpZ2h0IiwiY2hhcnNfbnVtYmVyIiwic3RhdHVzX3dpbl93aWR0aCIsInN0YXR1c193aW5feCIsInN0YXR1c193aW5kb3ciLCJzdGF0dXNfaGVhZGVyX3dpZHRoIiwiaW5mb19zcHJpdGVzIiwic2V0X2NoYXJzX2luZm8iLCJzdGFuZGJ5X2NvdW50X3RleHQiLCJzdGFyc19ncm91cCIsImNoYXJzX2xpc3QiLCJpbmZvX3Nwcml0ZXNfb2JqIiwiaHBfYmFyX2dyYXBoaWNzIiwiaHBfYmFyX2RhbWFnZV9ncmFwaGljcyIsImhwX2hlYWRlciIsImhwIiwicHBfYmFyX2dyYXBoaWNzIiwicHBfYmFyX2RhbWFnZV9ncmFwaGljcyIsInBwX2hlYWRlciIsInBwIiwiYmFzZV94X3BvcyIsImdyb3VwX2tleSIsImRlZmluZV9pbnRlcm5hbF9ncm91cCIsInlfcG9zX2JhciIsImRlZmF1bHRfeSIsInhfbnVtYmVyX3BvcyIsInNob3dfZGppbm5faW5mbyIsInVwZGF0ZV90ZXh0IiwidXBkYXRlX3NpemUiLCJ1cGRhdGVfcG9zaXRpb24iLCJjbGVhcl9zZXBhcmF0b3JzIiwiY3VycmVudF9jaGFycyIsImluZm9fc3ByaXRlIiwiaHBfZGFtYWdlX2Jhcl93aWR0aCIsImhwX2RhbWFnZV9iYXJfeCIsInBwX2RhbWFnZV9iYXJfd2lkdGgiLCJwcF9kYW1hZ2VfYmFyX3giLCJkcmF3X3NlcGFyYXRvciIsInJlcXVpcmVkX3ZlbnVzX2xldmVsIiwicmVxdWlyZWRfbWVyY3VyeV9sZXZlbCIsInJlcXVpcmVkX21hcnNfbGV2ZWwiLCJyZXF1aXJlZF9qdXBpdGVyX2xldmVsIiwiY2xhc3NfdHlwZSIsInZlbnVzX2x2bCIsIm1lcmN1cnlfbHZsIiwibWFyc19sdmwiLCJqdXBpdGVyX2x2bCIsInNlY29uZGFyeV9hZmluaXR5Iiwic2Vjb25kYXJ5X2VsZW1lbnRzIiwiY2xhc3NlcyIsInRoaXNfY2xhc3MiLCJCVVRUT05fWSIsIlRJVExFX1dJTkRPV19IRUlHSFQiLCJidXR0b25zIiwidGl0bGVzIiwib25fY2hvb3NlIiwib25fY2FuY2VsIiwidGl0bGVfd2luZG93X3dpZHRoIiwiZG9ja19yaWdodCIsImJ1dHRvbnNfa2V5cyIsImJ1dHRvbnNfbnVtYmVyIiwibWF4X3RpdGxlX3dpZHRoIiwidGl0bGUiLCJ0b3RhbF93aWR0aCIsInRpdGxlX3dpbmRvdyIsIm1vdW50X2J1dHRvbnMiLCJzZWxlY3RlZF9idXR0b25faW5kZXgiLCJtZW51X29wZW4iLCJtZW51X2FjdGl2ZSIsInNlbGVjdGVkX2J1dHRvbl90d2VlbiIsImZpbHRlcmVkX2J1dHRvbnMiLCJvYmoiLCJjaGFuZ2VfYnV0dG9uIiwicmVzZXRfYnV0dG9uIiwic2V0X2J1dHRvbiIsInNlbGVjdF9pbmRleCIsInN0YXJ0X2FjdGl2ZSIsIndpbmRvd19wcm9taXNlX3Jlc29sdmUiLCJidXR0b25zX3Jlc29sdmUiLCJ3aW5kb3dfcHJvbWlzZSIsImJ1dHRvbnNfcHJvbWlzZSIsInRyYW5zaXRpb25fdGltZSIsImhpZGUiLCJFbmVteSIsImVuZW15X2RhdGEiLCJ2ZW51c19sZXZlbCIsIm1lcmN1cnlfbGV2ZWwiLCJtYXJzX2xldmVsIiwianVwaXRlcl9sZXZlbCIsInZlbnVzX3Bvd2VyIiwibWVyY3VyeV9wb3dlciIsIm1hcnNfcG93ZXIiLCJqdXBpdGVyX3Bvd2VyIiwidmVudXNfcmVzaXN0IiwibWVyY3VyeV9yZXNpc3QiLCJtYXJzX3Jlc2lzdCIsImp1cGl0ZXJfcmVzaXN0Iiwic2V0X2Jhc2VfYXR0cmlidXRlcyIsImN1cnJlbnRfaHBfcmVjb3ZlcnkiLCJjdXJyZW50X3BwX3JlY292ZXJ5IiwiY3VycmVudF9hdGsiLCJjdXJyZW50X2RlZiIsImN1cnJlbnRfbHVrIiwiRW5lbXlCYXNlIiwiSU5GSU5JVEUiLCJpbnRlcmFjdGFibGVfb2JqZWN0X2V2ZW50X3R5cGVzIiwiSlVNUF9BUk9VTkQiLCJJbnRlcmFjdGFibGVPYmplY3RzX1Nwcml0ZSIsImFsbG93ZWRfdGlsZXMiLCJub3RfYWxsb3dlZF90aWxlcyIsImludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdCIsImNvbGxpc2lvbl90aWxlc19ib2RpZXMiLCJjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9ucyIsImludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHMiLCJnZXRfZXZlbnQiLCJibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCIsImNyZWF0ZUNvbGxpc2lvbkdyb3VwIiwiaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUiLCJpc19pbnRlcmFjdGFibGVfb2JqZWN0Iiwic2VuZF90b19iYWNrIiwic2hpZnRfeCIsInNoaWZ0X3kiLCJhbmNob3Jfc2hpZnQiLCJpbml0aWFsX2FuaW1hdGlvbiIsIm1hcF9ldmVudHMiLCJnZXRfY3VycmVudF9wb3NpdGlvbiIsInhfc2hpZnQiLCJ5X3NoaWZ0IiwiYWN0aXZlX2V2ZW50Iiwic2V0X2p1bXBfdHlwZV9ldmVudCIsInNldF9qdW1wX2Fyb3VuZF9ldmVudCIsInNldF9zdGFpcl9ldmVudCIsIm5vdF9hbGxvd2VkX3RpbGUiLCJub3RfYWxsb3dlZF90aWxlX3Rlc3QiLCJ0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSIsIm5ld19ldmVudCIsImluc2VydF9ldmVudCIsImNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIiLCJjbGltYmluZ19vbmx5IiwiY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbiIsImxhc3RfeV9zaGlmdCIsImV2ZW50X2RhdGEiLCJ0aGlzX2xvY2F0aW9uX2tleSIsIkNsaW1iRXZlbnQiLCJjb2xsaXNpb25fZ3JvdXBzIiwiY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2siLCJhY3RpdmF0aW9uX2RpcmVjdGlvbiIsImZpbmlzaF9jbGltYmluZyIsInN0YXJ0X2NsaW1iaW5nIiwiY2hhbmdlX21hcF9ib2R5IiwieF90d2VlbiIsInlfdHdlZW4iLCJjcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcyIsIm91dF90aW1lIiwiZW5kX2FuaW1hdGlvbiIsImZpbmFsX3NoYWRvd19wb3MiLCJyZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcyIsInBvc3Rpb25zIiwiY2xpbWIiLCJjb2xsaXNpb25fdGlsZXMiLCJ0aWxlX3NoaWZ0IiwiY29sbGlkZV9pbmRleCIsImNvbGxpZGVfd2l0aF9tYXAiLCJib2RpZXMiLCJXT1JLSU5HX1dJRFRIIiwiU0xPVF9XSURUSCIsIlNMT1RfV0lEVEhfQ0VOVEVSIiwiYmFzZV93aW5kb3ciLCJzZWxlY3RlZF95IiwidW5zZWxlY3RlZF95Iiwic2V0X2NoYXJzIiwibGluZV9pbmRleCIsImN1cnNvcl9jb250cm9sIiwiQ3Vyc29yQ29udHJvbCIsImdldF9tYXhfcGVyX2xpbmUiLCJnZXRfc2VsZWN0ZWRfYnV0dG9uX2luZGV4Iiwic2V0X3NlbGVjdGVkX2J1dHRvbl9pbmRleCIsImlzX29wZW4iLCJpc19hY3RpdmF0ZWQiLCJnZXRfY3Vyc29yX3giLCJnZXRfY3Vyc29yX3kiLCJjaGFyX2J1dHRvbnMiLCJvbGRfaW5kZXgiLCJuZXdfaW5kZXgiLCJwYXJ0eV9pbmRleCIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsImF2YXRhcl9ncm91cCIsInhfYXZhdGFyIiwieV9hdmF0YXIiLCJuYW1lX3RleHQiLCJsdl90ZXh0IiwiY2xhc3NfdGV4dCIsImhwX3RleHQiLCJwcF90ZXh0IiwibWF4X2hwX3RleHQiLCJtYXhfcHBfdGV4dCIsImV4cF90ZXh0IiwiaW5pdGlhbF9jaGFyIiwic2V0X2NoYXIiLCJISUdITElHSFRfSEVJR0hUIiwiaXNfcHN5bmVyZ3lfd2luZG93IiwiZWxlbWVudF9saXN0IiwiZWxlbWVudF9zcHJpdGVfa2V5Iiwid2luZG93X2FjdGl2YXRlZCIsImNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMiLCJzcHJpdGVfcGFpciIsInRleHRfc3ByaXRlc19pbl93aW5kb3ciLCJpY29uX3Nwcml0ZXNfaW5fd2luZG93Iiwic2VsZWN0ZWRfZWxlbWVudF9pbmRleCIsImdldF9wYWdlX251bWJlciIsImdldF9lbGVtX3Blcl9wYWdlIiwicGFnZV9jaGFuZ2UiLCJlbGVtZW50X2NoYW5nZSIsImdldF9wYWdlX2luZGV4Iiwic2V0X3BhZ2VfaW5kZXgiLCJnZXRfZWxlbWVudF9pbmRleCIsInNldF9lbGVtZW50X2luZGV4Iiwic2VsZWN0ZWRfZWxlbWVudF90d2VlbiIsImhpZ2hsaWdodF9iYXIiLCJpbml0X3BhZ2VfaW5kaWNhdG9yX2JhciIsImdldF9lbGVtZW50X2tleV9uYW1lIiwiaXRlbV9vYmpzIiwibGlzdF9sZW5ndGgiLCJlbGVtX2tleV9uYW1lIiwiY2xlYXJfc3ByaXRlcyIsImljb25feCIsImljb25feSIsInhfZWxlbV9uYW1lIiwiaWNvbl9ncm91cCIsIml0ZW1fY291bnQiLCJ4X2VsZW1fcHBfY29zdCIsImFmdGVyX2luZGV4Iiwic2V0X2VsZW1lbnRfdHdlZW4iLCJzZXRfaGlnaGxpZ2h0X2JhciIsInNldF9lbGVtZW50cyIsInJlbW92ZV9mcm9tX2dyb3VwIiwiY2hhcl9pbmRleCIsIm9wZW5fY2FsbGJhY2siLCJzZXRfcGFnZV9udW1iZXIiLCJzZXRfcGFnZV9pbmRpY2F0b3IiLCJ1bnNldF9lbGVtZW50X3R3ZWVuIiwidW5zZXRfaGlnaGxpZ2h0X2JhciIsImNhbGxiYWNrcyIsImNvbnRyb2xfbWFuYWdlciIsIm9uX3ByZXNzIiwiY3VzdG9tX3NjYWxlIiwiaW5pdGlhbGl6ZWQiLCJuZXh0X2J1dHRvbiIsInByZXZpb3VzX2J1dHRvbiIsImVzYyIsImVudGVyIiwiYWN0aXZlX2RlZmF1bHQiLCJtYXhfc2NhbGUiLCJ3b3JsZCIsIkdvbGRlblN1biIsInNob3Bfb3BlbiIsImNyZWF0ZWQiLCJmb3JjZV9zdG9wX21vdmVtZW50IiwibWFpbl9tZW51Iiwic2hvcF9tZW51IiwiZ2FtZV9ldmVudF9tYW5hZ2VyIiwic2hpZnRfaW5wdXQiLCJzcGFjZWJhcl9pbnB1dCIsImZ1bGxzY3JlZW4iLCJzY2FsZV9mYWN0b3IiLCJ1bmRlcmxheWVyX2dyb3VwIiwib3ZlcmxheWVyX2dyb3VwIiwiR2FtZSIsIldFQkdMIiwicHJlbG9hZCIsImxvYWRSZW5kZXIiLCJsb2FkX2FsbCIsImFkdmFuY2VkVGltaW5nIiwic3RhZ2UiLCJyZW5kZXJlciIsInJlbmRlclNlc3Npb24iLCJyb3VuZFBpeGVscyIsInJlbmRlcl9sb2FkaW5nIiwibG9hZF9kYXRhYmFzZXMiLCJpbml0X2RiIiwiaW5pdGlhbF9zY2FsZV9mYWN0b3IiLCJEZWJ1ZyIsImluaXRpYWxpemVfY29udHJvbHMiLCJpbml0aWFsaXplX2dhbWVfZGF0YSIsIm1hcHNfbGlzdCIsIm1hcF9rZXlfbmFtZSIsIm1vdW50X21hcCIsIm1hcF96X2luZGV4IiwiSGVybyIsImhlcm9fa2V5X25hbWUiLCJ4X3RpbGVfcG9zaXRpb24iLCJ5X3RpbGVfcG9zaXRpb24iLCJzZXRfc2hhZG93IiwiY2FtZXJhX2ZvbGxvdyIsIkNvbGxpc2lvbiIsImNvbmZpZ19ib2R5IiwiY29uZmlnX2NvbGxpc2lvbl9ncm91cHMiLCJjb25maWdfYWxsX2JvZGllcyIsImNvbmZpZ19jb2xsaXNpb25zIiwidXBkYXRlQm91bmRzQ29sbGlzaW9uR3JvdXAiLCJUaWxlRXZlbnRNYW5hZ2VyIiwiR2FtZUV2ZW50TWFuYWdlciIsImluaXRpYWxpemVfdXRpbHNfY29udHJvbHMiLCJzZXR1cFNjYWxlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiZnVsbFNjcmVlblNjYWxlTW9kZSIsIlNjYWxlTWFuYWdlciIsIlNIT1dfQUxMIiwib25UYXAiLCJwb2ludGVyIiwiaXNfZG91YmxlX2NsaWNrIiwic3RhcnRGdWxsU2NyZWVuIiwib25GdWxsU2NyZWVuQ2hhbmdlIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJRIiwiaW5fYWN0aW9uIiwiZmllbGRfYWJpbGl0aWVzX2xpc3QiLCJtb3ZlIiwiY2FzdCIsImluaXRpYWxfc2hvcnRjdXRzIiwiVyIsImZyb3N0IiwiRSIsImdyb3d0aCIsInVwZGF0ZV90aWxlX3Bvc2l0aW9uIiwiZmlyZV90cmlnZ2VyZWRfZXZlbnRzIiwiY2hlY2tfdGlsZV9ldmVudHMiLCJob3Jpem9udGFsX21lbnUiLCJzZXRfZGVidWdfaW5mbyIsImZyYW1lcyIsImZpbGxfa2V5X2RlYnVnX3RhYmxlIiwiZmlsbF9zdGF0c19kZWJ1Z190YWJsZSIsImdvbGRlbl9zdW4iLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJkZWJ1Z19waHlzaWNzIiwiZ3JpZCIsImRlYnVnX2tleXMiLCJkZWJ1Z19zdGF0cyIsInNob3dfZnBzIiwiRCIsInRvZ2dsZV9kZWJ1Z19waHlzaWNzIiwiRyIsInRvZ2dsZV9ncmlkIiwiSyIsInRvZ2dsZV9rZXlzIiwiUyIsInRvZ2dsZV9zdGF0cyIsIkYiLCJ0b2dnbGVfZnBzIiwiZmxhZyIsInVwZGF0ZV9kZWJ1Z19waHlzaWNzIiwidG9nZ2xlciIsImlzX2Rvd24iLCJjbGFzc19saXN0Iiwia2V5Q29kZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsYXNzTGlzdCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5Iiwib25rZXlkb3duIiwib25rZXl1cCIsImlubmVySFRNTCIsInRvRml4ZWQiLCJmcHMiLCJ0aWxlX3dpZHRoIiwiZ2VvbSIsIkxpbmUiLCJ0aWxlX2hlaWdodCIsIlJlY3RhbmdsZSIsIkNpcmNsZSIsInBvaW50IiwibW91c2VQb2ludGVyIiwid2l0aGluR2FtZSIsIm1vdXNlX3giLCJtb3VzZV95IiwiaW5uZXJUZXh0IiwiSlNPTiIsInN0cmluZ2lmeSIsInNlbGVjdF9lbGVtZW50IiwiZGVidWdfc3RhdHNfaW5mbyIsInNlbGVjdGVkIiwibGlzdGVuZXIiLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJ1ZmZfaHRtbCIsImpzb24iLCJsb2FkX2RiX2ZpbGVzIiwiaW1hZ2UiLCJsb2FkX21pc2MiLCJsb2FkX2Fzc2V0cyIsImxvYWRfYnV0dG9ucyIsImJpdG1hcEZvbnQiLCJsb2FkX2ZvbnRzIiwic2NyaXB0IiwiY29uZmlnX3dvcmxkIiwibWF4X2xheWVyc19jcmVhdGVkIiwic3RhcnRTeXN0ZW0iLCJQaHlzaWNzIiwiUDJKUyIsInNldEltcGFjdEV2ZW50cyIsImRlZmF1bHRDb250YWN0TWF0ZXJpYWwiLCJyZXN0aXR1dGlvbiIsInJlbGF4YXRpb24iLCJmcmljdGlvbiIsImNvbnRhY3RTa2luU2l6ZSIsInNldEdsb2JhbFN0aWZmbmVzcyIsImxheWVyX2luZGV4IiwiY29sbGlzaW9uX2xheWVyc19udW1iZXIiLCJuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXgiLCJsYXllcnMiLCJpc19vdmVyIiwibGF5ZXJfeiIsImFkZEF0Iiwicm90YXRpb25fa2V5Iiwicm90YXRpb25fbm9ybWFsIiwic3BlZWRzIiwiYXJyb3dfaW5wdXRzIiwiY3JlYXRlQ3Vyc29yS2V5cyIsImdldF90cmFuc2l0aW9uX2RpcmVjdGlvbnMiLCJjb250YWN0IiwiaW50ZXJhY3RhYmxlX29iamVjdF9ib2R5IiwiYm9keUEiLCJib2R5QiIsImV2ZW50c19pbl9wb3MiLCJoYXNfc3RhaXIiLCJpdGVtX3Bvc2l0aW9uIiwicG9zaXRpb25fYWxsb3dlZCIsIm5vcm1hbF9wdXNoIiwibm9ybWFscyIsIm5hcnJvd3BoYXNlIiwiY29udGFjdEVxdWF0aW9ucyIsIm5vcm1hbEEiLCJjaGVja19pbnRlcmFjdGFibGVfb2JqZWN0cyIsImNvbnRhY3RfcG9pbnRfZGlyZWN0aW9ucyIsIm5vcm1hbCIsIndhbGxfZGlyZWN0aW9uIiwicmVsYXRpdmVfZGlyZWN0aW9uIiwidXBkYXRlX2Fycm93X2lucHV0cyIsInNldF9zcGVlZF9mYWN0b3JzIiwic2V0X2N1cnJlbnRfYWN0aW9uIiwiY29sbGlzaW9uX2RlYWxlciIsInNldENpcmNsZSIsIm1hc3MiLCJpbmVydGlhIiwiRk9PVFNURVBTX1RUTCIsIlNFQ09ORCIsIldBTEtJTkdfVElNRV9JTlRFUlZBTCIsIlJVTk5JTkdfVElNRV9JTlRFUlZBTCIsIklOSVRJQUxfQUNUSU9OIiwiSU5JVElBTF9ESVJFQ1RJT04iLCJmb290X2ZvcndhcmRfdHlwZXMiLCJkZWFkX3N0ZXBzIiwiZGVhZF9pbmRleCIsImZvb3RfZm9yd2FyZCIsImZvb3RzdGVwc190aW1lX2ludGVydmFsIiwibmV3X3N0ZXBfdGltZXIiLCJleHBpcmVfdGltZXIiLCJmb290c3RlcHNfc3ByaXRlX2Jhc2UiLCJleHBpcmVkIiwicm90YXRpb24iLCJnZXRJbmRleCIsInVwZGF0ZV9mb290IiwiZm9vdHN0ZXBzX3R5cGUiLCJhbmltYXRpb25fbmFtZSIsImZvb3RzdGVwc19zcHJpdGUiLCJwb3NpdGlvbl9mb290c3RlcHMiLCJraWxsX3N0ZXAiLCJzZXRfZXhwaXJlX3RpbWVyIiwic2V0X25ld19zdGVwX3RpbWVyIiwiZm9yY2VfZGVzdHJveSIsInJlbW92ZUFsbCIsImNsZWFuX2FsbCIsIkV2ZW50UXVldWUiLCJjbGltYl9ldmVudCIsInF1ZXVlIiwidGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbiIsImZpcmVfZnVuY3Rpb24iLCJmaXJlIiwiZXZlbnRfdGltZXJzIiwidHJpZ2dlcmVkX2V2ZW50cyIsImN1cnJlbnRfZXZlbnQiLCJldmVudF9xdWV1ZSIsImp1bXBfbmVhcl9jb2xsaXNpb24iLCJhZHZhbmNlX2VmZmVjdCIsImV2ZW50X3RyaWdnZXJlZCIsInRpbWVyIiwiZmlyZV9ldmVudCIsInByb2Nlc3NfcXVldWUiLCJpbnRlcmFjdGlvbl9wYXR0ZXJucyIsIlRJS19UQUtfVE9FIiwiQ1JPU1MiLCJjb250cm9sX2VuYWJsZSIsImZpcmVfbmV4dF9zdGVwIiwic2VhcmNoX2Zvcl9ucGMiLCJucGNzIiwibnBjIiwiaXNfY2xvc2UiLCJzZXRfbnBjX2V2ZW50IiwibWFuYWdlX25wY19kaWFsb2ciLCJmaXJlX25wY19ldmVudHMiLCJzZXRfbnBjX2FuZF9oZXJvX2RpcmVjdGlvbnMiLCJyZXNldF9ucGNfZGlyZWN0aW9uIiwibnBjX3giLCJucGNfeSIsImludGVyYWN0aW9uX3BhdHRlcm4iLCJpbnRlcmFjdGlvbl9kaXJlY3Rpb25zIiwiZ2V0X2ludGVyYWN0aW9uX2RpcmVjdGlvbnMiLCJ0YXJnZXRfZGlyZWN0aW9uIiwiZGlhbG9nX21hbmFnZXIiLCJEaWFsb2dNYW5hZ2VyIiwidGFyZ2V0X2JvZHlfcmFkaXVzIiwiYmF0dGxlIiwiQmF0dGxlIiwic3RhcnRfYmF0dGxlIiwibG9ncyIsImxvZ190ZXh0IiwicmVzb2x2ZV9hbmltIiwicHBfZGFtYWdlIiwic3RhdF9zdHIiLCJDaGFyc1N0YXR1c1dpbmRvdyIsInN0YXJ0X2J1dHRvbnNfa2V5cyIsInNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5Iiwic3RhcnRfaG9yaXpvbnRhbF9tZW51IiwiSG9yaXpvbnRhbE1lbnUiLCJzdGFydF9idXR0b25fcHJlc3MiLCJpbm5lcl9idXR0b25zX2tleXMiLCJkZXNjcmlwdGlvbl93aW5kb3ciLCJEZXNjcmlwdGlvbldpbmRvdyIsImRqaW5uX3dpbmRvdyIsIkRqaW5uV2luZG93IiwicHN5bmVyZ3lfd2luZG93IiwiUHN5bmVyZ3lXaW5kb3ciLCJpdGVtX3dpbmRvdyIsIkl0ZW1XaW5kb3ciLCJzdW1tb25fd2luZG93IiwiU3VtbW9uV2luZG93IiwiYXZhdGFyX3Nwcml0ZSIsImlubmVyX2hvcml6b250YWxfbWVudSIsImlubmVyX2J1dHRvbl9wcmVzcyIsImlubmVyX21lbnVfY2FuY2VsIiwiaGFzX3N0YW5kYnlfZGppbm4iLCJjdXJyZW50X2J1dHRvbnMiLCJkamlubmlfYWxyZWFkeV91c2VkIiwiY3VycmVudF9jaGFyX2luZGV4IiwiY2hhbmdlX2NoYXIiLCJvbl9hYmlsaXR5X2Nob29zZSIsImRlc2NyaXB0aW9uX29uX3RvcCIsImFjdGlvbl90eXBlIiwiZWxlbSIsInNldF9kZXNjcmlwdGlvbiIsInBvcF9hYmlsaXR5IiwiYmVmb3JlX2NoYXIiLCJhYmlsaXRpZXNfY291bnQiLCJuZXh0X2NoYXIiLCJhYmlsaXR5X2luZm8iLCJoaWRlX2F2YXRhciIsIm9uX3RvcCIsIlBTWV9HQUlOX0NPTE9SIiwiUFNZX0xPU1RfQ09MT1IiLCJQU1lfSU5GT18yX1kiLCJQU1lfSU5GT18xX1kiLCJ3aW5kb3dfYWN0aXZlIiwibWlzY19zcHJpdGVzX2luX3dpbmRvdyIsImJ1dHRvbiIsImdldF9tYXhfcGFnZXMiLCJnZXRfbWF4X2VsZW1fb25fcGFnZSIsImNoYW5nZV9wYWdlIiwiY2hhbmdlX2FiaWxpdHkiLCJnZXRfYWJpbGl0eV9pbmRleCIsInNldF9hYmlsaXR5X2luZGV4IiwiZXhwYW5kZWQiLCJhYmlsaXR5X2luZGV4IiwiY2hvb3Nlbl9hYmlsaXR5IiwiYWxsX2FiaWxpdGllcyIsInNldF9hYmlsaXRpZXNfbGlzdCIsInBzeV9zZWFsZWQiLCJwc3luZXJneV9uYW1lX3Nwcml0ZSIsInBwX3Nwcml0ZSIsInBzeW5lcmd5X2Nvc3Rfc3ByaXRlIiwidXBkYXRlX3RleHRfY29sb3IiLCJsb3N0X2FiaWxpdGllcyIsImN1cnJlbnRfYWJpbGl0aWVzIiwicHJldmlld192YWx1ZXMiLCJwcmV2aWV3X2RqaW5uX2NoYW5nZSIsIm5leHRfZGppbm5pX3N0YXR1cyIsIm5leHRfYWJpbGl0aWVzIiwiY3VycmVudF9zZXQiLCJuZXh0X3NldCIsImludGVyc2VjdGlvbl9hYmlsaXRpZXMiLCJwc3lfaW5mb18xX3RleHQiLCJwc3lfaW5mb18yX3RleHQiLCJzZXRfYWJpbGl0aWVzIiwiY2xlYXJfcHN5X2dhaW4iLCJuZXh0X2RqaW5uX3N0YXR1cyIsInN0YXRzX3dpbmRvdyIsIkRqaW5uU3RhdHNXaW5kb3ciLCJkamlubl9uYW1lcyIsInN0YXJzX3Nwcml0ZXMiLCJjaGFuZ2VfZGppbm4iLCJnZXRfZGppbm5faW5kZXgiLCJzZXRfZGppbm5faW5kZXgiLCJwc3luZXJneV93aW5kb3dfb3BlbiIsInRoaXNfZGppbm4iLCJkamlubl9pbmRleCIsImdldF9uZXh0X3N0YXR1cyIsImNvbmZpZ19wYWdlIiwiY2FsbF9zZXRfZGVzY3JpcHRpb24iLCJ1cGRhdGVfc3RhdHMiLCJhbGxfZGppbm5pIiwiYmFzZV95Iiwic3RhciIsInJlY19udW1iZXIiLCJuZXh0X3N0YXR1cyIsInNldF9kamlubiIsInN0YXRzX2tleXMiLCJsYWJlbHMiLCJiZWZvcmVfc3RhdHMiLCJhZnRlcl9zdGF0cyIsInVwX2Fycm93cyIsImRvd25fYXJyb3dzIiwiaGlkZV9hcnJvd3MiLCJiZWZvcmVfY2xhc3NfdGV4dCIsImFmdGVyX2NsYXNzX3RleHQiLCJTSElGVF9CVVRUT05fWCIsIlNISUZUX0JVVFRPTl9ZIiwiY3VycmVudF9zdGF0IiwibmV4dF9zdGF0Iiwic2V0X3N0YXRzIiwiaXRlbV9uYW1lcyIsIm90aGVyX3Nwcml0ZXMiLCJjaGFuZ2VfaXRlbSIsImdldF9pdGVtX2luZGV4Iiwic2V0X2l0ZW1faW5kZXgiLCJ0aGlzX2l0ZW0iLCJpdGVtX2luZGV4IiwiYWxsX2l0ZW1zIiwiaXRlbV95IiwiSVRFTV9JQ09OX1giLCJzdW1tb25fbmFtZXMiLCJjaGFuZ2Vfc3VtbW9uIiwiZ2V0X3N1bW1vbl9pbmRleCIsInNldF9zdW1tb25faW5kZXgiLCJkamlubl9udW1iZXJzX3dpbmRvdyIsIlN1bW1vbkRqaW5uU3RhbmRieVdpbmRvdyIsInN1bW1vbnMiLCJzdW1tb25faW5kZXgiLCJzZXRfbnVtYmVycyIsImFsbF9zdW1tb25zIiwic3VtbW9uX3kiLCJhdmFpbGFibGUiLCJzdW1tb24iLCJ0ZXh0cyIsInRpbWVycyIsImRqaW5uX251bWJlciIsImJsaW5rIiwiYWJpbGl0eV9uYW1lIiwiYWJpbGl0eV9uYW1lX3giLCJzdGFyX3giLCJ3aW5kb3dfc3ByaXRlcyIsImljb25fc3ByaXRlX3NoZWV0IiwiaWNvbiIsInBwX3ZhbHVlIiwicmVxcyIsInJlcSIsInJlcV90ZXh0Iiwic2V0X2luZm8iLCJhbGxpZXMiLCJlbmVtaWVzIiwiY2hhcl9jaG9zZW4iLCJhbGx5IiwiYXZhaWxhYmxlX3RhcmdldCIsImFnaWxpdHkiLCJtdWx0aV90dXJuIiwidHVybl9udW1iZXIiLCJ0dXJuX3F1YW50aXR5IiwicHJpb3JpdHkiLCJyZWxhdGl2ZV9hdGsiLCJiYXNlX2RhbWFnZSIsImlzX3BzeW5lcmd5IiwiY2FzdGVyX3Bvd2VyIiwidGFyZ2V0X3Jlc2lzdCIsInNwZWNpYWxfcGh5c2ljYWxfYXR0YWNrIiwicG93ZXJfbXVsdGlwbGllciIsImRqaW5uaV91c2VkIiwiYmFzZV9jaGFuY2UiLCJ2dWxuZXJhYml0eSIsImxldmVsX2tleSIsInBvaXNvbl90eXBlIiwicG9pc29uX2ZhY3RvciIsIm5vdF9hdmFpbGFibGUiLCJyZW5kZXJfZnVuY3Rpb24iLCJiYXR0bGVfYW5pbV9rZXkiLCJyZWNpcGVfa2V5Iiwic3ByaXRlX2xvYWRlciIsInJlY2lwZV9sb2FkZXIiLCJzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZSIsImFsbF9zdWNjZWVkIiwic3ByaXRlX2xvYWRlcl9wcm9taXNlIiwicmVjaXBlX2xvYWRlcl9wcm9taXNlX3Jlc29sdmUiLCJvbkZpbGVDb21wbGV0ZSIsInByb2dyZXNzIiwiZmlsZWtleSIsInN1Y2Nlc3MiLCJyZWNpcGVfbG9hZGVyX3Byb21pc2UiLCJsb2FkX2NvbXBsZXRlX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfY29tcGxldGVfcHJvbWlzZSIsImFuaW1hdGlvbl9yZWNpcGUiLCJnZXRKU09OIiwiQmF0dGxlQW5pbWF0aW9uIiwieF9zZXF1ZW5jZSIsInlfc2VxdWVuY2UiLCJ4X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ5X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UiLCJ4X3NjYWxlX3NlcXVlbmNlIiwieV9zY2FsZV9zZXF1ZW5jZSIsInhfYW5jaG9yX3NlcXVlbmNlIiwieV9hbmNob3Jfc2VxdWVuY2UiLCJhbHBoYV9zZXF1ZW5jZSIsInJvdGF0aW9uX3NlcXVlbmNlIiwic3RhZ2VfYW5nbGVfc2VxdWVuY2UiLCJodWVfYW5nbGVfc2VxdWVuY2UiLCJ0aW50X3NlcXVlbmNlIiwiZ3JheXNjYWxlX3NlcXVlbmNlIiwiY29sb3JpemVfc2VxdWVuY2UiLCJjdXN0b21fZmlsdGVyX3NlcXVlbmNlIiwicGxheV9zZXF1ZW5jZSIsInNldF9mcmFtZV9zZXF1ZW5jZSIsImJsZW5kX21vZGVfc2VxdWVuY2UiLCJpc19wYXJ0eV9hbmltYXRpb24iLCJ0YXJnZXRzX3Nwcml0ZXMiLCJwbGF5X3Byb21pc2VfcmVzb2x2ZSIsInBsYXlfcHJvbWlzZSIsInJlbW92ZVRleHR1cmVBdGxhcyIsInJlbW92ZUpTT04iLCJzcHJpdGVzX2tleXMiLCJncm91cF9lbmVteSIsInN1cGVyX2dyb3VwIiwic3RhZ2VfY2FtZXJhIiwiYmFja2dyb3VuZF9zcHJpdGVzIiwic3ByaXRlc19wcmV2X3Byb3BlcnRpZXMiLCJzdGFnZV9wcmV2X3ZhbHVlIiwieDAiLCJ5MCIsInRyYWlsc19vYmpzIiwidHJhaWxzX2luZm8iLCJ0cmFpbHMiLCJpbml0aWFsaXplX3RyYWlsX3RleHR1cmVzIiwidHJhaWxfZnJhbWVfZGlmZiIsInRyYWlsc19tb2RlIiwicGVyX3RhcmdldCIsInBzeV9zcHJpdGUiLCJiYWNrX2dyb3VwIiwiZnJvbnRfZ3JvdXAiLCJhZGRDaGlsZCIsImFkZENoaWxkQXQiLCJmcmFtZVRvdGFsIiwiYmF0dGxlX2luZGV4IiwieF9oaXN0b3J5IiwiZnJhbWVfZGlmZiIsInlfaGlzdG9yeSIsInNldF9maWx0ZXJzIiwiYmxlbmRfbW9kZSIsInRyYWlsX3RleHR1cmUiLCJyZW5kZXJUZXh0dXJlIiwidHJhaWxfc3ByaXRlIiwidHJhaWxfdGV4dHVyZV8yIiwidHJhaWxfc3ByaXRlXzIiLCJ0ZXh0dXJlXzEiLCJ0ZXh0dXJlXzIiLCJjYXN0ZXJfZmlsdGVyIiwidGFyZ2V0c19maWx0ZXIiLCJiYWNrZ3JvdW5kX2ZpbHRlciIsInNwcml0ZXNfZmlsdGVycyIsImZpbHRlcnMiLCJmaW5pc2hfY2FsbGJhY2siLCJwbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSIsInBsYXlfc3ByaXRlX3NlcXVlbmNlIiwicGxheV9ibGVuZF9tb2RlcyIsInBsYXlfZmlsdGVyX3Byb3BlcnR5IiwicGxheV9zdGFnZV9hbmdsZV9zZXF1ZW5jZSIsInVubW91bnRfYW5pbWF0aW9uIiwic2VxIiwiaW5uZXJfcHJvcGVydHkiLCJzcHJpdGVfaW5kZXgiLCJzZXF1ZW5jZSIsInRhcmdldF9wcm9wZXJ0eSIsImNoYWluZWRfdHdlZW5zIiwiYXV0b19zdGFydF90d2VlbiIsImdldF9zcHJpdGVzIiwicHJvbWlzZXNfc2V0IiwidGhpc19zcHJpdGUiLCJ1bmlxX2tleSIsInNlcV90byIsInRvX3ZhbHVlIiwiZ2V0X2FuZ2xlX2J5X2RpcmVjdGlvbiIsImlzX2Fic29sdXRlIiwieW95byIsInN0YXJ0X2RlbGF5IiwiZHVyYXRpb24iLCJyZXNvbHZlX2Z1bmN0aW9uIiwidGhpc19wcm9taXNlIiwiZm9yY2Vfc3RhZ2VfdXBkYXRlIiwib25TdGFydCIsInBsYXlfc2VxIiwicmV2ZXJzZWQiLCJoaWRlX29uX2NvbXBsZXRlIiwiYmxlbmRfbW9kZV9zZXEiLCJzZWNvbmRhcnlfcHJvcGVydGllcyIsImZpbHRlcl9zZXEiLCJ0aGlzX3Byb3BlcnR5Iiwic2Vjb25kYXJ5X3Byb3BlcnR5Iiwic3RhZ2VfYW5nbGVfc2VxIiwidW5zaGlmdCIsInJlbmRlclhZIiwiY3VycmVudF9hbmdsZSIsImZvdXJ0aF9xdWFkcmFudCIsInRoaXNfZGlyZWN0aW9uIiwibmV3X3RhcmdldCIsInRhcmdldF9kZWx0YSIsIm5ld190YXJnZXRfZGVsdGEiLCJtaXNjX2FuaW1hdGlvbnNfZGIiLCJjbGFzc2VzX2RiIiwiYWJpbGl0aWVzX2RiIiwiaXRlbXNfZGIiLCJkamlubmlfZGIiLCJlbmVtaWVzX2RiIiwibWFwc19kYiIsIm1haW5fY2hhcnNfZGIiLCJzaG9wa2VlcF9kaWFsb2dfZGIiLCJzaG9wc19kYiIsInNob3BrZWVwX2RpYWxvZyIsImludGVyYWN0YWJsZV9vYmplY3RfZGF0YSIsImVuZW15X3BhcnR5X2RhdGEiLCJucGNfZGF0YSIsInN1bW1vbl9kYXRhIiwibG9hZF9tYXBzX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfbWFwc19wcm9taXNlIiwibG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9tYXBzIiwiaW5pdGlhbGl6ZV9jbGFzc2VzIiwibG9hZF9lbmVtaWVzX3Nwcml0ZXNfcHJvbWlzZSIsImxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9lbmVtaWVzIiwiaW5pdGlhbGl6ZV9kamlubmkiLCJsb2FkX2RqaW5uaV9zcHJpdGVzX3Byb21pc2UiLCJsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmUiLCJkamlubmlfc3ByaXRlcyIsImluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMiLCJsb2FkX2FiaWxpdGllc19wcm9taXNlIiwibG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmUiLCJpbml0aWFsaXplX2FiaWxpdGllcyIsImxvYWRfaXRlbXNfcHJvbWlzZSIsImxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9pdGVtcyIsImNvaW5zIiwiZ2FtZV90aWNrZXRzIiwiY29pbnNfcmVtYWluaW5nIiwidGlja2V0c19ib3VnaHQiLCJsb2FkX2NoYXJzX3Byb21pc2UiLCJsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlIiwiaW5pdGlhbGl6ZV9tYWluX2NoYXJzIiwibG9hZF9taXNjX3Byb21pc2UiLCJpbml0aWFsaXplX21pc2NfZGF0YSIsInNob3BzX2xpc3QiLCJpbml0aWFsaXplX3Nob3BzIiwiaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMiLCJTaG9wTWVudSIsImluaXRpYWxpemVfbWVudSIsImNsYXNzX2RhdGEiLCJDbGFzc2VzIiwibG9hZF9wcm9taXNlX3Jlc29sdmUiLCJsb2FkX3Byb21pc2VzIiwiY2hhcl9kYXRhIiwic2V0QWN0aW9uU3ByaXRlc2hlZXQiLCJzcHJpdGVzaGVldF9pbWciLCJzZXRBY3Rpb25EaXJlY3Rpb25zIiwiZGlyZWN0aW9uc19mcmFtZXNfbnVtYmVyIiwic2V0QWN0aW9uRnJhbWVSYXRlIiwic2V0QWN0aW9uTG9vcCIsImxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlIiwiZ2VuZXJhdGVBbGxGcmFtZXMiLCJsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UiLCJsb2FkU3ByaXRlc2hlZXRzIiwiYWJpbGl0eV9kYXRhIiwiTW92ZUZpZWxkUHN5bmVyZ3kiLCJGcm9zdEZpZWxkUHN5bmVyZ3kiLCJHcm93dGhGaWVsZFBzeW5lcmd5IiwiRmllbGRBYmlsaXRpZXMiLCJzZXRfYm9vdHN0cmFwX21ldGhvZCIsImluaXRfbW92ZSIsInNldF9jYXN0X2ZpbmlzaGVyX21ldGhvZCIsInVuc2V0X2h1ZV9zaGlmdGVyIiwiaGFuZF9zcHJpdGVfYmFzZSIsImhhbmRfc3ByaXRlIiwiZW1pdHRlciIsImZpbmFsX2VtaXR0ZXIiLCJjb250cm9sc19hY3RpdmUiLCJmaXJlX3B1c2giLCJmaW5pc2hfaGFuZCIsInVuc2V0X2hlcm9fY2FzdF9hbmltIiwidGFyZ2V0X29ubHlfcHVzaCIsInhfdGFyZ2V0IiwieV90YXJnZXQiLCJuZWVkX2NoYW5nZSIsImpvaW5fZGlyZWN0aW9ucyIsImRlc3RfZGlyZWN0aW9uIiwic29ydF9zcHJpdGVzIiwidHJhbnNsYXRlX3giLCJ0cmFuc2xhdGVfeSIsInRhcmdldF9odWVzaGlmdF90aW1lciIsImh1ZV9hZGp1c3QiLCJmbGlwX3RpbWVyIiwiZmFrZV9oYW5kX3NjYWxlIiwic3RhcnRfZmluYWxfZW1pdHRlciIsInVuc2V0X2VtaXR0ZXIiLCJtYWtlUGFydGljbGVzIiwibWluUGFydGljbGVTcGVlZCIsIm1heFBhcnRpY2xlU3BlZWQiLCJncmF2aXR5IiwicGFydGljbGUiLCJzZXRGcmFtZSIsImZpbmFsX2VtaXR0ZXJfcGFydGljbGVzX2NvdW50IiwibGlmZXRpbWUiLCJ1bnNldF9maW5hbF9lbWl0dGVyIiwic2V0X2VtaXR0ZXIiLCJzZXRfZmluYWxfZW1pdHRlciIsInNldF9oYW5kIiwidHJhbnNsYXRlX2hhbmQiLCJzdGFydF9lbWl0dGVyIiwiYWZ0ZXJfaW5pdCIsImFmdGVyX2Rlc3Ryb3kiLCJiZWZvcmVfZGVzdHJveSIsInN0b3BfYXNrZWQiLCJiYWNrX2F1cmEiLCJmcm9udF9hdXJhIiwic29ydF9mdW5jdGlvbiIsInN0ZXBfaGVpZ2h0IiwiaW5pdGlhbF9mcm9udF95IiwiaW5pdGlhbF9iYWNrX3kiLCJhdXJhcyIsInR3ZWVuX2EiLCJ0d2Vlbl9iIiwidHdlZW5fYyIsInR3ZWVuX2FhIiwicmluZ191cF90aW1lIiwiT3V0IiwidHdlZW5fY2MiLCJibGlua19jb3VudGVyIiwiYmxpbmtfdGltZXIiLCJodWVfdGltZXIiLCJncmF5IiwiY29sb3JpemVfaW50ZW5zaXR5IiwiY29sb3JpemUiLCJQT1NfWCIsIlBPU19ZIiwic2V0X3NpbmdsZV9saW5lX3RleHQiLCJ2ZXJ0aWNhbF9hZGp1c3QiLCJUT1RBTF9UVVJOU19TTk9XRkxBS0VTIiwiaW5pdF9zbm93Zmxha2VzIiwic25vd2ZsYWtlX3Nwcml0ZSIsInJvdGF0aW9uX2ZhY3RvciIsInhfZGVzdCIsInlfZGVzdCIsInNwaXJhbF9hbmdsZSIsInNpZ25feCIsInNpZ25feSIsIlNOT1dGTEFLRVNfQ09VTlQiLCJpbml0X3BpbGxhciIsImNvbG9yX2ZpbHRlcnMiLCJncm93X3BpbGxhciIsInNldF9wZXJtYW5lbnRfYmxpbmsiLCJvbkRlc3Ryb3kiLCJpbml0X2J1YmJsZXMiLCJtYXhfeF9zcGVlZCIsIm1heF95X3NwZWVkIiwibWluX3hfc3BlZWQiLCJtaW5feV9zcGVlZCIsImVtaXR0ZXJfd2lkdGgiLCJlbWl0dGVyX2hlaWdodCIsImluY3JlYXNlX2R1cmF0aW9uIiwiR1JPV1RIX01BWF9SQU5HRSIsInBhcnRpY2xlX2ZpbHRlciIsIm1heFBhcnRpY2xlU2NhbGUiLCJtaW5QYXJ0aWNsZVNjYWxlIiwiZ3Jvd19zcHJvdXQiLCJtaXNzX3RhcmdldCIsImdyb3dfY2VudGVyX3giLCJncm93X2NlbnRlcl95IiwibWlzc190YXJnZXRfc3ByaXRlIiwiaXRlbV9kYXRhIiwiSXRlbSIsImRqaW5uX2RhdGEiLCJzdGFuZGJ5IiwiZnJhbWVzX3JhdGUiLCJiYXNlX3BhdGgiLCJiYXR0bGVfc3ByaXRlc2hlZXQiLCJwb3NpdGlvbnMiLCJmcmFtZXNfbnVtYmVyIiwibWFwcyIsIm1hcF9kYXRhIiwidGlsZXNldF9rZXlfbmFtZSIsImNvbGxpc2lvbl9rZXlfbmFtZXMiLCJ0aWxlc2V0X2ZpbGVzIiwiY29sbGlzaW9uX2ZpbGVzIiwibGF6eV9sb2FkIiwibG9hZF9tYXBfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF9tYXBfcHJvbWlzZSIsImxvYWRfbWFwX2Fzc2V0cyIsInRpbGVzZXRfbmFtZSIsInBoeXNpY3NfbmFtZXMiLCJ0aWxlc2V0X2ltYWdlX3VybCIsInRpbGVzZXRfanNvbl91cmwiLCJwaHlzaWNzX2pzb25zX3VybCIsImFzc2V0c19sb2FkZWQiLCJzZW5kX3RvX2JhY2tfbGlzdCIsInNlbmRfdG9fZnJvbnRfbGlzdCIsImhhc19zb3J0X2Z1bmN0aW9uIiwieV9zb3J0IiwiR3JvdXAiLCJTT1JUX0FTQ0VORElORyIsInNoYWRvd19pbmRleCIsInNlbmRUb0JhY2siLCJmcmVlemVfYm9keSIsIm9uX2NvbXBsZXRlIiwibG9hZF90aWxlbWFwX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfaW1hZ2VfcHJvbWlzZV9yZXNvbHZlIiwibG9hZF90aWxlbWFwX3Byb21pc2UiLCJ0aWxlbWFwIiwiVGlsZW1hcCIsIlRJTEVEX0pTT04iLCJsb2FkX2ltYWdlX3Byb21pc2UiLCJwaHlzaWNzX3Byb21pc2VzIiwibG9hZF9waHlzaWNzX3Byb21pc2VfcmVzb2x2ZSIsImxvYWRfcGh5c2ljc19wcm9taXNlIiwibG9hZFBvbHlnb24iLCJpbnRlcmFjdGFibGVfb2JqIiwiZ2V0VGlsZSIsInJhd19wcm9wZXJ0eSIsInByb3BlcnR5X2luZm8iLCJwYXJzZSIsIm1hcF9kaXJlY3Rpb25zIiwiU3BlZWRFdmVudCIsIlRlbGVwb3J0RXZlbnQiLCJkZXN0X2NvbGxpc2lvbl9sYXllciIsIlNsaWRlckV2ZW50Iiwic2hvd19kdXN0IiwiaW5pdGlhbGx5X2FjdGl2ZSIsIlN0ZXBFdmVudCIsInN0ZXBfZGlyZWN0aW9uIiwiQ29sbGlzaW9uRXZlbnQiLCJJbnRlcmFjdGFibGVPYmplY3RzIiwicHN5bmVyZ3lfa2V5IiwicHVzaGFibGUiLCJpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvIiwiZnJhbWVzX2NvdW50IiwiaW5pdGlhbF9jb25maWciLCJpbml0aWFsaXplX3JlbGF0ZWRfZXZlbnRzIiwibnBjX3Nwcml0ZV9pbmZvIiwic2hhZG93X2tleSIsInNldF9zcHJpdGVfYXNfbnBjIiwiY3JlYXRlTGF5ZXIiLCJyZXNpemVXb3JsZCIsImxvYWRfcHJvbWlzZSIsImFkZFRpbGVzZXRJbWFnZSIsInRpbGVzZXRzIiwidGlsZXNldCIsInRpbGVfaW5kZXgiLCJ0aWxlUHJvcGVydGllcyIsImNyZWF0ZV90aWxlX2V2ZW50cyIsImNyZWF0ZV9ucGNzIiwiY3JlYXRlX2ludGVyYWN0YWJsZV9vYmplY3RzIiwiY29uZmlnX2xheWVycyIsImNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0IiwiY29uZmlnX25wYyIsImZvb3RwcmludCIsInNwcml0ZXNfdG9fcmVtb3ZlIiwib3Blbl9kb29yIiwiY2FtZXJhX2ZhZGVfaW4iLCJsZXJwIiwiY2hhbmdlX21hcCIsInVuc2V0X21hcCIsIm5leHRfbWFwX2tleV9uYW1lIiwidGFyZ2V0X2NvbGxpc2lvbl9sYXllciIsInNldEJvdW5kc1RvV29ybGQiLCJib3VuZHMiLCJjYW1lcmFfZmFkZV9vdXQiLCJmbGFzaCIsIm9uRmxhc2hDb21wbGV0ZSIsImRvb3JfbGF5ZXIiLCJzYW1wbGVfdGlsZSIsImRvb3JfdHlwZV9pbmRleCIsImRvb3JfdHlwZSIsInNvdXJjZV9pbmRleCIsImNsb3NlX2Rvb3JfaW5kZXgiLCJvZmZzZXRzIiwiYmFzZV94IiwiY2xvc2VfZG9vciIsImJhc2Vfb2Zmc2V0IiwibmV4dF94IiwibmV4dF95Iiwic2V0X3RyaWdnZXJlZF9ldmVudCIsInVuc2V0X3RyaWdnZXJlZF9ldmVudCIsImp1bXBfeSIsImxpdHRsZV9zdGVwIiwic2V0X2ZyYW1lIiwic2xpZGVfdGltZSIsInN0YXJ0X3giLCJzdGFydF95IiwiTWFpbk1lbnUiLCJidXR0b25fcHJlc3MiLCJwc3luZXJneV9tZW51IiwiTWFpblBzeW5lcmd5TWVudSIsIml0ZW1fbWVudSIsIk1haW5JdGVtTWVudSIsImRqaW5uX21lbnUiLCJNYWluRGppbm5NZW51IiwiYnV0dG9uX3ByZXNzX2FjdGlvbiIsIm1lbnUiLCJjbG9zZV90aGlzX21lbnUiLCJUT1RBTF9CT1JERVIiLCJQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyIsImNoYXJzX21lbnUiLCJDaGFyc01lbnUiLCJjaGFyX2Nob29zZSIsImNoYXJfY2hhbmdlIiwiYmFzaWNfaW5mb193aW5kb3ciLCJCYXNpY0luZm9XaW5kb3ciLCJzZWxlY3RlZF9jaGFyX2luZGV4IiwiZ3VpZGVfd2luZG93IiwiZ3VpZGVfd2luZG93X3RleHQiLCJjaG9vc2luZ19wc3luZXJneSIsImd1aWRlX3dpbmRvd19tc2dzIiwiY2hvb3NpbmdfY2hhciIsImRlc2NyaXB0aW9uX3dpbmRvd190ZXh0IiwicHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93Iiwic2hvcnRjdXRzX3dpbmRvdyIsInBzeW5lcmd5X2Nob29zZV93aW5kb3ciLCJJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3ciLCJwc3luZXJneV9jaGFuZ2UiLCJwc3luZXJneV9jaG9vc2UiLCJzZXRfcHN5bmVyZ3lfaWNvbnMiLCJzZXRfZ3VpZGVfd2luZG93X3RleHQiLCJzZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQiLCJjbG9zZV9tZW51X2JlbG93IiwiSVRFTV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fSUNPIiwiY2hhcl9jaG9vc2VfY2FuY2VsIiwiaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93IiwiU3RhdHNDaGVja1dpdGhJdGVtV2luZG93IiwiY2hvb3NpbmdfaXRlbSIsImFycmFuZ2Vfd2luZG93IiwiYXJyYW5nZV93aW5kb3dfdGV4dCIsIml0ZW1fb3ZlcnZpZXdfd2luZG93IiwiaXRlbV9jaG9vc2Vfd2luZG93IiwiaXRlbV9jaGFuZ2UiLCJpdGVtX2Nob29zZSIsIml0ZW1fb3B0aW9uc193aW5kb3ciLCJJdGVtT3B0aW9uc1dpbmRvdyIsImNob29zaW5nX2dpdmVfZGVzdGluYXRpb24iLCJzZXRfaXRlbV9pY29ucyIsImNvbXBhcmVfaXRlbXMiLCJhZnRlcl9jaGFyX2Nob29zZV9vbl9naXZlIiwic2hpZnRfaXRlbV9vdmVydmlldyIsIm9uX2l0ZW1fY2hvb3NlX2Nsb3NlIiwic2V0X2NoYXJfYnlfaW5kZXgiLCJjbG9zZV9pdGVtX2Nob29zZSIsInVwZGF0ZV9pbmZvIiwiSVRFTV9OQU1FX1kiLCJ0ZXh0X3Nwcml0ZXMiLCJ1c2UiLCJPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkciLCJnaXZlIiwib3B0aW9uX2FjdGl2ZSIsImhvcml6b250YWxfaW5kZXgiLCJ2ZXJ0aWNhbF9pbmRleCIsImdldF9ob3Jpem9udGFsX2luZGV4Iiwic2V0X2hvcml6b250YWxfaW5kZXgiLCJnZXRfdmVydGljYWxfaW5kZXgiLCJzZXRfdmVydGljYWxfaW5kZXgiLCJnaXZlX2l0ZW1fb3B0aW9uc193aW5kb3ciLCJHaXZlSXRlbU9wdGlvbnNXaW5kb3ciLCJpdGVtX3F1YW50aXR5X21hbmFnZXJfd2luZG93IiwiSXRlbVF1YW50aXR5TWFuYWdlcldpbmRvdyIsImRyb3BfaXRlbV93aW5kb3ciLCJEcm9wSXRlbVdpbmRvdyIsImFjdGlvbl9tZXNzYWdlX3dpbmRvdyIsImljb25fc3ByaXRlIiwiY2hhcl9uYW1lIiwiZXF1aXBfc3ByaXRlIiwiSVRFTV9JQ09OX1kiLCJpdGVtX2NvdW50X3Nwcml0ZSIsInN0YXRzX3VwZGF0ZV9jYWxsYmFjayIsImRlYWN0aXZlIiwib25fZ2l2ZV9jYWxsYmFjayIsImRlc3RpbmF0aW9uX2NoYXIiLCJhZnRlcl9jaG9vc2VfY2FsbGJhY2siLCJ1bm1vdW50X2dpdmVfd2luZG93X3NldCIsImRlc3RfaXRlbV9vYmoiLCJhbnN3ZXIiLCJyZW1vdmVfaXRlbSIsImFkZF9pdGVtIiwib3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3ciLCJvcGVuX2Ryb3Bfd2luZG93IiwiZHJvcHBlZCIsInNldF9oZWFkZXIiLCJzZXRfYXZhaWxhYmxlX29wdGlvbnMiLCJ1bnNldF9oZWFkZXIiLCJpY29uX25hbWUiLCJhbnN3ZXJfaW5kZXgiLCJnZXRfYW5zd2VyX2luZGV4Iiwic2V0X2Fuc3dlcl9pbmRleCIsInF1YW50aXR5X3RvX3JlbW92ZSIsIklORk9fWCIsIklDT05fWSIsInVuc2V0X2luZm8iLCJDSEFSX05BTUVfWSIsIlJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSIsImNob29zZW5fcXVhbnRpdHkiLCJpdGVtX2NvdW50ZXIiLCJJdGVtQ291bnRlciIsInJlbWFpbmluZ193aXRoX2NoYXJfY291bnQiLCJuZXdfYW1vdW50X3dpdGhfZGVzdF9jaGFyX2NvdW50IiwidG9fcmVtb3ZlX2NvdW50IiwiZGVzdF9jaGFyX25hbWUiLCJjb25maWciLCJhdmFpbGFibGVfaXRlbXNfY291bnQiLCJjdXJyZW50X3F1YW50aXR5IiwiYWN0aXZlX2Jhcl9ncmFwaGljcyIsImluYWN0aXZlX2Jhcl9ncmFwaGljcyIsImluZGV4X2NoYW5nZV90aW1lIiwiY3JlYXRlX2dyaWQiLCJhZHZhbmNlX3N0ZXAiLCJHUklEX0hFSUdIVCIsIk1BWF9JVEVNUyIsIkdSSURfV0lEVEgiLCJpbml0aWFsX3F1YW50aXR5IiwiY3JlYXRlX2luYWN0aXZlX2JhciIsIkFDVElPTl9URVhUX1kiLCJhc2tpbmdfZm9yX2VxdWlwIiwieWVzX3RleHQiLCJub190ZXh0IiwiYWN0aW9uX3RleHQiLCJwcmV2aWV3X3N0YXRzX3RleHRzIiwiYXR0YWNrX3RleHQiLCJkZWZlbnNlX3RleHQiLCJhZ2lsaXR5X3RleHQiLCJzZXRfY29tcGFyZV9hcnJvd3MiLCJlcXVpcF9zbG90X3Byb3BlcnR5IiwiY3VycmVudF9zdGF0c19wcm9wZXJ0eSIsImNvbXBhcmVfcmVtb3ZpbmciLCJwcmV2aWV3X3N0YXRzIiwiZXF1aXBfc2xvdF9rZXlfbmFtZSIsInByZXZpZXdfc3RhdHNfYnlfZWZmZWN0IiwidXBkYXRlX3ByZXZpZXdfdGV4dCIsImN1cnJlbnRfc3RhdHMiLCJzcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSIsImNoYXJzX3F1aWNrX2luZm9fd2luZG93IiwiQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyIsImRqaW5uX2FjdGlvbl93aW5kb3ciLCJEamlubkFjdGlvbldpbmRvdyIsImRqaW5uaV9saXN0X3dpbmRvdyIsIkRqaW5uTGlzdFdpbmRvdyIsIkNMQVNTX1kiLCJjaGFyX2NsYXNzIiwibGV2ZWxfbnVtYmVyIiwiVklFV19TVEFURVMiLCJjaGFyc19zcHJpdGVzX2dyb3VwIiwic2VsZWN0ZWRfZGppbm5faW5kZXgiLCJjaGFyc19zcHJpdGVzIiwiZGppbm5zX3Nwcml0ZXMiLCJkamlubl9kZXNjcmlwdGlvbiIsImdldF9oaWdobGlnaHRfYmFyIiwib25fYWN0aW9uX2Jhcl9oaWdobGlnaHQiLCJnZXRfbWF4X2NoYXJzIiwiZ2V0X21heF9kamlubiIsIm9uX2NoYXJfY2hhbmdlIiwib25fZGppbm5fY2hhbmdlIiwiZ2V0X2NoYXJfaW5kZXgiLCJzZXRfY2hhcl9pbmRleCIsImdldF94X2N1cnNvciIsImdldF95X2N1cnNvciIsInNpemVzIiwiYWN0aXZlX2RqaW5uX3Nwcml0ZSIsImRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdyIsIkRqaW5uTW9kZUhlYWRlcldpbmRvdyIsImRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQiLCJEamlubkNoYXJTdGF0c1dpbmRvdyIsImRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0IiwiZGppbm5fcHN5bmVyZ3lfd2luZG93IiwiRGppbm5Qc3luZXJneVdpbmRvdyIsImluaXRfZGppbm5fc3ByaXRlcyIsImluaXRfZGppbm5pX3N0YXR1c190ZXh0cyIsImJhcl9oaWdobGlnaHQiLCJzZXR0aW5nX2RqaW5uX3N0YXR1cyIsImNhbmNlbF9kamlubl9zdGF0dXNfc2V0Iiwic2V0X2RqaW5uX29wZXJhdGlvbiIsImNoYW5nZV9kamlubl9zdGF0dXMiLCJzZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4Iiwic2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXgiLCJkamlubmlfc3RhdHVzX3RleHRzIiwiU1RBUl9YX1BBRERJTkciLCJzdGFycyIsInVwZGF0ZV9kamlubl9saXN0IiwiY2hhcl9kamlubmkiLCJ0aGlzX2RqaW5uX25hbWVzIiwiSElHSExJR0hUX1hfUEFERElORyIsInN0YXJfeSIsIkhJR0hMSUdIVF9ZX1BBRERJTkciLCJkamlubl94IiwiZGppbm5feSIsIm5hbWVzIiwic2V0X2FjdGlvbl90ZXh0IiwidXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uIiwic2V0X2RqaW5uX3Nwcml0ZSIsInN0YXR1c190ZXh0Iiwib3RoZXJfY2hhciIsInNldF9hY3Rpb25fZm9yX3NwZWNpZmljX2RqaW5uIiwiZGFya2VuX2ZvbnRfY29sb3IiLCJkYXJrZW4iLCJyZXNldF9pbmRleCIsInRoaXNfc3RhdHVzZXMiLCJuZXh0X3N0YXR1c2VzIiwibmV4dF9kamlubmkiLCJuZXh0X2RqaW5uIiwidmlld19zdGF0ZSIsImV4ZWN1dGVfb3BlcmF0aW9uIiwicmVwbGFjZV9kamlubiIsInNldF9hY3Rpb25faW5mb190ZXh0IiwibG9hZF9wYWdlIiwiY2hhbmdpbmdfZGppbm5fc3RhdHVzIiwidW5zZXRfcGFnZSIsIkRKSU5OX01VTFRfWCIsIkRKSU5OX01VTFRfWSIsIkNIQVJTX1giLCJDSEFSU19ZIiwib2tfbXNnX3RleHQiLCJkamlubl9zdGF0dXNfdGV4dCIsImRqaW5uX25hbWVfYmVmb3JlX3RleHQiLCJkamlubl9uYW1lX2FmdGVyX3RleHQiLCJkamlubl9zcHJpdGVzIiwiZGppbm5fc3RhdHVzX2Fycm93Iiwic3BhY2ViYXJfa2V5IiwiU1BBQ0VCQVJfS0VZX1giLCJTUEFDRUJBUl9LRVlfWSIsImFjdGlvbl9pbmZvX3RleHQiLCJpbml0X2Fycm93X2JsaW5rcyIsImRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lciIsIlNUQVJfQkVGT1JFX1giLCJTVEFSX0FGVEVSX1giLCJESklOTl9OQU1FX0FGVEVSX1giLCJESklOTl9OQU1FX0JFRk9SRV9YIiwic2V0X2NoYXJfYW5kX2RqaW5uX3Nwcml0ZSIsImNoYXJfc3ByaXRlIiwiaWRsZSIsImRqaW5uX3Nwcml0ZSIsInJlcGVhdERlbGF5IiwidW5tb3VudF93aW5kb3ciLCJlbGVtZW50c19saXN0Iiwid2luX3giLCJjaGFyX25hbWVfdGV4dCIsImxldmVsX251bWJlcl90ZXh0IiwibmV3X2NsYXNzX3RleHQiLCJkamlubl9udW1iZXJfdGV4dHMiLCJzdGF0c19jdXJyZW50X3RleHRzIiwic3RhdHNfbmV4dF90ZXh0cyIsImNsYXNzX25hbWVfYXJyb3ciLCJjbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyIiwiREpJTk5fTlVNQkVSX1giLCJzdGFyX3Nwcml0ZSIsIkRKSU5OX05VTUJFUl9ZIiwiYXJyb3dfc3ByaXRlIiwic3BhY2ViYXJfY2FsbGJhY2siLCJwYWdlX3NoaWZ0IiwiaGlkZGVuIiwiYWN0aW9uX2Rlc2NyaXB0aW9uX3RleHQiLCJkamlubl9uYW1lX3RleHQiLCJzaGlmdF9rZXkiLCJTSElGVF9LRVlfWCIsIlNISUZUX0tFWV9ZIiwiREpJTk5fTkFNRV9YIiwiREpJTk5fTkFNRV9ZIiwibWlzY19kYiIsIm1pc2NfZGF0YSIsInNob3AiLCJub3JtYWxfaXRlbV9saXN0IiwiYXJ0aWZhY3RfbGlzdCIsIndpbmRvd3NfbW9kZSIsImN1cnJlbnRfaW5kZXgiLCJjdXJzb3JfbWFuYWdlciIsIkN1cnNvck1hbmFnZXIiLCJDb250cm9sTWFuYWdlciIsIkJ1dHRvblNlbGVjdE1lbnUiLCJucGNfZGlhbG9nIiwiU2hvcGtlZXBEaWFsb2ciLCJ5ZXNub19hY3Rpb24iLCJZZXNOb01lbnUiLCJpbnZfd2luIiwiSW52ZW50b3J5V2luZG93Iiwib25faW52X3dpbl9jaGFuZ2UiLCJidXlfc2VsZWN0IiwiQnV5U2VsZWN0TWVudSIsIm9uX2J1eV9zZWxlY3RfY2hhbmdlIiwiZXFfY29tcGFyZSIsIkVxdWlwQ29tcGFyZSIsInF1YW50X3dpbiIsIlNob3BJdGVtUXVhbnRpdHlXaW5kb3ciLCJjaGFyX2Rpc3BsYXkiLCJTaG9wQ2hhckRpc3BsYXkiLCJvbl9jaGFyX2Rpc3BsYXlfY2hhbmdlIiwiaXRlbV9wcmljZV93aW4iLCJ5b3VyX2NvaW5zX3dpbiIsIml0ZW1fZGVzY193aW4iLCJidXlfbWVudSIsIkJ1eUFydGlmYWN0c01lbnUiLCJzZWxsX21lbnUiLCJTZWxsUmVwYWlyTWVudSIsInlvdXJfY29pbnNfbGFiZWwiLCJ5b3VyX2NvaW5zX3RleHQiLCJpdGVtX25hbWVfdGV4dCIsIml0ZW1fcHJpY2VfbGFiZWwiLCJpdGVtX3ByaWNlX3ZhbF90ZXh0IiwiaXRlbV9wcmljZV9jb2luc19sYWJlbCIsIml0ZW1fZGVzY190ZXh0IiwiY2hhbmdlX2NoYXJhY3RlciIsImNvbCIsImlzX3JlcGFpciIsImlzX3JlcGFpcl9tZW51IiwiaXRtIiwiaXRlbV9ncmlkIiwiaXRlbV9wcmljZSIsInByaWNlX3ZhbCIsIlNFTExfTVVMVElQTElFUiIsInVwZGF0ZV9pdGVtX2luZm8iLCJub3JtYWxfbGlzdCIsIml0ZW1fbGlzdCIsImN1c3RvbV9wcmljZSIsImN1c3RvbV9tc2ciLCJjYW50X3NlbGwiLCJjb2luc19sYWJlbCIsInByaWNlX2xhYmVsIiwicHJpY2VfdGV4dCIsImFsdGVybmF0ZV93aW5kb3dfcG9zIiwiY2xvc2VfZGlhbG9nIiwibWVzc2FnZV9rZXkiLCJ1cGRhdGVfZGlhbG9nIiwic2V0X2l0ZW1fbGlzdHMiLCJvcGVuX2hvcml6b250YWxfbWVudSIsImVuZF9kaWFsb2ciLCJzZXRfYWN0aW9ucyIsImF2YXRhcl9rZXkiLCJkaWFsb2dfa2V5IiwibWVzc2FnZXMiLCJjdXJyZW50X21lc3NhZ2UiLCJpc19rZXkiLCJxdWlja19uZXh0IiwiRlJBTUVfU0laRSIsImtpbGxfZGlhbG9nIiwiaXNfYXJ0aWZhY3RzX21lbnUiLCJzZWxlY3RlZF9pdGVtIiwiYnV5X3NlbGVjdF9wb3MiLCJwYWdlIiwiaXNfbGFzdCIsIm9sZF9pdGVtIiwic2VsZWN0ZWRfY2hhcmFjdGVyIiwiYm91Z2h0IiwiZ2FtZV90aWNrZXQiLCJ1cGRhdGVfZ2FtZV90aWNrZXRfc3RlcCIsIm9wZW5faW52ZW50b3J5X3ZpZXciLCJvcGVuX2J1eV9zZWxlY3QiLCJtc2dfa2V5Iiwic2hvcF9saXN0IiwiZXhpc3RzIiwic2VsbF9wcmljZSIsInVwZGF0ZV95b3VyX2NvaW5zIiwiY2hlY2tfZ2FtZV90aWNrZXQiLCJpdGVtX3R5cGUiLCJlcV9zbG90cyIsImFmdGVyX2NvbXBsaW1lbnQiLCJnZXRfbWVzc2FnZSIsInJlcGxhY2VfdGV4dCIsInllcyIsInNlbGxfb2xkX2VxdWlwIiwibm8iLCJlcXVpcF9hc2siLCJpdGVtX3RvX2FkZCIsImNob3Nlbl9xdWFudGl0eSIsImVxdWlwX25vdyIsImVxdWlwX25ld19pdGVtIiwiY3VycmVudF9saW5lIiwic2VsZWN0ZWRfaW5kZXgiLCJvbl9wdXJjaGFzZV9zdWNjZXNzIiwib3Blbl9lcXVpcF9jb21wYXJlIiwiaGF2ZV9xdWFudCIsInNob3BfaXRlbV9tYXRjaCIsInNob3BfaXRlbSIsImNoYXJfaXRlbV9tYXRjaCIsImNoYXJfaXRlbSIsImluY3JlYXNlX2Ftb3VudCIsImRlY3JlYXNlX2Ftb3VudCIsIm9uX2NhbmNlbF9jaGFyX3NlbGVjdCIsImN1cnJlbnRfcGFnZSIsInByZXZpb3VzX2NoYXIiLCJwcmV2aW91c19saW5lIiwibmV4dF9saW5lIiwib25fYnV5X2VxdWlwX3NlbGVjdCIsInNlbGVjdF9jaGFyIiwib25fY2FuY2VsX2dhbWVfdGlja2V0Iiwib25fYnV5X2l0ZW1fc2VsZWN0IiwicGFnZXMiLCJNQVhfSVRFTVNfUEVSX1BBR0UiLCJuZXh0X2l0ZW0iLCJwcmV2aW91c19pdGVtIiwicHJldmlvdXNfcGFnZSIsIm5leHRfcGFnZSIsIm9uX2J1eV9zZWxlY3QiLCJSRVBBSVJfV0FJVF9USU1FIiwiaW52X3dpbl9wb3MiLCJjcnlzdGFsIiwia2lsbF9pdGVtX2F0Iiwib25fY2hhcmFjdGVyX3NlbGVjdCIsImN1cnNvcl9wb3MiLCJvbl9pdGVtX3JlcGFpciIsIm9uX3NhbGVfc3VjY2VzcyIsImRlY2xpbmVfbXNnIiwicXVhbnQiLCJpdGVtX3BvcyIsInNldF9jdXJzb3IiLCJwcmV2aW91c19jb2wiLCJuZXh0X2NvbCIsIm9uX3JlcGFpcl9pdGVtX3NlbGVjdCIsIm9uX3NlbGxfaXRlbV9zZWxlY3QiLCJjaGFyX2dyb3VwIiwic3ByaXRlX2dyb3VwIiwiSVRFTV9YIiwiSVRFTV9ZIiwiZXhwYW5kIiwibW9kaWZpZXIiLCJpdGVtX21hdGNoIiwiZmluaXNoIiwibWFrZV9pdGVtX2dyaWQiLCJraWxsX2FsbF9zcHJpdGVzIiwic2V0X3Nwcml0ZXMiLCJjaGFyX2l0ZW1zIiwidGhpc19saW5lIiwiaXRlbV9pY29ucyIsImFsaXZlIiwiYmdfaWNvbnMiLCJNQVhfUEVSX0xJTkUiLCJtb3ZlX3RvIiwiZGVhZF9pdGVtcyIsImRlYWRfYmFja2dyb3VuZHMiLCJkZWFkX2Jyb2tlbiIsImRlYWRfaWNvbnMiLCJkZWFkX3RleHQiLCJjaGVja19leHBhbmQiLCJTRUxFQ1RfVFdFRU5fVElNRSIsIkFSUk9XX1RXRUVOX1RJTUUiLCJiZyIsInRhZ19ncm91cCIsInRleHRfZ3JvdXAiLCJiZ19ncm91cCIsIlRFWFRfWCIsIlRFWFRfRU5EX1kiLCJhcnJvd19ncm91cCIsInVwX2Fycm93IiwiZG93bl9hcnJvdyIsImFycm93X3R3ZWVucyIsInNldF9hcnJvd3MiLCJpbml0X2Fycm93X3R3ZWVucyIsInVwX3R3ZWVuIiwiVVBfQVJST1dfWSIsImRvd25fdHdlZW4iLCJET1dOX0FSUk9XX1kiLCJkZWFkX3RleHRzIiwiZGVhZF9zaGFkb3dzIiwiZGVhZF90ZXh0X2JncyIsIml0ZW1zX2xlbmd0aCIsImZyb20iLCJ3YXJlcyIsImRlYWRfdGFncyIsInNldF9pdGVtIiwiZm9yY2VfaW5kZXgiLCJjbGVhcl9hcnJvd190d2VlbnMiLCJ1bnNldF9pdGVtIiwiY2hlY2tfYXJyb3dzIiwiaXRtX2xpc3QiLCJiZ19saXN0IiwibGlzdHMiLCJtYWtlX3BhZ2VzIiwidXBkYXRlX2dyb3VwX3BvcyIsInNlbGVjdGVkX2NoYXIiLCJjYW50X2VxdWlwX3RleHQiLCJhdGtfbGFiZWxfdGV4dCIsImluaXRfdGV4dF9zcHJpdGUiLCJkZWZfbGFiZWxfdGV4dCIsImFnaV9sYWJlbF90ZXh0IiwiY3Vycl9hdGtfdGV4dCIsImN1cnJfZGVmX3RleHQiLCJjdXJyX2FnaV90ZXh0IiwibmV3X2F0a190ZXh0IiwiQ1VSUl9TVEFUX0VORF9YIiwibmV3X2RlZl90ZXh0IiwibmV3X2FnaV90ZXh0IiwidHh0IiwiYXJyb3dfeSIsImRlYWRfYXJyb3dzIiwibmV3X2l0ZW0iLCJjdXJyZW50X3ZhbCIsImVxX2VmZmVjdHMiLCJuaXRlbV9lZmZlY3RzIiwiZXFfc3RhdCIsIm5pdGVtX3N0YXQiLCJjdXJyX3ZhbCIsInN0YXRfZGlmZiIsIm5ld19zdGF0X3RleHQiLCJjdXJyX3N0YXRfdGV4dCIsIm1ha2VfYXJyb3ciLCJzaG93X3N0YXRfY29tcGFyZSIsInNob3dfY2FudF9lcXVpcCIsInNlbGVjdGVkX2l0ZW1fdHlwZSIsImNoYXJfY3VycmVudF9pdGVtIiwiYXRrX2RpZmYiLCJkZWZfZGlmZiIsImFnaV9kaWZmIiwiZGlzcGxheV9zdGF0IiwiU0VQQVJBVE9SX1giLCJ5ZXNfY2FsbGJhY2siLCJub19jYWxsYmFjayIsIlNob3BJdGVtQ291bnRlciIsImJhc2VfcHJpY2UiLCJxdWFudGl0eV90ZXh0IiwiY29pbnNfdmFsX3RleHQiLCJjb2luc19sYWJlbF90ZXh0Iiwic2hvcF9pdGVtX29iaiIsImNoYXJfaXRlbV9vYmoiLCJ1c2VfY29pbnMiLCJvd25lZCIsImF2YWlsYWJsZV9xdWFudGl0eSIsImNsZWFyX3R3ZWVucyIsImRpc2FibGVkX2NvdW50IiwiZGlzYWJsZWRfYmFyX2dyYXBoaWNzIiwiQ0hBUl9HUk9VUF9YIiwiQ0hBUl9HUk9VUF9ZIiwiZGVhZF9pZGxlIiwicGFydHlfbGVuZ3RoIiwibGluZV9udW1iZXIiLCJjaGFuZ2VfbGluZSIsIm1ha2VfbGluZXMiLCJUV0VFTl9USU1FIiwiTU9WRV9USU1FIiwiYWN0aXZlX3R3ZWVuIiwiY3VycmVudF90d2VlbiIsImN1cnNvcl9kZWZhdWx0X3BvcyIsInR3ZWVuX3R5cGUiLCJpbml0X3R3ZWVuIiwiREVGQVVMVF9MT09QX1RJTUUiLCJkaXJlY3Rpb25fa2V5cyIsImFjdGlvbl9rZXlzIiwiZGlzYWJsZWQiLCJsb29wX3RpbWUiLCJwcmVzc2VkIiwicGhhc2VyX2tleSIsImFjdHMiLCJhY3QiLCJsb29wX3N0YXJ0X3RpbWVyIiwibG9vcF9yZXBlYXRfdGltZXIiLCJob3Jpem9udGFsIiwiaG9yaXpvbnRhbF9sb29wIiwidmVydGljYWxfbG9vcCIsImN1c3RvbV9sb29wX3RpbWUiLCJzcGFjZWJhciIsInNldF9kaXJlY3Rpb25zIiwiZGlyZWN0aW9uc19sZW5ndGgiLCJiMSIsImdldF9vcHBvc2l0ZV9kaXIiLCJzZXRfbG9vcF90aW1lcnMiLCJiMiIsImFjdGlvbnNfbGVuZ3RoIiwic2hvcF9kYXRhIiwiU2hvcCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdG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RSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJ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OiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzIpO1xuIiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbi8qRWxlbWVudCBrZXlzKi9cbmV4cG9ydCBjb25zdCBlbGVtZW50cyA9IHtcbiAgICBWRU5VUzogXCJ2ZW51c1wiLFxuICAgIE1FUkNVUlk6IFwibWVyY3VyeVwiLFxuICAgIE1BUlM6IFwibWFyc1wiLFxuICAgIEpVUElURVI6IFwianVwaXRlclwiLFxuICAgIE5PX0VMRU1FTlQ6IFwibm9fZWxlbWVudFwiXG59O1xuXG4vKkRlZmF1bHQgZWxlbWVudHMgb3JkZXIqL1xuZXhwb3J0IGNvbnN0IG9yZGVyZWRfZWxlbWVudHMgPSBbXG4gICAgZWxlbWVudHMuVkVOVVMsIGVsZW1lbnRzLk1FUkNVUlksIGVsZW1lbnRzLk1BUlMsIGVsZW1lbnRzLkpVUElURVJcbl07XG5cbi8qRWxlbWVudCBuYW1lcyovXG5leHBvcnQgY29uc3QgZWxlbWVudF9uYW1lcyA9IHtcbiAgICBbZWxlbWVudHMuVkVOVVNdOiBcIkVhcnRoXCIsXG4gICAgW2VsZW1lbnRzLk1FUkNVUlldOiBcIldhdGVyXCIsXG4gICAgW2VsZW1lbnRzLk1BUlNdOiBcIkZpcmVcIixcbiAgICBbZWxlbWVudHMuSlVQSVRFUl06IFwiV2luZFwiXG59O1xuXG4vKjgtRGlyZWN0aW9uYWwgZGlyZWN0aW9uIHZhbHVlcyovXG5leHBvcnQgY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgICByaWdodDogMCxcbiAgICBkb3duX3JpZ2h0OiAxLFxuICAgIGRvd246IDIsXG4gICAgZG93bl9sZWZ0OiAzLFxuICAgIGxlZnQ6IDQsXG4gICAgdXBfbGVmdDogNSxcbiAgICB1cDogNixcbiAgICB1cF9yaWdodDogN1xufTtcblxuLypTaXplIG9mIFwiZGlyZWN0aW9uc1wiIG9iamVjdCovXG5leHBvcnQgY29uc3QgZGlyZWN0aW9uc19jb3VudCA9IE9iamVjdC5rZXlzKGRpcmVjdGlvbnMpLmxlbmd0aDtcblxuLyo4LURpcmVjdGlvbmFsIGRpcmVjdGlvbiBrZXlzKi9cbmV4cG9ydCBjb25zdCByZXZlcnNlX2RpcmVjdGlvbnMgPSB7XG4gICAgW2RpcmVjdGlvbnMucmlnaHRdOiBcInJpZ2h0XCIsXG4gICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdOiBcInVwX3JpZ2h0XCIsXG4gICAgW2RpcmVjdGlvbnMudXBdOiBcInVwXCIsXG4gICAgW2RpcmVjdGlvbnMudXBfbGVmdF06IFwidXBfbGVmdFwiLFxuICAgIFtkaXJlY3Rpb25zLmxlZnRdOiBcImxlZnRcIixcbiAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdOiBcImRvd25fbGVmdFwiLFxuICAgIFtkaXJlY3Rpb25zLmRvd25dOiBcImRvd25cIixcbiAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XTogXCJkb3duX3JpZ2h0XCJcbn07XG5cblxuZXhwb3J0IGNvbnN0IGJhc2VfYWN0aW9ucyA9IHtcbiAgICBJRExFOiBcImlkbGVcIixcbiAgICBXQUxLOiBcIndhbGtcIixcbiAgICBEQVNIOiBcImRhc2hcIixcbiAgICBQVVNIOiBcInB1c2hcIixcbiAgICBDTElNQjogXCJjbGltYlwiLFxuICAgIENBU1Q6IFwiY2FzdFwiLFxuICAgIEpVTVA6IFwianVtcFwiXG59O1xuXG5leHBvcnQgY29uc3QgYWN0aW9uX2lucHV0cyA9IHtcbiAgICBTUEFDRUJBUjogXCJzcGFjZWJhclwiLFxuICAgIEVOVEVSOiBcImVudGVyXCIsXG4gICAgU0hJRlQ6IFwic2hpZnRcIixcbiAgICBFU0M6IFwiZXNjXCJcbn07XG5cblxuLypSZXR1cm5zIHRoZSBhbmdsZSBmb3IgYW4gOC1EaXJlY3Rpb25hbCB2YWx1ZVxuV29ya3MgY2xvY2t3aXNlIHN0YXJ0aW5nIHdpdGggXCJSaWdodFwiXG5cbklucHV0OiBkaXJlY3Rpb24gW251bWJlcl06IDAtNywgY2xvY2t3aXNlIHN0YXJ0aW5nIHdpdGggXCJSaWdodFwiXG5cbk91dHB1dDogW251bWJlcl0gLSBBbmdsZSBpbiByYWRpYW5zKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3Rpb25zX2FuZ2xlcyhkaXJlY3Rpb24peyAvL2Nsb2Nrd2lzZSBmcm9tIFwicmlnaHRcIlxuICAgIHJldHVybiBkaXJlY3Rpb24qTWF0aC5QSS80O1xufVxuXG4vKk1hcHMgZGlyZWN0aW9uIGtleXMgdG8gdGhlaXIgdmFsdWVzXG5cbklucHV0OiBhcnIgW2FycmF5XSAtIERpcmVjdGlvbiBrZXlzIChhcnJheSBvZiBzdHJpbmcpXG5cbk91dHB1dDogW2FycmF5XSAtIERpcmVjdGlvbiB2YWx1ZXMgKGFycmF5IG9mIG51bWJlcikqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcF9kaXJlY3Rpb25zKGFycikge1xuICAgIGlmIChhcnIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGFycjtcbiAgICBhcnIgPSBBcnJheS5pc0FycmF5KGFycikgPyBhcnIgOiBbYXJyXTtcbiAgICByZXR1cm4gYXJyLm1hcChrZXkgPT4gZGlyZWN0aW9uc1trZXldKTtcbn1cblxuLypSZXR1cm5zIHRoZSBkaXJlY3Rpb24gdmFsdWVzIGZvciBkaWFnb25hbCBkaXJlY3Rpb25zXG5FeGFtcGxlOiBJbnB1dDogNyAodXBfcmlnaHQpIC8gT3V0cHV0OiBbNiwwXVxuXG5JbnB1dDogZGlyZWN0aW9uIFtudW1iZXJdIC0gRGlhZ29uYWwgZGlyZWN0aW9uIHZhbHVlXG5cbk91dHB1dDogW2FycmF5XSAtIEFycmF5IHdpdGggc3BsaXQgZGlyZWN0aW9uIHZhbHVlcyovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRfZGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIGlmKGRpcmVjdGlvbiUyPT09MCkgcmV0dXJuIFtkaXJlY3Rpb25dO1xuICAgIFxuICAgIGxldCB2YWxzID0gbmV3IEFycmF5KDIpO1xuICAgIHZhbHNbMF0gPSBkaXJlY3Rpb249PT1kaXJlY3Rpb25zLnJpZ2h0ID8gZGlyZWN0aW9uLnVwX3JpZ2h0IDogZGlyZWN0aW9uLTE7XG4gICAgdmFsc1sxXSA9IGRpcmVjdGlvbj09PWRpcmVjdGlvbnMudXBfcmlnaHQgPyBkaXJlY3Rpb25zLnJpZ2h0IDogZGlyZWN0aW9uKzE7XG4gICAgcmV0dXJuIHZhbHM7XG59XG5cbi8qUmV0dXJucyB0aGUgZGlhZ29uYWwgdmFsdWUgZm9yIGl0cyBjb21wb25lbnQgZGlyZWN0aW9uc1xuRXhhbXBsZTogSW5wdXQ6IDYsIDAgKHVwLCByaWdodCkgLyBPdXRwdXQ6IDcgKHVwX3JpZ2h0KVxuXG5JbnB1dDogZGlyXzEsIGRpcl8yIFtudW1iZXJdIC0gRGlyZWN0aW9uIHZhbHVlc1xuXG5PdXRwdXQ6IFtudW1iZXJdIC0gRGlhZ29uYWwgZGlyZWN0aW9uIHZhbHVlXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGpvaW5fZGlyZWN0aW9ucyhkaXJfMSwgZGlyXzIpIHtcbiAgICBkaXJfMiA9IGRpcl8xID09PSBkaXJlY3Rpb25zLnVwICYmIGRpcl8yID09PSBkaXJlY3Rpb25zLnJpZ2h0ID8gZGlyZWN0aW9uc19jb3VudCA6IGRpcl8yO1xuICAgIHJldHVybiBNYXRoLm1pbihkaXJfMSxkaXJfMikrMTtcbn1cblxuLypSZXR1cm5zIGEgcmFuZG9tIG51bWJlciAoMCw0KVxuXG5PdXRwdXQ6IFtudW1iZXJdIC0gUmFuZG9tIG51bWJlciBmcm9tIDAgdG8gNCovXG5leHBvcnQgZnVuY3Rpb24gdmFyaWF0aW9uKCkge1xuICAgIHJldHVybiBfLnJhbmRvbSgwLCA0KTtcbn1cblxuLypQbGFjZXMgdGhlIGFuZ2xlIChyYWRpYW5zKSBpbiB0aGUgWzAsMipQSV0gcmFuZ2VcblxuSW5wdXQ6IGFuZ2xlIFtudW1iZXJdIC0gQW5nbGUgaW4gcmFkaWFuc1xuT3V0cHV0OiBbbnVtYmVyXSAtIEFuZ2xlIGluIHRoZSBbMCwyKlBJXSByYW5nZSovXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2VfMzYwKGFuZ2xlKSB7XG4gICAgYW5nbGUgPSBhbmdsZSAlIG51bWJlcnMuZGVncmVlMzYwO1xuICAgIGFuZ2xlID0gYW5nbGUgPCAwID8gYW5nbGUgKyBudW1iZXJzLmRlZ3JlZTM2MCA6IGFuZ2xlO1xuICAgIHJldHVybiBhbmdsZTtcbn1cblxuLypDaGVja3MgcHJveGltaXR5IGluIGdpdmVuIHF1YWRyYW50c1xuXG5JbnB1dDogcXVhZHJhbnRzIFthcnJheV0gLSBRdWFkcmFudHMgdG8gY2hlY2sgKGFycmF5IG9mIG51bWJlcilcbiAgICAgICByYWRpdXMgW251bWJlcl0gLSBSYWRpdXMgb2YgdGhlIGJvZHlcbiAgICAgICByYW5nZV9mYWN0b3IgW251bWJlcl0gLSBBZGRpdGlvbmFsIHJhbmdlIGZhY3RvclxuICAgICAgIHgsIHkgW251bWJlcl0gLSBUaGUgYm9keSdzIGNvb3JkaW5hdGVzXG4gICAgICAgdGFyZ2V0X3gsIHRhcmdldF95IFtudW1iZXJdIC0gVGhlIHRhcmdldCdzIGNvb3JkaW5hdGVzXG5cbk91dHB1dDogW2Jvb2xlYW5dKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19pbnNpZGVfc2VjdG9yKHF1YWRyYW50cywgcmFkaXVzLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSkge1xuICAgIGNvbnN0IHJhbmdlX3JhZGl1c19zcXVhcmVkID0gKHJhZGl1cyAqIHJhbmdlX2ZhY3RvcikgKiAocmFkaXVzICogcmFuZ2VfZmFjdG9yKTtcbiAgICBjb25zdCB0YXJnZXRfcmFkaXVzX3NxdWFyZWQgPSBNYXRoLnBvdyh0YXJnZXRfeCAtIHgsIDIpICsgTWF0aC5wb3codGFyZ2V0X3kgLSB5LCAyKTtcbiAgICBjb25zdCB0YXJnZXRfYW5nbGUgPSByYW5nZV8zNjAoTWF0aC5hdGFuMih5IC0gdGFyZ2V0X3ksIHRhcmdldF94IC0geCkpO1xuICAgIGNvbnN0IGFuZ2xlcyA9IFswLCBudW1iZXJzLmRlZ3JlZTkwLCBNYXRoLlBJLCBudW1iZXJzLmRlZ3JlZTI3MCwgbnVtYmVycy5kZWdyZWUzNjBdO1xuICAgIGxldCBiZXR3ZWVuX2FuZ2xlcyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhZHJhbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCBxdWFkcmFudCA9IHF1YWRyYW50c1tpXTtcbiAgICAgICAgbGV0IHN0YXJ0X2FuZ2xlID0gYW5nbGVzW3F1YWRyYW50IC0gMV07XG4gICAgICAgIGxldCBlbmRfYW5nbGUgPSBhbmdsZXNbcXVhZHJhbnRdO1xuICAgICAgICBiZXR3ZWVuX2FuZ2xlcyA9IGVuZF9hbmdsZSA+PSB0YXJnZXRfYW5nbGUgJiYgdGFyZ2V0X2FuZ2xlID49IHN0YXJ0X2FuZ2xlO1xuICAgICAgICBpZiAoYmV0d2Vlbl9hbmdsZXMpIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRfcmFkaXVzX3NxdWFyZWQgPD0gcmFuZ2VfcmFkaXVzX3NxdWFyZWQgJiYgYmV0d2Vlbl9hbmdsZXM7XG59XG5cbi8qQ2hlY2tzIHByb3hpbWl0eSBiYXNlZCBvbiBjdXJyZW50IGRpcmVjdGlvblxuXG5JbnB1dDogY3VycmVudF9kaXJlY3Rpb24gW251bWJlcl0gLSBUaGUgY3VycmVudCBkaXJlY3Rpb25cbiAgICAgICB4LCB5IFtudW1iZXJdIC0gVGhlIGJvZHkncyBjb29yZGluYXRlc1xuICAgICAgIHRhcmdldF94LCB0YXJnZXRfeSBbbnVtYmVyXSAtIFRoZSB0YXJnZXQncyBjb29yZGluYXRlc1xuICAgICAgIHJhbmdlX2ZhY3RvciBbbnVtYmVyXSAtIEFkZGl0aW9uYWwgcmFuZ2UgZmFjdG9yXG5cbk91dHB1dDogW2Jvb2xlYW5dKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19jbG9zZShjdXJyZW50X2RpcmVjdGlvbiwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95LCByYW5nZV9mYWN0b3IpIHtcbiAgICBzd2l0Y2ggKGN1cnJlbnRfZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsxLCAyXSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cF9yaWdodDpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsxXSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsxLCA0XSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duX3JpZ2h0OlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzRdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICByZXR1cm4gaXNfaW5zaWRlX3NlY3RvcihbMywgNF0sIG51bWJlcnMuSEVST19CT0RZX1JBRElVUywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bl9sZWZ0OlxuICAgICAgICAgICAgcmV0dXJuIGlzX2luc2lkZV9zZWN0b3IoWzNdLCBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMsIHJhbmdlX2ZhY3RvciwgeCwgeSwgdGFyZ2V0X3gsIHRhcmdldF95KTtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICByZXR1cm4gaXNfaW5zaWRlX3NlY3RvcihbMiwgM10sIG51bWJlcnMuSEVST19CT0RZX1JBRElVUywgcmFuZ2VfZmFjdG9yLCB4LCB5LCB0YXJnZXRfeCwgdGFyZ2V0X3kpO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXBfbGVmdDpcbiAgICAgICAgICAgIHJldHVybiBpc19pbnNpZGVfc2VjdG9yKFsyXSwgbnVtYmVycy5IRVJPX0JPRFlfUkFESVVTLCByYW5nZV9mYWN0b3IsIHgsIHksIHRhcmdldF94LCB0YXJnZXRfeSk7XG4gICAgfTtcbn1cblxuLypEaXJlY3Rpb24gdHJhbnNpdGlvbnNcblVzZWQgYmVpbmcgZm9yY2VkIHRvIGNoYW5nZSBkaXJlY3Rpb25zKi9cbmV4cG9ydCBjb25zdCB0cmFuc2l0aW9ucyA9IHtcbiAgICBbZGlyZWN0aW9ucy51cF0gOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXAsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLnVwX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XSA6IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy51cCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy51cFxuICAgIH0sXG4gICAgW2RpcmVjdGlvbnMuZG93bl0gOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd24sXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0XSA6IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd24sXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0XG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdIDogZGlyZWN0aW9ucy51cF9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd24sXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiB7XG4gICAgICAgIFtkaXJlY3Rpb25zLnVwXSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25dIDogZGlyZWN0aW9ucy5kb3duX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdIDogZGlyZWN0aW9ucy5kb3duLFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XSA6IGRpcmVjdGlvbnMucmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy51cCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy5yaWdodFxuICAgIH0sXG4gICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5yaWdodF0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF0gOiBkaXJlY3Rpb25zLmRvd25fbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd24sXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwXG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duX3JpZ2h0XSA6IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmxlZnRdIDogZGlyZWN0aW9ucy5kb3duX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0XSA6IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMuZG93bixcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLmRvd25fcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnVwX2xlZnRdIDogZGlyZWN0aW9ucy5sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0XG4gICAgfSxcbiAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IHtcbiAgICAgICAgW2RpcmVjdGlvbnMudXBdIDogZGlyZWN0aW9ucy51cF9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXSA6IGRpcmVjdGlvbnMuZG93bl9sZWZ0LFxuICAgICAgICBbZGlyZWN0aW9ucy5sZWZ0XSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMucmlnaHRdIDogZGlyZWN0aW9ucy51cF9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9sZWZ0XSA6IGRpcmVjdGlvbnMubGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMuZG93bl9yaWdodF0gOiBkaXJlY3Rpb25zLnJpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XSA6IGRpcmVjdGlvbnMudXBfbGVmdCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDogZGlyZWN0aW9ucy51cFxuICAgIH0sXG4gICAgW2RpcmVjdGlvbnMudXBfcmlnaHRdIDoge1xuICAgICAgICBbZGlyZWN0aW9ucy51cF0gOiBkaXJlY3Rpb25zLnVwX3JpZ2h0LFxuICAgICAgICBbZGlyZWN0aW9ucy5kb3duXSA6IGRpcmVjdGlvbnMuZG93bl9yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMubGVmdF0gOiBkaXJlY3Rpb25zLnVwX2xlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLnJpZ2h0XSA6IGRpcmVjdGlvbnMudXBfcmlnaHQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fbGVmdF0gOiBkaXJlY3Rpb25zLmxlZnQsXG4gICAgICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdIDogZGlyZWN0aW9ucy5yaWdodCxcbiAgICAgICAgW2RpcmVjdGlvbnMudXBfbGVmdF0gOiBkaXJlY3Rpb25zLnVwLFxuICAgICAgICBbZGlyZWN0aW9ucy51cF9yaWdodF0gOiBkaXJlY3Rpb25zLnVwX3JpZ2h0XG4gICAgfSxcbn07XG5cbi8qUmV0dXJucyB0aGUgb3Bwb3NpdGUgb2YgdGhlIGdpdmVuIGRpcmVjdGlvblxuXG5JbnB1dDogZGlyZWN0aW9uIFtudW1iZXJdIC0gRGlyZWN0aW9uIHZhbHVlXG5cbk91dHB1dDogW251bWJlcl0gLSBPcHBvc2l0ZSBkaXJlY3Rpb24gdmFsdWUqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOiByZXR1cm4gZGlyZWN0aW9ucy5kb3duO1xuICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjogcmV0dXJuIGRpcmVjdGlvbnMudXA7XG4gICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OiByZXR1cm4gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OiByZXR1cm4gZGlyZWN0aW9ucy5sZWZ0O1xuICAgIH1cbn1cblxuLypBcHBseSB0aGUgdHJhbnNpdGlvbiBkaXJlY3Rpb25zXG5Vc2VkIHdoZW4gYmVpbmcgZm9yY2VkIHRvIGZhY2UgYSBkaWZmZXJlbnQgZGlyZWN0aW9uXG5cbklucHV0OiBjdXJyZW50X2RpcmVjdGlvbiBbbnVtYmVyXSAtIEN1cnJlbnQgZGlyZWN0aW9uIHZhbHVlXG4gICAgICAgZGVzaXJlZF9kaXJlY3Rpb24gW251bWJlcl0gLSBEZXNpcmVkIGRpcmVjdGlvbiB2YWx1ZVxuXG5PdXRwdXQ6IFtudW1iZXJdIC0gVGhlIGRpcmVjdGlvbiB2YWx1ZSB0byBhcHBseSovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucyhjdXJyZW50X2RpcmVjdGlvbiwgZGVzaXJlZF9kaXJlY3Rpb24pe1xuICAgIHJldHVybiB0cmFuc2l0aW9uc1tkZXNpcmVkX2RpcmVjdGlvbl1bY3VycmVudF9kaXJlY3Rpb25dO1xufVxuXG4vKk9idGFpbnMgdGhlIHRleHQgd2lkdGggaW4gcGl4ZWxzIChJTkVGRklDSUVOVClcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIHRleHQgW3N0cmluZ10gLSBUZXh0IHN0cmluZyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3RleHRfd2lkdGgoZ2FtZSwgdGV4dCwgaXRhbGljID0gZmFsc2UpIHsgLy9nZXQgdGV4dCB3aWR0aCBpbiBweCAoZGlydHkgd2F5KVxuICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/ICdncy1pdGFsaWMtYm1wLWZvbnQnIDogJ2dzLWJtcC1mb250JztcbiAgICBsZXQgdGV4dF9zcHJpdGUgPSBnYW1lLmFkZC5iaXRtYXBUZXh0KDAsIDAsIGZvbnRfbmFtZSwgdGV4dCwgbnVtYmVycy5GT05UX1NJWkUpO1xuICAgIGNvbnN0IHRleHRfd2lkdGggPSB0ZXh0X3Nwcml0ZS53aWR0aDtcbiAgICB0ZXh0X3Nwcml0ZS5kZXN0cm95KCk7XG4gICAgcmV0dXJuIHRleHRfd2lkdGg7XG59XG5cbi8qRWl0aGVyIGtpbGxzIG9yIGRlc3Ryb3lzIGVhY2ggc3ByaXRlIGluIHRoZSBncm91cFxuXG5JbnB1dDogZ3JvdXAgW1BoYXNlcjpHcm91cF0gLSBUaGUgcGFyZW50IGdyb3VwXG4gICAgICAgZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBjaGlsZCBpcyBkZXN0cm95ZWQgaW5zdGVhZC4qL1xuZXhwb3J0IGZ1bmN0aW9uIGtpbGxfYWxsX3Nwcml0ZXMoZ3JvdXAsIGRlc3Ryb3k9ZmFsc2Upe1xuICAgIGdyb3VwLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT57XG4gICAgICAgIGlmKGRlc3Ryb3kpIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQsdHJ1ZSk7XG4gICAgICAgIGVsc2UgY2hpbGQua2lsbCgpO1xuICAgIH0pXG59XG5cbi8qUmV0dXJucyB0aGUgc3Vycm91bmRpbmcgcG9zaXRpb25zXG5EaWFnb25hbHMgYXJlIG9wdGlvbmFsXG5cbklucHV0OiB4LHkgW251bWJlcl0gLSBUaGUgYm9keSdzIHBvc2l0aW9uXG4gICAgICAgd2l0aF9kaWFnb25hbHMgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgaW5jbHVkZXMgZGlhZ29uYWxzXG4gICAgICAgc2hpZnQgW251bWJlcl0gLSBEaXN0YW5jZSB0byBjaGVjayovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3N1cnJvdW5kaW5ncyh4LCB5LCB3aXRoX2RpYWdvbmFscyA9IGZhbHNlLCBzaGlmdCA9IDEpIHtcbiAgICBsZXQgc3Vycm91bmRpbmdzID0gW1xuICAgICAgICB7eDogeCAtIHNoaWZ0LCB5OiB5LCBkaWFnOiBmYWxzZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmxlZnR9LFxuICAgICAgICB7eDogeCArIHNoaWZ0LCB5OiB5LCBkaWFnOiBmYWxzZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLnJpZ2h0fSxcbiAgICAgICAge3g6IHgsIHk6IHkgLSBzaGlmdCwgZGlhZzogZmFsc2UsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy51cH0sXG4gICAgICAgIHt4OiB4LCB5OiB5ICsgc2hpZnQsIGRpYWc6IGZhbHNlLCBkaXJlY3Rpb246IGRpcmVjdGlvbnMuZG93bn0sXG4gICAgXTtcbiAgICBpZiAod2l0aF9kaWFnb25hbHMpIHtcbiAgICAgICAgc3Vycm91bmRpbmdzID0gc3Vycm91bmRpbmdzLmNvbmNhdChbXG4gICAgICAgICAgICB7eDogeCAtIHNoaWZ0LCB5OiB5IC0gc2hpZnQsIGRpYWc6IHRydWUsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy51cF9sZWZ0fSxcbiAgICAgICAgICAgIHt4OiB4ICsgc2hpZnQsIHk6IHkgLSBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLnVwX3JpZ2h0fSxcbiAgICAgICAgICAgIHt4OiB4IC0gc2hpZnQsIHk6IHkgKyBzaGlmdCwgZGlhZzogdHJ1ZSwgZGlyZWN0aW9uOiBkaXJlY3Rpb25zLmRvd25fbGVmdH0sXG4gICAgICAgICAgICB7eDogeCArIHNoaWZ0LCB5OiB5ICsgc2hpZnQsIGRpYWc6IHRydWUsIGRpcmVjdGlvbjogZGlyZWN0aW9ucy5kb3duX3JpZ2h0fSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBzdXJyb3VuZGluZ3M7XG59O1xuXG4vKkxpc3RzIGFsbCBkaXJlY3Rpb25zLCBkaWFnb25hbHMgb3B0aW9uYWxcblxuSW5wdXQ6IHdpdGhfZGlhZ29uYWxzIFtib29sZWFuXSAtIElmIHRydWUsIGluY2x1ZGVzIGRpYWdvbmFscyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2RpcmVjdGlvbnMod2l0aF9kaWFnb25hbHMgPSBmYWxzZSkge1xuICAgIGxldCBkaXJzID0gW2RpcmVjdGlvbnMudXAsIGRpcmVjdGlvbnMuZG93biwgZGlyZWN0aW9ucy5sZWZ0LCBkaXJlY3Rpb25zLnJpZ2h0XTtcbiAgICBpZiAod2l0aF9kaWFnb25hbHMpIHtcbiAgICAgICAgZGlycy5wdXNoKC4uLltkaXJlY3Rpb25zLnVwX2xlZnQsIGRpcmVjdGlvbnMudXBfcmlnaHQsIGRpcmVjdGlvbnMuZG93bl9sZWZ0LCBkaXJlY3Rpb25zLmRvd25fcmlnaHRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpcnM7XG59XG5cbi8qQ2FwaXRhbGl6ZXMgdGhlIGdpdmVuIHRleHRcblxuSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBUZXh0IHRvIGNoYW5nZVxuICAgICAgIGxvd2VyIFtib29sZWFuXSAtIFdoZXRoZXIgdGhlIGZ1bGwgdGV4dCBzaG91bGQgYmUgbG93ZXJjYXNlZFxuXG5PdXRwdXQ6IFtzdHJpbmddIC0gQ2FwaXRhbGl6ZWQgdGV4dCovXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZSh0ZXh0LCBsb3dlciA9IGZhbHNlKXtcbiAgICByZXR1cm4gKGxvd2VyID8gdGV4dC50b0xvd2VyQ2FzZSgpIDogdGV4dCkucmVwbGFjZSgvKD86XnxcXHN8W1wiJyhbe10pK1xcUy9nLCBtYXRjaCA9PiBtYXRjaC50b1VwcGVyQ2FzZSgpKTtcbn1cblxuLypDaGFuZ2VzIHRoZSBicmlnaHRuZXNzIG9mIGEgZ2l2ZW4gY29sb3IgY29kZVxuXG5JbnB1dDogaGV4IFtudW1iZXJdIC0gSW5wdXQgY29sb3JcbiAgICAgICBwZXJjZW50IFtudW1iZXJdIC0gQnJpZ2h0bmVzcyBmYWN0b3JcblxuT3V0cHV0IFtudW1iZXJdIC0gT3V0cHV0IGNvbG9yKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VfYnJpZ2h0bmVzcyhoZXgsIHBlcmNlbnQpIHtcbiAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2UoL15cXHMqI3xcXHMqJC9nLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGV4ID0gaGV4LnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgaWYgKGhleC5sZW5ndGggPT0gMykge1xuICAgICAgICBoZXggPSBoZXgucmVwbGFjZSgvKC4pL2csICckMSQxJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGV4ID0gKFwiMDAwMDAwXCIgKyBoZXgpLnNsaWNlKC02KTtcbiAgICB9XG4gICAgbGV0IHIgPSBwYXJzZUludChoZXguc3Vic3RyKDAsIDIpLCAxNik7XG4gICAgbGV0IGcgPSBwYXJzZUludChoZXguc3Vic3RyKDIsIDIpLCAxNik7XG4gICAgbGV0IGIgPSBwYXJzZUludChoZXguc3Vic3RyKDQsIDIpLCAxNik7XG5cbiAgICBsZXQgaCwgcywgdjtcbiAgICBbaCwgcywgdl0gPSByZ2IyaHN2KHIsIGcsIGIpO1xuICAgIHYgPSAodiAqIHBlcmNlbnQpIHwgMDtcbiAgICBbciwgZywgYl0gPSBoc3YycmdiKGgsIHMsIHYpO1xuXG4gICAgaGV4ID0gKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbn1cblxuLypUcmFuc2Zvcm0gUkdCIGNvbG9yIGludG8gSFNWIGNvbG9yXG5cbklucHV0OiByLGcsYiBbbnVtYmVyXSAtIFJlZCwgR3JlZW4sIEJsdWUgY2hhbm5lbHNcblxuT3V0cHV0IFthcnJheV0gLSBIdWUsIFNhdHVyYXRpb24sIFZhbHVlIGNoYW5uZWxzIChhcnJheSBvZiBudW1iZXIpKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2IyaHN2KHIsZyxiKSB7XG4gICAgbGV0IHYgPSBNYXRoLm1heChyLGcsYiksIG4gPSB2LU1hdGgubWluKHIsZyxiKTtcbiAgICBsZXQgaCA9IG4gJiYgKCh2ID09PSByKSA/IChnLWIpL24gOiAoKHYgPT09IGcpID8gMisoYi1yKS9uIDogNCsoci1nKS9uKSk7IFxuICAgIHJldHVybiBbNjAqKGg8MD9oKzY6aCksIHYmJm4vdiwgdl07XG59XG5cbi8qVHJhbnNmb3JtIEhTViBjb2xvciBpbnRvIFJHQiBjb2xvclxuXG5JbnB1dDogaCxzLHYgW251bWJlcl0gLSBIdWUsIFNhdHVyYXRpb24sIFZhbHVlIGNoYW5uZWxzXG5cbk91dHB1dCBbYXJyYXldIC0gUmVkLCBHcmVlbiwgQmx1ZSAoYXJyYXkgb2YgbnVtYmVyKSovXG5leHBvcnQgZnVuY3Rpb24gaHN2MnJnYihoLHMsdikge1xuICAgIGxldCBmID0gKG4saz0obitoLzYwKSU2KSA9PiB2IC0gdipzKk1hdGgubWF4KCBNYXRoLm1pbihrLDQtaywxKSwgMCk7XG4gICAgcmV0dXJuIFtmKDUpLGYoMyksZigxKV07XG59XG5cbi8qRGVmaW5lcyB0aGUgY29sbGlzaW9uIHBvbHlnb25cblxuSW5wdXQ6IHdpZHRoIFtudW1iZXJdIC0gV2lkdGggb2YgdGhlIGJvZHlcbiAgICAgICBzaGlmdCBbbnVtYmVyXSAtIFNoaWZ0IHZhbHVlXG4gICAgICAgYmV2ZWwgW251bWJlcl0gLSBCb2R5J3MgYmV2ZWwgdmFsdWVcblxuT3V0cHV0OiBbYXJyYXldIC0gTXVsdGlkaW1lbnNpb25hbCBhcnJheSB3aXRoIHBvaW50cyovXG5leHBvcnQgZnVuY3Rpb24gbW91bnRfY29sbGlzaW9uX3BvbHlnb24od2lkdGgsIHNoaWZ0LCBiZXZlbCkge1xuICAgIGlmIChiZXZlbCA9PT0gdW5kZWZpbmVkKSBiZXZlbCA9IDA7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgW2JldmVsICsgc2hpZnQsIHNoaWZ0XSxcbiAgICAgICAgLi4uIGJldmVsID09PSAwID8gW10gOiBbW3dpZHRoIC0gYmV2ZWwgKyBzaGlmdCwgc2hpZnRdXSxcbiAgICAgICAgW3dpZHRoICsgc2hpZnQsIGJldmVsICsgc2hpZnRdLFxuICAgICAgICAuLi4gYmV2ZWwgPT09IDAgPyBbXSA6IFtbd2lkdGggKyBzaGlmdCwgd2lkdGggLSBiZXZlbCArIHNoaWZ0XV0sXG4gICAgICAgIFt3aWR0aCAtIGJldmVsICsgc2hpZnQsIHdpZHRoICsgc2hpZnRdLFxuICAgICAgICAuLi4gYmV2ZWwgPT09IDAgPyBbXSA6IFtbYmV2ZWwgKyBzaGlmdCwgd2lkdGggKyBzaGlmdF1dLFxuICAgICAgICBbc2hpZnQsIHdpZHRoIC0gYmV2ZWwgKyBzaGlmdF0sXG4gICAgICAgIC4uLiBiZXZlbCA9PT0gMCA/IFtdIDogW1tzaGlmdCwgYmV2ZWwgKyBzaGlmdF1dXG4gICAgXTtcbn1cbiIsImV4cG9ydCBjb25zdCBHQU1FX1dJRFRIID0gMjQwO1xuZXhwb3J0IGNvbnN0IEdBTUVfSEVJR0hUID0gMTYwO1xuZXhwb3J0IGNvbnN0IFRBUkdFVF9GUFMgPSA2MDtcbmV4cG9ydCBjb25zdCBIRVJPX0JPRFlfUkFESVVTID0gNy4wO1xuZXhwb3J0IGNvbnN0IElOVl9TUVJUMiA9IDEvTWF0aC5zcXJ0KDIpO1xuZXhwb3J0IGNvbnN0IERFTFRBX1RJTUVfRkFDVE9SID0gNTAuMC8zLjA7XG5leHBvcnQgY29uc3QgTUFQX0RBTVBJTkcgPSAxO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfV0lORE9XX0NPTE9SID0gMHgwMDYwODA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9GT05UX0NPTE9SID0gMHhGOEY4Rjg7XG5leHBvcnQgY29uc3QgWUVMTE9XX0ZPTlRfQ09MT1IgPSAweEY4Rjg0MDtcbmV4cG9ydCBjb25zdCBSRURfRk9OVF9DT0xPUiA9IDB4RjgwMDAwO1xuZXhwb3J0IGNvbnN0IEJMVUVfRk9OVF9DT0xPUiA9IDB4MDAwMEY4O1xuZXhwb3J0IGNvbnN0IFBVUlBMRV9GT05UX0NPTE9SID0gMHhFMDcwQjA7XG5leHBvcnQgY29uc3QgRk9OVF9TSVpFID0gODtcbmV4cG9ydCBjb25zdCBJTlNJREVfQk9SREVSX1dJRFRIID0gMztcbmV4cG9ydCBjb25zdCBPVVRTSURFX0JPUkRFUl9XSURUSCA9IDE7XG5leHBvcnQgY29uc3QgV0lORE9XX1BBRERJTkdfSCA9IDQ7XG5leHBvcnQgY29uc3QgV0lORE9XX1BBRERJTkdfVE9QID0gODtcbmV4cG9ydCBjb25zdCBXSU5ET1dfUEFERElOR19CT1RUT00gPSA0O1xuZXhwb3J0IGNvbnN0IFNQQUNFX0JFVFdFRU5fTElORVMgPSA4O1xuZXhwb3J0IGNvbnN0IE1BWF9ESUFHX1dJTl9XSURUSCA9IDE4MDtcbmV4cG9ydCBjb25zdCBNQVhfTElORVNfUEVSX0RJQUdfV0lOID0gMztcbmV4cG9ydCBjb25zdCBNQVhfRElBR19XSU5fSEVJR0hUID0gRk9OVF9TSVpFKk1BWF9MSU5FU19QRVJfRElBR19XSU4rU1BBQ0VfQkVUV0VFTl9MSU5FUyooTUFYX0xJTkVTX1BFUl9ESUFHX1dJTi0xKStXSU5ET1dfUEFERElOR19UT1ArV0lORE9XX1BBRERJTkdfQk9UVE9NO1xuZXhwb3J0IGNvbnN0IFBVU0hfVElNRSA9IDg1MDtcbmV4cG9ydCBjb25zdCBJQ09OX1dJRFRIID0gMTQ7XG5leHBvcnQgY29uc3QgSUNPTl9IRUlHSFQgPSAxNDtcbmV4cG9ydCBjb25zdCBkZWdyZWUxNSA9IDE1ICogTWF0aC5QSS8xODA7XG5leHBvcnQgY29uc3QgZGVncmVlMzAgPSAzMCAqIE1hdGguUEkvMTgwO1xuZXhwb3J0IGNvbnN0IGRlZ3JlZTYwID0gNjAgKiBNYXRoLlBJLzE4MDtcbmV4cG9ydCBjb25zdCBkZWdyZWU5MCA9IE1hdGguUEkvMjtcbmV4cG9ydCBjb25zdCBkZWdyZWUxODAgPSBNYXRoLlBJO1xuZXhwb3J0IGNvbnN0IGRlZ3JlZTI3MCA9IDMgKiBNYXRoLlBJLzI7XG5leHBvcnQgY29uc3QgZGVncmVlMzYwID0gMiAqIE1hdGguUEk7XG5leHBvcnQgY29uc3QgZGVncmVlNTQwID0gMyAqIE1hdGguUEk7XG5leHBvcnQgY29uc3QgQ0FNRVJBX0xFUlAgPSAwLjE1O1xuZXhwb3J0IGNvbnN0IEVMRU1fQVRUUl9NSU4gPSAtMjAwO1xuZXhwb3J0IGNvbnN0IEVMRU1fQVRUUl9NQVggPSAyMDA7XG5leHBvcnQgY29uc3QgQVZBVEFSX1NJWkUgPSAzMjsiLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgUEFHRV9OVU1CRVJfV0lEVEggPSA4O1xuY29uc3QgUEFHRV9OVU1CRVJfSEVJR0hUID0gODtcbmNvbnN0IFBBR0VfSU5ESUNBVE9SX0FSUk9XX1kgPSAwO1xuY29uc3QgVFJBTlNJVElPTl9USU1FID0gUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMjtcblxuZXhwb3J0IHR5cGUgVGV4dE9iaiA9IHtcbiAgICB0ZXh0OiBQaGFzZXIuQml0bWFwVGV4dCxcbiAgICBzaGFkb3c6IFBoYXNlci5CaXRtYXBUZXh0LFxuICAgIHJpZ2h0X2FsaWduOiBib29sZWFuLFxuICAgIGluaXRpYWxfeDogbnVtYmVyLFxuICAgIHRleHRfYmc/OiBQaGFzZXIuR3JhcGhpY3Ncbn07XG5cbi8qQSBiYXNpYyB3aW5kb3cgdGVtcGxhdGUgdXNlZCBpbiBtb3N0IG1lbnVzXG5DcmVhdGVzIHRoZSBiYWNrZ3JvdW5kIGFuZCBib3JkZXJzXG5TdXBwb3J0cyB0aGUgYWRkaXRpb24gb2Ygc3ByaXRlcyBhbmQgdGV4dFxuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgeCx5IFtudW1iZXJdIC0gVGhlIHdpbmRvdydzIHBvc2l0aW9uXG4gICAgICAgd2lkdGgsIGhlaWdodCBbbnVtYmVyXSAtIFRoZSB3aW5kb3cncyB3aWR0aCAmIGhlaWdodFxuICAgICAgIG5lZWRfcG9zX3VwZGF0ZSBbYm9vbGVhbl0gLSBGbGFnIHRvIGVuYWJsZSBhbiBhdXRvbWF0aWMgcG9zaXRpb24gdXBkYXRlXG4gICAgICAgY29sb3IgW251bWJlcl0gLSBUaGUgd2luZG93J3MgYmFja2dyb3VuZCBjb2xvclxuICAgICAgIGZvbnRfY29sb3IgW251bWJlcl0gLSBUaGUgd2luZG93J3MgZGVmYXVsdCBmb250IGNvbG9yKi9cbmV4cG9ydCBjbGFzcyBXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7XG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xvcjogbnVtYmVyO1xuICAgIHB1YmxpYyBmb250X2NvbG9yOiBudW1iZXI7XG4gICAgcHVibGljIGdyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIHNlcGFyYXRvcnNfZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgbmVlZF9wb3NfdXBkYXRlOiBib29sZWFuO1xuICAgIHB1YmxpYyBvcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBsaW5lc19zcHJpdGVzOiB7dGV4dDogUGhhc2VyLkJpdG1hcFRleHQsIHNoYWRvdzogUGhhc2VyLkJpdG1hcFRleHR9W107XG4gICAgcHVibGljIGV4dHJhX3Nwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgaW50ZXJuYWxfZ3JvdXBzOiB7W2tleTogc3RyaW5nXTogUGhhc2VyLkdyb3VwfTtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBwYWdlX2luZGljYXRvcl9pc19zZXQ6IGJvb2xlYW47XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyX2JhcjogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBwYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0OiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIHBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyOiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIHBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBwYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBwYWdlX2luZGljYXRvcnM6IFRleHRPYmpbXTtcbiAgICBwdWJsaWMgY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3g6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIG5lZWRfcG9zX3VwZGF0ZSA9IHRydWUsIGNvbG9yID0gbnVtYmVycy5ERUZBVUxUX1dJTkRPV19DT0xPUiwgZm9udF9jb2xvciA9IG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuZm9udF9jb2xvciA9IGZvbnRfY29sb3I7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuXG4gICAgICAgIHRoaXMuZHJhd19iYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd19ib3JkZXJzKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuZ3JhcGhpY3MpO1xuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MpO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLm5lZWRfcG9zX3VwZGF0ZSA9IG5lZWRfcG9zX3VwZGF0ZTtcbiAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGluZXNfc3ByaXRlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuZXh0cmFfc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwcyA9IHt9O1xuICAgIH1cblxuICAgIGdldCByZWFsX3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwLng7XG4gICAgfVxuXG4gICAgZ2V0IHJlYWxfeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAueTtcbiAgICB9XG5cbiAgICAvKlJlbW92ZXMgZXhpc3Rpbmcgc2VwYXJhdG9yIGdyYXBoaWNzKi9cbiAgICBjbGVhcl9zZXBhcmF0b3JzKCkge1xuICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKkRyYXdzIHNlcGFyYXRvciBncmFwaGljc1xuICAgIFRoZXNlIGFyZSBjcmVhdGVkIGJ5IGNoYW5naW5nIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBiYWNrZ3JvdW5kKi9cbiAgICBkcmF3X3NlcGFyYXRvcih4XzAsIHlfMCwgeF8xLCB5XzEsIHZlcnRpY2FsID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBsaWdodGVyID0gdXRpbHMuY2hhbmdlX2JyaWdodG5lc3ModGhpcy5jb2xvciwgMS4zKTtcbiAgICAgICAgY29uc3QgZGFya2VyID0gdXRpbHMuY2hhbmdlX2JyaWdodG5lc3ModGhpcy5jb2xvciwgMC44MCk7XG4gICAgICAgIGNvbnN0IG1lZGl1bSA9IHV0aWxzLmNoYW5nZV9icmlnaHRuZXNzKHRoaXMuY29sb3IsIDAuOTApO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBbbWVkaXVtLCBkYXJrZXIsIGxpZ2h0ZXJdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBjb2xvcnNbaV07XG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGkgLSAxO1xuICAgICAgICAgICAgdGhpcy5zZXBhcmF0b3JzX2dyYXBoaWNzLmxpbmVTdHlsZSgxLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MubW92ZVRvKHhfMCArIHNoaWZ0ICogK3ZlcnRpY2FsLCB5XzAgKyBzaGlmdCAqICsoIXZlcnRpY2FsKSk7XG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvcnNfZ3JhcGhpY3MubGluZVRvKHhfMSArIHNoaWZ0ICogK3ZlcnRpY2FsLCB5XzEgKyBzaGlmdCAqICsoIXZlcnRpY2FsKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgdGhlIGJhY2tncm91bmRcbiAgICBGaWxscyB0aGUgd2luZG93J3Mgc3BhY2Ugd2l0aCB0aGUgZGVmYXVsdCB3aW5kb3cgY29sb3IqL1xuICAgIGRyYXdfYmFja2dyb3VuZCgpIHtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5iZWdpbkZpbGwodGhpcy5jb2xvciwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZHJhd1JlY3QoMiwgMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmVuZEZpbGwoKTtcbiAgICB9XG5cbiAgICAvKkRyYXdzIHRoZSB3aW5kb3cgYm9yZGVyc1xuICAgIExpbmVzIGFyZSBkcmF3biB0byBjcmVhdGUgdGhlIGJvcmRlcnMsIGluY2x1ZGluZyBjb3JuZXJzXG4gICAgXG4gICAgQ29sb3JzIHVzZWQ6XG4gICAgMHhGRkZGRkYgPSBXaGl0ZVxuICAgIDB4QTVBNUE1ID0gR3JheSAoTGlnaHRlcilcbiAgICAweDUyNTI1MiA9IEdyYXkgKERhcmtlcilcbiAgICAweDExMTExMSA9IEJsYWNrXG4gICAgKi9cbiAgICBkcmF3X2JvcmRlcnMoKSB7XG4gICAgICAgIC8vTGVmdFxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDAsIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygwLCB0aGlzLmhlaWdodCArIDEpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4RkZGRkZGKVxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygxLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMSwgdGhpcy5oZWlnaHQgKyAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweEE1QTVBNSlcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMiwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDIsIHRoaXMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDExMTExMSlcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMywgMyk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDMsIHRoaXMuaGVpZ2h0IC0gMSk7XG5cbiAgICAgICAgLy9SaWdodFxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1MilcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8odGhpcy53aWR0aCwgMik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4QTVBNUE1KVxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMiwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAyLCB0aGlzLmhlaWdodCArIDEpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhGRkZGRkYpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggKyAxLCAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDEsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKVxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMywgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCB0aGlzLmhlaWdodCArIDEpO1xuXG4gICAgICAgIC8vVXBcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIDApO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMiwgMCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhGRkZGRkYpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMiwgMSk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHhBNUE1QTUpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIDIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMSwgMik7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIDMpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoLCAzKTtcblxuICAgICAgICAvL0Rvd25cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4RkZGRkZGKVxuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygyLCB0aGlzLmhlaWdodCArIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoICsgMiwgdGhpcy5oZWlnaHQgKyAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweEE1QTVBNSlcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMiwgdGhpcy5oZWlnaHQgKyAyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDIsIHRoaXMuaGVpZ2h0ICsgMik7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMyk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAyLCB0aGlzLmhlaWdodCArIDMpO1xuXG4gICAgICAgIC8vQ29ybmVyc1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDEsIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygyLCAyKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDEsIHRoaXMuaGVpZ2h0ICsgMik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKDIsIHRoaXMuaGVpZ2h0ICsgMyk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMiwgdGhpcy5oZWlnaHQgKyAyKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8odGhpcy53aWR0aCArIDMsIHRoaXMuaGVpZ2h0ICsgMyk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHg1MjUyNTIpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoICsgMiwgMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGggKyAzLCAyKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDExMTExMSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDQsIDQpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyg1LCA1KTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKDMsIDMpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyg0LCA0KTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCAweDUyNTI1Mik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKHRoaXMud2lkdGggLSAxLCB0aGlzLmhlaWdodCAtIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgMHgxMTExMTEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh0aGlzLndpZHRoIC0gMSwgNCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHRoaXMud2lkdGgsIDUpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIDB4MTExMTExKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oNCwgdGhpcy5oZWlnaHQgLSAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oNSwgdGhpcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgd2luZG93J3Mgc2l6ZSBhbmQgcmVkcmF3cyBpdFxuXG4gICAgSW5wdXQ6IG5ld19zaXplIFtvYmplY3RdIC0gQ29udGFpbnMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgIHdpZHRoIFtudW1iZXJdIC0gVGhlIG5ldyB3aWR0aFxuICAgICAgICAgICAgICAgIGhlaWdodCBbbnVtYmVyXSAtIFRoZSBuZXcgaGVpZ2h0Ki9cbiAgICB1cGRhdGVfc2l6ZShuZXdfc2l6ZSkge1xuICAgICAgICBpZiAobmV3X3NpemUud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IG5ld19zaXplLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdfc2l6ZS5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBuZXdfc2l6ZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmRyYXdfYmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmRyYXdfYm9yZGVycygpO1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgd2luZG93J3MgcG9zaXRpb25cblxuICAgIElucHV0OiBuZXdfcG9zaXRpb24gW2FycmF5XSAtIENvbnRhaW5zIHRoZSBwb3NpdGlvbidzIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICB4IFtudW1iZXJdIC0gVGhlIG5ldyB4IHZhbHVlXG4gICAgICAgICAgICAgICAgeCBbbnVtYmVyXSAtIFRoZSBuZXcgeSB2YWx1ZVxuICAgICAgICAgICByZWxhdGl2ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBtb3ZlcyB0aGUgd2luZG93IGJ5IHRoZSB4IGFuZCB5IG9mZnNldCB2YWx1ZXMqL1xuICAgIHVwZGF0ZV9wb3NpdGlvbihuZXdfcG9zaXRpb24sIHJlbGF0aXZlID0gdHJ1ZSkge1xuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy54ID0gbmV3X3Bvc2l0aW9uLng7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld19wb3NpdGlvbi55ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMueSA9IG5ld19wb3NpdGlvbi55O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IChyZWxhdGl2ZSA/IHRoaXMuZ2FtZS5jYW1lcmEueCA6IDApICsgdGhpcy54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSAocmVsYXRpdmUgPyB0aGlzLmdhbWUuY2FtZXJhLnkgOiAwKSArIHRoaXMueTtcbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgYW4gaW50ZXJuYWwgZ3JvdXBcbiAgICBUaGlzIGlzIHVzZWQgdG8gYXR0YWNoIG90aGVyIHNwcml0ZSBncm91cHMgdG8gdGhlIHdpbmRvd1xuICAgIFxuICAgIElucHV0OiBrZXkgW3N0cmluZ10gLSBUaGUgZ3JvdXAncyBrZXlcbiAgICAgICAgICAgcG9zaXRpb24gW2FycmF5XSAtIENvbnRhaW5zIHRoZSBuZXcgZ3JvdXAncyB4IGFuZCB5IChPcHRpb25hbClcbiAgICAgICAgICAgICAgICB4IFtudW1iZXJdIC0gVGhlIG5ldyBncm91cCdzIHhcbiAgICAgICAgICAgICAgICB5IFtudW1iZXJdIC0gVGhlIG5ldyBncm91cCdzIHlcbiAgICBcbiAgICBPdXRwdXQ6IFtQaGFzZXI6R3JvdXBdKi9cbiAgICBkZWZpbmVfaW50ZXJuYWxfZ3JvdXAoa2V5LCBwb3NpdGlvbjoge3g/OiBudW1iZXIsIHk/OiBudW1iZXJ9ID0ge30pIHtcbiAgICAgICAgbGV0IGludGVybmFsX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lfaW50ZXJuYWxfZ3JvdXAoa2V5KTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XSA9IGludGVybmFsX2dyb3VwO1xuICAgICAgICBpZiAocG9zaXRpb24ueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbnRlcm5hbF9ncm91cC54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24ueSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbnRlcm5hbF9ncm91cC55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyb3VwLmFkZChpbnRlcm5hbF9ncm91cCk7XG4gICAgICAgIHJldHVybiBpbnRlcm5hbF9ncm91cDtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIGNob3NlbiBpbnRlcm5hbCBncm91cFxuXG4gICAgSW5wdXQ6IGtleSBbc3RyaW5nXSAtIFRoZSBncm91cCdzIGtleVxuICAgIFxuICAgIE91dHB1dDogW1BoYXNlcjpHcm91cF0qL1xuICAgIGdldF9pbnRlcm5hbF9ncm91cChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxfZ3JvdXBzW2tleV07XG4gICAgfVxuXG4gICAgLypBZGRzIGEgc3ByaXRlIHRvIGFuIGludGVybmFsIGdyb3VwXG5cbiAgICBJbnB1dDoga2V5IFtzdHJpbmddIC0gVGhlIGdyb3VwJ3Mga2V5XG4gICAgICAgICAgIHNwcml0ZSBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgc3ByaXRlIHRvIGFkZFxuICAgICAgICAgICBcbiAgICBPdXRwdXQ6IFtib29sZWFuXSAtIFRydWUgaWYgdGhlIGdyb3VwIGV4aXN0cywgZmFsc2Ugb3RoZXJ3aXNlKi9cbiAgICBhZGRfdG9faW50ZXJuYWxfZ3JvdXAoa2V5LCBzcHJpdGUpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLmludGVybmFsX2dyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cHNba2V5XS5hZGQoc3ByaXRlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKkRlc3Ryb3lzIGFuIGludGVybmFsIGdyb3VwIGFuZCBpdHMgZWxlbWVudHNcbiAgICBcbiAgICBJbnB1dDoga2V5IFtzdHJpbmddIC0gVGhlIGdyb3VwJ3Mga2V5cyovXG4gICAgZGVzdHJveV9pbnRlcm5hbF9ncm91cChrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLmludGVybmFsX2dyb3VwcyAmJiB0aGlzLmludGVybmFsX2dyb3Vwc1trZXldKSB7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsX2dyb3Vwc1trZXldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qRGlzcGxheXMgdGhpcyB3aW5kb3dcblxuICAgIElucHV0OiBzaG93X2NhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpXG4gICAgICAgICAgIGFuaW1hdGUgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgcGxheXMgYW4gYW5pbWF0aW9uXG4gICAgICAgICAgIGNsb3NlX2NhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBzaG93KHNob3dfY2FsbGJhY2s/LCBhbmltYXRlID0gdHJ1ZSwgY2xvc2VfY2FsbGJhY2sgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfaXNfc2V0ID0gZmFsc2U7XG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZ3JvdXApLnRvKFxuICAgICAgICAgICAgICAgIHsgd2lkdGg6IHRoaXMuZ3JhcGhpY3Mud2lkdGgsIGhlaWdodDogdGhpcy5ncmFwaGljcy5oZWlnaHQgfSxcbiAgICAgICAgICAgICAgICBUUkFOU0lUSU9OX1RJTUUsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3dfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgc2hvd19jYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gdGhpcy5ncmFwaGljcy53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuaGVpZ2h0ID0gdGhpcy5ncmFwaGljcy5oZWlnaHQ7XG4gICAgICAgICAgICBpZiAoc2hvd19jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBzaG93X2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlVwZGF0ZXMgdGhlIHdpbmRvdyBwb3NpdGlvbiBpZiBuZWNlc3NhcnlcbiAgICBcbiAgICBJbnB1dDogZm9yY2UgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgZm9yY2VzIGFuIHVwZGF0ZSovXG4gICAgdXBkYXRlKGZvcmNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMubmVlZF9wb3NfdXBkYXRlIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkFkZHMgYSBzcHJpdGUgdG8gdGhlIGdyb3VwXG4gICAgXG4gICAgSW5wdXQ6IHNwcml0ZSBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgc3ByaXRlIHRvIGJlIGFkZGVkKi9cbiAgICBhZGRfc3ByaXRlX3RvX2dyb3VwKHNwcml0ZSwgaW50ZXJuYWxfZ3JvdXBfa2V5Pykge1xuICAgICAgICBsZXQgZ3JvdXAgPSB0aGlzLmdyb3VwO1xuICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXBfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVybmFsX2dyb3VwID0gdGhpcy5nZXRfaW50ZXJuYWxfZ3JvdXAoaW50ZXJuYWxfZ3JvdXBfa2V5KTtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbF9ncm91cCkge1xuICAgICAgICAgICAgICAgIGdyb3VwID0gaW50ZXJuYWxfZ3JvdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAuYWRkKHNwcml0ZSk7XG4gICAgICAgIHRoaXMuZXh0cmFfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgfVxuXG4gICAgLypDcmVhdGVzIGEgbmV3IHNwcml0ZSBhdCB0aGUgZ3JvdXBcbiAgICBcbiAgICBJbnB1dDogeCwgeSBbbnVtYmVyXSA9IFRoZSBzcHJpdGUncyBwb3NpdGlvblxuICAgICAgICAgICBrZXkgW3N0cmluZ10gPSBUaGUga2V5IGZvciB0aGUgc3ByaXRlXG4gICAgICAgICAgIGNvbG9yIFtudW1iZXJdID0gVGhlIGNvbG9yIHBhbGV0dGUgdG8gYmUgdXNlZFxuICAgICAgICAgICBmcmFtZSBbc3RyaW5nfG51bWJlcl0gPSBUaGUgZnJhbWUgdmFsdWUgKHNwcml0ZXNoZWV0cyBvbmx5KSovXG4gICAgY3JlYXRlX2F0X2dyb3VwKHgsIHksIGtleSwgY29sb3I/LCBmcmFtZT8sIGludGVybmFsX2dyb3VwX2tleT8pIHtcbiAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5ncm91cDtcbiAgICAgICAgaWYgKGludGVybmFsX2dyb3VwX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbF9ncm91cCA9IHRoaXMuZ2V0X2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSk7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXApIHtcbiAgICAgICAgICAgICAgICBncm91cCA9IGludGVybmFsX2dyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBzcHJpdGUgPSBncm91cC5jcmVhdGUoeCwgeSwga2V5LCBmcmFtZSk7XG4gICAgICAgIGlmIChjb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzcHJpdGUudGludCA9IGNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXh0cmFfc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgICAgIHJldHVybiBzcHJpdGU7XG4gICAgfVxuXG4gICAgLypTZW5kcyB0aGlzIHdpbmRvdyB0byB0aGUgZnJvbnQgb2YgdGhlIHNjcmVlbiovXG4gICAgc2VuZF90b19mcm9udCgpe1xuICAgICAgICAodGhpcy5ncm91cC5wYXJlbnQgYXMgUGhhc2VyLkdyb3VwKS5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xuICAgIH1cblxuICAgIC8qUmVtb3ZlcyBhIHNwcml0ZSBmcm9tIHRoZSBncm91cFxuICAgIFxuICAgIElucHV0OiBzcHJpdGUgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHNwcml0ZSB0byBiZSByZW1vdmVkXG4gICAgICAgICAgIGRlc3Ryb3kgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgdGhlIHNwcml0ZSBpcyBkZXN0cm95ZWQqL1xuICAgIHJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZT8sIGRlc3Ryb3kgPSB0cnVlKSB7XG4gICAgICAgIGlmIChzcHJpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5ncm91cC5yZW1vdmUoc3ByaXRlLCBkZXN0cm95KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5leHRyYV9zcHJpdGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcy5leHRyYV9zcHJpdGVzW2ldLCBkZXN0cm95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qUmVtb3ZlcyBzbW9vdGhpbmcgZWZmZWN0IGZyb20gYSB0ZXh0IHNwcml0ZVxuXG4gICAgSW5wdXQ6IHRleHRfc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRleHQgc3ByaXRlIHRvIHJlbW92ZSB0aGUgZWZmZWN0IGZyb20qL1xuICAgIHJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGUpIHtcbiAgICAgICAgdGV4dF9zcHJpdGUuc21vb3RoZWQgPSBmYWxzZTtcbiAgICAgICAgdGV4dF9zcHJpdGUuYXV0b1JvdW5kID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgYSBzcHJpdGUgdG8gcmVwcmVzZW50IHRoZSBnaXZlbiBsaW5lcyBvZiB0ZXh0XG5cbiAgICBJbnB1dDogbGluZXMgW2FycmF5XSAtIFRoZSB0ZXh0IGxpbmVzIChhcnJheSBvZiBzdHJpbmcpXG4gICAgICAgICAgIHBhZGRpbmdfeCBbbnVtYmVyXSAtIFBhZGRpbmcgb24gdGhlIHggYXhpc1xuICAgICAgICAgICBwYWRkaW5nX3kgW251bWJlcl0gLSBQYWRkaW5nIG9uIHRoZSB5IGF4aXNcbiAgICAgICAgICAgc3BhY2VfYmV3dGVlbiBsaW5lcyBbbnVtYmVyXSAtIE9mZnNldCBiZXR3ZWVuIGxpbmVzKi9cbiAgICBzZXRfdGV4dChsaW5lcywgcGFkZGluZ194PywgcGFkZGluZ195Pywgc3BhY2VfYmV0d2Vlbl9saW5lcz8sIGl0YWxpYyA9IGZhbHNlLCBhbmltYXRlID0gZmFsc2UpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpbmVzX3Nwcml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMubGluZXNfc3ByaXRlc1tpXS50ZXh0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMubGluZXNfc3ByaXRlc1tpXS5zaGFkb3cuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGluZXNfc3ByaXRlcyA9IFtdO1xuICAgICAgICBjb25zdCB0b3Bfc2hpZnQgPSBpdGFsaWMgPyAtMiA6IDA7XG4gICAgICAgIGNvbnN0IHhfcG9zID0gcGFkZGluZ194ID09PSB1bmRlZmluZWQgPyBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyA0IDogcGFkZGluZ194O1xuICAgICAgICBsZXQgeV9wb3MgPSBwYWRkaW5nX3kgPT09IHVuZGVmaW5lZCA/IG51bWJlcnMuV0lORE9XX1BBRERJTkdfVE9QICsgdG9wX3NoaWZ0IDogcGFkZGluZ195O1xuICAgICAgICBjb25zdCBmb250X25hbWUgPSBpdGFsaWMgPyAnZ3MtaXRhbGljLWJtcC1mb250JyA6ICdncy1ibXAtZm9udCc7XG5cbiAgICAgICAgbGV0IGxpbmVzX3Byb21pc2VzID0gW107XG4gICAgICAgIGxldCBhbmltX3Byb21pc2U7XG4gICAgICAgIGxldCBhbmltX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIGFuaW1fcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gYW5pbV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgbGV0IHRleHRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zLCB5X3BvcywgZm9udF9uYW1lLCBhbmltYXRlID8gJycgOiBsaW5lLCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgICAgICBsZXQgdGV4dF9zcHJpdGVfc2hhZG93ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zKzEsIHlfcG9zKzEsIGZvbnRfbmFtZSwgYW5pbWF0ZSA/ICcnIDogbGluZSwgbnVtYmVycy5GT05UX1NJWkUpO1xuXG4gICAgICAgICAgICB5X3BvcyArPSBudW1iZXJzLkZPTlRfU0laRSArIChzcGFjZV9iZXR3ZWVuX2xpbmVzID09PSB1bmRlZmluZWQgPyBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMgOiBzcGFjZV9iZXR3ZWVuX2xpbmVzKTtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmVfc21vb3RoKHRleHRfc3ByaXRlKTtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSB0aGlzLmZvbnRfY29sb3I7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZV9zbW9vdGgodGV4dF9zcHJpdGVfc2hhZG93KTtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy50aW50ID0gMHgwO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gbGluZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgIGxldCB3b3Jkc19pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmVfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGVhdGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMucmVwZWF0KDI1LCB3b3Jkcy5sZW5ndGgsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc3ByaXRlLnRleHQgKz0gd29yZHNbd29yZHNfaW5kZXhdICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LnRleHQgKz0gd29yZHNbd29yZHNfaW5kZXhdICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgKyt3b3Jkc19pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3Jkc19pbmRleCA9PT0gd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZV9wcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVzX3Byb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXBlYXRlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzX3Byb21pc2VzLnBvcCgpLnRoZW4ocmVwZWF0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsaW5lc19wcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKHJlc29sdmUgPT4gbGluZV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlX3NoYWRvdyk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZSk7XG4gICAgICAgICAgICB0aGlzLmxpbmVzX3Nwcml0ZXMucHVzaCh7dGV4dDogdGV4dF9zcHJpdGUsIHNoYWRvdzogdGV4dF9zcHJpdGVfc2hhZG93fSk7XG4gICAgICAgIH1cblxuICAgICAgICBQcm9taXNlLmFsbChsaW5lc19wcm9taXNlcykudGhlbihhbmltX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgIHJldHVybiBhbmltX3Byb21pc2U7XG4gICAgfVxuXG4gICAgLypDcmVhdGVzIGEgc3ByaXRlIHRvIHJlcHJlc2VudCB0aGUgZ2l2ZW4gdGV4dFxuICAgIFRoaXMgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBsZWZ0IGJ5IGRlZmF1bHRcblxuICAgIElucHV0OiB0ZXh0IFtzdHJpbmddIC0gVGhlIHRleHQgdG8gZGlzcGxheVxuICAgICAgICAgICByaWdodF9hbGlnbiAtIElmIHRydWUsIGFsaWduIHRoZSB0ZXh0IHRvIHRoZSByaWdodCBpbnN0ZWFkXG4gICAgICAgICAgIFxuICAgIE91dHB1dDogdGV4dCBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgdGV4dCBzcHJpdGVcbiAgICAgICAgICAgIHNoYWRvdyBbUGhhc2VyOlNwcml0ZV0gLSBUaGUgdGV4dCdzIHNoYWRvd1xuICAgICAgICAgICAgcmlnaHRfYWxpZ24gW2Jvb2xlYW5dIC0gVGhlIGlucHV0IHZhbHVlXG4gICAgICAgICAgICBpbml0aWFsX3ggW251bWJlcl0gLSBUaGUgdGV4dCdzIHggdmFsdWUqL1xuc2V0X3NpbmdsZV9saW5lX3RleHQodGV4dCwgcmlnaHRfYWxpZ24gPSBmYWxzZSwgaXRhbGljID0gZmFsc2UpOiBUZXh0T2JqIHtcbiAgICAgICAgY29uc3QgeF9wb3MgPSBpdGFsaWMgPyBudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyAyIDogbnVtYmVycy5XSU5ET1dfUEFERElOR19IICsgNDtcbiAgICAgICAgbGV0IHlfcG9zID0gaXRhbGljID8gbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgLSAyIDogbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1A7XG4gICAgICAgIGNvbnN0IGZvbnRfbmFtZSA9IGl0YWxpYyA/ICdncy1pdGFsaWMtYm1wLWZvbnQnIDogJ2dzLWJtcC1mb250JztcbiAgICAgICAgbGV0IHRleHRfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KHhfcG9zLCB5X3BvcywgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgIGxldCB0ZXh0X3Nwcml0ZV9zaGFkb3cgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MrMSwgeV9wb3MrMSwgZm9udF9uYW1lLCB0ZXh0LCBudW1iZXJzLkZPTlRfU0laRSk7XG4gICAgICAgIGlmIChyaWdodF9hbGlnbikge1xuICAgICAgICAgICAgdGV4dF9zcHJpdGUueCAtPSB0ZXh0X3Nwcml0ZS53aWR0aDtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy54IC09IHRleHRfc3ByaXRlX3NoYWRvdy53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZSk7XG4gICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSB0aGlzLmZvbnRfY29sb3I7XG4gICAgICAgIHRoaXMucmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZV9zaGFkb3cpO1xuICAgICAgICB0ZXh0X3Nwcml0ZV9zaGFkb3cudGludCA9IDB4MDtcblxuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZV9zaGFkb3cpO1xuICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHt0ZXh0OiB0ZXh0X3Nwcml0ZSwgc2hhZG93OiB0ZXh0X3Nwcml0ZV9zaGFkb3csIHJpZ2h0X2FsaWduOiByaWdodF9hbGlnbiwgaW5pdGlhbF94OiB4X3Bvc307XG4gICAgfVxuXG4gICAgLypDcmVhdGVzIGEgc3ByaXRlIHRvIHJlcHJlc2VudCBhIHNpbmdsZSBsaW5lIG9mIHRleHQgYXQgYSBnaXZlbiBsb2NhdGlvblxuXG4gICAgSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBUaGUgdGV4dCB0byBkaXNwbGF5XG4gICAgICAgICAgIHhfcG9zLCB5X3BvcyBbbnVtYmVyXSAtIFRoZSBkZXNpcmVkIHBvc2l0aW9uJ3MgeCBhbmQgeVxuICAgICAgICAgICByaWdodF9hbGlnbiBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgdGV4dCB3aWxsIGJlIHJpZ2h0LWFsaWduZWRcbiAgICAgICAgICAgaXNfY2VudGVyX3BvcyBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgdGV4dCB3aWxsIGJlIGNlbnRlcmVkXG4gICAgICAgICAgIGNvbG9yIFtudW1iZXJdIC0gVGhlIHRleHQncyBkZXNpcmVkIGNvbG9yXG4gICAgICAgICAgIHdpdGhfYmcgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgZ2l2ZXMgdGhlIHRleHQgYSBiYWNrZ3JvdW5kXG4gICAgICAgICAgIGludGVybmFsX2dyb3VwX2tleSBbc3RyaW5nXSAtIElmIHRoaXMgZXhpc3RzLCB0aGUgdGV4dCB3aWxsIGJlbG9uZyB0byB0aGF0IGdyb3VwXG5cbiAgICBPdXRwdXQ6IHRleHQgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQgc3ByaXRlXG4gICAgICAgICAgICBzaGFkb3cgW1BoYXNlcjpTcHJpdGVdIC0gVGhlIHRleHQncyBzaGFkb3dcbiAgICAgICAgICAgIHJpZ2h0X2FsaWduIFtib29sZWFuXSAtIFRoZSBpbnB1dCB2YWx1ZVxuICAgICAgICAgICAgaW5pdGlhbF94IFtudW1iZXJdIC0gVGhlIHRleHQncyB4IHZhbHVlXG4gICAgICAgICAgICB0ZXh0X2JnIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSB0ZXh0J3MgYmFja2dyb3VuZCovXG4gICAgc2V0X3RleHRfaW5fcG9zaXRpb24odGV4dCwgeF9wb3MsIHlfcG9zLCByaWdodF9hbGlnbiA9IGZhbHNlLCBpc19jZW50ZXJfcG9zID0gZmFsc2UsIGNvbG9yID0gdGhpcy5mb250X2NvbG9yLCB3aXRoX2JnID0gZmFsc2UsIGludGVybmFsX2dyb3VwX2tleSA9IHVuZGVmaW5lZCwgaXRhbGljID0gZmFsc2UpOiBUZXh0T2JqIHtcbiAgICAgICAgY29uc3QgZm9udF9uYW1lID0gaXRhbGljID8gJ2dzLWl0YWxpYy1ibXAtZm9udCcgOiAnZ3MtYm1wLWZvbnQnO1xuICAgICAgICBsZXQgdGV4dF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoeF9wb3MsIHlfcG9zLCBmb250X25hbWUsIHRleHQsIG51bWJlcnMuRk9OVF9TSVpFKTtcbiAgICAgICAgbGV0IHRleHRfc3ByaXRlX3NoYWRvdyA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dCh4X3BvcysxLCB5X3BvcysxLCBmb250X25hbWUsIHRleHQsIG51bWJlcnMuRk9OVF9TSVpFKTtcbiAgICAgICAgaWYgKGlzX2NlbnRlcl9wb3MpIHtcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLmNlbnRlclggPSB4X3BvcztcbiAgICAgICAgICAgIHRleHRfc3ByaXRlLmNlbnRlclkgPSB5X3BvcztcbiAgICAgICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy5jZW50ZXJYID0geF9wb3MgKyAxO1xuICAgICAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LmNlbnRlclkgPSB5X3BvcyArIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJpZ2h0X2FsaWduKSB7XG4gICAgICAgICAgICB0ZXh0X3Nwcml0ZS54IC09IHRleHRfc3ByaXRlLndpZHRoO1xuICAgICAgICAgICAgdGV4dF9zcHJpdGVfc2hhZG93LnggLT0gdGV4dF9zcHJpdGVfc2hhZG93LndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXh0X2JnO1xuICAgICAgICBpZiAod2l0aF9iZykge1xuICAgICAgICAgICAgdGV4dF9iZyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3ModGV4dF9zcHJpdGUueCAtIDEsIHRleHRfc3ByaXRlLnkpO1xuICAgICAgICAgICAgdGV4dF9iZy5iZWdpbkZpbGwodGhpcy5jb2xvciwgMSk7XG4gICAgICAgICAgICB0ZXh0X2JnLmRyYXdSZWN0KDAsIDAsIHRleHRfc3ByaXRlLndpZHRoICsgMywgbnVtYmVycy5GT05UX1NJWkUpO1xuICAgICAgICAgICAgdGV4dF9iZy5lbmRGaWxsKCk7XG4gICAgICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXBfa2V5ID09PSB1bmRlZmluZWQgfHwgIXRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9iZykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X2JnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVtb3ZlX3Ntb290aCh0ZXh0X3Nwcml0ZSk7XG4gICAgICAgIHRleHRfc3ByaXRlLnRpbnQgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yZW1vdmVfc21vb3RoKHRleHRfc3ByaXRlX3NoYWRvdyk7XG4gICAgICAgIHRleHRfc3ByaXRlX3NoYWRvdy50aW50ID0gMHgwO1xuXG4gICAgICAgIGxldCBhZGRlZF90b19pbnRlcm5hbCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW50ZXJuYWxfZ3JvdXBfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFkZGVkX3RvX2ludGVybmFsID0gdGhpcy5hZGRfdG9faW50ZXJuYWxfZ3JvdXAoaW50ZXJuYWxfZ3JvdXBfa2V5LCB0ZXh0X3Nwcml0ZV9zaGFkb3cpICYmIHRoaXMuYWRkX3RvX2ludGVybmFsX2dyb3VwKGludGVybmFsX2dyb3VwX2tleSwgdGV4dF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWRkZWRfdG9faW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRleHRfc3ByaXRlX3NoYWRvdyk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmFkZCh0ZXh0X3Nwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge3RleHQ6IHRleHRfc3ByaXRlLCBzaGFkb3c6IHRleHRfc3ByaXRlX3NoYWRvdywgcmlnaHRfYWxpZ246IHJpZ2h0X2FsaWduLCBpbml0aWFsX3g6IHhfcG9zLCB0ZXh0X2JnOiB0ZXh0X2JnfTtcbiAgICB9XG5cbiAgICAvKkNoYW5nZXMgdGhlIHRleHQgYW5kIHJlcG9zaXRpb25zIGl0XG5cbiAgICBJbnB1dDogbmV3X3RleHQgW2FycmF5XSAtIFRoZSBuZXcgdGV4dCB0byBzaG93IChhcnJheSBvZiBzdHJpbmcpXG4gICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIgW2FycmF5XSAtIENvbnRhaW5zIHRoZSB0ZXh0IGFuZCBpdHMgc2hhZG93XG4gICAgICAgICAgICAgICAgdGV4dCAtIFRoZSB0ZXh0IHRvIGNoYW5nZVxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHRcbiAgICAgICAgICAgIG5ld194LCBuZXdfeSBbbnVtYmVyXSAtIFRoZSB4IGFuZCB5IGZvciB0aGUgbmV3IHBvc2l0aW9uKi9cbiAgICB1cGRhdGVfdGV4dChuZXdfdGV4dCwgdGV4dF9zaGFkb3dfcGFpciwgbmV3X3g/LCBuZXdfeT8pIHtcbiAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LnNldFRleHQobmV3X3RleHQpO1xuICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy5zZXRUZXh0KG5ld190ZXh0KTtcbiAgICAgICAgdGhpcy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogbmV3X3gsIHk6IG5ld195fSwgdGV4dF9zaGFkb3dfcGFpcik7XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRoZSBwb3NpdGlvbiBvZiB0aGUgZ2l2ZW4gdGV4dFxuXG4gICAgSW5wdXQ6IG5ld19wb3NpdGlvbiBbYXJyYXldIC0gVGhlIGRlc2lyZWQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICB4IC0gVGhlIG5ldyB4XG4gICAgICAgICAgICAgICAgeSAtIFRoZSBuZXcgeVxuICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyIFthcnJheV0gLSBDb250YWlucyB0aGUgdGV4dCBhbmQgaXRzIHNoYWRvd1xuICAgICAgICAgICAgICAgIHRleHQgLSBUaGUgdGV4dCB0byBjaGFuZ2VcbiAgICAgICAgICAgICAgICBzaGFkb3cgLSBUaGUgc2hhZG93IG9mIHRoZSB0ZXh0Ki9cbiAgICB1cGRhdGVfdGV4dF9wb3NpdGlvbihuZXdfcG9zaXRpb24sIHRleHRfc2hhZG93X3BhaXIpIHtcbiAgICAgICAgaWYgKG5ld19wb3NpdGlvbi54ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dC54ID0gbmV3X3Bvc2l0aW9uLng7XG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnNoYWRvdy54ID0gbmV3X3Bvc2l0aW9uLnggKyAxO1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci5pbml0aWFsX3ggPSBuZXdfcG9zaXRpb24ueDtcbiAgICAgICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcueCA9IHRleHRfc2hhZG93X3BhaXIudGV4dC54IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3X3Bvc2l0aW9uLnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LnkgPSBuZXdfcG9zaXRpb24ueTtcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LnkgPSBuZXdfcG9zaXRpb24ueSArIDE7XG4gICAgICAgICAgICBpZiAodGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnKSB7XG4gICAgICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnLnkgPSB0ZXh0X3NoYWRvd19wYWlyLnRleHQueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dF9zaGFkb3dfcGFpci5yaWdodF9hbGlnbikge1xuICAgICAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LnggPSB0ZXh0X3NoYWRvd19wYWlyLmluaXRpYWxfeCAtIHRleHRfc2hhZG93X3BhaXIudGV4dC53aWR0aDtcbiAgICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LnggPSB0ZXh0X3NoYWRvd19wYWlyLmluaXRpYWxfeCAtIHRleHRfc2hhZG93X3BhaXIuc2hhZG93LndpZHRoICsgMTtcbiAgICAgICAgICAgIGlmICh0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcueCA9IHRleHRfc2hhZG93X3BhaXIudGV4dC54IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0aGUgY29sb3Igb2YgdGhlIGdpdmVuIHRleHRcblxuICAgIElucHV0OiBjb2xvciBbbnVtYmVyXSAtIFRoZSBuZXcgY29sb3IgdG8gc2V0XG4gICAgICAgICAgIHRleHRfc2hhZG93X3BhaXIgW2FycmF5XSAtIENvbnRhaW5zIHRoZSB0ZXh0IGFuZCBpdHMgc2hhZG93XG4gICAgICAgICAgICAgICAgdGV4dCAtIFRoZSB0ZXh0IHRvIGNoYW5nZVxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHQqL1xuICAgIHVwZGF0ZV90ZXh0X2NvbG9yKGNvbG9yLCB0ZXh0X3NoYWRvd19wYWlyKSB7XG4gICAgICAgIHRleHRfc2hhZG93X3BhaXIudGV4dC50aW50ID0gY29sb3I7XG4gICAgfVxuXG4gICAgLypSZW1vdmVzIGEgdGV4dCBhbmQgaXRzIHNoYWRvd1xuXG4gICAgSW5wdXQ6IHRleHRfc2hhZG93X3BhaXIgW2FycmF5XSAtIENvbnRhaW5zIHRoZSB0ZXh0IGFuZCBpdHMgc2hhZG93XG4gICAgICAgICAgICAgICAgdGV4dCAtIFRoZSB0ZXh0IHRvIHJlbW92ZVxuICAgICAgICAgICAgICAgIHNoYWRvdyAtIFRoZSBzaGFkb3cgb2YgdGhlIHRleHQqL1xuICAgIHJlbW92ZV90ZXh0KHRleHRfc2hhZG93X3BhaXIpIHtcbiAgICAgICAgdGV4dF9zaGFkb3dfcGFpci50ZXh0LmRlc3Ryb3koKTtcbiAgICAgICAgdGV4dF9zaGFkb3dfcGFpci5zaGFkb3cuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGV4dF9zaGFkb3dfcGFpci50ZXh0X2JnKSB7XG4gICAgICAgICAgICB0ZXh0X3NoYWRvd19wYWlyLnRleHRfYmcuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypDbG9zZXMgdGhlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpXG4gICAgICAgICAgIGFuaW1hdGUgW2Jvb2xlYW5dIC0gUGxheXMgYSBmYWRpbmcgYW5pbWF0aW9uIGlmIHRydWUqL1xuICAgIGNsb3NlKGNhbGxiYWNrPywgYW5pbWF0ZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5ncm91cCkudG8oXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgICAgICAgICAgVFJBTlNJVElPTl9USU1FLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kaWNhdG9yX2lzX3NldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X3BhZ2VfaW5kaWNhdG9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kaWNhdG9yX2lzX3NldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3JvdXAud2lkdGggPSAwO1xuICAgICAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qRGVzdHJveXMgdGhlIG1haW4gZ3JvdXAgb2YgdGhlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGFuaW1hdGUgW2Jvb2xlYW5dIC0gUGxheXMgYSBmYWRpbmcgYW5pbWF0aW9uIGlmIHRydWVcbiAgICAgICAgICAgZGVzdHJveV9jYWxsYmNhayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgZGVzdHJveShhbmltYXRlLCBkZXN0cm95X2NhbGxiYWNrPykge1xuICAgICAgICBsZXQgb25fZGVzdHJveSA9ICgpID0+IHsgXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlX2luZGljYXRvcl9pc19zZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X3BhZ2VfaW5kaWNhdG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXBzID0ge307XG4gICAgICAgICAgICBpZiAoZGVzdHJveV9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBkZXN0cm95X2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5ncm91cCkudG8oXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgICAgICAgICAgVFJBTlNJVElPTl9USU1FLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2Uob25fZGVzdHJveSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkVuYWJsZXMgdGhlIHBhZ2UgaW5kaWNhdG9ycyB0byBiZSBzaG93biBhbmQgcHJlcGFyZXMgdGhlIHNwYWNlIGFjY29yZGluZ2x5XG4gICAgVXNlZCBpbiB0aGUgUHN5bmVyZ3kgYW5kIEl0ZW1zIG1lbnUqL1xuICAgIGluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCkge1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMucGFnZV9udW1iZXJfYmFyKTtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuYmVnaW5GaWxsKHRoaXMuY29sb3IsIDEpO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhci5kcmF3UmVjdCgwLCAwLCBQQUdFX05VTUJFUl9XSURUSCwgUEFHRV9OVU1CRVJfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuZW5kRmlsbCgpO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodCk7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC5iZWdpbkZpbGwodGhpcy5jb2xvciwgMSk7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC5kcmF3UmVjdCgwLCAwLCBQQUdFX05VTUJFUl9XSURUSCwgUEFHRV9OVU1CRVJfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cgPSB0aGlzLmNyZWF0ZV9hdF9ncm91cCgodGhpcy53aWR0aCAtIDMpLCBQQUdFX0lORElDQVRPUl9BUlJPV19ZLCBcInBhZ2VfYXJyb3dcIik7XG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cuc2NhbGUueCA9IC0xO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LnggLT0gdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy53aWR0aDtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdyA9IHRoaXMuY3JlYXRlX2F0X2dyb3VwKDAsIFBBR0VfSU5ESUNBVE9SX0FSUk9XX1ksIFwicGFnZV9hcnJvd1wiKTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LmFscGhhID0gMDtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIGN1cnJlbnQgcGFnZSBpbiB0aGUgd2luZG93XG4gICAgXG4gICAgSW5wdXQ6IHBhZ2VfbnVtYmVyIFtudW1iZXJdIC0gVGhlIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgICBwYWdlX2luZGV4IFtudW1iZXJdIC0gVGhlIGN1cnJlbnQgcGFnZSBiZWluZyBzaG93biovXG4gICAgc2V0X3BhZ2VfaW5kaWNhdG9yKHBhZ2VfbnVtYmVyLCBwYWdlX2luZGV4KSB7XG4gICAgICAgIGlmIChwYWdlX251bWJlciA8PSAxKSByZXR1cm47XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyLndpZHRoID0gcGFnZV9udW1iZXIgKiBQQUdFX05VTUJFUl9XSURUSDtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIueCA9IHRoaXMud2lkdGggLSB0aGlzLnBhZ2VfbnVtYmVyX2Jhci53aWR0aCAtIDU7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyLmFscGhhID0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcGFnZV9udW1iZXI7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMucGFnZV9udW1iZXJfYmFyLnggKyBQQUdFX05VTUJFUl9XSURUSCAqIChpIC0gMSkgKyAoUEFHRV9OVU1CRVJfV0lEVEggPj4gMSk7XG4gICAgICAgICAgICBjb25zdCB5ID0gUEFHRV9OVU1CRVJfSEVJR0hUID4+IDE7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9ycy5wdXNoKHRoaXMuc2V0X3RleHRfaW5fcG9zaXRpb24oaS50b1N0cmluZygpLCB4LCB5LCBmYWxzZSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfaW5kaWNhdG9yX2hpZ2hsaWdodChwYWdlX251bWJlciwgcGFnZV9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X3BhZ2VfaW5kaWNhdG9yX2Fycm93KHBhZ2VfbnVtYmVyKTtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIHBhZ2UgaW5kaWNhdG9yIGhpZ2hsaWdodCBpbiB0aGUgd2luZG93XG4gICAgXG4gICAgSW5wdXQ6IHBhZ2VfbnVtYmVyIFtudW1iZXJdIC0gVGhlIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgICBwYWdlX2luZGV4IFtudW1iZXJdIC0gVGhlIGN1cnJlbnQgcGFnZSBiZWluZyBzaG93biovXG4gICAgc2V0X3BhZ2VfaW5kaWNhdG9yX2hpZ2hsaWdodChwYWdlX251bWJlciwgcGFnZV9pbmRleCkge1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQueCA9IHRoaXMud2lkdGggLSA1IC0gKHBhZ2VfbnVtYmVyIC0gcGFnZV9pbmRleCkgKiBQQUdFX05VTUJFUl9XSURUSDtcbiAgICB9XG5cbiAgICAvKlNldHMgdGhlIHBhZ2UgaW5kaWNhdG9yIGFycm93cyBpbiB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogcGFnZV9udW1iZXIgW251bWJlcl0gLSBUaGUgbnVtYmVyIG9mIHBhZ2VzKi9cbiAgICBzZXRfcGFnZV9pbmRpY2F0b3JfYXJyb3cocGFnZV9udW1iZXIpIHtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9sZWZ0X2Fycm93LmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3ggPSB0aGlzLndpZHRoIC0gNSAtIHBhZ2VfbnVtYmVyICogUEFHRV9OVU1CRVJfV0lEVEggLSB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cud2lkdGggLSAyO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cueCA9IHRoaXMuY2FsY3VsYXRlZF9hcnJvd19sZWZ0X3g7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyLnJ1bm5pbmcgJiYgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIucmVzdW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2Fycm93X3RpbWVyLmxvb3AoUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy54ID0gdGhpcy5jYWxjdWxhdGVkX2Fycm93X2xlZnRfeCArIH4oLXRoaXMucGFnZV9pbmRpY2F0b3JfbGVmdF9hcnJvdy54JTIpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cueCA9ICh0aGlzLndpZHRoIC0gMykgLSB+KC10aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LnglMik7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9yaWdodF9hcnJvdy54IC09IHRoaXMucGFnZV9pbmRpY2F0b3JfcmlnaHRfYXJyb3cud2lkdGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRpY2F0b3JfYXJyb3dfdGltZXIuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qUmVtb3ZlcyB0aGUgcGFnZSBpbmRpY2F0b3IgZnJvbSB0aGUgd2luZG93Ki9cbiAgICB1bnNldF9wYWdlX2luZGljYXRvcigpIHtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX2xlZnRfYXJyb3cuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kaWNhdG9yX3JpZ2h0X2Fycm93LmFscGhhID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhZ2VfaW5kaWNhdG9ycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVfdGV4dCh0aGlzLnBhZ2VfaW5kaWNhdG9yc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wYWdlX2luZGljYXRvcl9hcnJvd190aW1lci5wYXVzZSgpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjAnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KHZhbHVlLCBpdGVyYXRlZS5sZW5ndGggPT09IDEgPyBpdGVyYXRlZVswXSA6IGl0ZXJhdGVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgIHZhciB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW3sgJ2FnZSc6IDM2IH0sIFsnYWdlJywgNDBdXSkpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiAzMCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsImltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IEludGVyYWN0YWJsZU9iamVjdHMgfSBmcm9tIFwiLi4vSW50ZXJhY3RhYmxlT2JqZWN0c1wiO1xuaW1wb3J0IHsgZ2V0X2RpcmVjdGlvbnMsIHNwbGl0X2RpcmVjdGlvbiB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmV4cG9ydCBjb25zdCBldmVudF90eXBlcyA9IHtcbiAgICBDTElNQjogXCJjbGltYlwiLFxuICAgIFNQRUVEOiBcInNwZWVkXCIsXG4gICAgVEVMRVBPUlQ6IFwidGVsZXBvcnRcIixcbiAgICBKVU1QOiBcImp1bXBcIixcbiAgICBTVEVQOiBcInN0ZXBcIixcbiAgICBDT0xMSVNJT046IFwiY29sbGlzaW9uXCIsXG4gICAgU0xJREVSOiBcInNsaWRlclwiXG59O1xuXG5leHBvcnQgY2xhc3MgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgbG9jYXRpb25fa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGlkOiBudW1iZXI7XG4gICAgcHVibGljIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVyczogbnVtYmVyW107XG4gICAgcHVibGljIGFjdGl2YXRpb25fZGlyZWN0aW9uczogbnVtYmVyW107XG4gICAgcHVibGljIGR5bmFtaWM6IGJvb2xlYW47XG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbltdO1xuICAgIHB1YmxpYyBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdDogSW50ZXJhY3RhYmxlT2JqZWN0cztcbiAgICBwdWJsaWMgc3RhdGljIGlkX2luY3JlbWVudGVyOiBudW1iZXI7XG4gICAgcHVibGljIHN0YXRpYyBldmVudHM6IHtbaWQ6IG51bWJlcl06IFRpbGVFdmVudH07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCB0eXBlLCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdCkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLmxvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHRoaXMueCwgdGhpcy55KTtcbiAgICAgICAgdGhpcy5pZCA9IFRpbGVFdmVudC5pZF9pbmNyZW1lbnRlcisrO1xuICAgICAgICB0aGlzLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IEFycmF5LmlzQXJyYXkoYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzKSA/IGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFthY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnNdO1xuICAgICAgICBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9ucyA9IGdldF9kaXJlY3Rpb25zKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zID0gQXJyYXkuaXNBcnJheShhY3RpdmF0aW9uX2RpcmVjdGlvbnMpID8gYWN0aXZhdGlvbl9kaXJlY3Rpb25zIDogW2FjdGl2YXRpb25fZGlyZWN0aW9uc107XG4gICAgICAgIHRoaXMuZHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gQXJyYXkuaXNBcnJheShhY3RpdmUpID8gYWN0aXZlIDogbmV3IEFycmF5KHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmxlbmd0aCkuZmlsbChhY3RpdmUpO1xuICAgICAgICB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0ID0gb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdDtcbiAgICAgICAgVGlsZUV2ZW50LmV2ZW50c1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgfVxuXG4gICAgaXNfYWN0aXZlKGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBwb3NzaWJsZV9kaXJlY3Rpb25zID0gc3BsaXRfZGlyZWN0aW9uKGRpcmVjdGlvbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zc2libGVfZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlW3RoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluZGV4T2YocG9zc2libGVfZGlyZWN0aW9uc1tpXSldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFjdGl2YXRlX2F0KGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZVt0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmRleE9mKGRpcmVjdGlvbildID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlX2F0KGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGl2ZVt0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmRleE9mKGRpcmVjdGlvbildID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUubWFwKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUubWFwKCgpID0+IGZhbHNlKTtcbiAgICB9XG5cbiAgICBjaGVja19wb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MgPT09IHRoaXMueCAmJiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zID09PSB0aGlzLnk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9sb2NhdGlvbl9rZXkoeCwgeSkge1xuICAgICAgICByZXR1cm4geC50b1N0cmluZygpICsgXCJfXCIgKyB5LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9ldmVudF9ieV9pZChldmVudHMsIGlkKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQoZXZlbnRzLCB7aWQ6IGlkfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9ldmVudChpZCkge1xuICAgICAgICByZXR1cm4gVGlsZUV2ZW50LmV2ZW50c1tpZF07XG4gICAgfVxuXG4gICAgc3RhdGljIHJlc2V0KCkge1xuICAgICAgICBUaWxlRXZlbnQuaWRfaW5jcmVtZW50ZXIgPSAwO1xuICAgICAgICBUaWxlRXZlbnQuZXZlbnRzID0ge307XG4gICAgfVxufVxuXG5UaWxlRXZlbnQucmVzZXQoKTtcbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgY29uc3QgZGppbm5fc3RhdHVzID0ge1xuICAgIFNFVDogXCJzZXRcIixcbiAgICBTVEFOREJZOiBcInN0YW5kYnlcIixcbiAgICBSRUNPVkVSWTogXCJyZWNvdmVyeVwiXG59O1xuXG5leHBvcnQgY29uc3QgZGppbm5fZm9udF9jb2xvcnM9IHtcbiAgICBbZGppbm5fc3RhdHVzLlJFQ09WRVJZXTogbnVtYmVycy5ZRUxMT1dfRk9OVF9DT0xPUixcbiAgICBbZGppbm5fc3RhdHVzLlNUQU5EQlldOiBudW1iZXJzLlJFRF9GT05UX0NPTE9SLFxuICAgIFtkamlubl9zdGF0dXMuU0VUXTogbnVtYmVycy5ERUZBVUxUX0ZPTlRfQ09MT1Jcbn07XG5cbmV4cG9ydCBjbGFzcyBEamlubiB7XG4gICAgcHVibGljIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBwdWJsaWMgZWxlbWVudDogc3RyaW5nO1xuICAgIHB1YmxpYyBhYmlsaXR5X2tleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGhwX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIHBwX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGF0a19ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWZfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYWdpX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGx1a19ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBzdGF0dXM6IHN0cmluZztcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVjb3ZlcnlfdHVybjogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgYWJpbGl0eV9rZXlfbmFtZSxcbiAgICAgICAgaHBfYm9vc3QsXG4gICAgICAgIHBwX2Jvb3N0LFxuICAgICAgICBhdGtfYm9vc3QsXG4gICAgICAgIGRlZl9ib29zdCxcbiAgICAgICAgYWdpX2Jvb3N0LFxuICAgICAgICBsdWtfYm9vc3QsXG4gICAgICAgIGluZGV4XG4gICAgKSB7XG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmFiaWxpdHlfa2V5X25hbWUgPSBhYmlsaXR5X2tleV9uYW1lO1xuICAgICAgICB0aGlzLmhwX2Jvb3N0ID0gaHBfYm9vc3Q7XG4gICAgICAgIHRoaXMucHBfYm9vc3QgPSBwcF9ib29zdDtcbiAgICAgICAgdGhpcy5hdGtfYm9vc3QgPSBhdGtfYm9vc3Q7XG4gICAgICAgIHRoaXMuZGVmX2Jvb3N0ID0gZGVmX2Jvb3N0O1xuICAgICAgICB0aGlzLmFnaV9ib29zdCA9IGFnaV9ib29zdDtcbiAgICAgICAgdGhpcy5sdWtfYm9vc3QgPSBsdWtfYm9vc3Q7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gZGppbm5fc3RhdHVzLlNFVDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnJlY292ZXJ5X3R1cm4gPSAwO1xuICAgIH1cblxuICAgIHNldF9zdGF0dXMoc3RhdHVzLCBjaGFyKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICBjaGFyLnVwZGF0ZV9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xuICAgICAgICBjaGFyLnVwZGF0ZV9jbGFzcygpO1xuICAgICAgICBjaGFyLnVwZGF0ZV9hdHRyaWJ1dGVzKCk7XG4gICAgICAgIGNoYXIudXBkYXRlX2FiaWxpdGllcygpO1xuICAgIH1cblxuICAgIHN0YXRpYyBoYXNfc3RhbmRieV9kamlubihkamlubmlfbGlzdCwgbWVtYmVycykge1xuICAgICAgICByZXR1cm4gXy5zb21lKG1lbWJlcnMubWFwKGNoYXIgPT4gY2hhci5kamlubmkpLm1hcChkamlubl9rZXlzID0+IHtcbiAgICAgICAgICAgIHJldHVybiBkamlubl9rZXlzLmZpbHRlcihrZXkgPT4gZGppbm5pX2xpc3Rba2V5XS5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZKS5sZW5ndGg7XG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0X3N0YW5kYnlfZGppbm5pKGRqaW5uaV9saXN0LCBtZW1iZXJzKSB7XG4gICAgICAgIGxldCBzdGFuZGJ5X2RqaW5uaSA9IF8ubWFwVmFsdWVzKF8uZ3JvdXBCeShtZW1iZXJzLm1hcChjID0+IGMuZGppbm5pKS5mbGF0KCksIGtleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGppbm5pX2xpc3Rba2V5XS5lbGVtZW50O1xuICAgICAgICB9KSwgZGppbm5pX2tleXMgPT4gZGppbm5pX2tleXMuZmlsdGVyKGtleSA9PiBkamlubmlfbGlzdFtrZXldLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNUQU5EQlkpLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICBpZiAoIShlbGVtZW50IGluIHN0YW5kYnlfZGppbm5pKSkge1xuICAgICAgICAgICAgICAgIHN0YW5kYnlfZGppbm5pW2VsZW1lbnRdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhbmRieV9kamlubmk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldF90b19yZWNvdmVyeShkamlubmlfbGlzdCwgbWVtYmVycywgcmVxdWlyZW1lbnRzKSB7XG4gICAgICAgIGxldCByZXFfY291bnRlciA9IE9iamVjdC5hc3NpZ24oe30sIHJlcXVpcmVtZW50cyk7XG4gICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBsYXllcl9kamlubmkgPSBwbGF5ZXIuZGppbm5pO1xuICAgICAgICAgICAgbGV0IHJlY292ZXJ5X2NvdW50ZXIgPSAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwbGF5ZXJfZGppbm5pLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGppbm4gPSBkamlubmlfbGlzdFtwbGF5ZXJfZGppbm5pW2pdXTtcbiAgICAgICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzICE9PSBkamlubl9zdGF0dXMuU1RBTkRCWSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKHJlcV9jb3VudGVyW2RqaW5uLmVsZW1lbnRdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkamlubi5yZWNvdmVyeV90dXJuID0gcmVjb3ZlcnlfY291bnRlcjtcbiAgICAgICAgICAgICAgICAgICAgKytyZWNvdmVyeV9jb3VudGVyO1xuICAgICAgICAgICAgICAgICAgICBkamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5SRUNPVkVSWSwgcGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgLS1yZXFfY291bnRlcltkamlubi5lbGVtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLnNvbWUocmVxX2NvdW50ZXIsIEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufSIsImNvbnN0IEJBQ0tXQVJEID0gLTE7XG5jb25zdCBGT1JXQVJEID0gMTtcbmNvbnN0IENVUlNPUl9ERUxUQSA9IDQ7XG5jb25zdCBJTkRFWF9DSEFOR0VfVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5jb25zdCBDVVJTT1JfVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5cbmV4cG9ydCBjbGFzcyBDdXJzb3JDb250cm9sIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGlzX3JpZ2h0X2xlZnQ6IGJvb2xlYW47XG4gICAgcHVibGljIGlzX3VwX2Rvd246IGJvb2xlYW47XG4gICAgcHVibGljIG1heF9yaWdodF9sZWZ0X2dldHRlcjogRnVuY3Rpb247XG4gICAgcHVibGljIG1heF91cF9kb3duX2dldHRlcjogRnVuY3Rpb247XG4gICAgcHVibGljIGJhc2VfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgY3Vyc29yX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIG9uX3JpZ2h0X2xlZnRfY2hhbmdlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgb25fdXBfZG93bl9jaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyByaWdodF9sZWZ0X2luZGV4X2dldHRlcjogRnVuY3Rpb247XG4gICAgcHVibGljIHJpZ2h0X2xlZnRfaW5kZXhfc2V0dGVyOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgdXBfZG93bl9pbmRleF9nZXR0ZXI6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyB1cF9kb3duX2luZGV4X3NldHRlcjogRnVuY3Rpb247XG4gICAgcHVibGljIG9wZW5fY2hlY2tlcjogRnVuY3Rpb247XG4gICAgcHVibGljIGFjdGl2ZV9jaGVja2VyOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgY3Vyc29yX2Jhc2VfeF9nZXR0ZXI6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjdXJzb3JfYmFzZV95X2dldHRlcjogRnVuY3Rpb247XG4gICAgcHVibGljIHJpZ2h0X3ByZXNzZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxlZnRfcHJlc3NlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgdXBfcHJlc3NlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZG93bl9wcmVzc2VkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaG9vc2VfdGltZXJfcmVwZWF0OiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIGNob29zZV90aW1lcl9zdGFydDogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBzaWduYWxfYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW107XG4gICAgcHVibGljIGN1cnNvcjogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgY3Vyc29yX3R3ZWVuOiBQaGFzZXIuVHdlZW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgaXNfcmlnaHRfbGVmdCxcbiAgICAgICAgaXNfdXBfZG93bixcbiAgICAgICAgbWF4X3JpZ2h0X2xlZnRfZ2V0dGVyLFxuICAgICAgICBtYXhfdXBfZG93bl9nZXR0ZXIsXG4gICAgICAgIGJhc2VfZ3JvdXAsXG4gICAgICAgIG9uX3JpZ2h0X2xlZnRfY2hhbmdlLFxuICAgICAgICBvbl91cF9kb3duX2NoYW5nZSxcbiAgICAgICAgcmlnaHRfbGVmdF9pbmRleF9nZXR0ZXIsXG4gICAgICAgIHJpZ2h0X2xlZnRfaW5kZXhfc2V0dGVyLFxuICAgICAgICB1cF9kb3duX2luZGV4X2dldHRlcixcbiAgICAgICAgdXBfZG93bl9pbmRleF9zZXR0ZXIsXG4gICAgICAgIG9wZW5fY2hlY2tlcixcbiAgICAgICAgYWN0aXZlX2NoZWNrZXIsXG4gICAgICAgIGN1cnNvcl9iYXNlX3hfZ2V0dGVyLFxuICAgICAgICBjdXJzb3JfYmFzZV95X2dldHRlclxuICAgICkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmlzX3JpZ2h0X2xlZnQgPSBpc19yaWdodF9sZWZ0O1xuICAgICAgICB0aGlzLmlzX3VwX2Rvd24gPSBpc191cF9kb3duO1xuICAgICAgICB0aGlzLm1heF9yaWdodF9sZWZ0X2dldHRlciA9IG1heF9yaWdodF9sZWZ0X2dldHRlcjtcbiAgICAgICAgdGhpcy5tYXhfdXBfZG93bl9nZXR0ZXIgPSBtYXhfdXBfZG93bl9nZXR0ZXI7XG4gICAgICAgIHRoaXMuYmFzZV9ncm91cCA9IGJhc2VfZ3JvdXA7XG4gICAgICAgIHRoaXMub25fcmlnaHRfbGVmdF9jaGFuZ2UgPSBvbl9yaWdodF9sZWZ0X2NoYW5nZSA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9yaWdodF9sZWZ0X2NoYW5nZTtcbiAgICAgICAgdGhpcy5vbl91cF9kb3duX2NoYW5nZSA9IG9uX3VwX2Rvd25fY2hhbmdlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX3VwX2Rvd25fY2hhbmdlO1xuICAgICAgICB0aGlzLnJpZ2h0X2xlZnRfaW5kZXhfZ2V0dGVyID0gcmlnaHRfbGVmdF9pbmRleF9nZXR0ZXI7XG4gICAgICAgIHRoaXMucmlnaHRfbGVmdF9pbmRleF9zZXR0ZXIgPSByaWdodF9sZWZ0X2luZGV4X3NldHRlcjtcbiAgICAgICAgdGhpcy51cF9kb3duX2luZGV4X2dldHRlciA9IHVwX2Rvd25faW5kZXhfZ2V0dGVyO1xuICAgICAgICB0aGlzLnVwX2Rvd25faW5kZXhfc2V0dGVyID0gdXBfZG93bl9pbmRleF9zZXR0ZXI7XG4gICAgICAgIHRoaXMub3Blbl9jaGVja2VyID0gb3Blbl9jaGVja2VyO1xuICAgICAgICB0aGlzLmFjdGl2ZV9jaGVja2VyID0gYWN0aXZlX2NoZWNrZXI7XG4gICAgICAgIHRoaXMuY3Vyc29yX2Jhc2VfeF9nZXR0ZXIgPSBjdXJzb3JfYmFzZV94X2dldHRlcjtcbiAgICAgICAgdGhpcy5jdXJzb3JfYmFzZV95X2dldHRlciA9IGN1cnNvcl9iYXNlX3lfZ2V0dGVyO1xuICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG93bl9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5pbml0X2N1cnNvcigpO1xuICAgICAgICB0aGlzLmluaXRfY3Vyc29yX3R3ZWVuKCk7XG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gdGhpcy5zZXRfY29udHJvbCgpO1xuICAgIH1cblxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLmlzX3JpZ2h0X2xlZnQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0X3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoRk9SV0FSRCwgdHJ1ZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vblVwLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5fY2hlY2tlcigpIHx8ICF0aGlzLmFjdGl2ZV9jaGVja2VyKCkgfHwgIXRoaXMucmlnaHRfcHJlc3NlZCB8fCAhdGhpcy5pc19yaWdodF9sZWZ0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3Blbl9jaGVja2VyKCkgfHwgIXRoaXMuYWN0aXZlX2NoZWNrZXIoKSB8fCAhdGhpcy5pc19yaWdodF9sZWZ0KSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRfcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhCQUNLV0FSRCwgdHJ1ZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3Blbl9jaGVja2VyKCkgfHwgIXRoaXMuYWN0aXZlX2NoZWNrZXIoKSB8fCAhdGhpcy5sZWZ0X3ByZXNzZWQgfHwgIXRoaXMuaXNfcmlnaHRfbGVmdCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5VUCkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5fY2hlY2tlcigpIHx8ICF0aGlzLmFjdGl2ZV9jaGVja2VyKCkgfHwgIXRoaXMuaXNfdXBfZG93bikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvd25fcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25fcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhCQUNLV0FSRCwgZmFsc2UpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5VUCkub25VcC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcGVuX2NoZWNrZXIoKSB8fCAhdGhpcy5hY3RpdmVfY2hlY2tlcigpIHx8ICF0aGlzLnVwX3ByZXNzZWQgfHwgIXRoaXMuaXNfdXBfZG93bikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMudXBfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRE9XTikub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5fY2hlY2tlcigpIHx8ICF0aGlzLmFjdGl2ZV9jaGVja2VyKCkgfHwgIXRoaXMuaXNfdXBfZG93bikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwX3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kb3duX3ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoRk9SV0FSRCwgZmFsc2UpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5ET1dOKS5vblVwLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wZW5fY2hlY2tlcigpIHx8ICF0aGlzLmFjdGl2ZV9jaGVja2VyKCkgfHwgIXRoaXMuZG93bl9wcmVzc2VkIHx8ICF0aGlzLmlzX3VwX2Rvd24pIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgc2V0X2NoYW5nZV90aW1lcnMoc3RlcCwgcmlnaHRfbGVmdCkge1xuICAgICAgICB0aGlzLmNoYW5nZV9pbmRleChzdGVwLCByaWdodF9sZWZ0KTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuYWRkKFBoYXNlci5UaW1lci5RVUFSVEVSLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQubG9vcChJTkRFWF9DSEFOR0VfVElNRSwgdGhpcy5jaGFuZ2VfaW5kZXguYmluZCh0aGlzLCBzdGVwLCByaWdodF9sZWZ0KSk7XG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQuc3RhcnQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX2luZGV4KHN0ZXAsIHJpZ2h0X2xlZnQpIHtcbiAgICAgICAgY29uc3QgZ2V0dGVyID0gcmlnaHRfbGVmdCA/IHRoaXMucmlnaHRfbGVmdF9pbmRleF9nZXR0ZXIgOiB0aGlzLnVwX2Rvd25faW5kZXhfZ2V0dGVyO1xuICAgICAgICBjb25zdCBzZXR0ZXIgPSByaWdodF9sZWZ0ID8gdGhpcy5yaWdodF9sZWZ0X2luZGV4X3NldHRlciA6IHRoaXMudXBfZG93bl9pbmRleF9zZXR0ZXI7XG4gICAgICAgIGNvbnN0IG9uX2NoYW5nZSA9IHJpZ2h0X2xlZnQgPyB0aGlzLm9uX3JpZ2h0X2xlZnRfY2hhbmdlIDogdGhpcy5vbl91cF9kb3duX2NoYW5nZTtcbiAgICAgICAgY29uc3QgbWF4ID0gcmlnaHRfbGVmdCA/IHRoaXMubWF4X3JpZ2h0X2xlZnRfZ2V0dGVyIDogdGhpcy5tYXhfdXBfZG93bl9nZXR0ZXI7XG4gICAgICAgIGNvbnN0IGJlZm9yZV9pbmRleCA9IGdldHRlcigpO1xuICAgICAgICBzZXR0ZXIoKGdldHRlcigpICsgc3RlcCkgJSBtYXgoKSk7XG4gICAgICAgIGlmIChnZXR0ZXIoKSA8IDApIHtcbiAgICAgICAgICAgIHNldHRlcihtYXgoKSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xuICAgICAgICBvbl9jaGFuZ2UoYmVmb3JlX2luZGV4LCBnZXR0ZXIoKSk7XG4gICAgfVxuXG4gICAgc3RvcF90aW1lcnMoKSB7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0b3AoKTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0b3AoKTtcbiAgICB9XG5cbiAgICBpbml0X2N1cnNvcigpIHtcbiAgICAgICAgdGhpcy5jdXJzb3JfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5jdXJzb3JfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiY3Vyc29yXCIpO1xuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuYmFzZV9ncm91cC5hZGQodGhpcy5jdXJzb3JfZ3JvdXApO1xuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC54ID0gdGhpcy5jdXJzb3JfYmFzZV94X2dldHRlcigpO1xuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC55ID0gdGhpcy5jdXJzb3JfYmFzZV95X2dldHRlcigpO1xuICAgICAgICB0aGlzLmN1cnNvcl90d2VlbiA9IHRoaXMuZ2FtZS50d2VlbnMuY3JlYXRlKHRoaXMuY3Vyc29yKTtcbiAgICB9XG5cbiAgICBpbml0X2N1cnNvcl90d2VlbigpIHtcbiAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4udG8oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5jdXJzb3IueCAtIENVUlNPUl9ERUxUQSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLmN1cnNvci55ICsgQ1VSU09SX0RFTFRBXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQ1VSU09SX1RXRUVOX1RJTUUsXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc2V0X2N1cnNvcl9wb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yX3R3ZWVuLmlzUnVubmluZyAmJiB0aGlzLmN1cnNvcl90d2Vlbi5pc1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4ucmVzdW1lKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY3Vyc29yX3R3ZWVuLmlzUnVubmluZykge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JfdHdlZW4uc3RhcnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnNvcl90d2Vlbi5pc1BhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yX3R3ZWVuLnJlc3VtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLnggPSB0aGlzLmN1cnNvcl9iYXNlX3hfZ2V0dGVyKCk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2dyb3VwLnkgPSB0aGlzLmN1cnNvcl9iYXNlX3lfZ2V0dGVyKCk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMudXBfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRvd25fcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnNvcl9ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl90d2Vlbi5wYXVzZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MuZm9yRWFjaChzaWduYWxfYmluZGluZyA9PiB7XG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY3Vyc29yX3R3ZWVuLnN0b3AoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfZ3JvdXAuZGVzdHJveSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBFZmZlY3QsIGVmZmVjdF90eXBlcyB9IGZyb20gXCIuL0VmZmVjdFwiO1xuaW1wb3J0IHsgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBmaWdodGVyX3R5cGVzID0ge1xuICAgIEFMTFk6IDEsXG4gICAgRU5FTVk6IDIsXG59O1xuXG5leHBvcnQgY29uc3QgdGVtcG9yYXJ5X3N0YXR1cyA9IHtcbiAgICBERUxVU0lPTjogXCJkZWx1c2lvblwiLFxuICAgIFNUVU46IFwic3R1blwiLFxuICAgIFNMRUVQOiBcInNsZWVwXCIsXG4gICAgU0VBTDogXCJzZWFsXCIsXG4gICAgREVBVEhfQ1VSU0U6IFwiZGVhdGhfY3Vyc2VcIlxufTtcblxuZXhwb3J0IGNvbnN0IHBlcm1hbmVudF9zdGF0dXMgPSB7XG4gICAgRE9XTkVEOiBcImRvd25lZFwiLFxuICAgIFBPSVNPTjogXCJwb2lzb25cIixcbiAgICBWRU5PTTogXCJ2ZW5vbVwiLFxuICAgIEVRVUlQX0NVUlNFOiBcImVxdWlwX2N1cnNlXCIsXG4gICAgSEFVTlQ6IFwiaGF1bnRcIlxufTtcblxuZXhwb3J0IGNvbnN0IG9uX2NhdGNoX3N0YXR1c19tc2cgPSB7XG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuREVMVVNJT05dOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9IGlzIHdyYXBwZWQgaW4gZGVsdXNpb24hYCxcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBoYXMgYmVlbiBzdHVubmVkIWAsXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuU0xFRVBdOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9IGZhbGxzIGFzbGVlcCFgLFxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNFQUxdOiB0YXJnZXQgPT4gYCR7dGFyZ2V0Lm5hbWV9J3MgUHN5bmVyZ3kgaGFzIGJlZW4gc2VhbGVkIWAsXG4gICAgW3RlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VdOiB0YXJnZXQgPT4gYFRoZSBTcGlyaXQgb2YgRGVhdGggZW1icmFjZXMgJHt0YXJnZXQubmFtZX0hYCxcbiAgICBbcGVybWFuZW50X3N0YXR1cy5ET1dORURdOiB0YXJnZXQgPT4ge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5BTExZID8gYCR7dGFyZ2V0Lm5hbWV9IHdhcyBkb3duZWQuLi5gIDogYFlvdSBmZWxsZWQgJHt0YXJnZXQubmFtZX0hYDtcbiAgICB9LFxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgaW5mZWN0ZWQgd2l0aCBwb2lzb24hYCxcbiAgICBbcGVybWFuZW50X3N0YXR1cy5WRU5PTV06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gaXMgaW5mZWN0ZWQgd2l0aCBkZWFkbHkgcG9pc29uIWAsXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuSEFVTlRdOiB0YXJnZXQgPT4gYEFuIGV2aWwgc3Bpcml0IGdyaXBzICR7dGFyZ2V0Lm5hbWV9IWBcbn07XG5cbmV4cG9ydCBjb25zdCBvbl9yZW1vdmVfc3RhdHVzX21zZyA9IHtcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTl06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0gc2VlcyBjbGVhcmx5IG9uY2UgYWdhaW4hYCxcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSBpcyBubyBsb25nZXIgc3R1bm5lZCFgLFxuICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSB3YWtlcyBmcm9tIHNsdW1iZXIhYCxcbiAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TRUFMXTogdGFyZ2V0ID0+IGAke3RhcmdldC5uYW1lfSdzIFBzeW5lcmd5IHNlYWwgaXMgZ29uZSFgLFxuICAgIFtwZXJtYW5lbnRfc3RhdHVzLkRPV05FRF06IHRhcmdldCA9PiBgJHt0YXJnZXQubmFtZX0ncyBoYXMgYmVlbiByZXZpdmVkIWAsXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuUE9JU09OXTogdGFyZ2V0ID0+IGBUaGUgcG9pc29uIGlzIHB1cmdlZCBmcm9tICR7dGFyZ2V0Lm5hbWV9IWAsXG4gICAgW3Blcm1hbmVudF9zdGF0dXMuVkVOT01dOiB0YXJnZXQgPT4gYFRoZSB2ZW5vbSBpcyBwdXJnZWQgZnJvbSAke3RhcmdldC5uYW1lfSFgXG59O1xuXG5leHBvcnQgY2xhc3MgUGxheWVyIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyB0ZW1wb3Jhcnlfc3RhdHVzOiBTZXQ8c3RyaW5nPjtcbiAgICBwdWJsaWMgcGVybWFuZW50X3N0YXR1czogU2V0PHN0cmluZz47XG4gICAgcHVibGljIGVmZmVjdHM6IEVmZmVjdFtdO1xuICAgIHB1YmxpYyBlZmZlY3RfdHVybnNfY291bnQ6IHtbZWZmZWN0OiBzdHJpbmddOiBudW1iZXJ8e1tlbGVtZW50OiBzdHJpbmddOiBudW1iZXJ9fTtcbiAgICBwdWJsaWMgYmF0dGxlX3NjYWxlOiBudW1iZXI7XG4gICAgcHVibGljIGZpZ2h0ZXJfdHlwZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Ioa2V5X25hbWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMucGVybWFuZW50X3N0YXR1cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5lZmZlY3RzID0gW107XG4gICAgICAgIHRoaXMuaW5pdF9lZmZlY3RfdHVybnNfY291bnQoKTtcbiAgICB9XG5cbiAgICBpbml0X2VmZmVjdF90dXJuc19jb3VudCgpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnQgPSB7XG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5ERUxVU0lPTl06IDAsXG4gICAgICAgICAgICBbdGVtcG9yYXJ5X3N0YXR1cy5TVFVOXTogMCxcbiAgICAgICAgICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNMRUVQXTogMCxcbiAgICAgICAgICAgIFt0ZW1wb3Jhcnlfc3RhdHVzLlNFQUxdOiAwLFxuICAgICAgICAgICAgW3RlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0VdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5NQVhfSFBdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5NQVhfUFBdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5ERUZFTlNFXTogMCxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IDAsXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiAwLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5QT1dFUl06IHt9LFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5SRVNJU1RdOiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF90eXBlcy5QT1dFUl1bZWxlbWVudF0gPSAwO1xuICAgICAgICAgICAgdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0X3R5cGVzLlJFU0lTVF1bZWxlbWVudF0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0KSB7XG4gICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdC5zdGF0dXNfa2V5X25hbWU7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfSFA6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdC50eXBlO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUE9XRVI6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdC50eXBlICsgXCJfXCIgKyBlZmZlY3QuYXR0cmlidXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldF9lZmZlY3RfdHVybnNfY291bnQoZWZmZWN0KSB7XG4gICAgICAgIHN3aXRjaCAoZWZmZWN0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC5zdGF0dXNfa2V5X25hbWVdO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3QudHlwZV07XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdW2VmZmVjdC5hdHRyaWJ1dGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHNldF9lZmZlY3RfdHVybnNfY291bnQoZWZmZWN0LCB2YWx1ZSA9IC0xLCByZWxhdGl2ZSA9IHRydWUpIHtcbiAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3Quc3RhdHVzX2tleV9uYW1lXSA9IHJlbGF0aXZlID8gKHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC5zdGF0dXNfa2V5X25hbWVdIGFzIG51bWJlcikgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3QudHlwZV0gPSByZWxhdGl2ZSA/ICh0aGlzLmVmZmVjdF90dXJuc19jb3VudFtlZmZlY3QudHlwZV0gYXMgbnVtYmVyKSArIHZhbHVlIDogdmFsdWU7O1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUE9XRVI6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5SRVNJU1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdC50eXBlXVtlZmZlY3QuYXR0cmlidXRlXSA9IHJlbGF0aXZlID8gdGhpcy5lZmZlY3RfdHVybnNfY291bnRbZWZmZWN0LnR5cGVdW2VmZmVjdC5hdHRyaWJ1dGVdICsgdmFsdWUgOiB2YWx1ZTs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRfZWZmZWN0KGVmZmVjdF9vYmosIGVmZmVjdF9vd25lcl9pbnN0YW5jZSwgYXBwbHkgPSBmYWxzZSkge1xuICAgICAgICBsZXQgZWZmZWN0ID0gbmV3IEVmZmVjdChcbiAgICAgICAgICAgIGVmZmVjdF9vYmoudHlwZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoucXVhbnRpdHksXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLm9wZXJhdG9yLFxuICAgICAgICAgICAgZWZmZWN0X293bmVyX2luc3RhbmNlLFxuICAgICAgICAgICAgZWZmZWN0X29iai5xdWFudGl0eV9pc19hYnNvbHV0ZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoucmF0ZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouY2hhbmNlLFxuICAgICAgICAgICAgZWZmZWN0X29iai5hdHRyaWJ1dGUsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmFkZF9zdGF0dXMsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnN0YXR1c19rZXlfbmFtZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoudHVybnNfcXVhbnRpdHksXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQsXG4gICAgICAgICAgICBlZmZlY3Rfb2JqLmRhbWFnZV9mb3JtdWxhX2tleV9uYW1lLFxuICAgICAgICAgICAgZWZmZWN0X29iai51c2FnZSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmoub25fY2FzdGVyLFxuICAgICAgICAgICAgZWZmZWN0X29iai5yZWxhdGl2ZV90b19wcm9wZXJ0eSxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouc3ViX2VmZmVjdCxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouZWZmZWN0X21zZyxcbiAgICAgICAgICAgIGVmZmVjdF9vYmouc2hvd19tc2csXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZWZmZWN0cy5wdXNoKGVmZmVjdCk7XG4gICAgICAgIGxldCBjaGFuZ2VzO1xuICAgICAgICBpZiAoYXBwbHkpIHtcbiAgICAgICAgICAgIGNoYW5nZXMgPSBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVmZmVjdDogZWZmZWN0LFxuICAgICAgICAgICAgY2hhbmdlczogY2hhbmdlc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbW92ZV9lZmZlY3QoZWZmZWN0X3RvX3JlbW92ZSwgYXBwbHkgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSB0aGlzLmVmZmVjdHMuZmlsdGVyKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0ICE9PSBlZmZlY3RfdG9fcmVtb3ZlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFwcGx5KSB7XG4gICAgICAgICAgICBlZmZlY3RfdG9fcmVtb3ZlLmFwcGx5X2VmZmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkX3Blcm1hbmVudF9zdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMucGVybWFuZW50X3N0YXR1cy5hZGQoc3RhdHVzKTtcbiAgICB9XG5cbiAgICByZW1vdmVfcGVybWFuZW50X3N0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5wZXJtYW5lbnRfc3RhdHVzLmRlbGV0ZShzdGF0dXMpO1xuICAgIH1cblxuICAgIGhhc19wZXJtYW5lbnRfc3RhdHVzKHN0YXR1cykge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhzdGF0dXMpO1xuICAgIH1cblxuICAgIGFkZF90ZW1wb3Jhcnlfc3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuYWRkKHN0YXR1cyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlX3RlbXBvcmFyeV9zdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5kZWxldGUoc3RhdHVzKTtcbiAgICB9XG5cbiAgICBoYXNfdGVtcG9yYXJ5X3N0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5oYXMoc3RhdHVzKTtcbiAgICB9XG5cbiAgICBpc19wYXJhbHl6ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU0xFRVApIHx8IHRoaXMudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TVFVOKTtcbiAgICB9XG5cbiAgICBpc19wb2lzb25lZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWFuZW50X3N0YXR1cy5oYXMocGVybWFuZW50X3N0YXR1cy5QT0lTT04pKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVybWFuZW50X3N0YXR1cy5QT0lTT047XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZXJtYW5lbnRfc3RhdHVzLmhhcyhwZXJtYW5lbnRfc3RhdHVzLlZFTk9NKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcm1hbmVudF9zdGF0dXMuVkVOT01cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBBYmlsaXR5IH0gZnJvbSBcIi4vQWJpbGl0eVwiO1xuaW1wb3J0IHsgRW5lbXkgfSBmcm9tIFwiLi9FbmVteVwiO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL0l0ZW1cIjtcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSBcIi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7IHZhcmlhdGlvbiwgZWxlbWVudHMgfSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBjb25zdCBlZmZlY3RfdHlwZXMgPSB7XG4gICAgTUFYX0hQOiBcIm1heF9ocFwiLFxuICAgIE1BWF9QUDogXCJtYXhfcHBcIixcbiAgICBBVFRBQ0s6IFwiYXR0YWNrXCIsXG4gICAgREVGRU5TRTogXCJkZWZlbnNlXCIsXG4gICAgQUdJTElUWTogXCJhZ2lsaXR5XCIsXG4gICAgTFVDSzogXCJsdWNrXCIsXG4gICAgUE9XRVI6IFwicG93ZXJcIixcbiAgICBSRVNJU1Q6IFwicmVzaXN0XCIsXG4gICAgQ1VSUkVOVF9IUDogXCJjdXJyZW50X2hwXCIsXG4gICAgQ1VSUkVOVF9QUDogXCJjdXJyZW50X3BwXCIsXG4gICAgSFBfUkVDT1ZFUlk6IFwiaHBfcmVjb3ZlcnlcIixcbiAgICBQUF9SRUNPVkVSWTogXCJwcF9yZWNvdmVyeVwiLFxuICAgIENSSVRJQ0FMUzogXCJjcml0aWNhbHNcIixcbiAgICBDT1VOVEVSX1NUUklLRTogXCJjb3VudGVyX3N0cmlrZVwiLFxuICAgIFRFTVBPUkFSWV9TVEFUVVM6IFwidGVtcG9yYXJ5X3N0YXR1c1wiLFxuICAgIFBFUk1BTkVOVF9TVEFUVVM6IFwicGVybWFuZW50X3N0YXR1c1wiLFxuICAgIFRVUk5TOiBcInR1cm5zXCIsXG4gICAgRU5DT1VOVEVSUzogXCJlbmNvdW50ZXJzXCIsXG4gICAgRkxFRTogXCJmbGVlXCIsXG4gICAgRU5EX1RIRV9ST1VORDogXCJlbmRfdGhlX3JvdW5kXCIsXG4gICAgQUJJTElUWV9QT1dFUjogXCJhYmlsaXR5X3Bvd2VyXCIsXG4gICAgU0VUX0RKSU5OOiBcInNldF9kamlublwiLFxuICAgIERBTUFHRV9NT0RJRklFUjogXCJkYW1hZ2VfbW9kaWZpZXJcIixcbiAgICBEQU1BR0VfSU5QVVQ6IFwiZGFtYWdlX2lucHV0XCJcbn07XG5cbmV4cG9ydCBjb25zdCBlZmZlY3RfdHlwZV9zdGF0ID0ge1xuICAgIFtlZmZlY3RfdHlwZXMuTUFYX0hQXTogXCJtYXhfaHBcIixcbiAgICBbZWZmZWN0X3R5cGVzLk1BWF9QUF06IFwibWF4X3BwXCIsXG4gICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiBcImF0a1wiLFxuICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IFwiZGVmXCIsXG4gICAgW2VmZmVjdF90eXBlcy5BR0lMSVRZXTogXCJhZ2lcIixcbiAgICBbZWZmZWN0X3R5cGVzLkxVQ0tdOiBcImx1a1wiLFxuICAgIFtlZmZlY3RfdHlwZXMuQ1VSUkVOVF9IUF06IFwiY3VycmVudF9ocFwiLFxuICAgIFtlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUF06IFwiY3VycmVudF9wcFwiXG59XG5cbmV4cG9ydCBjb25zdCBlZmZlY3RfbmFtZXMgPSB7XG4gICAgW2VmZmVjdF90eXBlcy5NQVhfSFBdOiBcIkhQXCIsXG4gICAgW2VmZmVjdF90eXBlcy5NQVhfUFBdOiBcIlBQXCIsXG4gICAgW2VmZmVjdF90eXBlcy5BVFRBQ0tdOiBcIkF0dGFja1wiLFxuICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IFwiRGVmZW5zZVwiLFxuICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IFwiQWdpbGl0eVwiLFxuICAgIFtlZmZlY3RfdHlwZXMuTFVDS106IFwiTHVja1wiLFxuICAgIFtlZmZlY3RfdHlwZXMuUE9XRVJdOiBcIlBvd2VyXCIsXG4gICAgW2VmZmVjdF90eXBlcy5SRVNJU1RdOiBcIlJlc2lzdFwiXG59O1xuXG5leHBvcnQgY29uc3QgZWZmZWN0X29wZXJhdG9ycyA9IHtcbiAgICBQTFVTOiBcInBsdXNcIixcbiAgICBNSU5VUzogXCJtaW51c1wiLFxuICAgIFRJTUVTOiBcInRpbWVzXCIsXG4gICAgRElWSURFOiBcImRpdmlkZVwiXG59O1xuXG5leHBvcnQgY29uc3QgZWZmZWN0X3VzYWdlcyA9IHtcbiAgICBOT1RfQVBQTFk6IFwibm90X2FwcGx5XCIsXG4gICAgT05fVVNFOiBcIm9uX3VzZVwiLFxuICAgIE9OX1RBS0U6IFwib25fdGFrZVwiLFxuICAgIEJBVFRMRV9ST1VORF9TVEFSVDogXCJiYXR0bGVfcm91bmRfc3RhcnRcIixcbiAgICBCQVRUTEVfUk9VTkRfRU5EOiBcImJhdHRsZV9yb3VuZF9lbmRcIixcbiAgICBQTEFZRVJfVFVSTl9TVEFSVDogXCJwbGF5ZXJfdHVybl9zdGFydFwiLFxuICAgIFBMQVlFUl9UVVJOX0VORDogXCJwbGF5ZXJfdHVybl9lbmRcIlxufTtcblxuZXhwb3J0IGNvbnN0IGVmZmVjdF9tc2cgPSB7XG4gICAgYXVyYTogdGFyZ2V0ID0+IGBBIHByb3RlY3RpdmUgYXVyYSBlbmNpcmNsZXMgJHt0YXJnZXQubmFtZX0hYCxcbiAgICBkb3VibGU6ICgpID0+IGBBbmQgaXQgZ290IGRvdWJsZWQhYCxcbn07XG5cbmV4cG9ydCBjbGFzcyBFZmZlY3Qge1xuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIHF1YW50aXR5OiBudW1iZXI7XG4gICAgcHVibGljIG9wZXJhdG9yOiBzdHJpbmc7XG4gICAgcHVibGljIGVmZmVjdF9vd25lcl9pbnN0YW5jZTogQWJpbGl0eXxJdGVtO1xuICAgIHB1YmxpYyBxdWFudGl0eV9pc19hYnNvbHV0ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgcmF0ZTogbnVtYmVyO1xuICAgIHB1YmxpYyBjaGFuY2U6IG51bWJlcjtcbiAgICBwdWJsaWMgYXR0cmlidXRlOiBzdHJpbmc7XG4gICAgcHVibGljIGFkZF9zdGF0dXM6IGJvb2xlYW47XG4gICAgcHVibGljIHN0YXR1c19rZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyB0dXJuc19xdWFudGl0eTogbnVtYmVyO1xuICAgIHB1YmxpYyB0dXJuX2NvdW50OiBudW1iZXI7XG4gICAgcHVibGljIHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ6IGJvb2xlYW47XG4gICAgcHVibGljIGRhbWFnZV9mb3JtdWxhX2tleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHVzYWdlOiBzdHJpbmc7XG4gICAgcHVibGljIG9uX2Nhc3RlcjogYm9vbGVhbjtcbiAgICBwdWJsaWMgcmVsYXRpdmVfdG9fcHJvcGVydHk6IHN0cmluZztcbiAgICBwdWJsaWMgZWZmZWN0X21zZzogc3RyaW5nO1xuICAgIHB1YmxpYyBzaG93X21zZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXJ8RW5lbXk7XG4gICAgcHVibGljIHN1Yl9lZmZlY3Q6IHtcbiAgICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgICBxdWFudGl0eV9pc19hYnNvbHV0ZTogYm9vbGVhbixcbiAgICAgICAgcmF0ZTogbnVtYmVyLFxuICAgICAgICBjaGFuY2U6IG51bWJlcixcbiAgICAgICAgYXR0cmlidXRlOiBzdHJpbmcsXG4gICAgICAgIHZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQ6IGJvb2xlYW4sXG4gICAgICAgIHVzYWdlOiBzdHJpbmcsXG4gICAgICAgIG9uX2Nhc3RlcjogYm9vbGVhbixcbiAgICAgICAgb3BlcmF0b3I6IHN0cmluZ1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcXVhbnRpdHksXG4gICAgICAgIG9wZXJhdG9yLFxuICAgICAgICBlZmZlY3Rfb3duZXJfaW5zdGFuY2UsXG4gICAgICAgIHF1YW50aXR5X2lzX2Fic29sdXRlLCAvL2RlZmF1bHQ6IGZhbHNlXG4gICAgICAgIHJhdGUsIC8vZGVmYXVsdDogMS4wXG4gICAgICAgIGNoYW5jZSwgLy9kZWZhdWx0OiAxLjBcbiAgICAgICAgYXR0cmlidXRlLCAvL2RlZmF1bHQ6IG5vX2VsZW1lbnRcbiAgICAgICAgYWRkX3N0YXR1cywgLy9ib29sZWFuLiBJZiBmYWxzZSwgcmVtb3ZlIHN0YXR1c1xuICAgICAgICBzdGF0dXNfa2V5X25hbWUsXG4gICAgICAgIHR1cm5zX3F1YW50aXR5LFxuICAgICAgICB2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0LFxuICAgICAgICBkYW1hZ2VfZm9ybXVsYV9rZXlfbmFtZSwgLy9pbnN0ZWFkIG9mIHVzaW5nIHRoZSBvcGVyYXRvciwgdXNlcyBhIGRhbWFnZSBmb3JtdWxhLiBSZXR1cm4gdmFsdWUgaXMgbm90IHVzZWQuXG4gICAgICAgIHVzYWdlLFxuICAgICAgICBvbl9jYXN0ZXIsIC8vYm9vbGVhbi4gZGVmYXVsdCBmYWxzZS4gSWYgdHJ1ZSwgdGhlIGNhc3RlciB3aWxsIHRha2UgdGhlIGVmZmVjdC5cbiAgICAgICAgcmVsYXRpdmVfdG9fcHJvcGVydHksIC8vbWFrZSB0aGUgY2FsY3VsYXRpb24gYmFzZWQgb24gYSBwbGF5ZXIgcHJvcGVydHlcbiAgICAgICAgc3ViX2VmZmVjdCxcbiAgICAgICAgZWZmZWN0X21zZyxcbiAgICAgICAgc2hvd19tc2csXG4gICAgICAgIGNoYXJcbiAgICApIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHRoaXMuZWZmZWN0X293bmVyX2luc3RhbmNlID0gZWZmZWN0X293bmVyX2luc3RhbmNlO1xuICAgICAgICB0aGlzLnF1YW50aXR5X2lzX2Fic29sdXRlID0gcXVhbnRpdHlfaXNfYWJzb2x1dGUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogcXVhbnRpdHlfaXNfYWJzb2x1dGU7XG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGUgPT09IHVuZGVmaW5lZCA/IDEuMCA6IHJhdGU7XG4gICAgICAgIHRoaXMuY2hhbmNlID0gY2hhbmNlID09PSB1bmRlZmluZWQgPyAxLjAgOiBjaGFuY2U7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlID09PSB1bmRlZmluZWQgPyBlbGVtZW50cy5OT19FTEVNRU5UIDogYXR0cmlidXRlO1xuICAgICAgICB0aGlzLmFkZF9zdGF0dXMgPSBhZGRfc3RhdHVzO1xuICAgICAgICB0aGlzLnN0YXR1c19rZXlfbmFtZSA9IHN0YXR1c19rZXlfbmFtZTtcbiAgICAgICAgdGhpcy50dXJuc19xdWFudGl0eSA9IHR1cm5zX3F1YW50aXR5O1xuICAgICAgICB0aGlzLnR1cm5fY291bnQgPSB0dXJuc19xdWFudGl0eTtcbiAgICAgICAgdGhpcy52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0ID0gdmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB2YXJpYXRpb25fb25fZmluYWxfcmVzdWx0O1xuICAgICAgICB0aGlzLmRhbWFnZV9mb3JtdWxhX2tleV9uYW1lID0gZGFtYWdlX2Zvcm11bGFfa2V5X25hbWU7XG4gICAgICAgIHRoaXMudXNhZ2UgPSB1c2FnZSA9PT0gdW5kZWZpbmVkID8gZWZmZWN0X3VzYWdlcy5OT1RfQVBQTFkgOiB1c2FnZTtcbiAgICAgICAgdGhpcy5vbl9jYXN0ZXIgPSBvbl9jYXN0ZXIgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogb25fY2FzdGVyO1xuICAgICAgICB0aGlzLnJlbGF0aXZlX3RvX3Byb3BlcnR5ID0gcmVsYXRpdmVfdG9fcHJvcGVydHk7XG4gICAgICAgIHRoaXMuZWZmZWN0X21zZyA9IGVmZmVjdF9tc2c7XG4gICAgICAgIHRoaXMuc2hvd19tc2cgPSBzaG93X21zZyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHNob3dfbXNnO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QgPSBzdWJfZWZmZWN0O1xuICAgICAgICBpZiAodGhpcy5zdWJfZWZmZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdF9zdWJfZWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXBwbHlfb3BlcmF0b3IoYSwgYiwgb3BlcmF0b3IpIHtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlBMVVM6IHJldHVybiBhICsgYjtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5NSU5VUzogcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlRJTUVTOiByZXR1cm4gYSAqIGI7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuRElWSURFOiByZXR1cm4gYSAvIGI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0X3N1Yl9lZmZlY3QoKSB7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC5xdWFudGl0eV9pc19hYnNvbHV0ZSA9IHRoaXMuc3ViX2VmZmVjdC5xdWFudGl0eV9pc19hYnNvbHV0ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0aGlzLnN1Yl9lZmZlY3QucXVhbnRpdHlfaXNfYWJzb2x1dGU7XG4gICAgICAgIHRoaXMuc3ViX2VmZmVjdC5yYXRlID0gdGhpcy5zdWJfZWZmZWN0LnJhdGUgPT09IHVuZGVmaW5lZCA/IDEuMCA6IHRoaXMuc3ViX2VmZmVjdC5yYXRlO1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QuY2hhbmNlID0gdGhpcy5zdWJfZWZmZWN0LmNoYW5jZSA9PT0gdW5kZWZpbmVkID8gMS4wIDogdGhpcy5zdWJfZWZmZWN0LmNoYW5jZTtcbiAgICAgICAgdGhpcy5zdWJfZWZmZWN0LmF0dHJpYnV0ZSA9IHRoaXMuc3ViX2VmZmVjdC5hdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCA/IGVsZW1lbnRzLk5PX0VMRU1FTlQgOiB0aGlzLnN1Yl9lZmZlY3QuYXR0cmlidXRlO1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QudmFyaWF0aW9uX29uX2ZpbmFsX3Jlc3VsdCA9IHRoaXMuc3ViX2VmZmVjdC52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRoaXMuc3ViX2VmZmVjdC52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0O1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3QudXNhZ2UgPSB0aGlzLnN1Yl9lZmZlY3QudXNhZ2UgPT09IHVuZGVmaW5lZCA/IGVmZmVjdF91c2FnZXMuTk9UX0FQUExZIDogdGhpcy5zdWJfZWZmZWN0LnVzYWdlO1xuICAgICAgICB0aGlzLnN1Yl9lZmZlY3Qub25fY2FzdGVyID0gdGhpcy5zdWJfZWZmZWN0Lm9uX2Nhc3RlciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0aGlzLnN1Yl9lZmZlY3Qub25fY2FzdGVyO1xuICAgIH1cblxuICAgIGFwcGx5X2dlbmVyYWxfdmFsdWUocHJvcGVydHksIGRpcmVjdF92YWx1ZT8pIHtcbiAgICAgICAgY29uc3QgYmVmb3JlX3ZhbHVlID0gcHJvcGVydHkgIT09IHVuZGVmaW5lZCA/IHRoaXMuY2hhcltwcm9wZXJ0eV0gOiBkaXJlY3RfdmFsdWU7XG4gICAgICAgIGlmIChNYXRoLnJhbmRvbSgpID49IHRoaXMuY2hhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlX3ZhbHVlLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBiZWZvcmVfdmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFmdGVyX3ZhbHVlO1xuICAgICAgICBpZiAodGhpcy5xdWFudGl0eV9pc19hYnNvbHV0ZSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJbcHJvcGVydHldID0gdGhpcy5xdWFudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyX3ZhbHVlID0gdGhpcy5xdWFudGl0eTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMucXVhbnRpdHk7XG4gICAgICAgICAgICB2YWx1ZSAqPSB0aGlzLnJhdGU7XG4gICAgICAgICAgICBpZiAodGhpcy52YXJpYXRpb25fb25fZmluYWxfcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gdmFyaWF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmFsdWVfdG9fdXNlO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZV90b191c2UgPSB0aGlzLmNoYXJbdGhpcy5yZWxhdGl2ZV90b19wcm9wZXJ0eSAhPT0gdW5kZWZpbmVkID8gdGhpcy5yZWxhdGl2ZV90b19wcm9wZXJ0eSA6IHByb3BlcnR5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWVfdG9fdXNlID0gZGlyZWN0X3ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gRWZmZWN0LmFwcGx5X29wZXJhdG9yKHZhbHVlX3RvX3VzZSwgdmFsdWUsIHRoaXMub3BlcmF0b3IpIHwgMDtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW3Byb3BlcnR5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyX3ZhbHVlID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWZvcmU6IGJlZm9yZV92YWx1ZSxcbiAgICAgICAgICAgIGFmdGVyOiBhZnRlcl92YWx1ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFwcGx5X3N1YmVmZmVjdChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCB0aGlzLnN1Yl9lZmZlY3QuY2hhbmNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWJfZWZmZWN0LnF1YW50aXR5X2lzX2Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSAqPSB0aGlzLnN1Yl9lZmZlY3QucmF0ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWJfZWZmZWN0LnZhcmlhdGlvbl9vbl9maW5hbF9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gdmFyaWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcltwcm9wZXJ0eV0gPSBFZmZlY3QuYXBwbHlfb3BlcmF0b3IodGhpcy5jaGFyW3Byb3BlcnR5XSwgdmFsdWUsIHRoaXMuc3ViX2VmZmVjdC5vcGVyYXRvcikgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHN0YXRpYyBwcmV2aWV3X3ZhbHVlX2FwcGxpZWQoZWZmZWN0X29iaiwgYmFzZV92YWx1ZSkge1xuICAgICAgICBpZiAoZWZmZWN0X29iai5xdWFudGl0eV9pc19hYnNvbHV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdF9vYmoucXVhbnRpdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBlZmZlY3Rfb2JqLnF1YW50aXR5O1xuICAgICAgICAgICAgaWYgKCFlZmZlY3Rfb2JqLnJhdGUpIHtcbiAgICAgICAgICAgICAgICBlZmZlY3Rfb2JqLnJhdGUgPSAxLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSAqPSBlZmZlY3Rfb2JqLnJhdGU7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHwgMDtcbiAgICAgICAgICAgIHJldHVybiBFZmZlY3QuYXBwbHlfb3BlcmF0b3IoYmFzZV92YWx1ZSwgdmFsdWUsIGVmZmVjdF9vYmoub3BlcmF0b3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tfY2FwcyhjdXJyZW50X3Byb3AsIG1heF9wcm9wLCBtaW5fdmFsdWUsIHJlc3VsdF9vYmopIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcltjdXJyZW50X3Byb3BdID4gdGhpcy5jaGFyW21heF9wcm9wXSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdF9vYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHRfb2JqLmFmdGVyID0gdGhpcy5jaGFyW21heF9wcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhcltjdXJyZW50X3Byb3BdID0gdGhpcy5jaGFyW21heF9wcm9wXTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXJbY3VycmVudF9wcm9wXSA8IG1pbl92YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdF9vYmopIHtcbiAgICAgICAgICAgICAgICByZXN1bHRfb2JqLmFmdGVyID0gbWluX3ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFyW2N1cnJlbnRfcHJvcF0gPSBtaW5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBseV9lZmZlY3QoZGlyZWN0X3ZhbHVlPykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoZWZmZWN0X3R5cGVfc3RhdFt0aGlzLnR5cGVdKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkhQX1JFQ09WRVJZOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJocF9yZWNvdmVyeVwiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBQX1JFQ09WRVJZOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJwcF9yZWNvdmVyeVwiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkNVUlJFTlRfSFA6XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0X2N1cnJlbnRfaHAgPSB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJjdXJyZW50X2hwXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfY2FwcyhcImN1cnJlbnRfaHBcIiwgXCJtYXhfaHBcIiwgMCwgcmVzdWx0X2N1cnJlbnRfaHApO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRfY3VycmVudF9ocFxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUDpcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRfY3VycmVudF9wcCA9IHRoaXMuYXBwbHlfZ2VuZXJhbF92YWx1ZShcImN1cnJlbnRfcHBcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKFwiY3VycmVudF9wcFwiLCBcIm1heF9wcFwiLCAwLCByZXN1bHRfY3VycmVudF9wcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdF9jdXJyZW50X3BwXG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHRoaXMuYXR0cmlidXRlICsgXCJfcG93ZXJfY3VycmVudFwiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHRoaXMuYXR0cmlidXRlICsgXCJfcmVzaXN0X2N1cnJlbnRcIik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5UVVJOUzpcbiAgICAgICAgICAgICAgICB0aGlzLnR1cm5fY291bnQgPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5X2dlbmVyYWxfdmFsdWUoXCJ0dXJuc1wiKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBFUk1BTkVOVF9TVEFUVVM6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkX3N0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIuYWRkX3Blcm1hbmVudF9zdGF0dXModGhpcy5zdGF0dXNfa2V5X25hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfcGVybWFuZW50X3N0YXR1cyh0aGlzLnN0YXR1c19rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVM6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkX3N0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIuYWRkX3RlbXBvcmFyeV9zdGF0dXModGhpcy5zdGF0dXNfa2V5X25hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfdGVtcG9yYXJ5X3N0YXR1cyh0aGlzLnN0YXR1c19rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRBTUFHRV9NT0RJRklFUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHVuZGVmaW5lZCwgZGlyZWN0X3ZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRBTUFHRV9JTlBVVDpcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5hcHBseV9nZW5lcmFsX3ZhbHVlKHVuZGVmaW5lZCwgZGlyZWN0X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ID0gZWZmZWN0X3R5cGVfc3RhdFt0aGlzLnN1Yl9lZmZlY3QudHlwZV07XG4gICAgICAgICAgICAgICAgcmVzdWx0LmJlZm9yZSA9IHRoaXMuY2hhcltzdGF0XTtcbiAgICAgICAgICAgICAgICByZXN1bHQuYWZ0ZXIgPSB0aGlzLmFwcGx5X3N1YmVmZmVjdChzdGF0LCByZXN1bHQuYWZ0ZXIpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCh0aGlzLnN1Yl9lZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX0hQOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja19jYXBzKFwiY3VycmVudF9ocFwiLCBcIm1heF9ocFwiLCAwLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkNVUlJFTlRfUFA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX2NhcHMoXCJjdXJyZW50X3BwXCIsIFwibWF4X3BwXCIsIDAsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgaXRlbV90eXBlcyA9IHtcbiAgICBXRUFQT05TOiBcIndlYXBvbnNcIixcbiAgICBBUk1PUjogXCJhcm1vclwiLFxuICAgIENIRVNUX1BST1RFQ1RPUjogXCJjaGVzdF9wcm90ZWN0b3JcIixcbiAgICBIRUFEX1BST1RFQ1RPUjogXCJoZWFkX3Byb3RlY3RvclwiLFxuICAgIExFR19QUk9URUNUT1I6IFwibGVnX3Byb3RlY3RvclwiLFxuICAgIEFCSUxJVFlfR1JBTlRPUjogXCJhYmlsaXR5X2dyYW50b3JcIixcbiAgICBMVUNLWV9DSEFSTTogXCJsdWNreV9jaGFybVwiLFxuICAgIFJJTkc6IFwicmluZ1wiLFxuICAgIFVOREVSV0VBUjogXCJ1bmRlcndlYXJcIixcbiAgICBHRU5FUkFMX0lURU06IFwiZ2VuZXJhbF9pdGVtXCIsXG4gICAgU0hJUlQ6IFwic2hpcnRcIlxufTtcblxuZXhwb3J0IGNvbnN0IHVzZV90eXBlcyA9IHtcbiAgICBNVUxUSVBMRV9VU0VTOiBcIm11bHRpcGxlX3VzZXNcIixcbiAgICBTSU5HTEVfVVNFOiBcInNpbmdsZV91c2VcIixcbiAgICBCUkVBS1NfV0hFTl9VU0U6IFwiYnJlYWtzX3doZW5fdXNlXCIsXG4gICAgTk9fVVNFOiBcIm5vX3VzZVwiXG59XG5cbmV4cG9ydCBjbGFzcyBJdGVtIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHVzZV90eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnNlc193aGVuX2VxdWlwcGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBjYW50X2JlX3JlbW92ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIHJhcmVfaXRlbTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaW1wb3J0YW50X2l0ZW06IGJvb2xlYW47XG4gICAgcHVibGljIGNhcnJ5X3VwX3RvXzMwOiBib29sZWFuO1xuICAgIHB1YmxpYyBlZmZlY3RzOiBhbnk7XG4gICAgcHVibGljIGF0dHJpYnV0ZTogc3RyaW5nO1xuICAgIHB1YmxpYyB1bmxlYXNoX2FiaWxpdHk6IHN0cmluZztcbiAgICBwdWJsaWMgdW5sZWFzaF9yYXRlOiBudW1iZXI7XG4gICAgcHVibGljIHVzZV9hYmlsaXR5OiBzdHJpbmc7XG4gICAgcHVibGljIGVxdWlwYWJsZV9jaGFyczogc3RyaW5nW107XG4gICAgcHVibGljIHByaWNlOiBudW1iZXI7XG4gICAgcHVibGljIGdyYW50ZWRfYWJpbGl0eTogc3RyaW5nO1xuICAgIHB1YmxpYyBicm9rZW46IGJvb2xlYW47XG4gICAgcHVibGljIGVxdWlwYWJsZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBrZXlfbmFtZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHVzZV90eXBlLFxuICAgICAgICBjdXJzZXNfd2hlbl9lcXVpcHBlZCxcbiAgICAgICAgY2FudF9iZV9yZW1vdmVkLFxuICAgICAgICByYXJlX2l0ZW0sXG4gICAgICAgIGltcG9ydGFudF9pdGVtLFxuICAgICAgICBjYXJyeV91cF90b18zMCxcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgYXR0cmlidXRlLFxuICAgICAgICB1bmxlYXNoX2FiaWxpdHksXG4gICAgICAgIHVubGVhc2hfcmF0ZSxcbiAgICAgICAgdXNlX2FiaWxpdHksXG4gICAgICAgIGVxdWlwYWJsZV9jaGFycyxcbiAgICAgICAgcHJpY2UsXG4gICAgICAgIGdyYW50ZWRfYWJpbGl0eSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMudXNlX3R5cGUgPSB1c2VfdHlwZTtcbiAgICAgICAgdGhpcy5jdXJzZXNfd2hlbl9lcXVpcHBlZCA9IGN1cnNlc193aGVuX2VxdWlwcGVkO1xuICAgICAgICB0aGlzLmNhbnRfYmVfcmVtb3ZlZCA9IGNhbnRfYmVfcmVtb3ZlZDtcbiAgICAgICAgdGhpcy5yYXJlX2l0ZW0gPSByYXJlX2l0ZW07XG4gICAgICAgIHRoaXMuaW1wb3J0YW50X2l0ZW0gPSBpbXBvcnRhbnRfaXRlbTtcbiAgICAgICAgdGhpcy5jYXJyeV91cF90b18zMCA9IGNhcnJ5X3VwX3RvXzMwO1xuICAgICAgICB0aGlzLmVmZmVjdHMgPSBlZmZlY3RzO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcbiAgICAgICAgdGhpcy51bmxlYXNoX2FiaWxpdHkgPSB1bmxlYXNoX2FiaWxpdHk7XG4gICAgICAgIHRoaXMudW5sZWFzaF9yYXRlID0gdW5sZWFzaF9yYXRlO1xuICAgICAgICB0aGlzLnVzZV9hYmlsaXR5ID0gdXNlX2FiaWxpdHk7XG4gICAgICAgIHRoaXMuZXF1aXBhYmxlX2NoYXJzID0gZXF1aXBhYmxlX2NoYXJzO1xuICAgICAgICB0aGlzLnByaWNlID0gcHJpY2U7XG4gICAgICAgIHRoaXMuZ3JhbnRlZF9hYmlsaXR5ID0gZ3JhbnRlZF9hYmlsaXR5O1xuICAgICAgICB0aGlzLmJyb2tlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVxdWlwYWJsZSA9IHRoaXMudHlwZSA9PT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0gPyBmYWxzZSA6IHRydWU7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBTcHJpdGVCYXNlIHtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgYWN0aW9uczoge1xuICAgICAgICBbYWN0aW9uOiBzdHJpbmddOiB7XG4gICAgICAgICAgICBkaXJlY3Rpb25zPzogc3RyaW5nW10sXG4gICAgICAgICAgICBmcmFtZV9jb3VudHM/OiBhbnksXG4gICAgICAgICAgICBmcmFtZV9yYXRlPzoge1tkaXJlY3Rpb246IHN0cmluZ106IGFueX0sXG4gICAgICAgICAgICBsb29wPzogYm9vbGVhbnxib29sZWFuW10sXG4gICAgICAgICAgICBzcHJpdGVzaGVldD86IHtzcHJpdGVzaGVldF9pbWFnZV91cmw6IHN0cmluZywgc3ByaXRlc2hlZXRfanNvbl91cmw6IHN0cmluZ31cbiAgICAgICAgfVxuICAgIH07XG4gICAgcHVibGljIGFuaW1hdGlvbnM6IHtbYWN0aW9uOiBzdHJpbmddOiB7W2FuaW1hdGlvbjogc3RyaW5nXTogc3RyaW5nW119fTtcbiAgICBwdWJsaWMgZGFzaF9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyB3YWxrX3NwZWVkOiBudW1iZXI7XG4gICAgcHVibGljIGNsaW1iX3NwZWVkOiBudW1iZXI7XG4gICAgcHVibGljIHB1c2hfc3BlZWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yIChrZXlfbmFtZSwgYWN0aW9ucykge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5kYXNoX3NwZWVkID0gMDtcbiAgICAgICAgdGhpcy53YWxrX3NwZWVkID0gMDtcbiAgICAgICAgdGhpcy5jbGltYl9zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMucHVzaF9zcGVlZCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbnNbaV1dID0ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRBY3Rpb25EaXJlY3Rpb25zKGFjdGlvbiwgZGlyZWN0aW9ucywgZnJhbWVfY291bnRzKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnMgPSBuZXcgQXJyYXkoZGlyZWN0aW9ucy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9jb3VudHMgPSBuZXcgQXJyYXkoZGlyZWN0aW9ucy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBmcmFtZV9jb3VudF9pc19hcnJheSA9IEFycmF5LmlzQXJyYXkoZnJhbWVfY291bnRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBmcmFtZV9jb3VudCA9IGZyYW1lX2NvdW50X2lzX2FycmF5ID8gZnJhbWVfY291bnRzW2ldIDogZnJhbWVfY291bnRzO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZGlyZWN0aW9uc1tpXSA9IGRpcmVjdGlvbnNbaV07XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9jb3VudHNbaV0gPSBmcmFtZV9jb3VudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24sIGZyYW1lX3JhdGUpIHtcbiAgICAgICAgdGhpcy5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfcmF0ZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnNbaV07XG4gICAgICAgICAgICBsZXQgdGhpc19mcmFtZV9yYXRlO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZnJhbWVfcmF0ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVfcmF0ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc19mcmFtZV9yYXRlID0gZnJhbWVfcmF0ZVswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2ZyYW1lX3JhdGUgPSBmcmFtZV9yYXRlW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc19mcmFtZV9yYXRlID0gZnJhbWVfcmF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLmZyYW1lX3JhdGVbZGlyZWN0aW9uXSA9IHRoaXNfZnJhbWVfcmF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFjdGlvbkxvb3AoYWN0aW9uLCBsb29wKSB7XG4gICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25dLmxvb3AgPSBsb29wO1xuICAgIH1cblxuICAgIHNldEFjdGlvblNwcml0ZXNoZWV0KGFjdGlvbiwgc3ByaXRlc2hlZXRfaW1hZ2VfdXJsLCBzcHJpdGVzaGVldF9qc29uX3VybCkge1xuICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uXS5zcHJpdGVzaGVldCA9IHtcbiAgICAgICAgICAgIHNwcml0ZXNoZWV0X2ltYWdlX3VybCA6IHNwcml0ZXNoZWV0X2ltYWdlX3VybCxcbiAgICAgICAgICAgIHNwcml0ZXNoZWV0X2pzb25fdXJsIDogc3ByaXRlc2hlZXRfanNvbl91cmxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBsb2FkU3ByaXRlc2hlZXRzKGdhbWUsIGZvcmNlX2xvYWQsIG9uX2xvYWRfY29tcGxldGUpIHtcbiAgICAgICAgZm9yKGxldCBhY3Rpb24gaW4gdGhpcy5hY3Rpb25zKXtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZXNoZWV0ID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uc3ByaXRlc2hlZXQ7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpcy5nZXRBY3Rpb25LZXkoYWN0aW9uKTtcbiAgICAgICAgICAgIGxldCBsb2FkZXIgPSBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaChcbiAgICAgICAgICAgICAgICBhY3Rpb25fa2V5LFxuICAgICAgICAgICAgICAgIHNwcml0ZXNoZWV0LnNwcml0ZXNoZWV0X2ltYWdlX3VybCxcbiAgICAgICAgICAgICAgICBzcHJpdGVzaGVldC5zcHJpdGVzaGVldF9qc29uX3VybFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChmb3JjZV9sb2FkKSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyLm9uTG9hZENvbXBsZXRlLmFkZE9uY2Uob25fbG9hZF9jb21wbGV0ZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgZ2FtZS5sb2FkLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZUZyYW1lTmFtZXMoYWN0aW9uLCBkaXJlY3Rpb24sIHN0YXJ0LCBzdG9wLCBzdWZmaXgsIHplcm9QYWQpIHtcbiAgICAgICAgaWYgKCEoYWN0aW9uIGluIHRoaXMuYW5pbWF0aW9ucykpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1thY3Rpb25dID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2FjdGlvbl1bZGlyZWN0aW9uXSA9IFBoYXNlci5BbmltYXRpb24uZ2VuZXJhdGVGcmFtZU5hbWVzKFxuICAgICAgICAgICAgYCR7YWN0aW9ufS8ke2RpcmVjdGlvbn0vYCxcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgc3RvcCxcbiAgICAgICAgICAgIHN1ZmZpeCxcbiAgICAgICAgICAgIHplcm9QYWRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRBbmltYXRpb24oc3ByaXRlLCBhY3Rpb24pIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnM7XG4gICAgICAgIGNvbnN0IGxvb3AgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5sb29wID09PSB1bmRlZmluZWQgPyB0cnVlIDogdGhpcy5hY3Rpb25zW2FjdGlvbl0ubG9vcDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgZnJhbWVfcmF0ZSA9IHRoaXMuYWN0aW9uc1thY3Rpb25dLmZyYW1lX3JhdGVbZGlyZWN0aW9uXTtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1fa2V5ID0gdGhpcy5nZXRBbmltYXRpb25LZXkoYWN0aW9uLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuYWRkKFxuICAgICAgICAgICAgICAgIGFuaW1fa2V5LFxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1thY3Rpb25dW2RpcmVjdGlvbl0sXG4gICAgICAgICAgICAgICAgZnJhbWVfcmF0ZSxcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGxvb3ApID8gbG9vcFtpXSA6IGxvb3AsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZ2VuZXJhdGVBbGxGcmFtZXMoKSB7XG4gICAgICAgIGZvciAobGV0IGFjdGlvbiBpbiB0aGlzLmFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSB0aGlzLmFjdGlvbnNbYWN0aW9uXS5kaXJlY3Rpb25zO1xuICAgICAgICAgICAgY29uc3QgZnJhbWVfY291bnRzID0gdGhpcy5hY3Rpb25zW2FjdGlvbl0uZnJhbWVfY291bnRzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnJhbWVOYW1lcyhhY3Rpb24sIGRpcmVjdGlvbiwgMCwgZnJhbWVfY291bnRzW2ldIC0gMSwgJycsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RnJhbWVOYW1lKGFjdGlvbiwgZGlyZWN0aW9uLCBpbmRleCkge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRfaW5kZXggPSBpbmRleC50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7bWluaW11bUludGVnZXJEaWdpdHM6IDIsIHVzZUdyb3VwaW5nOiBmYWxzZX0pO1xuICAgICAgICByZXR1cm4gYCR7YWN0aW9ufS8ke2RpcmVjdGlvbn0vJHtmb3JtYXR0ZWRfaW5kZXh9YDtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25LZXkoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleV9uYW1lICsgXCJfXCIgKyBhY3Rpb247XG4gICAgfVxuXG4gICAgZ2V0QW5pbWF0aW9uS2V5KGFjdGlvbiwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24gKyBcIl9cIiArIGRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBnZXRTcHJpdGVBY3Rpb24oc3ByaXRlKSB7XG4gICAgICAgIHJldHVybiBzcHJpdGUua2V5LnNwbGl0KFwiX1wiKVsxXTtcbiAgICB9XG59IiwiaW1wb3J0IHsgZXZlbnRfdHlwZXMsIFRpbGVFdmVudCB9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IGdldF9zdXJyb3VuZGluZ3MsIGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24sIGRpcmVjdGlvbnMsIHNwbGl0X2RpcmVjdGlvbiwgcmV2ZXJzZV9kaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnMgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IEpVTVBfT0ZGU0VUID0gMzA7XG5jb25zdCBKVU1QX0RVUkFUSU9OID0gMTUwO1xuXG5leHBvcnQgY2xhc3MgSnVtcEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgaXNfc2V0OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgaXNfc2V0KSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGV2ZW50X3R5cGVzLkpVTVAsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG51bGwpO1xuICAgICAgICB0aGlzLmlzX3NldCA9IGlzX3NldDtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5oZXJvLnN0b3BfYnlfY29sbGlkaW5nIHx8ICF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkgfHwgIXRoaXMuZGF0YS5oZXJvX21vdmVtZW50X2FsbG93ZWQoZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGp1bXBfb2Zmc2V0ID0gSlVNUF9PRkZTRVQ7XG4gICAgICAgIGxldCBkaXJlY3Rpb247XG4gICAgICAgIGxldCBqdW1wX2RpcmVjdGlvbjtcbiAgICAgICAgbGV0IG5leHRfcG9zaXRpb24gPSB7eDogdGhpcy54LCB5OiB0aGlzLnl9O1xuICAgICAgICBsZXQgc2lkZV9wb3NpdGlvbiA9IHt4OiB0aGlzLngsIHk6IHRoaXMueX07XG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XG4gICAgICAgICAgICBqdW1wX29mZnNldCA9IC1qdW1wX29mZnNldDtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwieFwiO1xuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi54IC09IDI7XG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnggLT0gMTtcbiAgICAgICAgICAgIGp1bXBfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5sZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnJpZ2h0KSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICAgICAgICAgIG5leHRfcG9zaXRpb24ueCArPSAyO1xuICAgICAgICAgICAgc2lkZV9wb3NpdGlvbi54ICs9IDE7XG4gICAgICAgICAgICBqdW1wX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIGp1bXBfb2Zmc2V0ID0gLWp1bXBfb2Zmc2V0O1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJ5XCI7XG4gICAgICAgICAgICBuZXh0X3Bvc2l0aW9uLnkgLT0gMjtcbiAgICAgICAgICAgIHNpZGVfcG9zaXRpb24ueSAtPSAxO1xuICAgICAgICAgICAganVtcF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwieVwiO1xuICAgICAgICAgICAgbmV4dF9wb3NpdGlvbi55ICs9IDI7XG4gICAgICAgICAgICBzaWRlX3Bvc2l0aW9uLnkgKz0gMTtcbiAgICAgICAgICAgIGp1bXBfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5kb3duO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqdW1wX2RpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNpZGVfcG9zX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KHNpZGVfcG9zaXRpb24ueCwgc2lkZV9wb3NpdGlvbi55KTtcbiAgICAgICAgaWYgKHNpZGVfcG9zX2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLmV2ZW50c1tzaWRlX3Bvc19rZXldLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmRhdGEubWFwLmV2ZW50c1tzaWRlX3Bvc19rZXldW2ldO1xuICAgICAgICAgICAgICAgIGxldCBpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmRhdGEubWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2pdO1xuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZSBzaWRlIHBvc2l0aW9uIGhhcyBhIGludGVyYWN0YWJsZSBvYmplY3QsIGl0IGRvZXMgbm90IGNhbmNlbCB0aGlzIGp1bXAgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyICE9PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnggPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICYmIGV2ZW50LnkgPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2NhbmNlbCBqdW1waW5nIGlmIHRoZSBuZXh0IHNpZGUgZXZlbnQgaXMgYWxzbyBhIGp1bXBcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJiAoZXZlbnQgYXMgSnVtcEV2ZW50KS5pc19zZXQgJiYgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBuZXh0X3Bvc19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShuZXh0X3Bvc2l0aW9uLngsIG5leHRfcG9zaXRpb24ueSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tpXTtcbiAgICAgICAgICAgIGlmIChuZXh0X2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICE9PSBuZXh0X3Bvc2l0aW9uLnggfHwgbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSAhPT0gbmV4dF9wb3NpdGlvbi55KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllciAhPT0gbmV4dF9pbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dF9wb3Nfa2V5IGluIHRoaXMuZGF0YS5tYXAuZXZlbnRzKSB7XG4gICAgICAgICAgICBsZXQgYWN0aXZlX2p1bXBfZXZlbnRfZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5ldmVudHNbbmV4dF9wb3Nfa2V5XS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5kYXRhLm1hcC5ldmVudHNbbmV4dF9wb3Nfa2V5XVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJiBldmVudC5pc19hY3RpdmUoZ2V0X29wcG9zaXRlX2RpcmVjdGlvbihqdW1wX2RpcmVjdGlvbikpICYmIChldmVudCBhcyBKdW1wRXZlbnQpLmlzX3NldCAmJiBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMuaW5jbHVkZXModGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZV9qdW1wX2V2ZW50X2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEp1bXBFdmVudC5zZXRfanVtcF9jb2xsaXNpb24odGhpcy5nYW1lLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKdW1wRXZlbnQudW5zZXRfc2V0X2p1bXBfY29sbGlzaW9uKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZV9qdW1wX2V2ZW50X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5oZXJvLmp1bXBpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgbGV0IHR3ZWVuX29iajogYW55ID0ge307XG4gICAgICAgIHR3ZWVuX29ialtkaXJlY3Rpb25dID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlW2RpcmVjdGlvbl0gKyBqdW1wX29mZnNldDtcbiAgICAgICAgY29uc3QgaGVyb194ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKG5leHRfcG9zaXRpb24ueCArIDAuNSk7XG4gICAgICAgIGNvbnN0IGhlcm9feSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiAobmV4dF9wb3NpdGlvbi55ICsgMC41KTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgIHR3ZWVuX29iai55ID0gW2hlcm9feSAtIDUsIGhlcm9feSAtIDgsIGhlcm9feSAtIDUsIGhlcm9feV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0d2Vlbl9vYmoueCA9IGhlcm9feDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5KVU1QLCByZXZlcnNlX2RpcmVjdGlvbnNbanVtcF9kaXJlY3Rpb25dKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueCA9IGhlcm9feDtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy55ID0gaGVyb195O1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSkudG8oIFxuICAgICAgICAgICAgICAgIHR3ZWVuX29iaixcbiAgICAgICAgICAgICAgICBKVU1QX0RVUkFUSU9OLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5yZXZlcnNlT25jZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkpVTVAsIHJldmVyc2VfZGlyZWN0aW9uc1tqdW1wX2RpcmVjdGlvbl0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5qdW1waW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBqdW1wX25lYXJfY29sbGlzaW9uKCkge1xuICAgICAgICBjb25zdCBjdXJyZW50X3Bvc19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleSh0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zLCB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zKTtcbiAgICAgICAgbGV0IGN1cnJlbnRfcG9zID0ge3g6IHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MsIHk6IHRoaXMuZGF0YS5oZXJvLnRpbGVfeV9wb3N9O1xuICAgICAgICBsZXQgc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhjdXJyZW50X3Bvcy54LCBjdXJyZW50X3Bvcy55LCB0cnVlKTtcbiAgICAgICAgbGV0IHJpZ2h0X2RpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgICBsZXQgcG9zc2libGVfZGlyZWN0aW9ucyA9IHNwbGl0X2RpcmVjdGlvbih0aGlzLmRhdGEuaGVyby5jdXJyZW50X2RpcmVjdGlvbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zc2libGVfZGlyZWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmlnaHRfZGlyZWN0aW9uID0gcmlnaHRfZGlyZWN0aW9uIHx8IHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHBvc3NpYmxlX2RpcmVjdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCBjbGVhcl9ib2RpZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLm1hcF9jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2pdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGNvbmNhdF9rZXlzID0gY3VycmVudF9wb3Nfa2V5O1xuICAgICAgICBsZXQgYm9kaWVzX3Bvc2l0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vycm91bmRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnkpO1xuICAgICAgICAgICAgaWYgKHN1cnJvdW5kaW5nX2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLm1hcC5ldmVudHNbc3Vycm91bmRpbmdfa2V5XS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19ldmVudCA9IHRoaXMuZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV1bal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXJyb3VuZGluZ19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QICYmIHJpZ2h0X2RpcmVjdGlvbiAmJiAoc3Vycm91bmRpbmdfZXZlbnQgYXMgSnVtcEV2ZW50KS5pc19zZXQgJiYgc3Vycm91bmRpbmdfZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChzdXJyb3VuZGluZ19ldmVudC5keW5hbWljIHx8IHRoaXMuZHluYW1pYykgJiYgIXN1cnJvdW5kaW5nc1tpXS5kaWFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZGVfZXZlbnRfc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZGllc19wb3NpdGlvbnMucHVzaChzaWRlX2V2ZW50X3N1cnJvdW5kaW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25jYXRfa2V5cyArPSBcIi1cIiArIHN1cnJvdW5kaW5nX2tleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLmhhcyhjb25jYXRfa2V5cykgJiYgYXRfbGVhc3Rfb25lX2R5bmFtaWNfYW5kX25vdF9kaWFnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5jbGVhcigpO1xuICAgICAgICAgICAgY2xlYXJfYm9kaWVzKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLndhbGtpbmdfb25fcGlsbGFyc190aWxlcy5hZGQoY29uY2F0X2tleXMpO1xuICAgICAgICAgICAgbGV0IGJvZGllc19wb3NpdGlvbiA9IG5ldyBTZXQoKHN1cnJvdW5kaW5ncy5jb25jYXQoLi4uYm9kaWVzX3Bvc2l0aW9ucykpLm1hcChwb3MgPT4gcG9zLnggKyBcIl9cIiArIHBvcy55KSk7XG4gICAgICAgICAgICBjb25jYXRfa2V5cy5zcGxpdChcIi1cIikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGJvZGllc19wb3NpdGlvbi5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24uaGVyb19jb2xsaXNpb25fZ3JvdXAsIHRydWUpO1xuICAgICAgICAgICAgYm9kaWVzX3Bvc2l0aW9uLmZvckVhY2gocG9zaXRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc19hcnJheSA9IHBvc2l0aW9uLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4X3BvcyA9IChwYXJzZUludChwb3NfYXJyYXlbMF0pICsgLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IHlfcG9zID0gKHBhcnNlSW50KHBvc19hcnJheVsxXSkgKyAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQm9keSh4X3BvcywgeV9wb3MsIDAsIHRydWUpO1xuICAgICAgICAgICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgICAgICAgICBib2R5LnNldFJlY3RhbmdsZSh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGgsIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQsIDAsIDApO1xuICAgICAgICAgICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2V2ZW50c19jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgICAgICAgICAgYm9keS5hbmd1bGFyRGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgICAgICAgICAgYm9keS5zZXRaZXJvUm90YXRpb24oKTtcbiAgICAgICAgICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJvZHkuZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJvZHkuc3RhdGljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBib2R5LmRlYnVnID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkuZGVidWc7XG4gICAgICAgICAgICAgICAgYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzLnB1c2goYm9keSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZHluYW1pYyAmJiAhcmlnaHRfZGlyZWN0aW9uICYmIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLmNsZWFyKCk7XG4gICAgICAgICAgICBjbGVhcl9ib2RpZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBzZXRfanVtcF9jb2xsaXNpb24oZ2FtZSwgZGF0YSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllc1tpXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMgPSBbXTtcbiAgICAgICAgZGF0YS50aWxlX2V2ZW50X21hbmFnZXIud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzLmNsZWFyKCk7XG4gICAgICAgIGRhdGEuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cChkYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcbiAgICAgICAgZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnJlbW92ZUNvbGxpc2lvbkdyb3VwKGRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcbiAgICAgICAgZm9yIChsZXQgZXZlbnRfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXRhLm1hcC5ldmVudHNbZXZlbnRfa2V5XS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW2V2ZW50X2tleV1bal07XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVAgJiYgZXZlbnQuZHluYW1pYyAmJiBldmVudC5pc19zZXQgJiYgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKGRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1cnJvdW5kaW5ncyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54IC0gMSwgeTogZXZlbnQueX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7eDogZXZlbnQueCArIDEsIHk6IGV2ZW50Lnl9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IGV2ZW50LngsIHk6IGV2ZW50LnkgLSAxfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiBldmVudC54LCB5OiBldmVudC55ICsgMX0sXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vycm91bmRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdXJyb3VuZGluZ19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZ3NbaV0ueCwgc3Vycm91bmRpbmdzW2ldLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1cnJvdW5kaW5nX2tleSBpbiBkYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZHluYW1pY19mb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YS5tYXAuZXZlbnRzW3N1cnJvdW5kaW5nX2tleV0ubGVuZ3RoOyArK2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudCA9IGRhdGEubWFwLmV2ZW50c1tzdXJyb3VuZGluZ19rZXldW2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19ldmVudC5keW5hbWljICYmIHRoaXNfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCAmJiB0aGlzX2V2ZW50LmlzX3NldCAmJiB0aGlzX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyhkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljX2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljX2ZvdW5kKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4X3BvcyA9IChzdXJyb3VuZGluZ3NbaV0ueCArIC41KSAqIGRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeV9wb3MgPSAoc3Vycm91bmRpbmdzW2ldLnkgKyAuNSkgKiBkYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUJvZHkoeF9wb3MsIHlfcG9zLCAwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0UmVjdGFuZ2xlKGRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGgsIGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0LCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoZGF0YS5jb2xsaXNpb24uZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmFuZ3VsYXJEYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5keW5hbWljID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnN0YXRpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LmRlYnVnID0gZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmRlYnVnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5jb2xsaWRlcyhkYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyB1bnNldF9zZXRfanVtcF9jb2xsaXNpb24oZGF0YSkge1xuICAgICAgICBkYXRhLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXMoZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIGRhdGEubWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jb2xsaWRlcyhkYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5jb2xsaXNpb24uZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xuICAgIH1cblxuICAgIHN0YXRpYyBhY3RpdmVfanVtcF9zdXJyb3VuZGluZ3MoZGF0YSwgc3Vycm91bmRpbmdzLCB0YXJnZXRfbGF5ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdXJyb3VuZGluZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nID0gc3Vycm91bmRpbmdzW2pdO1xuICAgICAgICAgICAgY29uc3QgdGhpc19rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShzdXJyb3VuZGluZy54LCBzdXJyb3VuZGluZy55KTtcbiAgICAgICAgICAgIGlmICh0aGlzX2tleSBpbiBkYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGRhdGEubWFwLmV2ZW50c1t0aGlzX2tleV0ubGVuZ3RoOyArK2spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Vycl9ldmVudCA9IGRhdGEubWFwLmV2ZW50c1t0aGlzX2tleV1ba107XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXJyX2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkpVTVApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXJyX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0YXJnZXRfbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1cnJfZXZlbnQuZHluYW1pYyA9PT0gZmFsc2UgJiYgc3Vycl9ldmVudC5pc19zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vycl9ldmVudC5hY3RpdmF0ZV9hdChnZXRfb3Bwb3NpdGVfZGlyZWN0aW9uKHN1cnJvdW5kaW5nLmRpcmVjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBTcHJpdGVCYXNlIH0gZnJvbSAnLi9TcHJpdGVCYXNlJztcbmltcG9ydCB7IGNob29zZV9yaWdodF9jbGFzcywgQ2xhc3NlcyB9IGZyb20gJy4vQ2xhc3Nlcyc7XG5pbXBvcnQgeyBkamlubl9zdGF0dXMgfSBmcm9tICcuL0RqaW5uJztcbmltcG9ydCB7IEVmZmVjdCwgZWZmZWN0X3R5cGVzIH0gZnJvbSAnLi9FZmZlY3QnO1xuaW1wb3J0IHsgaXRlbV90eXBlcyB9IGZyb20gJy4vSXRlbSc7XG5pbXBvcnQgeyBQbGF5ZXIsIGZpZ2h0ZXJfdHlwZXMsIHBlcm1hbmVudF9zdGF0dXMgfSBmcm9tICcuL1BsYXllcic7XG5pbXBvcnQgeyBlbGVtZW50cywgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgRUxFTV9BVFRSX01JTiwgRUxFTV9BVFRSX01BWCB9IGZyb20gJy4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgRUxFTV9MVl9ERUxUQSA9IDE7XG5jb25zdCBFTEVNX1BPV0VSX0RFTFRBID0gNTtcbmNvbnN0IEVMRU1fUkVTSVNUX0RFTFRBID0gNTtcblxuZXhwb3J0IGNsYXNzIE1haW5DaGFyQmFzZSBleHRlbmRzIFNwcml0ZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIGFjdGlvbnMsXG4gICAgICAgIHdhbGtfc3BlZWQsXG4gICAgICAgIGRhc2hfc3BlZWQsXG4gICAgICAgIGNsaW1iX3NwZWVkLFxuICAgICAgICBwdXNoX3NwZWVkXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGtleV9uYW1lLCBhY3Rpb25zKTtcbiAgICAgICAgdGhpcy53YWxrX3NwZWVkID0gd2Fsa19zcGVlZDtcbiAgICAgICAgdGhpcy5kYXNoX3NwZWVkID0gZGFzaF9zcGVlZDtcbiAgICAgICAgdGhpcy5jbGltYl9zcGVlZCA9IGNsaW1iX3NwZWVkO1xuICAgICAgICB0aGlzLnB1c2hfc3BlZWQgPSBwdXNoX3NwZWVkO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgSXRlbVNsb3QgPSB7XG4gICAga2V5X25hbWU6IHN0cmluZyxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHF1YW50aXR5OiBudW1iZXIsXG4gICAgZXF1aXBwZWQ/OiBib29sZWFuLFxuICAgIGJyb2tlbj86IGJvb2xlYW5cbn07XG5cbmV4cG9ydCBjbGFzcyBNYWluQ2hhciBleHRlbmRzIFBsYXllciB7XG4gICAgcHVibGljIGluZm86IGFueTtcbiAgICBwdWJsaWMgc3ByaXRlX2Jhc2U6IFNwcml0ZUJhc2U7XG4gICAgcHVibGljIHN0YXJ0aW5nX2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIGxldmVsOiBudW1iZXI7XG4gICAgcHVibGljIGNsYXNzX3RhYmxlOiBhbnk7XG4gICAgcHVibGljIGNsYXNzOiBDbGFzc2VzO1xuICAgIHB1YmxpYyBleHBfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBjdXJyZW50X2V4cDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19sZXZlbF9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfbGV2ZWxfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX2xldmVsX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9sZXZlbF9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIHZlbnVzX3Bvd2VyX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9wb3dlcl9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcG93ZXJfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBqdXBpdGVyX3Bvd2VyX2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcmVzaXN0X2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9yZXNpc3RfYmFzZTogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX3Jlc2lzdF9iYXNlOiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcmVzaXN0X2Jhc2U6IG51bWJlcjtcbiAgICBwdWJsaWMgZWxlbWVudF9hZmluaXR5OiBzdHJpbmc7XG4gICAgcHVibGljIHZlbnVzX2RqaW5uaTogc3RyaW5nW107XG4gICAgcHVibGljIG1lcmN1cnlfZGppbm5pOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgbWFyc19kamlubmk6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBqdXBpdGVyX2RqaW5uaTogc3RyaW5nW107XG4gICAgcHVibGljIGhwX2N1cnZlOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgcHBfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBhdGtfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBkZWZfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBhZ2lfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBsdWtfY3VydmU6IG51bWJlcltdO1xuICAgIHB1YmxpYyBocF9leHRyYTogbnVtYmVyO1xuICAgIHB1YmxpYyBwcF9leHRyYTogbnVtYmVyO1xuICAgIHB1YmxpYyBhdGtfZXh0cmE6IG51bWJlcjtcbiAgICBwdWJsaWMgZGVmX2V4dHJhOiBudW1iZXI7XG4gICAgcHVibGljIGFnaV9leHRyYTogbnVtYmVyO1xuICAgIHB1YmxpYyBsdWtfZXh0cmE6IG51bWJlcjtcbiAgICBwdWJsaWMgaHBfcmVjb3Zlcnk6IG51bWJlcjtcbiAgICBwdWJsaWMgcHBfcmVjb3Zlcnk6IG51bWJlcjtcbiAgICBwdWJsaWMgaXRlbXM6IEl0ZW1TbG90W107XG4gICAgcHVibGljIGVxdWlwX3Nsb3RzOiB7XG4gICAgICAgIHdlYXBvbjogSXRlbVNsb3QsXG4gICAgICAgIGhlYWQ6IEl0ZW1TbG90LFxuICAgICAgICBjaGVzdDogSXRlbVNsb3QsXG4gICAgICAgIGJvZHk6IEl0ZW1TbG90LFxuICAgICAgICByaW5nOiBJdGVtU2xvdCxcbiAgICAgICAgYm9vdHM6IEl0ZW1TbG90LFxuICAgICAgICB1bmRlcndlYXI6IEl0ZW1TbG90XG4gICAgfTtcbiAgICBwdWJsaWMgZXF1aXBwZWRfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgaW5uYXRlX2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGluX3BhcnR5OiBib29sZWFuO1xuICAgIHB1YmxpYyBhYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyB0dXJuczogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zOiB7W2FiaWxpdHlfa2V5OiBzdHJpbmddOiBzdHJpbmd9O1xuICAgIHB1YmxpYyB2ZW51c19sZXZlbF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfbGV2ZWxfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX2xldmVsX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9sZXZlbF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIHZlbnVzX3Bvd2VyX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9wb3dlcl9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcG93ZXJfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBqdXBpdGVyX3Bvd2VyX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcmVzaXN0X2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9yZXNpc3RfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX3Jlc2lzdF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWF4X2hwOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfaHA6IG51bWJlcjtcbiAgICBwdWJsaWMgbWF4X3BwOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfcHA6IG51bWJlcjtcbiAgICBwdWJsaWMgYXRrOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYXRrOiBudW1iZXI7XG4gICAgcHVibGljIGRlZjogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2RlZjogbnVtYmVyO1xuICAgIHB1YmxpYyBhZ2k6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VycmVudF9hZ2k6IG51bWJlcjtcbiAgICBwdWJsaWMgbHVrOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfbHVrOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBpbmZvLFxuICAgICAgICBzcHJpdGVfYmFzZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgaHBfY3VydmUsXG4gICAgICAgIHBwX2N1cnZlLFxuICAgICAgICBhdGtfY3VydmUsXG4gICAgICAgIGRlZl9jdXJ2ZSxcbiAgICAgICAgYWdpX2N1cnZlLFxuICAgICAgICBsdWtfY3VydmUsXG4gICAgICAgIGV4cF9jdXJ2ZSxcbiAgICAgICAgc3RhcnRpbmdfbGV2ZWwsXG4gICAgICAgIGNsYXNzX3RhYmxlLFxuICAgICAgICBiYXR0bGVfc2NhbGUsXG4gICAgICAgIHZlbnVzX2xldmVsX2Jhc2UsXG4gICAgICAgIG1lcmN1cnlfbGV2ZWxfYmFzZSxcbiAgICAgICAgbWFyc19sZXZlbF9iYXNlLFxuICAgICAgICBqdXBpdGVyX2xldmVsX2Jhc2UsXG4gICAgICAgIHZlbnVzX3Bvd2VyX2Jhc2UsXG4gICAgICAgIG1lcmN1cnlfcG93ZXJfYmFzZSxcbiAgICAgICAgbWFyc19wb3dlcl9iYXNlLFxuICAgICAgICBqdXBpdGVyX3Bvd2VyX2Jhc2UsXG4gICAgICAgIHZlbnVzX3Jlc2lzdF9iYXNlLFxuICAgICAgICBtZXJjdXJ5X3Jlc2lzdF9iYXNlLFxuICAgICAgICBtYXJzX3Jlc2lzdF9iYXNlLFxuICAgICAgICBqdXBpdGVyX3Jlc2lzdF9iYXNlLFxuICAgICAgICBpbm5hdGVfYWJpbGl0aWVzLFxuICAgICAgICBpbl9wYXJ0eSxcbiAgICAgICAgZGppbm5pLFxuICAgICAgICBpdGVtcyxcbiAgICAgICAgYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9uc1xuICAgICkge1xuICAgICAgICBzdXBlcihrZXlfbmFtZSwgbmFtZSk7XG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgICAgIHRoaXMuc3ByaXRlX2Jhc2UgPSBzcHJpdGVfYmFzZTtcbiAgICAgICAgdGhpcy5zdGFydGluZ19sZXZlbCA9IHN0YXJ0aW5nX2xldmVsO1xuICAgICAgICB0aGlzLmxldmVsID0gdGhpcy5zdGFydGluZ19sZXZlbDtcbiAgICAgICAgdGhpcy5jbGFzc190YWJsZSA9IGNsYXNzX3RhYmxlO1xuICAgICAgICB0aGlzLmJhdHRsZV9zY2FsZSA9IGJhdHRsZV9zY2FsZTtcbiAgICAgICAgdGhpcy5leHBfY3VydmUgPSBleHBfY3VydmU7XG4gICAgICAgIHRoaXMuY3VycmVudF9leHAgPSB0aGlzLmV4cF9jdXJ2ZVt0aGlzLmxldmVsIC0gMV07XG4gICAgICAgIHRoaXMudmVudXNfbGV2ZWxfYmFzZSA9IHZlbnVzX2xldmVsX2Jhc2U7XG4gICAgICAgIHRoaXMubWVyY3VyeV9sZXZlbF9iYXNlID0gbWVyY3VyeV9sZXZlbF9iYXNlO1xuICAgICAgICB0aGlzLm1hcnNfbGV2ZWxfYmFzZSA9IG1hcnNfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy5qdXBpdGVyX2xldmVsX2Jhc2UgPSBqdXBpdGVyX2xldmVsX2Jhc2U7XG4gICAgICAgIHRoaXMudmVudXNfcG93ZXJfYmFzZSA9IHZlbnVzX3Bvd2VyX2Jhc2U7XG4gICAgICAgIHRoaXMubWVyY3VyeV9wb3dlcl9iYXNlID0gbWVyY3VyeV9wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLm1hcnNfcG93ZXJfYmFzZSA9IG1hcnNfcG93ZXJfYmFzZTtcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Bvd2VyX2Jhc2UgPSBqdXBpdGVyX3Bvd2VyX2Jhc2U7XG4gICAgICAgIHRoaXMudmVudXNfcmVzaXN0X2Jhc2UgPSB2ZW51c19yZXNpc3RfYmFzZTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Jlc2lzdF9iYXNlID0gbWVyY3VyeV9yZXNpc3RfYmFzZTtcbiAgICAgICAgdGhpcy5tYXJzX3Jlc2lzdF9iYXNlID0gbWFyc19yZXNpc3RfYmFzZTtcbiAgICAgICAgdGhpcy5qdXBpdGVyX3Jlc2lzdF9iYXNlID0ganVwaXRlcl9yZXNpc3RfYmFzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50X2FmaW5pdHkgPSBfLm1heEJ5KFtcbiAgICAgICAgICAgIHtlbGVtZW50OiBlbGVtZW50cy5WRU5VUywgbGV2ZWw6IHRoaXMudmVudXNfbGV2ZWxfYmFzZX0sXG4gICAgICAgICAgICB7ZWxlbWVudDogZWxlbWVudHMuTUVSQ1VSWSwgbGV2ZWw6IHRoaXMubWVyY3VyeV9sZXZlbF9iYXNlfSxcbiAgICAgICAgICAgIHtlbGVtZW50OiBlbGVtZW50cy5NQVJTLCBsZXZlbDogdGhpcy5tYXJzX2xldmVsX2Jhc2V9LFxuICAgICAgICAgICAge2VsZW1lbnQ6IGVsZW1lbnRzLkpVUElURVIsIGxldmVsOiB0aGlzLmp1cGl0ZXJfbGV2ZWxfYmFzZX0sXG4gICAgICAgIF0sIGVsZW1lbnQgPT4gZWxlbWVudC5sZXZlbCkuZWxlbWVudDtcbiAgICAgICAgdGhpcy52ZW51c19kamlubmkgPSBbXTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2RqaW5uaSA9IFtdO1xuICAgICAgICB0aGlzLm1hcnNfZGppbm5pID0gW107XG4gICAgICAgIHRoaXMuanVwaXRlcl9kamlubmkgPSBbXTtcbiAgICAgICAgdGhpcy5pbml0X2RqaW5uaShkamlubmkpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9jbGFzcygpO1xuICAgICAgICB0aGlzLmhwX2N1cnZlID0gaHBfY3VydmU7XG4gICAgICAgIHRoaXMucHBfY3VydmUgPSBwcF9jdXJ2ZTtcbiAgICAgICAgdGhpcy5hdGtfY3VydmUgPSBhdGtfY3VydmU7XG4gICAgICAgIHRoaXMuZGVmX2N1cnZlID0gZGVmX2N1cnZlO1xuICAgICAgICB0aGlzLmFnaV9jdXJ2ZSA9IGFnaV9jdXJ2ZTtcbiAgICAgICAgdGhpcy5sdWtfY3VydmUgPSBsdWtfY3VydmU7XG4gICAgICAgIHRoaXMuaHBfZXh0cmEgPSAwO1xuICAgICAgICB0aGlzLnBwX2V4dHJhID0gMDtcbiAgICAgICAgdGhpcy5hdGtfZXh0cmEgPSAwO1xuICAgICAgICB0aGlzLmRlZl9leHRyYSA9IDA7XG4gICAgICAgIHRoaXMuYWdpX2V4dHJhID0gMDtcbiAgICAgICAgdGhpcy5sdWtfZXh0cmEgPSAwO1xuICAgICAgICB0aGlzLmhwX3JlY292ZXJ5ID0gMDtcbiAgICAgICAgdGhpcy5wcF9yZWNvdmVyeSA9IDA7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5lcXVpcF9zbG90cyA9IHtcbiAgICAgICAgICAgIHdlYXBvbjogbnVsbCxcbiAgICAgICAgICAgIGhlYWQ6IG51bGwsXG4gICAgICAgICAgICBjaGVzdDogbnVsbCxcbiAgICAgICAgICAgIGJvZHk6IG51bGwsXG4gICAgICAgICAgICByaW5nOiBudWxsLFxuICAgICAgICAgICAgYm9vdHM6IG51bGwsXG4gICAgICAgICAgICB1bmRlcndlYXI6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5pbm5hdGVfYWJpbGl0aWVzID0gaW5uYXRlX2FiaWxpdGllcztcbiAgICAgICAgdGhpcy5pbml0X2l0ZW1zKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy5pbl9wYXJ0eSA9IGluX3BhcnR5O1xuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IFtdO1xuICAgICAgICB0aGlzLnVwZGF0ZV9hYmlsaXRpZXMoKTtcbiAgICAgICAgdGhpcy50dXJucyA9IDE7XG4gICAgICAgIHRoaXMuZmlnaHRlcl90eXBlID0gZmlnaHRlcl90eXBlcy5BTExZO1xuICAgICAgICB0aGlzLmJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBiYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zKTtcbiAgICB9XG5cbiAgICBnZXQgZGppbm5pKCkge1xuICAgICAgICBsZXQgdGhpc19kamlubmlfbGlzdCA9IHRoaXMudmVudXNfZGppbm5pLmNvbmNhdCh0aGlzLm1lcmN1cnlfZGppbm5pLCB0aGlzLm1hcnNfZGppbm5pLCB0aGlzLmp1cGl0ZXJfZGppbm5pKTtcbiAgICAgICAgcmV0dXJuIHRoaXNfZGppbm5pX2xpc3Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5mby5kamlubmlfbGlzdFthXS5pbmRleCAtIHRoaXMuaW5mby5kamlubmlfbGlzdFtiXS5pbmRleDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX2NsYXNzKCkge1xuICAgICAgICB0aGlzLmNsYXNzID0gY2hvb3NlX3JpZ2h0X2NsYXNzKFxuICAgICAgICAgICAgdGhpcy5pbmZvLmNsYXNzZXNfbGlzdCxcbiAgICAgICAgICAgIHRoaXMuY2xhc3NfdGFibGUsXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfYWZpbml0eSxcbiAgICAgICAgICAgIHRoaXMudmVudXNfbGV2ZWxfY3VycmVudCxcbiAgICAgICAgICAgIHRoaXMubWVyY3VyeV9sZXZlbF9jdXJyZW50LFxuICAgICAgICAgICAgdGhpcy5tYXJzX2xldmVsX2N1cnJlbnQsXG4gICAgICAgICAgICB0aGlzLmp1cGl0ZXJfbGV2ZWxfY3VycmVudFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFkZF9leHAodmFsdWUpIHtcbiAgICAgICAgbGV0IHJldHVybl9kYXRhID0ge1xuICAgICAgICAgICAgYmVmb3JlOiB7XG4gICAgICAgICAgICAgICAgbGV2ZWw6IHRoaXMubGV2ZWwsXG4gICAgICAgICAgICAgICAgYWJpbGl0aWVzOiB0aGlzLmFiaWxpdGllcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgIHN0YXRzOiBbXG4gICAgICAgICAgICAgICAgICAgIHttYXhfaHA6IHRoaXMubWF4X2hwfSxcbiAgICAgICAgICAgICAgICAgICAge21heF9wcDogdGhpcy5tYXhfcHB9LFxuICAgICAgICAgICAgICAgICAgICB7YXRrOiB0aGlzLmF0a30sXG4gICAgICAgICAgICAgICAgICAgIHtkZWY6IHRoaXMuZGVmfSxcbiAgICAgICAgICAgICAgICAgICAge2FnaTogdGhpcy5hZ2l9LFxuICAgICAgICAgICAgICAgICAgICB7bHVrOiB0aGlzLmx1a31cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWZ0ZXI6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2V4cCArPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IF8uZmluZEluZGV4KHRoaXMuZXhwX2N1cnZlLCBleHAgPT4gZXhwID4gdGhpcy5jdXJyZW50X2V4cCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2FsbCgpO1xuICAgICAgICByZXR1cm5fZGF0YS5hZnRlciA9IHtcbiAgICAgICAgICAgIGxldmVsOiB0aGlzLmxldmVsLFxuICAgICAgICAgICAgYWJpbGl0aWVzOiB0aGlzLmFiaWxpdGllcy5zbGljZSgpLFxuICAgICAgICAgICAgc3RhdHM6IFtcbiAgICAgICAgICAgICAgICB7bWF4X2hwOiB0aGlzLm1heF9ocH0sXG4gICAgICAgICAgICAgICAge21heF9wcDogdGhpcy5tYXhfcHB9LFxuICAgICAgICAgICAgICAgIHthdGs6IHRoaXMuYXRrfSxcbiAgICAgICAgICAgICAgICB7ZGVmOiB0aGlzLmRlZn0sXG4gICAgICAgICAgICAgICAge2FnaTogdGhpcy5hZ2l9LFxuICAgICAgICAgICAgICAgIHtsdWs6IHRoaXMubHVrfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0dXJuX2RhdGE7XG4gICAgfVxuXG4gICAgaW5pdF9pdGVtcygpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpdGVtX29iaiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGl0ZW1fb2JqLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBpZiAoaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVxdWlwX2l0ZW0oaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRfaXRlbShpdGVtX2tleV9uYW1lLCBxdWFudGl0eSwgZXF1aXApIHtcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmluZm8uaXRlbXNfbGlzdFtpdGVtX2tleV9uYW1lXS50eXBlID09PSBpdGVtX3R5cGVzLkdFTkVSQUxfSVRFTSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW1fb2JqID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbV9vYmoua2V5X25hbWUgPT09IGl0ZW1fa2V5X25hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpdGVtX29iai5xdWFudGl0eSArPSBxdWFudGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmQpIHJldHVybjtcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIGtleV9uYW1lOiBpdGVtX2tleV9uYW1lLFxuICAgICAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxuICAgICAgICAgICAgZXF1aXBwZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuaXRlbXMubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZXF1aXApIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfaXRlbSh0aGlzLml0ZW1zLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlX2l0ZW0oaXRlbV9vYmpfdG9fcmVtb3ZlLCBxdWFudGl0eSkge1xuICAgICAgICBsZXQgYWRqdXN0X2luZGV4ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcigoaXRlbV9vYmosIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbV9vYmpfdG9fcmVtb3ZlLmtleV9uYW1lID09PSBpdGVtX29iai5rZXlfbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtX29iai5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZXF1aXBfaXRlbShpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpdGVtX29iai5xdWFudGl0eSAtIHF1YW50aXR5ID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9vYmoucXVhbnRpdHkgPSBpdGVtX29iai5xdWFudGl0eSAtIHF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRqdXN0X2luZGV4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRqdXN0X2luZGV4KSB7XG4gICAgICAgICAgICAgICAgLS1pdGVtX29iai5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlcXVpcF9pdGVtKGluZGV4LCBpbml0aWFsaXplID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGl0ZW1fb2JqID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgICAgIGlmIChpdGVtX29iai5lcXVpcHBlZCAmJiAhaW5pdGlhbGl6ZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pbmZvLml0ZW1zX2xpc3RbaXRlbV9vYmoua2V5X25hbWVdO1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLldFQVBPTlMgJiYgdGhpcy5lcXVpcF9zbG90cy53ZWFwb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudW5lcXVpcF9pdGVtKHRoaXMuZXF1aXBfc2xvdHMud2VhcG9uLmluZGV4KTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuSEVBRF9QUk9URUNUT1IgJiYgdGhpcy5lcXVpcF9zbG90cy5oZWFkICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVuZXF1aXBfaXRlbSh0aGlzLmVxdWlwX3Nsb3RzLmhlYWQuaW5kZXgpO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5DSEVTVF9QUk9URUNUT1IgJiYgdGhpcy5lcXVpcF9zbG90cy5jaGVzdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90cy5jaGVzdC5pbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFSTU9SICYmIHRoaXMuZXF1aXBfc2xvdHMuYm9keSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90cy5ib2R5LmluZGV4KTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuUklORyAmJiB0aGlzLmVxdWlwX3Nsb3RzLnJpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudW5lcXVpcF9pdGVtKHRoaXMuZXF1aXBfc2xvdHMucmluZy5pbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkxFR19QUk9URUNUT1IgJiYgdGhpcy5lcXVpcF9zbG90cy5ib290cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90cy5ib290cy5pbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLlVOREVSV0VBUiAmJiB0aGlzLmVxdWlwX3Nsb3RzLnVuZGVyd2VhciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51bmVxdWlwX2l0ZW0odGhpcy5lcXVpcF9zbG90cy51bmRlcndlYXIuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuV0VBUE9OUzogdGhpcy5lcXVpcF9zbG90cy53ZWFwb24gPSBpdGVtX29iajsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuSEVBRF9QUk9URUNUT1I6IHRoaXMuZXF1aXBfc2xvdHMuaGVhZCA9IGl0ZW1fb2JqOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5DSEVTVF9QUk9URUNUT1I6IHRoaXMuZXF1aXBfc2xvdHMuY2hlc3QgPSBpdGVtX29iajsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuQVJNT1I6IHRoaXMuZXF1aXBfc2xvdHMuYm9keSA9IGl0ZW1fb2JqOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5SSU5HOiB0aGlzLmVxdWlwX3Nsb3RzLnJpbmcgPSBpdGVtX29iajsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuTEVHX1BST1RFQ1RPUjogdGhpcy5lcXVpcF9zbG90cy5ib290cyA9IGl0ZW1fb2JqOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5VTkRFUldFQVI6IHRoaXMuZXF1aXBfc2xvdHMudW5kZXJ3ZWFyID0gaXRlbV9vYmo7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1fb2JqLmVxdWlwcGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLmVmZmVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkX2VmZmVjdChpdGVtLmVmZmVjdHNbaV0sIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBwZWRfYWJpbGl0aWVzLnB1c2goaXRlbS5ncmFudGVkX2FiaWxpdHkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVfYWJpbGl0aWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmVxdWlwX2l0ZW0oaW5kZXgpIHtcbiAgICAgICAgbGV0IGl0ZW1fb2JqID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgICAgIGlmICghaXRlbV9vYmouZXF1aXBwZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaW5mby5pdGVtc19saXN0W2l0ZW1fb2JqLmtleV9uYW1lXTtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5XRUFQT05TICYmIHRoaXMuZXF1aXBfc2xvdHMud2VhcG9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzLndlYXBvbiA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SICYmIHRoaXMuZXF1aXBfc2xvdHMuaGVhZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lcXVpcF9zbG90cy5oZWFkID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQ0hFU1RfUFJPVEVDVE9SICYmIHRoaXMuZXF1aXBfc2xvdHMuY2hlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMuY2hlc3QgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BUk1PUiAmJiB0aGlzLmVxdWlwX3Nsb3RzLmJvZHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMuYm9keSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLlJJTkcgJiYgdGhpcy5lcXVpcF9zbG90cy5yaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nsb3RzLnJpbmcgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5MRUdfUFJPVEVDVE9SICYmIHRoaXMuZXF1aXBfc2xvdHMuYm9vdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMuYm9vdHMgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5VTkRFUldFQVIgJiYgdGhpcy5lcXVpcF9zbG90cy51bmRlcndlYXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc2xvdHMudW5kZXJ3ZWFyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpdGVtX29iai5lcXVpcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xuICAgICAgICAgICAgaWYgKGVmZmVjdC5lZmZlY3Rfb3duZXJfaW5zdGFuY2UgPT09IGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZV9lZmZlY3QoZWZmZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBwZWRfYWJpbGl0aWVzID0gdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMuZmlsdGVyKGFiaWxpdHkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhYmlsaXR5ICE9PSBpdGVtLmdyYW50ZWRfYWJpbGl0eTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVfYWJpbGl0aWVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0X2RqaW5uaShkamlubmkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkamlubmkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFtkamlubmlbaV1dO1xuICAgICAgICAgICAgc3dpdGNoIChkamlubi5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZW51c19kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXJjdXJ5X2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NQVJTOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcnNfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuanVwaXRlcl9kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XG4gICAgfVxuXG4gICAgYWRkX2RqaW5uKGRqaW5uX2tleV9uYW1lKSB7XG4gICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFtkamlubl9rZXlfbmFtZV07XG4gICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzpcbiAgICAgICAgICAgICAgICB0aGlzLnZlbnVzX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTpcbiAgICAgICAgICAgICAgICB0aGlzLm1lcmN1cnlfZGppbm5pLnB1c2goZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NQVJTOlxuICAgICAgICAgICAgICAgIHRoaXMubWFyc19kamlubmkucHVzaChkamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6XG4gICAgICAgICAgICAgICAgdGhpcy5qdXBpdGVyX2RqaW5uaS5wdXNoKGRqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZV9hbGwoKTtcbiAgICB9XG5cbiAgICByZW1vdmVfZGppbm4oZGppbm5fa2V5X25hbWUpIHtcbiAgICAgICAgbGV0IGRqaW5uID0gdGhpcy5pbmZvLmRqaW5uaV9saXN0W2RqaW5uX2tleV9uYW1lXTtcbiAgICAgICAgbGV0IHRoaXNfZGppbm5pX2xpc3Q7XG4gICAgICAgIHN3aXRjaCAoZGppbm4uZWxlbWVudCkge1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzpcbiAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaV9saXN0ID0gdGhpcy52ZW51c19kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1FUkNVUlk6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMubWVyY3VyeV9kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLk1BUlM6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMubWFyc19kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmlfbGlzdCA9IHRoaXMuanVwaXRlcl9kamlubmk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzX2RqaW5uaV9saXN0LmluZGV4T2YoZGppbm5fa2V5X25hbWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB0aGlzX2RqaW5uaV9saXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMudXBkYXRlX2FsbCgpO1xuICAgIH1cblxuICAgIHJlcGxhY2VfZGppbm4ob2xkX2RqaW5uX2tleV9uYW1lLCBuZXdfZGppbm5fa2V5X25hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVfZGppbm4ob2xkX2RqaW5uX2tleV9uYW1lKTtcbiAgICAgICAgdGhpcy5hZGRfZGppbm4obmV3X2RqaW5uX2tleV9uYW1lKTtcbiAgICB9XG5cbiAgICBwcmV2aWV3X2RqaW5uX2NoYW5nZShzdGF0cywgZGppbm5pX2tleV9uYW1lLCBkamlubmlfbmV4dF9zdGF0dXMsIGFjdGlvbj8pIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNfY2xhc3MgPSB0aGlzLmNsYXNzO1xuICAgICAgICBsZXQgdmVudXNfbHYgPSB0aGlzLnZlbnVzX2xldmVsX2N1cnJlbnQ7XG4gICAgICAgIGxldCBtZXJjdXJ5X2x2ID0gdGhpcy5tZXJjdXJ5X2xldmVsX2N1cnJlbnQ7XG4gICAgICAgIGxldCBtYXJzX2x2ID0gdGhpcy5tYXJzX2xldmVsX2N1cnJlbnQ7XG4gICAgICAgIGxldCBqdXBpdGVyX2x2ID0gdGhpcy5qdXBpdGVyX2xldmVsX2N1cnJlbnQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGppbm5pX2tleV9uYW1lLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFtkamlubmlfa2V5X25hbWVbaV1dO1xuICAgICAgICAgICAgbGV0IGx2X3NoaWZ0O1xuICAgICAgICAgICAgc3dpdGNoIChkamlubmlfbmV4dF9zdGF0dXNbaV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TRVQ6IGx2X3NoaWZ0ID0gRUxFTV9MVl9ERUxUQTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XG4gICAgICAgICAgICAgICAgY2FzZSBcImlycmVsZXZhbnRcIjogbHZfc2hpZnQgPSAwOyBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBsdl9zaGlmdCA9IC1FTEVNX0xWX0RFTFRBO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkamlubi5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5WRU5VUzogdmVudXNfbHYgKz0gbHZfc2hpZnQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudHMuTUVSQ1VSWTogbWVyY3VyeV9sdiArPSBsdl9zaGlmdDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlbGVtZW50cy5NQVJTOiBtYXJzX2x2ICs9IGx2X3NoaWZ0OyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnRzLkpVUElURVI6IGp1cGl0ZXJfbHYgKz0gbHZfc2hpZnQ7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xhc3MgPSBjaG9vc2VfcmlnaHRfY2xhc3ModGhpcy5pbmZvLmNsYXNzZXNfbGlzdCwgdGhpcy5jbGFzc190YWJsZSwgdGhpcy5lbGVtZW50X2FmaW5pdHksIHZlbnVzX2x2LCBtZXJjdXJ5X2x2LCBtYXJzX2x2LCBqdXBpdGVyX2x2KTtcbiAgICAgICAgbGV0IHJldHVybl9vYmogPSB7XG4gICAgICAgICAgICBjbGFzc19uYW1lOiB0aGlzLmNsYXNzLm5hbWUsXG4gICAgICAgICAgICBjbGFzc19rZXlfbmFtZTogdGhpcy5jbGFzcy5rZXlfbmFtZSxcbiAgICAgICAgICAgIGFiaWxpdGllczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm5fb2JqLmFiaWxpdGllcyA9IHRoaXMuaW5uYXRlX2FiaWxpdGllcy5jb25jYXQodGhpcy5jbGFzcy5hYmlsaXR5X2xldmVsX3BhaXJzLmZpbHRlcihwYWlyID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwYWlyLmxldmVsIDw9IHRoaXMubGV2ZWwgJiYgIXRoaXMuaW5uYXRlX2FiaWxpdGllcy5pbmNsdWRlcyhwYWlyLmFiaWxpdHkpO1xuICAgICAgICB9KS5tYXAocGFpciA9PiBwYWlyLmFiaWxpdHkpLCB0aGlzLmVxdWlwcGVkX2FiaWxpdGllcyk7XG4gICAgICAgIGRqaW5uaV9uZXh0X3N0YXR1cyA9IGRqaW5uaV9uZXh0X3N0YXR1cy5tYXAoc3RhdHVzID0+IHN0YXR1cyA9PT0gXCJpcnJlbGV2YW50XCIgPyBkamlubl9zdGF0dXMuU1RBTkRCWSA6IHN0YXR1cyk7XG4gICAgICAgIHN0YXRzLmZvckVhY2goc3RhdCA9PiB7XG4gICAgICAgICAgICByZXR1cm5fb2JqW3N0YXRdID0gdGhpcy5wcmV2aWV3X3N0YXRzX2J5X2RqaW5uKHN0YXQsIGRqaW5uaV9rZXlfbmFtZSwgZGppbm5pX25leHRfc3RhdHVzLCBhY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jbGFzcyA9IHByZXZpb3VzX2NsYXNzO1xuICAgICAgICByZXR1cm4gcmV0dXJuX29iajtcbiAgICB9XG5cbiAgICBwcmV2aWV3X3N0YXRzX2J5X2RqaW5uKHN0YXQsIGRqaW5uaV9rZXlfbmFtZSwgZGppbm5pX25leHRfc3RhdHVzLCBhY3Rpb24pIHtcbiAgICAgICAgY29uc3QgcHJldmlld19vYmogPSB7XG4gICAgICAgICAgICBkamlubmlfa2V5X25hbWU6IGRqaW5uaV9rZXlfbmFtZSxcbiAgICAgICAgICAgIGRqaW5uaV9uZXh0X3N0YXR1czogZGppbm5pX25leHRfc3RhdHVzLFxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoIChzdGF0KSB7XG4gICAgICAgICAgICBjYXNlIFwibWF4X2hwXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwiaHBcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xuICAgICAgICAgICAgY2FzZSBcIm1heF9wcFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcInBwXCIsIHRydWUsIHByZXZpZXdfb2JqKTtcbiAgICAgICAgICAgIGNhc2UgXCJhdGtcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJhdGtcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xuICAgICAgICAgICAgY2FzZSBcImRlZlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImRlZlwiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgICAgICBjYXNlIFwiYWdpXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwiYWdpXCIsIHRydWUsIHByZXZpZXdfb2JqKTtcbiAgICAgICAgICAgIGNhc2UgXCJsdWtcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJsdWtcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldmlld19zdGF0c19ieV9lZmZlY3QoZWZmZWN0X3R5cGUsIGVmZmVjdF9vYmosIGl0ZW1fa2V5X25hbWUpIHtcbiAgICAgICAgY29uc3QgcHJldmlld19vYmogPSB7XG4gICAgICAgICAgICBlZmZlY3Rfb2JqOiBlZmZlY3Rfb2JqLFxuICAgICAgICAgICAgaXRlbV9rZXlfbmFtZTogaXRlbV9rZXlfbmFtZVxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZWZmZWN0X3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9IUDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRfbWF4X3N0YXQoXCJocFwiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfUFA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0X21heF9zdGF0KFwicHBcIiwgdHJ1ZSwgcHJldmlld19vYmopO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImF0a1wiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImRlZlwiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImFnaVwiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldF9tYXhfc3RhdChcImx1a1wiLCB0cnVlLCBwcmV2aWV3X29iaik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfbWF4X3N0YXQoc3RhdCwgcHJldmlldyA9IGZhbHNlLCBwcmV2aWV3X29iajogYW55ID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3RhdF9rZXkgPSBbXCJocFwiLCBcInBwXCJdLmluY2x1ZGVzKHN0YXQpID8gXCJtYXhfXCIgKyBzdGF0IDogc3RhdDtcbiAgICAgICAgY29uc3QgY3VycmV0X2tleSA9IFwiY3VycmVudF9cIiArIHN0YXQ7XG4gICAgICAgIGNvbnN0IGJvb3N0X2tleSA9IHN0YXQgKyBcIl9ib29zdFwiO1xuICAgICAgICBjb25zdCBjdXJ2ZV9rZXkgPSBzdGF0ICsgXCJfY3VydmVcIjtcbiAgICAgICAgY29uc3QgZXh0cmFfa2V5ID0gc3RhdCArIFwiX2V4dHJhXCI7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzX3ZhbHVlID0gdGhpc1tzdGF0X2tleV07XG4gICAgICAgIHRoaXNbc3RhdF9rZXldID0gKHRoaXNbY3VydmVfa2V5XVt0aGlzLmxldmVsXSAqIHRoaXMuY2xhc3NbYm9vc3Rfa2V5XSArIHRoaXNbZXh0cmFfa2V5XSkgfCAwO1xuICAgICAgICBsZXQgdGhpc19kamlubmkgPSB0aGlzLmRqaW5uaTtcbiAgICAgICAgaWYgKHByZXZpZXcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2aWV3X29iai5hY3Rpb24gPT09IFwiVHJhZGVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0X2luZGV4ID0gdGhpc19kamlubmkuaW5kZXhPZihwcmV2aWV3X29iai5kamlubmlfa2V5X25hbWVbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdF9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pW2ZpcnN0X2luZGV4XSA9IHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZVsxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2RqaW5uaVt0aGlzX2RqaW5uaS5pbmRleE9mKHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZVsxXSldID0gcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlld19vYmouYWN0aW9uID09PSBcIkdpdmVcIikge1xuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pLnB1c2gocHJldmlld19vYmouZGppbm5pX2tleV9uYW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXNfZGppbm5pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgZGppbm5fa2V5X25hbWUgPSB0aGlzX2RqaW5uaVtpXTtcbiAgICAgICAgICAgIGxldCBkamlubiA9IHRoaXMuaW5mby5kamlubmlfbGlzdFtkamlubl9rZXlfbmFtZV07XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gZGppbm4uc3RhdHVzO1xuICAgICAgICAgICAgaWYgKHByZXZpZXcgJiYgcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lICYmIHByZXZpZXdfb2JqLmRqaW5uaV9rZXlfbmFtZS5pbmNsdWRlcyhkamlubl9rZXlfbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSBwcmV2aWV3X29iai5kamlubmlfbmV4dF9zdGF0dXNbcHJldmlld19vYmouZGppbm5pX2tleV9uYW1lLmluZGV4T2YoZGppbm5fa2V5X25hbWUpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IGRqaW5uX3N0YXR1cy5TRVQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGhpc1tzdGF0X2tleV0gKz0gZGppbm5bYm9vc3Rfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xuICAgICAgICAgICAgaWYgKHByZXZpZXcgJiYgZWZmZWN0LmVmZmVjdF9vd25lcl9pbnN0YW5jZSAmJiBwcmV2aWV3X29iai5pdGVtX2tleV9uYW1lID09PSBlZmZlY3QuZWZmZWN0X293bmVyX2luc3RhbmNlLmtleV9uYW1lKSByZXR1cm47XG4gICAgICAgICAgICBsZXQgZWZmZWN0X3R5cGU7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiaHBcIjpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTUFYX0hQO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicHBcIjpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTUFYX1BQO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXRrXCI6XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLkFUVEFDSztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRlZlwiOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfdHlwZSA9IGVmZmVjdF90eXBlcy5ERUZFTlNFO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWdpXCI6XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdF90eXBlID0gZWZmZWN0X3R5cGVzLkFHSUxJVFk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsdWtcIjpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0X3R5cGUgPSBlZmZlY3RfdHlwZXMuTFVDSztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0LmFwcGx5X2VmZmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXZpZXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpZXdfdmFsdWUgPSBwcmV2aWV3X29iai5lZmZlY3Rfb2JqID8gRWZmZWN0LnByZXZpZXdfdmFsdWVfYXBwbGllZChwcmV2aWV3X29iai5lZmZlY3Rfb2JqLCB0aGlzW3N0YXRfa2V5XSkgOiB0aGlzW3N0YXRfa2V5XTtcbiAgICAgICAgICAgIHRoaXNbc3RhdF9rZXldID0gcHJldmlvdXNfdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlld192YWx1ZTtcbiAgICAgICAgfSBcbiAgICAgICAgaWYgKHRoaXNbY3VycmV0X2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpc1tjdXJyZXRfa2V5XSA9IHRoaXNbc3RhdF9rZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1tjdXJyZXRfa2V5XSA9IE1hdGgucm91bmQodGhpc1tjdXJyZXRfa2V5XSAqIHRoaXNbc3RhdF9rZXldL3ByZXZpb3VzX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9hdHRyaWJ1dGVzKCkge1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChcImhwXCIpO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChcInBwXCIpO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChcImF0a1wiKTtcbiAgICAgICAgdGhpcy5zZXRfbWF4X3N0YXQoXCJkZWZcIik7XG4gICAgICAgIHRoaXMuc2V0X21heF9zdGF0KFwiYWdpXCIpO1xuICAgICAgICB0aGlzLnNldF9tYXhfc3RhdChcImx1a1wiKTtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X2hwKGFtb3VudCkge1xuICAgICAgICB0aGlzLmhwX2V4dHJhICs9IGFtb3VudDtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X3BwKGFtb3VudCkge1xuICAgICAgICB0aGlzLnBwX2V4dHJhICs9IGFtb3VudDtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X2F0ayhhbW91bnQpIHtcbiAgICAgICAgdGhpcy5hdGtfZXh0cmEgKz0gYW1vdW50O1xuICAgIH1cblxuICAgIGFkZF9leHRyYV9tYXhfZGVmKGFtb3VudCkge1xuICAgICAgICB0aGlzLmRlZl9leHRyYSArPSBhbW91bnQ7XG4gICAgfVxuXG4gICAgYWRkX2V4dHJhX21heF9hZ2koYW1vdW50KSB7XG4gICAgICAgIHRoaXMuYWdpX2V4dHJhICs9IGFtb3VudDtcbiAgICB9XG5cbiAgICBhZGRfZXh0cmFfbWF4X2x1ayhhbW91bnQpIHtcbiAgICAgICAgdGhpcy5sdWtfZXh0cmEgKz0gYW1vdW50O1xuICAgIH1cblxuICAgIGluaXRfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHRoaXMudmVudXNfbGV2ZWxfY3VycmVudCA9IHRoaXMudmVudXNfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy5tYXJzX2xldmVsX2N1cnJlbnQgPSB0aGlzLm1hcnNfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy5qdXBpdGVyX2xldmVsX2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfbGV2ZWxfYmFzZTtcbiAgICAgICAgdGhpcy52ZW51c19wb3dlcl9jdXJyZW50ID0gdGhpcy52ZW51c19wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLm1lcmN1cnlfcG93ZXJfY3VycmVudCA9IHRoaXMubWVyY3VyeV9wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLm1hcnNfcG93ZXJfY3VycmVudCA9IHRoaXMubWFyc19wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcG93ZXJfY3VycmVudCA9IHRoaXMuanVwaXRlcl9wb3dlcl9iYXNlO1xuICAgICAgICB0aGlzLnZlbnVzX3Jlc2lzdF9jdXJyZW50ID0gdGhpcy52ZW51c19yZXNpc3RfYmFzZTtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Jlc2lzdF9jdXJyZW50ID0gdGhpcy5tZXJjdXJ5X3Jlc2lzdF9iYXNlO1xuICAgICAgICB0aGlzLm1hcnNfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLm1hcnNfcmVzaXN0X2Jhc2U7XG4gICAgICAgIHRoaXMuanVwaXRlcl9yZXNpc3RfY3VycmVudCA9IHRoaXMuanVwaXRlcl9yZXNpc3RfYmFzZTtcbiAgICB9XG5cbiAgICB1cGRhdGVfZWxlbWVudGFsX2F0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHRoaXMuaW5pdF9lbGVtZW50YWxfYXR0cmlidXRlcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgZGppbm4gPSB0aGlzLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbaV1dO1xuICAgICAgICAgICAgaWYgKGRqaW5uLnN0YXR1cyAhPT0gZGppbm5fc3RhdHVzLlNFVCkgY29udGludWU7XG4gICAgICAgICAgICB0aGlzW2RqaW5uLmVsZW1lbnQgKyBcIl9sZXZlbF9jdXJyZW50XCJdICs9IEVMRU1fTFZfREVMVEE7XG4gICAgICAgICAgICB0aGlzW2RqaW5uLmVsZW1lbnQgKyBcIl9wb3dlcl9jdXJyZW50XCJdICs9IEVMRU1fUE9XRVJfREVMVEE7XG4gICAgICAgICAgICB0aGlzW2RqaW5uLmVsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiXSArPSBFTEVNX1JFU0lTVF9ERUxUQTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xuICAgICAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuUE9XRVIgfHwgZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlcy5SRVNJU1QpIHtcbiAgICAgICAgICAgICAgICBlZmZlY3QuYXBwbHlfZWZmZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcbiAgICAgICAgICAgIGNvbnN0IHJlc2lzdF9rZXkgPSBlbGVtZW50ICsgXCJfcmVzaXN0X2N1cnJlbnRcIjtcbiAgICAgICAgICAgIHRoaXNbcG93ZXJfa2V5XSA9IF8uY2xhbXAodGhpc1twb3dlcl9rZXldLCBFTEVNX0FUVFJfTUlOLCBFTEVNX0FUVFJfTUFYKTtcbiAgICAgICAgICAgIHRoaXNbcmVzaXN0X2tleV0gPSBfLmNsYW1wKHRoaXNbcmVzaXN0X2tleV0sIEVMRU1fQVRUUl9NSU4sIEVMRU1fQVRUUl9NQVgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX2FiaWxpdGllcygpIHtcbiAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB0aGlzLmlubmF0ZV9hYmlsaXRpZXMuY29uY2F0KHRoaXMuY2xhc3MuYWJpbGl0eV9sZXZlbF9wYWlycy5maWx0ZXIocGFpciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcGFpci5sZXZlbCA8PSB0aGlzLmxldmVsICYmICF0aGlzLmlubmF0ZV9hYmlsaXRpZXMuaW5jbHVkZXMocGFpci5hYmlsaXR5KTtcbiAgICAgICAgfSkubWFwKHBhaXIgPT4gcGFpci5hYmlsaXR5KSwgdGhpcy5lcXVpcHBlZF9hYmlsaXRpZXMpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9hbGwoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlX2VsZW1lbnRhbF9hdHRyaWJ1dGVzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2NsYXNzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2F0dHJpYnV0ZXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfYWJpbGl0aWVzKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9hY3RpdmVfcGxheWVycyhwYXJ0eV9kYXRhLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnR5X2RhdGEubWVtYmVycy5zbGljZSgwLCBtYXgpLmZpbHRlcihjaGFyID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBhYmlsaXR5X3R5cGVzID0ge1xuICAgIEhFQUxJTkc6IFwiaGVhbGluZ1wiLFxuICAgIEVGRkVDVF9PTkxZOiBcImVmZmVjdF9vbmx5XCIsXG4gICAgQURERURfREFNQUdFOiBcImFkZGVkX2RhbWFnZVwiLFxuICAgIE1VTFRJUExJRVI6IFwibXVsdGlwbGllclwiLFxuICAgIEJBU0VfREFNQUdFOiBcImJhc2VfZGFtYWdlXCIsXG4gICAgU1VNTU9OOiBcInN1bW1vblwiLFxuICAgIFVUSUxJVFk6IFwidXRpbGl0eVwiLFxuICAgIERJUkVDVF9EQU1BR0U6IFwiZGlyZWN0X2RhbWFnZVwiXG59O1xuXG5leHBvcnQgY29uc3QgYWJpbGl0eV9tc2dfdHlwZXMgPSB7XG4gICAgQ0FTVDogXCJjYXN0XCIsXG4gICAgQVRUQUNLOiBcImF0dGFja1wiLFxuICAgIFVTRTogXCJ1c2VcIixcbiAgICBTVU1NT046IFwic3VtbW9uXCIsXG4gICAgVU5MRUFTSDogXCJ1bmxlYXNoXCIsXG4gICAgREVGRU5EOiBcImRlZmVuZFwiLFxuICAgIElURU1fVU5MRUFTSDogXCJpdGVtX3VubGVhc2hcIixcbiAgICBTRVRfREpJTk46IFwic2V0X2RqaW5uXCIsXG4gICAgTk9fTVNHOiBcIm5vX21zZ1wiXG59O1xuXG5leHBvcnQgY29uc3QgYWJpbGl0eV90YXJnZXRfdHlwZXMgPSB7XG4gICAgTk9fVEFSR0VUOiBcIm5vX3RhcmdldFwiLFxuICAgIEFMTFk6IFwiYWxseVwiLFxuICAgIEVORU1ZOiBcImVuZW15XCIsXG4gICAgVVNFUjogXCJ1c2VyXCJcbn07XG5cbmV4cG9ydCBjb25zdCBhYmlsaXR5X2NhdGVnb3JpZXMgPSB7XG4gICAgUFNZTkVSR1k6IFwicHN5bmVyZ3lcIixcbiAgICBESklOTjogXCJkamlublwiLFxuICAgIFNVTU1PTjogXCJzdW1tb25cIixcbiAgICBJVEVNOiBcIml0ZW1cIixcbiAgICBXRUFQT05fVU5MRUFTSDogXCJ3ZWFwb25fdW5sZWFzaFwiLFxuICAgIE5PUk1BTDogXCJub3JtYWxcIlxufVxuXG5leHBvcnQgY29uc3QgZGltaW5pc2hpbmdfcmF0aW9zID0ge1xuICAgIFNUQU5EQVJEOiB7XG4gICAgICAgIDExOiAuMSxcbiAgICAgICAgOTogLjIsXG4gICAgICAgIDc6IC40LFxuICAgICAgICA1OiAuNixcbiAgICAgICAgMzogLjgsXG4gICAgICAgIDE6IDFcbiAgICB9LFxuICAgIFNVTU1PTjoge1xuICAgICAgICAxMTogLjEsXG4gICAgICAgIDk6IC4yLFxuICAgICAgICA3OiAuMyxcbiAgICAgICAgNTogLjQsXG4gICAgICAgIDM6IC43LFxuICAgICAgICAxOiAxXG4gICAgfSxcbiAgICBESU1JTklTSDoge1xuICAgICAgICAxMTogLjEsXG4gICAgICAgIDk6IC4xLFxuICAgICAgICA3OiAuMSxcbiAgICAgICAgNTogLjMsXG4gICAgICAgIDM6IC41LFxuICAgICAgICAxOiAxXG4gICAgfSxcbiAgICBTVEFUVVM6IHtcbiAgICAgICAgMTE6IC4zLFxuICAgICAgICA5OiAuMyxcbiAgICAgICAgNzogLjMsXG4gICAgICAgIDU6IC4zLFxuICAgICAgICAzOiAuNixcbiAgICAgICAgMTogMVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFiaWxpdHkge1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHR5cGU6IHN0cmluZztcbiAgICBwdWJsaWMgZWxlbWVudDogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXR0bGVfdGFyZ2V0OiBzdHJpbmc7XG4gICAgcHVibGljIHJhbmdlOiBudW1iZXI7XG4gICAgcHVibGljIHBwX2Nvc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV9wb3dlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBlZmZlY3RzX291dHNpZGVfYmF0dGxlOiBib29sZWFuO1xuICAgIHB1YmxpYyBpc19iYXR0bGVfYWJpbGl0eTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaXNfZmllbGRfcHN5bmVyZ3k6IGJvb2xlYW47XG4gICAgcHVibGljIGVmZmVjdHM6IGFueTtcbiAgICBwdWJsaWMgYWJpbGl0eV9jYXRlZ29yeTogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXR0bGVfYW5pbWF0aW9uX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBwcmlvcml0eV9tb3ZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBoYXNfY3JpdGljYWw6IGJvb2xlYW47XG4gICAgcHVibGljIGNyaXRfbXVsdF9mYWN0b3I6IG51bWJlcjtcbiAgICBwdWJsaWMgY2FuX3N3aXRjaF90b191bmxlYXNoOiBib29sZWFuO1xuICAgIHB1YmxpYyBjYW5fYmVfZXZhZGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyB1c2VfZGltaW5pc2hpbmdfcmF0aW86IGJvb2xlYW47XG4gICAgcHVibGljIG1zZ190eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGFmZmVjdHNfcHA6IGJvb2xlYW47XG4gICAgcHVibGljIGhhc19hbmltYXRpb25fdmFyaWF0aW9uOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgYmF0dGxlX3RhcmdldCxcbiAgICAgICAgcmFuZ2UsXG4gICAgICAgIHBwX2Nvc3QsXG4gICAgICAgIGFiaWxpdHlfcG93ZXIsXG4gICAgICAgIGVmZmVjdHNfb3V0c2lkZV9iYXR0bGUsXG4gICAgICAgIGlzX2JhdHRsZV9hYmlsaXR5LFxuICAgICAgICBpc19maWVsZF9wc3luZXJneSxcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgYWJpbGl0eV9jYXRlZ29yeSxcbiAgICAgICAgYmF0dGxlX2FuaW1hdGlvbl9rZXksXG4gICAgICAgIHByaW9yaXR5X21vdmUsXG4gICAgICAgIGhhc19jcml0aWNhbCxcbiAgICAgICAgY3JpdF9tdWx0X2ZhY3RvcixcbiAgICAgICAgY2FuX3N3aXRjaF90b191bmxlYXNoLFxuICAgICAgICBjYW5fYmVfZXZhZGVkLFxuICAgICAgICB1c2VfZGltaW5pc2hpbmdfcmF0aW8sXG4gICAgICAgIG1zZ190eXBlLFxuICAgICAgICBhZmZlY3RzX3BwLFxuICAgICAgICBoYXNfYW5pbWF0aW9uX3ZhcmlhdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLmtleV9uYW1lID0ga2V5X25hbWU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5iYXR0bGVfdGFyZ2V0ID0gYmF0dGxlX3RhcmdldDtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnBwX2Nvc3QgPSBwcF9jb3N0O1xuICAgICAgICB0aGlzLmFiaWxpdHlfcG93ZXIgPSBhYmlsaXR5X3Bvd2VyO1xuICAgICAgICB0aGlzLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUgPSBlZmZlY3RzX291dHNpZGVfYmF0dGxlO1xuICAgICAgICB0aGlzLmlzX2JhdHRsZV9hYmlsaXR5ID0gaXNfYmF0dGxlX2FiaWxpdHk7XG4gICAgICAgIHRoaXMuaXNfZmllbGRfcHN5bmVyZ3kgPSBpc19maWVsZF9wc3luZXJneTtcbiAgICAgICAgdGhpcy5lZmZlY3RzID0gZWZmZWN0cztcbiAgICAgICAgdGhpcy5hYmlsaXR5X2NhdGVnb3J5ID0gYWJpbGl0eV9jYXRlZ29yeTtcbiAgICAgICAgdGhpcy5iYXR0bGVfYW5pbWF0aW9uX2tleSA9IGJhdHRsZV9hbmltYXRpb25fa2V5O1xuICAgICAgICB0aGlzLnByaW9yaXR5X21vdmUgPSBwcmlvcml0eV9tb3ZlID8gcHJpb3JpdHlfbW92ZSA6IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc19jcml0aWNhbCA9IGhhc19jcml0aWNhbCA/IGhhc19jcml0aWNhbCA6IGZhbHNlO1xuICAgICAgICB0aGlzLmNyaXRfbXVsdF9mYWN0b3IgPSBjcml0X211bHRfZmFjdG9yICE9PSB1bmRlZmluZWQgPyBjcml0X211bHRfZmFjdG9yIDogMTtcbiAgICAgICAgdGhpcy5jYW5fc3dpdGNoX3RvX3VubGVhc2ggPSBjYW5fc3dpdGNoX3RvX3VubGVhc2ggPyBjYW5fc3dpdGNoX3RvX3VubGVhc2ggOiBmYWxzZTtcbiAgICAgICAgdGhpcy5jYW5fYmVfZXZhZGVkID0gY2FuX2JlX2V2YWRlZCA/IGNhbl9iZV9ldmFkZWQgOiBmYWxzZTtcbiAgICAgICAgdGhpcy51c2VfZGltaW5pc2hpbmdfcmF0aW8gPSB1c2VfZGltaW5pc2hpbmdfcmF0aW8gPyB1c2VfZGltaW5pc2hpbmdfcmF0aW8gOiBmYWxzZTtcbiAgICAgICAgdGhpcy5tc2dfdHlwZSA9IG1zZ190eXBlID09PSB1bmRlZmluZWQgPyBhYmlsaXR5X21zZ190eXBlcy5DQVNUIDogbXNnX3R5cGU7XG4gICAgICAgIHRoaXMuYWZmZWN0c19wcCA9IGFmZmVjdHNfcHAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYWZmZWN0c19wcDtcbiAgICAgICAgdGhpcy5oYXNfYW5pbWF0aW9uX3ZhcmlhdGlvbiA9IGhhc19hbmltYXRpb25fdmFyaWF0aW9uID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGhhc19hbmltYXRpb25fdmFyaWF0aW9uO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRfZGltaW5pc2hpbmdfcmF0aW9zKGFiaWxpdHlfdHlwZSwgdXNlX2RpbWluaXNoaW5nX3JhdGlvKSB7XG4gICAgICAgIGlmICh1c2VfZGltaW5pc2hpbmdfcmF0aW8pIHtcbiAgICAgICAgICAgIHJldHVybiBkaW1pbmlzaGluZ19yYXRpb3MuRElNSU5JU0g7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhYmlsaXR5X3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5TVU1NT046IHJldHVybiBkaW1pbmlzaGluZ19yYXRpb3MuU1VNTU9OO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGRpbWluaXNoaW5nX3JhdGlvcy5TVEFOREFSRDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5cbmV4cG9ydCBjb25zdCBldmVudF90eXBlcyA9IHtcbiAgICBCQVRUTEU6IFwiYmF0dGxlXCJcbn07XG5cbmV4cG9ydCBjbGFzcyBHYW1lRXZlbnQge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGlkOiBudW1iZXI7XG4gICAgcHVibGljIHN0YXRpYyBpZF9pbmNyZW1lbnRlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBzdGF0aWMgZXZlbnRzOiB7W2lkOiBudW1iZXJdOiBHYW1lRXZlbnR9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgdHlwZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmlkID0gR2FtZUV2ZW50LmlkX2luY3JlbWVudGVyKys7XG4gICAgICAgIEdhbWVFdmVudC5ldmVudHNbdGhpcy5pZF0gPSB0aGlzO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRfZXZlbnQoaWQpIHtcbiAgICAgICAgcmV0dXJuIEdhbWVFdmVudC5ldmVudHNbaWRdO1xuICAgIH1cblxuICAgIHN0YXRpYyByZXNldCgpIHtcbiAgICAgICAgR2FtZUV2ZW50LmlkX2luY3JlbWVudGVyID0gMDtcbiAgICAgICAgR2FtZUV2ZW50LmV2ZW50cyA9IHt9O1xuICAgIH1cbn1cblxuR2FtZUV2ZW50LnJlc2V0KCk7IiwiaW1wb3J0IHsgcGVybWFuZW50X3N0YXR1cywgdGVtcG9yYXJ5X3N0YXR1cywgb25fY2F0Y2hfc3RhdHVzX21zZywgZmlnaHRlcl90eXBlcyB9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7IEJhdHRsZVN0YWdlIH0gZnJvbSBcIi4vQmF0dGxlU3RhZ2VcIjtcbmltcG9ydCB7IEJhdHRsZUxvZyB9IGZyb20gXCIuL0JhdHRsZUxvZ1wiO1xuaW1wb3J0IHsgTWFpbkJhdHRsZU1lbnUsIFBsYXllckFiaWxpdGllcywgUGxheWVyQWJpbGl0eSB9IGZyb20gXCIuLi9tYWluX21lbnVzL01haW5CYXR0bGVNZW51XCI7XG5pbXBvcnQgeyBFbmVteSwgZ2V0X2VuZW15X2luc3RhbmNlIH0gZnJvbSBcIi4uL0VuZW15XCI7XG5pbXBvcnQgeyBhYmlsaXR5X3R5cGVzLCBBYmlsaXR5LCBkaW1pbmlzaGluZ19yYXRpb3MsIGFiaWxpdHlfY2F0ZWdvcmllcyB9IGZyb20gXCIuLi9BYmlsaXR5XCI7XG5pbXBvcnQgeyBDaG9vc2luZ1RhcmdldFdpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9DaG9vc2luZ1RhcmdldFdpbmRvd1wiO1xuaW1wb3J0IHsgRW5lbXlBSSB9IGZyb20gXCIuL0VuZW15QUlcIjtcbmltcG9ydCB7IEJhdHRsZUZvcm11bGFzLCBDUklUSUNBTF9DSEFOQ0UsIEVWQVNJT05fQ0hBTkNFLCBERUxVU0lPTl9NSVNTX0NIQU5DRSB9IGZyb20gXCIuL0JhdHRsZUZvcm11bGFzXCI7XG5pbXBvcnQgeyBlZmZlY3RfdHlwZXMsIEVmZmVjdCwgZWZmZWN0X3VzYWdlcywgZWZmZWN0X25hbWVzLCBlZmZlY3RfbXNnIH0gZnJvbSBcIi4uL0VmZmVjdFwiO1xuaW1wb3J0IHsgdmFyaWF0aW9uLCBvcmRlcmVkX2VsZW1lbnRzLCBlbGVtZW50X25hbWVzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBkamlubl9zdGF0dXMsIERqaW5uIH0gZnJvbSBcIi4uL0RqaW5uXCI7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gXCIuLi9NYWluQ2hhclwiO1xuaW1wb3J0IHsgQmF0dGxlQW5pbWF0aW9uTWFuYWdlciB9IGZyb20gXCIuL0JhdHRsZUFuaW1hdGlvbk1hbmFnZXJcIjtcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgY29uc3QgTUFYX0NIQVJTX0lOX0JBVFRMRSA9IDQ7XG5cbi8qIEFDVElPTlM6XG4tIEF0dGFja1xuLSBQc3luZXJneVxuLSBEamlubmkgVXNlXG4tIERqaW5uaSBSZWNvdmVyeVxuLSBJdGVtXG4tIEVuZW15IEFjdGlvblxuLSBEZWZlbmRcbi0gVG90YWwgRGVmZW5zZSAoeWVzLCB0aGlzIGlzIGRlZmluZWQgZGlmZmVyZW50bHkgZnJvbSBEZWZlbmQgZm9yIHNvbWUgcmVhc29uKVxuLSBDb3VudGVyYXR0YWNrXG4tIERhZWRhbHVzXG4tIFJldHJlYXRcbiovXG5cbmNvbnN0IGJhdHRsZV9waGFzZXMgPSB7XG4gICAgTk9ORTogMCwgLy8gKG5vdCBpbiBhIGJhdHRsZSlcbiAgICBTVEFSVDogMSwgLy8gU3RhcnQgKGNhbWVyYSBwYW4sIHNob3dzIGVuZW1pZXMsIG1vdmUgdG8gbWVudSlcbiAgICBNRU5VOiAyLCAvLyAoaW5jbHVkZXMgc3VibWVudXMsIHRoaXMgcGhhc2UgZG9lc24ndCBlbmQgdW50aWwgdGhlIHBsYXllciBoYXMgZW50ZXJlZCB0aGVpciBmaW5hbCBjb21tYW5kKVxuICAgIFJPVU5EX1NUQVJUOiAzLCAvLyBTdGFydCAodHVybiBvcmRlciBpcyBkZXRlcm1pbmVkLCBlbmVtaWVzIG1heSBjb21taXQgdG8gY2VydGFpbiBhY3Rpb25zKVxuICAgIENPTUJBVDogNCwgLy8gKGFsbCBhY3Rpb25zIGFyZSBxdWV1ZWQgYW5kIHRha2UgcGxhY2UgaGVyZSwgeW91IGNvdWxkIGZ1cnRoZXIgYnJlYWsgdXAgY29tYmF0IGFjdGlvbnMgaW50byBzdWJhY3Rpb25zLCB3aGljaCBzaG91bGQgYmUgZ292ZXJuZWQgYnkgYSBzZXBhcmF0ZSBzdWItc3RhdGUgdmFyaWFibGUpXG4gICAgUk9VTkRfRU5EOiA1LCAvLyBFbmQgKGRqaW5uIHJlY292ZXJ5LCBzdGF0dXMvYnVmZi9kZWJ1ZmYgdGltZXJzIGRlY3JlbWVudClcbiAgICBFTkQ6IDYgLy8gRW5kICh0aGUgbGFzdCBlbmVteSBoYXMgZmFsbGVuLCBleHAvZ29sZC9kcm9wcyBhcmUgYXdhcmRlZClcbn07XG5cbmV4cG9ydCB0eXBlIFBsYXllckluZm8gPSB7XG4gICAgc3ByaXRlX2tleTogc3RyaW5nLFxuICAgIHNjYWxlPzogbnVtYmVyLFxuICAgIGluc3RhbmNlPzogRW5lbXl8TWFpbkNoYXIsXG4gICAgZW50ZXJlZF9pbl9iYXR0bGU/OiBib29sZWFuLFxuICAgIGJhdHRsZV9rZXk/OiBzdHJpbmcsXG4gICAgc3ByaXRlPzogUGhhc2VyLlNwcml0ZVxufTtcblxuZXhwb3J0IGNsYXNzIEJhdHRsZSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGFsbGllc19pbmZvOiBQbGF5ZXJJbmZvW107XG4gICAgcHVibGljIGVuZW1pZXNfcGFydHlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBlbmVtaWVzX2luZm86IFBsYXllckluZm9bXTtcbiAgICBwdWJsaWMgdGhpc19lbmVtaWVzX2xpc3Q6IHtbYmF0dGxlX2tleTogc3RyaW5nXTogRW5lbXl9O1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgYmF0dGxlX3N0YWdlOiBCYXR0bGVTdGFnZTtcbiAgICBwdWJsaWMgYmF0dGxlX2xvZzogQmF0dGxlTG9nO1xuICAgIHB1YmxpYyBiYXR0bGVfbWVudTogTWFpbkJhdHRsZU1lbnU7XG4gICAgcHVibGljIHRhcmdldF93aW5kb3c6IENob29zaW5nVGFyZ2V0V2luZG93O1xuICAgIHB1YmxpYyBhbmltYXRpb25fbWFuYWdlcjogQmF0dGxlQW5pbWF0aW9uTWFuYWdlcjtcbiAgICBwdWJsaWMgYmF0dGxlX3BoYXNlOiBudW1iZXI7XG4gICAgcHVibGljIGNvbnRyb2xzX2VuYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIG9uX2dvaW5nX2VmZmVjdHM6IEVmZmVjdFtdO1xuICAgIHB1YmxpYyBhbGxpZXNfZGVmZWF0ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGVuZW1pZXNfZGVmZWF0ZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGJhdHRsZV9maW5pc2hpbmc6IGJvb2xlYW47XG4gICAgcHVibGljIHNpZ25hbF9iaW5kaW5nczogUGhhc2VyLlNpZ25hbEJpbmRpbmdbXTtcbiAgICBwdWJsaWMgYWR2YW5jZV9sb2dfcmVzb2x2ZTogRnVuY3Rpb247XG4gICAgcHVibGljIGFsbGllc19hYmlsaXRpZXM6IFBsYXllckFiaWxpdGllcztcbiAgICBwdWJsaWMgZW5lbWllc19hYmlsaXRpZXM6IFBsYXllckFiaWxpdGllcztcbiAgICBwdWJsaWMgdHVybnNfYWN0aW9uczogUGxheWVyQWJpbGl0eVtdO1xuICAgIHB1YmxpYyBhbGxpZXNfbWFwX3Nwcml0ZToge1twbGF5ZXJfa2V5OiBzdHJpbmddOiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwdWJsaWMgZW5lbWllc19tYXBfc3ByaXRlOiB7W3BsYXllcl9rZXk6IHN0cmluZ106IFBoYXNlci5TcHJpdGV9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgYmFja2dyb3VuZF9rZXksIGVuZW15X3BhcnR5X2tleSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmFsbGllc19pbmZvID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLnNsaWNlKDAsIE1BWF9DSEFSU19JTl9CQVRUTEUpLm1hcChjaGFyID0+IHtcbiAgICAgICAgICAgIGNoYXIuaW5pdF9lZmZlY3RfdHVybnNfY291bnQoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3ByaXRlX2tleTogY2hhci5rZXlfbmFtZSArIFwiX2JhdHRsZVwiLFxuICAgICAgICAgICAgICAgIHNjYWxlOiBjaGFyLmJhdHRsZV9zY2FsZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogY2hhcixcbiAgICAgICAgICAgICAgICBlbnRlcmVkX2luX2JhdHRsZTogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuZW1pZXNfcGFydHlfZGF0YSA9IHRoaXMuZGF0YS5kYnMuZW5lbWllc19wYXJ0aWVzX2RiW2VuZW15X3BhcnR5X2tleV07XG4gICAgICAgIHRoaXMuZW5lbWllc19wYXJ0eV9uYW1lID0gZW5lbWllc19wYXJ0eV9kYXRhLm5hbWU7XG4gICAgICAgIHRoaXMuZW5lbWllc19pbmZvID0gW107XG4gICAgICAgIHRoaXMudGhpc19lbmVtaWVzX2xpc3QgPSB7fTtcbiAgICAgICAgbGV0IGJhdHRsZV9rZXlzX2NvdW50ID0ge307XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgZW5lbWllc19wYXJ0eV9kYXRhLm1lbWJlcnMuZm9yRWFjaChtZW1iZXJfaW5mbyA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdGQgPSBfLnJhbmRvbShtZW1iZXJfaW5mby5taW4sIG1lbWJlcl9pbmZvLm1heCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF0ZDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZV9rZXk6IG1lbWJlcl9pbmZvLmtleSArIFwiX2JhdHRsZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNwcml0ZV9rZXkgaW4gYmF0dGxlX2tleXNfY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlX2tleXNfY291bnRbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc3ByaXRlX2tleV0gKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBiYXR0bGVfa2V5X3N1ZmZpeCA9IFwiXCIsIG5hbWVfc3VmZml4ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYmF0dGxlX2tleXNfY291bnRbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc3ByaXRlX2tleV0gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhdHRsZV9rZXlfc3VmZml4ID0gXCJfXCIgKyBiYXR0bGVfa2V5c19jb3VudFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5XS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBuYW1lX3N1ZmZpeCA9IFwiIFwiICsgYmF0dGxlX2tleXNfY291bnRbdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uc3ByaXRlX2tleV0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uaW5zdGFuY2UgPSBnZXRfZW5lbXlfaW5zdGFuY2UodGhpcy5kYXRhLmluZm8uZW5lbWllc19saXN0W21lbWJlcl9pbmZvLmtleV0uZGF0YSwgbmFtZV9zdWZmaXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLnNjYWxlID0gdGhpcy5lbmVtaWVzX2luZm9bY291bnRlcl0uaW5zdGFuY2UuYmF0dGxlX3NjYWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLmJhdHRsZV9rZXkgPSB0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5zcHJpdGVfa2V5ICsgYmF0dGxlX2tleV9zdWZmaXg7XG4gICAgICAgICAgICAgICAgdGhpcy50aGlzX2VuZW1pZXNfbGlzdFt0aGlzLmVuZW1pZXNfaW5mb1tjb3VudGVyXS5iYXR0bGVfa2V5XSA9IHRoaXMuZW5lbWllc19pbmZvW2NvdW50ZXJdLmluc3RhbmNlIGFzIEVuZW15O1xuICAgICAgICAgICAgICAgICsrY291bnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IDA7XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlID0gbmV3IEJhdHRsZVN0YWdlKHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCBiYWNrZ3JvdW5kX2tleSwgdGhpcy5hbGxpZXNfaW5mbywgdGhpcy5lbmVtaWVzX2luZm8sIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KyssIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkrKyk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2xvZyA9IG5ldyBCYXR0bGVMb2codGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudSA9IG5ldyBNYWluQmF0dGxlTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgKyt0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCArK3RoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCB0aGlzLm9uX2FiaWxpdGllc19jaG9vc2UuYmluZCh0aGlzKSwgdGhpcy5jaG9vc2VfdGFyZ2V0cy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy50YXJnZXRfd2luZG93ID0gbmV3IENob29zaW5nVGFyZ2V0V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25fbWFuYWdlciA9IG5ldyBCYXR0bGVBbmltYXRpb25NYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLk5PTkU7XG4gICAgICAgIHRoaXMuY29udHJvbHNfZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5hbGxpZXNfZGVmZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2RlZmVhdGVkID0gZmFsc2U7XG4gICAgICAgICsrdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgKyt0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5iYXR0bGVfZmluaXNoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzID0gdGhpcy5zZXRfY29udHJvbHMoKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbHMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5pbl9iYXR0bGUgfHwgIXRoaXMuY29udHJvbHNfZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmJhdHRsZV9waGFzZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuU1RBUlQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLk1FTlU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5DT01CQVQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5ST1VORF9FTkQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5FTkQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hZHZhbmNlX2xvZ19yZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlX2xvZ19yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlX2xvZ19yZXNvbHZlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgc3RhcnRfYmF0dGxlKCkge1xuICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgIH1cblxuICAgIG9uX2FiaWxpdGllc19jaG9vc2UoYWJpbGl0aWVzKSB7XG4gICAgICAgIHRoaXMuYWxsaWVzX2FiaWxpdGllcyA9IGFiaWxpdGllcztcbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5jbG9zZV9tZW51KCk7XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnJlc2V0X3Bvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5jaG9vc2luZ19hY3Rpb25zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5ST1VORF9TVEFSVDtcbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICBjaG9vc2VfdGFyZ2V0cyhhYmlsaXR5X2tleSwgYWN0aW9uLCBjYWxsYmFjaywgY2FzdGVyLCBpdGVtX29iaikge1xuICAgICAgICBjb25zdCB0aGlzX2FiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthYmlsaXR5X2tleV07XG4gICAgICAgIGxldCBxdWFudGl0aWVzO1xuICAgICAgICBpZiAoYWN0aW9uID09PSBcInBzeW5lcmd5XCIpIHtcbiAgICAgICAgICAgIHF1YW50aXRpZXMgPSBbdGhpc19hYmlsaXR5LnBwX2Nvc3RdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24gIT09IFwiZGVmZW5kXCIpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X3dpbmRvdy5vcGVuKGFjdGlvbiwgdGhpc19hYmlsaXR5Lm5hbWUsIHRoaXNfYWJpbGl0eS5lbGVtZW50LCBhYmlsaXR5X2tleSwgcXVhbnRpdGllcywgaXRlbV9vYmopO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLmNob29zZV90YXJnZXRzKFxuICAgICAgICAgICAgdGhpc19hYmlsaXR5LnJhbmdlLFxuICAgICAgICAgICAgdGhpc19hYmlsaXR5LmJhdHRsZV90YXJnZXQsXG4gICAgICAgICAgICB0aGlzX2FiaWxpdHkudHlwZSxcbiAgICAgICAgICAgIGNhc3RlcixcbiAgICAgICAgICAgIHRhcmdldHMgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldF93aW5kb3cud2luZG93X29wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRhcmdldHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNoZWNrX3BhcnRpZXMoKSB7XG4gICAgICAgIHRoaXMuYWxsaWVzX2RlZmVhdGVkID0gdGhpcy5hbGxpZXNfaW5mby5ldmVyeShwbGF5ZXIgPT4gcGxheWVyLmluc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSk7XG4gICAgICAgIHRoaXMuZW5lbWllc19kZWZlYXRlZCA9IHRoaXMuZW5lbWllc19pbmZvLmV2ZXJ5KHBsYXllciA9PiBwbGF5ZXIuaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKTtcbiAgICAgICAgaWYgKHRoaXMuYWxsaWVzX2RlZmVhdGVkIHx8IHRoaXMuZW5lbWllc19kZWZlYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLkVORDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrX3BoYXNlcygpIHtcbiAgICAgICAgdGhpcy5jaGVja19wYXJ0aWVzKCk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5iYXR0bGVfcGhhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5OT05FOlxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX25vbmUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5TVEFSVDpcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5NRU5VOlxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX21lbnUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5ST1VORF9TVEFSVDpcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9yb3VuZF9zdGFydCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiYXR0bGVfcGhhc2VzLkNPTUJBVDpcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZV9jb21iYXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYmF0dGxlX3BoYXNlcy5ST1VORF9FTkQ6XG4gICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2Vfcm91bmRfZW5kKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGJhdHRsZV9waGFzZXMuRU5EOlxuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlX2VuZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmF0dGxlX3BoYXNlX25vbmUoKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5TVEFSVDtcbiAgICAgICAgdGhpcy5kYXRhLmluX2JhdHRsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5iYXR0bGVfaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKHRoaXMuZW5lbWllc19wYXJ0eV9uYW1lICsgXCIgYXBwZWFyZWQhXCIpO1xuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5pbml0aWFsaXplX3N0YWdlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxsaWVzX21hcF9zcHJpdGUgPSBfLm1hcFZhbHVlcyhfLmtleUJ5KHRoaXMuYWxsaWVzX2luZm8sICdpbnN0YW5jZS5rZXlfbmFtZScpLCBpbmZvID0+IGluZm8uc3ByaXRlKTtcbiAgICAgICAgICAgIHRoaXMuZW5lbWllc19tYXBfc3ByaXRlID0gXy5tYXBWYWx1ZXMoXy5rZXlCeSh0aGlzLmVuZW1pZXNfaW5mbywgJ2luc3RhbmNlLmtleV9uYW1lJyksIGluZm8gPT4gaW5mby5zcHJpdGUpO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sc19lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYmF0dGxlX3BoYXNlX21lbnUoKSB7XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnNldF9jaG9vc2luZ19hY3Rpb25fcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5vcGVuX21lbnUoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgIEF0IHJvdW5kIHN0YXJ0LCBpcyBjYWxjdWxhdGVkIHRoZSBwbGF5ZXJzIGFuZCBlbmVtaWVzIHNwZWVkcy5cbiAgICBJZiBhIGNlcnRhaW4gcGxheWVyIHNwZWVkIGlzIHRoZSBzYW1lIG9mIGEgZW5lbXksIHBsYXllciBnb2VzIGZpcnN0LlxuICAgIElmIGFub3RoZXIgdGllLCB0aGUgbW9zdCBsZWZ0IGNoYXIgaGFzIHByaW9yaXR5LlxuICAgIEF0IGEgc3BlY2lmaWMgZW5lbXkgdHVybiBzdGFydCwgSSByb2xsIGFuIGFjdGlvbiBmb3IgdGhhdCB0dXJuLlxuICAgIFRoZSBvbmx5IHRoaW5nIG5lZWRlZCB0byBjaGVjayBhYm91dCBlbmVtaWVzIGFjdGlvbnMgYXQgcm91bmQgc3RhcnQgaXM6XG4gICAgICAgIC0gUm9sbCB0aGVpciBhY3Rpb25zIGZvciBlYWNoIHR1cm4gYW5kIHNlZSBpZiBhbiBhYmlsaXR5IHdpdGggcHJpb3JpdHkgbW92ZSBpcyByb2xsZWQuXG4gICAgICAgIC0gSWYgeWVzLCB0aGlzIGFiaWxpdHkgaXMgZml4ZWQgZm9yIHRoYXQgY29ycmVzcG9uZGluZyB0dXJuLlxuICAgIEZvciB0aGUgb3RoZXIgdHVybnMsIGFuIGFjdGlvbiBpcyByZS1yb2xsIGluIHRoZSB0dXJuIHN0YXJ0IHRvIGJlIHVzZWQgb24gaXQuXG4gICAgKi9cbiAgICBhc3luYyBiYXR0bGVfcGhhc2Vfcm91bmRfc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGVuZW15X21lbWJlcnMgPSB0aGlzLmVuZW1pZXNfaW5mby5tYXAoaW5mbyA9PiBpbmZvLmluc3RhbmNlKTtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllcyA9IE9iamVjdC5mcm9tRW50cmllcyhlbmVteV9tZW1iZXJzLm1hcCgoZW5lbXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgYWJpbGl0aWVzID0gbmV3IEFycmF5KGVuZW15LnR1cm5zKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5lbXkudHVybnM7ICsraSkge1xuICAgICAgICAgICAgICAgIGFiaWxpdGllc1tpXSA9IEVuZW15QUkucm9sbF9hY3Rpb24oZW5lbXksIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycywgZW5lbXlfbWVtYmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuZW5lbWllc19pbmZvW2luZGV4XS5iYXR0bGVfa2V5LCBhYmlsaXRpZXNdO1xuICAgICAgICB9KSk7XG4gICAgICAgIGZvciAobGV0IGNoYXJfa2V5IGluIHRoaXMuYWxsaWVzX2FiaWxpdGllcykge1xuICAgICAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ubWFpbl9jaGFyX2xpc3RbY2hhcl9rZXldO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFsbGllc19hYmlsaXRpZXNbY2hhcl9rZXldLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc19hYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hbGxpZXNfYWJpbGl0aWVzW2NoYXJfa2V5XVtpXS5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlfbW92ZSA9IHRoaXNfYWJpbGl0eSAhPT0gdW5kZWZpbmVkID8gdGhpc19hYmlsaXR5LnByaW9yaXR5X21vdmUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbGllc19hYmlsaXRpZXNbY2hhcl9rZXldW2ldLnNwZWVkID0gQmF0dGxlRm9ybXVsYXMucGxheWVyX3R1cm5fc3BlZWQodGhpc19jaGFyLmN1cnJlbnRfYWdpLCBwcmlvcml0eV9tb3ZlLCBpID4gMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxpZXNfYWJpbGl0aWVzW2NoYXJfa2V5XVtpXS5jYXN0ZXIgPSB0aGlzX2NoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgYmF0dGxlX2tleSBpbiB0aGlzLmVuZW1pZXNfYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2VuZW15ID0gdGhpcy50aGlzX2VuZW1pZXNfbGlzdFtiYXR0bGVfa2V5XTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNfYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuZW5lbWllc19hYmlsaXRpZXNbYmF0dGxlX2tleV1baV0ua2V5X25hbWVdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5X21vdmUgPSB0aGlzX2FiaWxpdHkgIT09IHVuZGVmaW5lZCA/IHRoaXNfYWJpbGl0eS5wcmlvcml0eV9tb3ZlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmVtaWVzX2FiaWxpdGllc1tiYXR0bGVfa2V5XVtpXS5zcGVlZCA9IEJhdHRsZUZvcm11bGFzLmVuZW15X3R1cm5fc3BlZWQodGhpc19lbmVteS5jdXJyZW50X2FnaSwgaSArIDEsIHRoaXNfZW5lbXkudHVybnMsIHByaW9yaXR5X21vdmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5lbWllc19hYmlsaXRpZXNbYmF0dGxlX2tleV1baV0uY2FzdGVyID0gdGhpc19lbmVteTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR1cm5zX2FjdGlvbnMgPSBfLnNvcnRCeShPYmplY3QudmFsdWVzKHRoaXMuYWxsaWVzX2FiaWxpdGllcykuZmxhdCgpLmNvbmNhdChPYmplY3QudmFsdWVzKHRoaXMuZW5lbWllc19hYmlsaXRpZXMpLmZsYXQoKSksIGFjdGlvbiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnNwZWVkOyAvL3N0aWxsIG5lZWQgdG8gYWRkIGxlZnQgbW9zdCBhbmQgcGxheWVyIHByZWZlcmVuY2UgY3JpdGVyaWFzXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHVybnNfYWN0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy50dXJuc19hY3Rpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV07XG4gICAgICAgICAgICBsZXQgYmF0dGxlX2FuaW1hdGlvbl9rZXkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthY3Rpb24ua2V5X25hbWVdLmJhdHRsZV9hbmltYXRpb25fa2V5O1xuICAgICAgICAgICAgaWYgKGFiaWxpdHkuaGFzX2FuaW1hdGlvbl92YXJpYXRpb24gJiYgYWN0aW9uLmtleV9uYW1lIGluIGFjdGlvbi5jYXN0ZXIuYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9ucykge1xuICAgICAgICAgICAgICAgIGJhdHRsZV9hbmltYXRpb25fa2V5ID0gYWN0aW9uLmNhc3Rlci5iYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zW2FjdGlvbi5rZXlfbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24uYmF0dGxlX2FuaW1hdGlvbl9rZXkgPSBiYXR0bGVfYW5pbWF0aW9uX2tleTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbWF0aW9uX21hbmFnZXIubG9hZF9hbmltYXRpb24oYmF0dGxlX2FuaW1hdGlvbl9rZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0dGxlX3BoYXNlID0gYmF0dGxlX3BoYXNlcy5DT01CQVQ7XG4gICAgICAgIHRoaXMuY29udHJvbHNfZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgfVxuXG4gICAgd2FpdF9mb3Jfa2V5KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHRoaXMuYWR2YW5jZV9sb2dfcmVzb2x2ZSA9IHJlc29sdmU7IH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrX2Rvd25lZCh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldC5jdXJyZW50X2hwID09PSAwKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWRkX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChvbl9jYXRjaF9zdGF0dXNfbXNnW3Blcm1hbmVudF9zdGF0dXMuRE9XTkVEXSh0YXJnZXQpKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgIFN0YW5kYXJkIGF0dGFjazpcbiAgICAxLiBVbmxlYXNoIGNoZWNrIChmb2xsb3dlZCBieSBhbm90aGVyIGNoZWNrIGZvciB1bmxlYXNoIHR5cGUgaWYgd2VhcG9uIGhhcyBtdWx0aXBsZSB1bmxlYXNoZXMpXG4gICAgMi4gTWlzcyBjaGVja1xuICAgIDMuIENyaXQgY2hlY2sgMSAgKHVzaW5nIGJybiAlIDMyKVxuICAgIDQuIENyaXQgY2hlY2sgMiAodXNpbmcgdG90YWwgY3JpdCBjaGFuY2UgZnJvbSBlcXVpcG1lbnQsICgoZXF1aXBtZW50X2NoYW5jZS8yKSpyYW5kKDAsNjU1MzUpID4+IDE2KVxuICAgIDUuIFN0YXR1cyBlZmZlY3QgY2hlY2tcbiAgICA2LiBBZGRlZCAwLTMgZGFtYWdlXG4gICAgSWYgYW55IG9mIGNoZWNrcyAxLTQgc3VjY2VlZCwgaXQgc2tpcHMgdG8gNVxuICAgICovXG4gICAgYXN5bmMgYmF0dGxlX3BoYXNlX2NvbWJhdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnR1cm5zX2FjdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EO1xuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLnR1cm5zX2FjdGlvbnMucG9wKCk7XG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkgeyAvL2NoZWNrIHdoZXRoZXIgdGhpcyBjaGFyIGlzIGRvd25lZFxuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5pc19wYXJhbHl6ZWQoKSkgeyAvL2NoZWNrIHdoZXRoZXIgdGhpcyBjaGFyIGlzIHBhcmFseXplZFxuICAgICAgICAgICAgaWYgKGFjdGlvbi5jYXN0ZXIudGVtcG9yYXJ5X3N0YXR1cy5oYXModGVtcG9yYXJ5X3N0YXR1cy5TTEVFUCkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gaXMgYXNsZWVwIWApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24uY2FzdGVyLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuU1RVTikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gaXMgcGFyYWx5emVkIGFuZCBjYW5ub3QgbW92ZSFgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5FTkVNWSAmJiAhdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbYWN0aW9uLmtleV9uYW1lXS5wcmlvcml0eV9tb3ZlKSB7IC8vcmVyb2xsIGVuZW15IGFiaWxpdHlcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYWN0aW9uLCBFbmVteUFJLnJvbGxfYWN0aW9uKGFjdGlvbi5jYXN0ZXIsIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycywgdGhpcy5lbmVtaWVzX2luZm8ubWFwKGluZm8gPT4gaW5mby5pbnN0YW5jZSkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWJpbGl0eSA9IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2FjdGlvbi5rZXlfbmFtZV07XG4gICAgICAgIGxldCBpdGVtX25hbWUgPSBcIlwiO1xuICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5maWdodGVyX3R5cGUgPT09IGZpZ2h0ZXJfdHlwZXMuQUxMWSAmJiBhYmlsaXR5ICE9PSB1bmRlZmluZWQgJiYgYWJpbGl0eS5jYW5fc3dpdGNoX3RvX3VubGVhc2gpIHsgLy9jaGFuZ2UgdGhlIGN1cnJlbnQgYWJpbGl0eSB0byB1bmxlYXNoIGFiaWxpdHkgZnJvbSB3ZWFwb25cbiAgICAgICAgICAgIGNvbnN0IGNhc3RlciA9IGFjdGlvbi5jYXN0ZXIgYXMgTWFpbkNoYXI7XG4gICAgICAgICAgICBpZiAoY2FzdGVyLmVxdWlwX3Nsb3RzLndlYXBvbiAmJiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2Nhc3Rlci5lcXVpcF9zbG90cy53ZWFwb24ua2V5X25hbWVdLnVubGVhc2hfYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbY2FzdGVyLmVxdWlwX3Nsb3RzLndlYXBvbi5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCB3ZWFwb24udW5sZWFzaF9yYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fbmFtZSA9IHdlYXBvbi5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ua2V5X25hbWUgPSB3ZWFwb24udW5sZWFzaF9hYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rbd2VhcG9uLnVubGVhc2hfYWJpbGl0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhYmlsaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7YWN0aW9uLmtleV9uYW1lfSBhYmlsaXR5IGtleSBub3QgcmVnaXN0ZXJlZC5gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrX3BoYXNlcygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmhhc190ZW1wb3Jhcnlfc3RhdHVzKHRlbXBvcmFyeV9zdGF0dXMuU0VBTCkgJiYgYWJpbGl0eS5hYmlsaXR5X2NhdGVnb3J5ID09PSBhYmlsaXR5X2NhdGVnb3JpZXMuUFNZTkVSR1kpIHsgLy9jaGVjayBpZiBpcyBwb3NzaWJsZSB0byBjYXN0IGFiaWxpdHkgZHVlIHRvIHNlYWxcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYEJ1dCB0aGUgUHN5bmVyZ3kgd2FzIGJsb2NrZWQhYCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWJpbGl0eS5wcF9jb3N0ID4gYWN0aW9uLmNhc3Rlci5jdXJyZW50X3BwKSB7IC8vY2hlY2sgaWYgY2hhciBoYXMgZW5vdWdoIHBwIHRvIGNhc3QgYWJpbGl0eVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgLi4uIEJ1dCBkb2Vzbid0IGhhdmUgZW5vdWdoIFBQIWApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmN1cnJlbnRfcHAgLT0gYWJpbGl0eS5wcF9jb3N0O1xuICAgICAgICB9XG4gICAgICAgIGxldCBkamlubl9uYW1lID0gYWN0aW9uLmRqaW5uX2tleV9uYW1lID8gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbYWN0aW9uLmRqaW5uX2tleV9uYW1lXS5uYW1lIDogdW5kZWZpbmVkO1xuICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkX2FiaWxpdHkoYWN0aW9uLmNhc3RlciwgYWJpbGl0eSwgaXRlbV9uYW1lLCBkamlubl9uYW1lKTtcbiAgICAgICAgaWYgKGFiaWxpdHkuYWJpbGl0eV9jYXRlZ29yeSA9PT0gYWJpbGl0eV9jYXRlZ29yaWVzLkRKSU5OKSB7XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5lZmZlY3RzLnNvbWUoZWZmZWN0ID0+IGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuU0VUX0RKSU5OKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W2FjdGlvbi5kamlubl9rZXlfbmFtZV0uc2V0X3N0YXR1cyhkamlubl9zdGF0dXMuU0VULCBhY3Rpb24uY2FzdGVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbYWN0aW9uLmtleV9uYW1lXS5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TVEFOREJZLCBhY3Rpb24uY2FzdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhYmlsaXR5LmFiaWxpdHlfY2F0ZWdvcnkgPT09IGFiaWxpdHlfY2F0ZWdvcmllcy5TVU1NT04pIHsgLy9zb21lIHN1bW1vbiBjaGVja3NcbiAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVtZW50cyA9IHRoaXMuZGF0YS5kYnMuc3VtbW9uc19kYlthYmlsaXR5LmtleV9uYW1lXS5yZXF1aXJlbWVudHM7XG4gICAgICAgICAgICBjb25zdCBzdGFuZGJ5X2RqaW5uaSA9IERqaW5uLmdldF9zdGFuZGJ5X2RqaW5uaSh0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdCwgTWFpbkNoYXIuZ2V0X2FjdGl2ZV9wbGF5ZXJzKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIE1BWF9DSEFSU19JTl9CQVRUTEUpKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc19hdmFpbGFibGVfZGppbm5pID0gXy5ldmVyeShyZXF1aXJlbWVudHMsIChyZXF1aXJlbWVudCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFuZGJ5X2RqaW5uaVtlbGVtZW50XSA+PSByZXF1aXJlbWVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFoYXNfYXZhaWxhYmxlX2RqaW5uaSkgeyAvL2NoZWNrIGlmIGlzIHBvc3NpYmxlIHRvIGNhc3QgYSBzdW1tb25cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gc3VtbW9ucyAke2FiaWxpdHkubmFtZX0gYnV0YCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgZG9lc24ndCBoYXZlIGVub3VnaCBzdGFuZGJ5IERqaW5uIWApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgeyAvL3NldCBkamlubmkgdXNlZCBpbiB0aGlzIHN1bW1vbiB0byByZWNvdmVyeSBtb2RlXG4gICAgICAgICAgICAgICAgRGppbm4uc2V0X3RvX3JlY292ZXJ5KHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LCBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgTUFYX0NIQVJTX0lOX0JBVFRMRSksIHJlcXVpcmVtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgIGlmIChhYmlsaXR5LnR5cGUgPT09IGFiaWxpdHlfdHlwZXMuVVRJTElUWSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25fbWFuYWdlci5hbmltYXRpb25fYXZhaWxhYmxlKGFjdGlvbi5iYXR0bGVfYW5pbWF0aW9uX2tleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhc3Rlcl9zcHJpdGUgPSBhY3Rpb24uY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfbWFwX3Nwcml0ZVthY3Rpb24uY2FzdGVyLmtleV9uYW1lXSA6IHRoaXMuZW5lbWllc19tYXBfc3ByaXRlW2FjdGlvbi5jYXN0ZXIua2V5X25hbWVdO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X3Nwcml0ZXMgPSBhY3Rpb24udGFyZ2V0cy5mbGF0TWFwKGluZm8gPT4gaW5mby5tYWduaXR1ZGUgPyBbaW5mby50YXJnZXQuc3ByaXRlXSA6IFtdKTtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwX2Nhc3RlciA9IGFjdGlvbi5jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkFMTFkgPyB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9hbGxpZXMgOiB0aGlzLmJhdHRsZV9zdGFnZS5ncm91cF9lbmVtaWVzO1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBfdGFrZXIgPSBhY3Rpb24uY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5BTExZID8gdGhpcy5iYXR0bGVfc3RhZ2UuZ3JvdXBfZW5lbWllcyA6IHRoaXMuYmF0dGxlX3N0YWdlLmdyb3VwX2FsbGllcztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbWF0aW9uX21hbmFnZXIucGxheShhY3Rpb24uYmF0dGxlX2FuaW1hdGlvbl9rZXksIGNhc3Rlcl9zcHJpdGUsIHRhcmdldF9zcHJpdGVzLCBncm91cF9jYXN0ZXIsIGdyb3VwX3Rha2VyLCB0aGlzLmJhdHRsZV9zdGFnZSk7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS5wcmV2ZW50X2NhbWVyYV9hbmdsZV9vdmVyZmxvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgQW5pbWF0aW9uIGZvciAke2FiaWxpdHkubmFtZX0gbm90IGF2YWlsYWJsZS4uLmApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgfVxuICAgICAgICAvL2FwcGx5IGFiaWxpdHkgZGFtYWdlXG4gICAgICAgIGlmICghW2FiaWxpdHlfdHlwZXMuVVRJTElUWSwgYWJpbGl0eV90eXBlcy5FRkZFQ1RfT05MWV0uaW5jbHVkZXMoYWJpbGl0eS50eXBlKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHBseV9kYW1hZ2UoYWN0aW9uLCBhYmlsaXR5KTtcbiAgICAgICAgfVxuICAgICAgICAvL2FwcGx5IGFiaWxpdHkgZWZmZWN0c1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFiaWxpdHkuZWZmZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gYWJpbGl0eS5lZmZlY3RzW2ldO1xuICAgICAgICAgICAgaWYgKCFlZmZlY3RfdXNhZ2VzLk9OX1VTRSkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBlbmRfdHVybiA9IGF3YWl0IHRoaXMuYXBwbHlfZWZmZWN0cyhhY3Rpb24sIGFiaWxpdHksIGVmZmVjdCk7XG4gICAgICAgICAgICBpZiAoZW5kX3R1cm4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9waGFzZSA9IGJhdHRsZV9waGFzZXMuUk9VTkRfRU5EO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX3N0YWdlLnNldF9zdGFnZV9kZWZhdWx0X3Bvc2l0aW9uKCk7XG4gICAgICAgIC8vc3VtbW9uIGFmdGVyIGNhc3QgcG93ZXIgYnVmZlxuICAgICAgICBpZiAoYWJpbGl0eS5hYmlsaXR5X2NhdGVnb3J5ID09PSBhYmlsaXR5X2NhdGVnb3JpZXMuU1VNTU9OKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSB0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbYWJpbGl0eS5rZXlfbmFtZV0ucmVxdWlyZW1lbnRzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcG93ZXIgPSBCYXR0bGVGb3JtdWxhcy5zdW1tb25fcG93ZXIocmVxdWlyZW1lbnRzW2VsZW1lbnRdKTtcbiAgICAgICAgICAgICAgICBpZiAocG93ZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuYWRkX2VmZmVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInBvd2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogcG93ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJwbHVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgfSwgYWJpbGl0eSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7YWN0aW9uLmNhc3Rlci5uYW1lfSdzICR7ZWxlbWVudF9uYW1lc1tlbGVtZW50XX0gUG93ZXIgcmlzZXMgYnkgJHtwb3dlci50b1N0cmluZygpfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9jaGVjayBmb3IgcG9pc29uIGRhbWFnZVxuICAgICAgICBjb25zdCBwb2lzb25fc3RhdHVzID0gYWN0aW9uLmNhc3Rlci5pc19wb2lzb25lZCgpO1xuICAgICAgICBpZiAocG9pc29uX3N0YXR1cykge1xuICAgICAgICAgICAgbGV0IGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLmJhdHRsZV9wb2lzb25fZGFtYWdlKGFjdGlvbi5jYXN0ZXIsIHBvaXNvbl9zdGF0dXMpO1xuICAgICAgICAgICAgaWYgKGRhbWFnZSA+IGFjdGlvbi5jYXN0ZXIuY3VycmVudF9ocCkge1xuICAgICAgICAgICAgICAgIGRhbWFnZSA9IGFjdGlvbi5jYXN0ZXIuY3VycmVudF9ocDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGlvbi5jYXN0ZXIuY3VycmVudF9ocCA9IF8uY2xhbXAoYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwIC0gZGFtYWdlLCAwLCBhY3Rpb24uY2FzdGVyLm1heF9ocCk7XG4gICAgICAgICAgICBjb25zdCBwb2lzb25fbmFtZSA9IHBvaXNvbl9zdGF0dXMgPT09IHBlcm1hbmVudF9zdGF0dXMuUE9JU09OID8gXCJwb2lzb25cIiA6IFwidmVub21cIjtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGQoYFRoZSAke3BvaXNvbl9uYW1lfSBkb2VzICR7ZGFtYWdlLnRvU3RyaW5nKCl9IGRhbWFnZSB0byAke2FjdGlvbi5jYXN0ZXIubmFtZX0hYCk7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrX2Rvd25lZChhY3Rpb24uY2FzdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uLmNhc3Rlci5oYXNfdGVtcG9yYXJ5X3N0YXR1cyh0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFKSkge1xuICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSBfLmZpbmQoYWN0aW9uLmNhc3Rlci5lZmZlY3RzLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzX2tleV9uYW1lOiB0ZW1wb3Jhcnlfc3RhdHVzLkRFQVRIX0NVUlNFXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uY2FzdGVyLmdldF9lZmZlY3RfdHVybnNfY291bnQodGhpc19lZmZlY3QpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLmNhc3Rlci5jdXJyZW50X2hwID0gMDtcbiAgICAgICAgICAgICAgICBhY3Rpb24uY2FzdGVyLmFkZF9wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBUaGUgR3JpbSBSZWFwZXIgY2FsbHMgb3V0IHRvICR7YWN0aW9uLmNhc3Rlci5uYW1lfWApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja19waGFzZXMoKTtcbiAgICB9XG5cbiAgICBhc3luYyBhcHBseV9kYW1hZ2UoYWN0aW9uLCBhYmlsaXR5KSB7XG4gICAgICAgIGxldCBpbmNyZWFzZWRfY3JpdDtcbiAgICAgICAgaWYgKGFiaWxpdHkuaGFzX2NyaXRpY2FsKSB7XG4gICAgICAgICAgICBpbmNyZWFzZWRfY3JpdCA9IGFjdGlvbi5jYXN0ZXIuZWZmZWN0cy5maWx0ZXIoZWZmZWN0ID0+IGVmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuQ1JJVElDQUxTKS5yZWR1Y2UoKGFjYywgZWZmZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVmZmVjdC5hcHBseV9vcGVyYXRvcihhY2MsIGVmZmVjdC5xdWFudGl0eSwgZWZmZWN0Lm9wZXJhdG9yKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aW9uLnRhcmdldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbmZvID0gYWN0aW9uLnRhcmdldHNbaV07XG4gICAgICAgICAgICBpZiAodGFyZ2V0X2luZm8ubWFnbml0dWRlID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldF9pbnN0YW5jZSA9IHRhcmdldF9pbmZvLnRhcmdldC5pbnN0YW5jZTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChhYmlsaXR5LmNhbl9iZV9ldmFkZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IEVWQVNJT05fQ0hBTkNFIHx8IChhY3Rpb24uY2FzdGVyLnRlbXBvcmFyeV9zdGF0dXMuaGFzKHRlbXBvcmFyeV9zdGF0dXMuREVMVVNJT04pICYmIE1hdGgucmFuZG9tKCkgPCBERUxVU0lPTl9NSVNTX0NIQU5DRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHt0YXJnZXRfaW5zdGFuY2UubmFtZX0gbmltYmx5IGRvZGdlcyB0aGUgYmxvdyFgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRhbWFnZSA9IDA7XG4gICAgICAgICAgICBpZiAoYWJpbGl0eS5oYXNfY3JpdGljYWwgJiYgKE1hdGgucmFuZG9tKCkgPCBDUklUSUNBTF9DSEFOQ0UgfHwgTWF0aC5yYW5kb20oKSA8IGluY3JlYXNlZF9jcml0LzIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXVsdF9tb2QgPSBhYmlsaXR5LmNyaXRfbXVsdF9mYWN0b3IgPT09IHVuZGVmaW5lZCA/IDEuMjUgOiBhYmlsaXR5LmNyaXRfbXVsdF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkX21vZCA9IDYuMCArIHRhcmdldF9pbnN0YW5jZS5sZXZlbC81LjA7XG4gICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMucGh5c2ljYWxfYXR0YWNrKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgbXVsdF9tb2QsIGFkZF9tb2QsIGFiaWxpdHkuZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaChhYmlsaXR5LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLkFEREVEX0RBTUFHRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IEJhdHRsZUZvcm11bGFzLnBoeXNpY2FsX2F0dGFjayhhY3Rpb24uY2FzdGVyLCB0YXJnZXRfaW5zdGFuY2UsIDEuMCwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBhYmlsaXR5LmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5NVUxUSVBMSUVSOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMucGh5c2ljYWxfYXR0YWNrKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLzEwLjAsIDAsIGFiaWxpdHkuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLkJBU0VfREFNQUdFOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gQmF0dGxlRm9ybXVsYXMucHN5bmVyZ3lfZGFtYWdlKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBhYmlsaXR5LmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90eXBlcy5IRUFMSU5HOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlID0gLUJhdHRsZUZvcm11bGFzLmhlYWxfYWJpbGl0eShhY3Rpb24uY2FzdGVyLCBhYmlsaXR5LmFiaWxpdHlfcG93ZXIsIGFiaWxpdHkuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3R5cGVzLlNVTU1PTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRqaW5uX3VzZWQgPSBfLnN1bShfLnZhbHVlcyh0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbYWJpbGl0eS5rZXlfbmFtZV0ucmVxdWlyZW1lbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UgPSBCYXR0bGVGb3JtdWxhcy5zdW1tb25fZGFtYWdlKHRhcmdldF9pbnN0YW5jZSwgYWJpbGl0eS5hYmlsaXR5X3Bvd2VyLCBkamlubl91c2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGFiaWxpdHlfdHlwZXMuRElSRUNUX0RBTUFHRTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IGFiaWxpdHkuYWJpbGl0eV9wb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJhdGlvcyA9IEFiaWxpdHkuZ2V0X2RpbWluaXNoaW5nX3JhdGlvcyhhYmlsaXR5LnR5cGUsIGFiaWxpdHkudXNlX2RpbWluaXNoaW5nX3JhdGlvKTtcbiAgICAgICAgICAgIGRhbWFnZSA9IChkYW1hZ2UgKiByYXRpb3NbdGFyZ2V0X2luZm8ubWFnbml0dWRlXSkgfCAwO1xuICAgICAgICAgICAgZGFtYWdlICs9IHZhcmlhdGlvbigpO1xuICAgICAgICAgICAgaWYgKGRhbWFnZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IGVmZmVjdF90eXBlcy5EQU1BR0VfTU9ESUZJRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IGVmZmVjdC5hcHBseV9lZmZlY3QoZGFtYWdlKS5hZnRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXRfaW5zdGFuY2UsIGFiaWxpdHkuYWZmZWN0c19wcCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3Byb3BlcnR5ID0gYWJpbGl0eS5hZmZlY3RzX3BwID8gXCJjdXJyZW50X3BwXCIgOiBcImN1cnJlbnRfaHBcIjtcbiAgICAgICAgICAgIGNvbnN0IG1heF9wcm9wZXJ0eSA9IGFiaWxpdHkuYWZmZWN0c19wcCA/IFwibWF4X3BwXCIgOiBcIm1heF9ocFwiO1xuICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLmN1cnJlbnRfaHAgPSBfLmNsYW1wKHRhcmdldF9pbnN0YW5jZVtjdXJyZW50X3Byb3BlcnR5XSAtIGRhbWFnZSwgMCwgdGFyZ2V0X2luc3RhbmNlW21heF9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQodGFyZ2V0X2luc3RhbmNlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWJpbGl0eS5lZmZlY3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWZmZWN0X29iaiA9IGFiaWxpdHkuZWZmZWN0c1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X29iai50eXBlID09PSBlZmZlY3RfdHlwZXMuREFNQUdFX0lOUFVUKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IGVmZmVjdF9vYmoub25fY2FzdGVyID8gYWN0aW9uLmNhc3RlciA6IHRhcmdldF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlfZWZmZWN0ID0gcGxheWVyLmFkZF9lZmZlY3QoZWZmZWN0X29iaiwgYWJpbGl0eSkuZWZmZWN0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlZmZlY3RfcmVzdWx0ID0gZGlfZWZmZWN0LmFwcGx5X2VmZmVjdChkYW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoW2VmZmVjdF90eXBlcy5DVVJSRU5UX0hQLCBlZmZlY3RfdHlwZXMuQ1VSUkVOVF9QUF0uaW5jbHVkZXMoZGlfZWZmZWN0LnN1Yl9lZmZlY3QudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVmZmVjdF9kYW1hZ2UgPSBlZmZlY3RfcmVzdWx0LmJlZm9yZSAtIGVmZmVjdF9yZXN1bHQuYWZ0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X2RhbWFnZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaV9lZmZlY3QuZWZmZWN0X21zZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGVmZmVjdF9tc2dbZGlfZWZmZWN0LmVmZmVjdF9tc2ddKHRhcmdldF9pbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYmF0dGxlX2xvZy5hZGRfZGFtYWdlKGVmZmVjdF9kYW1hZ2UsIHBsYXllciwgZGlfZWZmZWN0LnN1Yl9lZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLkNVUlJFTlRfUFApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja19kb3duZWQocGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmVtb3ZlX2VmZmVjdChkaV9lZmZlY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuLypcbklmIGEgc2xlZXAgaXMgY2FzdCBvdmVyIGEgdGFyZ2V0IHRoYXQgaXMgYWxyZWFkeSBzbGVlcGluZyxcbml0IHdpbGwgcmVjYWxjdWxhdGUgdGhlIGNoYW5jZSwgYW5kIGlmIGl0IGxhbmRzIGl0IHdpbGwgXCJ0b3AgdXBcIiAocmVhZDogcmVwbGFjZSkgdGhlIGVmZmVjdCdzIGR1cmF0aW9uLlxuU28gaWYgYSBjaGFyYWN0ZXIgaXMgc2xlZXBpbmcsIHRoZSByZW1haW5pbmcgZHVyYXRpb24gaXMgNiByb3VuZHMsIGFuZCB5b3UgY2FzdCBTbGVlcCBvbiB0aGVtIGFnYWluIGFuZCBpdCBsYW5kcywgaXQnbGwgZ2V0IGJ1bXBlZCB1cCB0byA3IHJvdW5kcy5cbldoZW4gU2xlZXAgbm9ybWFsbHkgZ2V0cyBpbmZsaWN0ZWQgd2l0aCBhIG1heCBkdXJhdGlvbiBvZiA3IGFueXdheS5cblxuQnVmZnMgYW5kIGRlYnVmZnMgY2FuIHN0YWNrIHZhbHVlcywgYnV0IGR1cmF0aW9ucyBnZXQgb3ZlcndyaXR0ZW4gZXZlcnkgdGltZSBhbmQgZG8gbm90IHN0YWNrLlxuXG5Qb2lzb24vVmVub20gY2FuJ3QgbGFuZCBhZ2FpbiwgYWx0aG91Z2ggVmVub20gY2FuIHJlcGxhY2UgUG9pc29uIChidXQgbm90IHRoZSBvdGhlciB3YXkgYXJvdW5kKS5cbkFuZCBDYW5kbGUgQ3Vyc2UgKGNvdW50ZG93biB0byBkZWF0aCkgY2FuIGJlIFwiYWR2YW5jZWRcIi5cblNvLCBpZiBhIGNoYXJhY3RlciB3aWxsIGRpZSBhZnRlciA1IHR1cm5zIGFuZCB5b3UgbGFuZCBhbm90aGVyIEN1cnNlIG9uIHRoZW0sIGl0IHdpbGwgZHJvcCB0aGUgcmVtYWluaW5nIGNvdW50IHRvIDQuXG4qL1xuXG4gICAgYXN5bmMgYXBwbHlfZWZmZWN0cyhhY3Rpb24sIGFiaWxpdHksIGVmZmVjdCkge1xuICAgICAgICBsZXQgZWZmZWN0X3Jlc3VsdDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhY3Rpb24udGFyZ2V0cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luZm8gPSBhY3Rpb24udGFyZ2V0c1tqXTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5mby5tYWduaXR1ZGUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2luc3RhbmNlID0gdGFyZ2V0X2luZm8udGFyZ2V0Lmluc3RhbmNlO1xuICAgICAgICAgICAgaWYgKHRhcmdldF9pbnN0YW5jZS5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3dpdGNoKGVmZmVjdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUEVSTUFORU5UX1NUQVRVUzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5hZGRfc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKGVmZmVjdC5zdGF0dXNfa2V5X25hbWUpKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3Quc3RhdHVzX2tleV9uYW1lID09PSBwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTiAmJiB0YXJnZXRfaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5WRU5PTSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdC5hZGRfc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdnVsbmVyYWJpbGl0eSA9IF8uZmluZCh0YXJnZXRfaW5zdGFuY2UuY2xhc3MudnVsbmVyYWJpbGl0aWVzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzX2tleV9uYW1lOiBlZmZlY3Quc3RhdHVzX2tleV9uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgPSB2dWxuZXJhYmlsaXR5ID09PSB1bmRlZmluZWQgPyAwIDogdnVsbmVyYWJpbGl0eS5jaGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYWduaXR1ZGUgPSBkaW1pbmlzaGluZ19yYXRpb3MuU1RBVFVTW3RhcmdldF9pbmZvLm1hZ25pdHVkZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQmF0dGxlRm9ybXVsYXMuYWlsbWVudF9zdWNjZXNzKGFjdGlvbi5jYXN0ZXIsIHRhcmdldF9pbnN0YW5jZSwgZWZmZWN0LmNoYW5jZSwgbWFnbml0dWRlLCBhYmlsaXR5LmVsZW1lbnQsIHZ1bG5lcmFiaWxpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19lZmZlY3QgPSB0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19lZmZlY3QudHlwZSA9PT0gZWZmZWN0X3R5cGVzLlRFTVBPUkFSWV9TVEFUVVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRfaW5zdGFuY2UuaGFzX3RlbXBvcmFyeV9zdGF0dXModGhpc19lZmZlY3Quc3RhdHVzX2tleV9uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGhpc19lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdC5zdGF0dXNfa2V5X25hbWUgPT09IHRlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0UgJiYgdGFyZ2V0X2luc3RhbmNlLmhhc190ZW1wb3Jhcnlfc3RhdHVzKHRlbXBvcmFyeV9zdGF0dXMuREVBVEhfQ1VSU0UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudCh0aGlzX2VmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudCh0aGlzX2VmZmVjdCwgdGhpc19lZmZlY3QudHVybl9jb3VudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzX2VmZmVjdC5zdGF0dXNfa2V5X25hbWUgPT09IHBlcm1hbmVudF9zdGF0dXMuVkVOT00gJiYgdGFyZ2V0X2luc3RhbmNlLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuUE9JU09OKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2lzb25fZWZmZWN0ID0gXy5maW5kKHRhcmdldF9pbnN0YW5jZS5lZmZlY3RzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IHBlcm1hbmVudF9zdGF0dXMuUE9JU09OXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UucmVtb3ZlX2VmZmVjdChwb2lzb25fZWZmZWN0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChvbl9jYXRjaF9zdGF0dXNfbXNnW2VmZmVjdC5zdGF0dXNfa2V5X25hbWVdKHRhcmdldF9pbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGBCdXQgaXQgaGFzIG5vIGVmZmVjdCBvbiAke3RhcmdldF9pbnN0YW5jZS5uYW1lfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IGVmZmVjdC5jaGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNfZWZmZWN0ID0gXy5maW5kKHRhcmdldF9pbnN0YW5jZS5lZmZlY3RzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfa2V5X25hbWU6IGVmZmVjdC5zdGF0dXNfa2V5X25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X2luc3RhbmNlLnJlbW92ZV9lZmZlY3QodGhpc19lZmZlY3QsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNfZWZmZWN0LnN0YXR1c19rZXlfbmFtZSA9PT0gcGVybWFuZW50X3N0YXR1cy5ET1dORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UuaW5pdF9lZmZlY3RfdHVybnNfY291bnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzX2VmZmVjdC50eXBlID09PSBlZmZlY3RfdHlwZXMuVEVNUE9SQVJZX1NUQVRVUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cyA9IHRoaXMub25fZ29pbmdfZWZmZWN0cy5maWx0ZXIoZWZmZWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdCAhPT0gdGhpc19lZmZlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZF9yZWNvdmVyX2VmZmVjdChlZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DVVJSRU5UX0hQOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfcmVzdWx0ID0gdGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVmZmVjdF9yZXN1bHQuZWZmZWN0LnNob3dfbXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYW1hZ2UgPSBlZmZlY3RfcmVzdWx0LmNoYW5nZXMuYmVmb3JlIC0gZWZmZWN0X3Jlc3VsdC5jaGFuZ2VzLmFmdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXRfaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9jaGFyc19pbmZvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tfZG93bmVkKHRhcmdldF9pbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlZmZlY3RfcmVzdWx0LmVmZmVjdC50dXJuc19xdWFudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaChlZmZlY3RfcmVzdWx0LmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2UucmVtb3ZlX2VmZmVjdChlZmZlY3RfcmVzdWx0LmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLk1BWF9QUDpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BVFRBQ0s6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5BR0lMSVRZOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkxVQ0s6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUE9XRVI6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUkVTSVNUOlxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RfcmVzdWx0ID0gdGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2goZWZmZWN0X3Jlc3VsdC5lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfaW5zdGFuY2Uuc2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3RfcmVzdWx0LmVmZmVjdCwgZWZmZWN0X3Jlc3VsdC5lZmZlY3QudHVybl9jb3VudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWZmZWN0X3Jlc3VsdC5lZmZlY3Quc2hvd19tc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBlZmZlY3RfcmVzdWx0LmNoYW5nZXMuYWZ0ZXIgLSBlZmZlY3RfcmVzdWx0LmNoYW5nZXMuYmVmb3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGRpZmYgPj0gMCA/IFwicmlzZXNcIiA6IFwiZHJvcHNcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50X2luZm8gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFtlZmZlY3RfdHlwZXMuUE9XRVIsIGVmZmVjdF90eXBlcy5SRVNJU1RdLmluY2x1ZGVzKGVmZmVjdC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfaW5mbyA9IGVsZW1lbnRfbmFtZXNbZWZmZWN0X3Jlc3VsdC5lZmZlY3QuYXR0cmlidXRlXSArIFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHt0YXJnZXRfaW5zdGFuY2UubmFtZX0ncyAke2VsZW1lbnRfaW5mb30ke2VmZmVjdF9uYW1lc1tlZmZlY3QudHlwZV19ICR7dGV4dH0gYnkgJHtNYXRoLmFicyhkaWZmKX0hYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9tZW51LmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuRU5EX1RIRV9ST1VORDpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgRXZlcnlib2R5IGlzIHJlc3RpbmchYCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlRVUk5TOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2FjdGlvbi5jYXN0ZXIubmFtZX0gcmVhZGllcyBmb3IgYWN0aW9uIWApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2dvaW5nX2VmZmVjdHMucHVzaCh0YXJnZXRfaW5zdGFuY2UuYWRkX2VmZmVjdChlZmZlY3QsIGFiaWxpdHksIHRydWUpLmVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRBTUFHRV9NT0RJRklFUjpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChlZmZlY3RfbXNnW2VmZmVjdC5lZmZlY3RfbXNnXSh0YXJnZXRfaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKS5lZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5DT1VOVEVSX1NUUklLRTogYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuRkxFRTogYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbl9nb2luZ19lZmZlY3RzLnB1c2godGFyZ2V0X2luc3RhbmNlLmFkZF9lZmZlY3QoZWZmZWN0LCBhYmlsaXR5LCB0cnVlKS5lZmZlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhc3luYyBiYXR0bGVfcGhhc2Vfcm91bmRfZW5kKCkge1xuICAgICAgICBsZXQgZWZmZWN0c190b19yZW1vdmUgPSBbXTtcbiAgICAgICAgbGV0IGVmZmVjdF9ncm91cHMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9uX2dvaW5nX2VmZmVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IHRoaXMub25fZ29pbmdfZWZmZWN0c1tpXTtcbiAgICAgICAgICAgIGlmIChlZmZlY3QuY2hhci5oYXNfcGVybWFuZW50X3N0YXR1cyhwZXJtYW5lbnRfc3RhdHVzLkRPV05FRCkpIHtcbiAgICAgICAgICAgICAgICBlZmZlY3QuY2hhci5yZW1vdmVfZWZmZWN0KGVmZmVjdCk7XG4gICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIudXBkYXRlX2FsbCgpO1xuICAgICAgICAgICAgICAgIGVmZmVjdHNfdG9fcmVtb3ZlLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYXZvaWRfbXNnID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZWZmZWN0LnR1cm5fY291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuY2hhci5nZXRfZWZmZWN0X3R1cm5zX2NvdW50KGVmZmVjdCkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZWZmZWN0LmNoYXIua2V5X25hbWUgaW4gZWZmZWN0X2dyb3VwcykgfHwgIShlZmZlY3QuY2hhci5nZXRfZWZmZWN0X3R1cm5zX2tleShlZmZlY3QpIGluIGVmZmVjdF9ncm91cHNbZWZmZWN0LmNoYXIua2V5X25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIuc2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC50dXJuX2NvdW50ID0gZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19jb3VudChlZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVmZmVjdF9ncm91cHNbZWZmZWN0LmNoYXIua2V5X25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3RfZ3JvdXBzW2VmZmVjdC5jaGFyLmtleV9uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZWZmZWN0LmNoYXIuZ2V0X2VmZmVjdF90dXJuc19rZXkoZWZmZWN0KV06IGVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdF9ncm91cHNbZWZmZWN0LmNoYXIua2V5X25hbWVdW2VmZmVjdC5jaGFyLmdldF9lZmZlY3RfdHVybnNfa2V5KGVmZmVjdCldID0gZWZmZWN0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF2b2lkX21zZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLS1lZmZlY3QudHVybl9jb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdC50dXJuX2NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdC5jaGFyLnJlbW92ZV9lZmZlY3QoZWZmZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmNoYXIudXBkYXRlX2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzX3RvX3JlbW92ZS5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWF2b2lkX21zZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZF9yZWNvdmVyX2VmZmVjdChlZmZlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjaGFyX2tleV9uYW1lIGluIGVmZmVjdF9ncm91cHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGVmZmVjdF90dXJuX2tleSBpbiBlZmZlY3RfZ3JvdXBzW2NoYXJfa2V5X25hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWZmZWN0ID0gZWZmZWN0X2dyb3Vwc1tjaGFyX2tleV9uYW1lXVtlZmZlY3RfdHVybl9rZXldO1xuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QudHVybl9jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkX3JlY292ZXJfZWZmZWN0KGVmZmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25fZ29pbmdfZWZmZWN0cyA9IHRoaXMub25fZ29pbmdfZWZmZWN0cy5maWx0ZXIoKGVmZmVjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhZWZmZWN0c190b19yZW1vdmUuaW5jbHVkZXMoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfQ0hBUlNfSU5fQkFUVExFOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJfZGppbm5pID0gcGxheWVyLmRqaW5uaTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGxheWVyX2RqaW5uaS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRqaW5uX2tleSA9IHBsYXllcl9kamlubmlbal07XG4gICAgICAgICAgICAgICAgY29uc3QgZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFtkamlubl9rZXldO1xuICAgICAgICAgICAgICAgIGlmIChkamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5SRUNPVkVSWSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGppbm4ucmVjb3ZlcnlfdHVybiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGppbm4uc2V0X3N0YXR1cyhkamlubl9zdGF0dXMuU0VULCBwbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHtkamlubi5uYW1lfSBpcyBzZXQgdG8gJHtwbGF5ZXIubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpOyBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0tZGppbm4ucmVjb3ZlcnlfdHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29udHJvbHNfZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhdHRsZV9sb2cuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfcGhhc2UgPSBiYXR0bGVfcGhhc2VzLk1FTlU7XG4gICAgICAgIHRoaXMuY2hlY2tfcGhhc2VzKCk7XG4gICAgfVxuXG4vLyBFdmVyeW9uZSBnZXRzIGVxdWFsIGV4cGVyaWVuY2Ugd2l0aCBubyBkaXZpc2lvbiwgYnV0OlxuLy8gLSBDaGFyYWN0ZXJzIHdobyBkbyBub3QgcGFydGljaXBhdGUgZ2V0IGhhbGY7XG4vLyAtIERvd25lZCBjaGFyYWN0ZXJzIGdldCBub25lLlxuXG4gICAgYXN5bmMgYmF0dGxlX3BoYXNlX2VuZCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9uX2dvaW5nX2VmZmVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdCA9IHRoaXMub25fZ29pbmdfZWZmZWN0c1tpXTtcbiAgICAgICAgICAgIGVmZmVjdC5jaGFyLnJlbW92ZV9lZmZlY3QoZWZmZWN0KTtcbiAgICAgICAgICAgIGVmZmVjdC5jaGFyLnVwZGF0ZV9hbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hbGxpZXNfZGVmZWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQodGhpcy5hbGxpZXNfaW5mb1swXS5pbnN0YW5jZS5uYW1lICsgXCInIHBhcnR5IGhhcyBiZWVuIGRlZmVhdGVkIVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQodGhpcy5lbmVtaWVzX3BhcnR5X25hbWUgKyBcIiBoYXMgYmVlbiBkZWZlYXRlZCFcIik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgY29uc3QgdG90YWxfZXhwID0gdGhpcy5lbmVtaWVzX2luZm8ubWFwKGluZm8gPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaW5mby5pbnN0YW5jZSBhcyBFbmVteSkuZXhwX3Jld2FyZDtcbiAgICAgICAgICAgIH0pLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgWW91IGdvdCAke3RvdGFsX2V4cC50b1N0cmluZygpfSBleHBlcmllbmNlIHBvaW50cy5gKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdF9mb3Jfa2V5KCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWxsaWVzX2luZm8ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gdGhpcy5hbGxpZXNfaW5mb1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFyID0gaW5mby5pbnN0YW5jZSBhcyBNYWluQ2hhcjtcbiAgICAgICAgICAgICAgICBpZiAoIWNoYXIuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGNoYXIuYWRkX2V4cChpbmZvLmVudGVyZWRfaW5fYmF0dGxlID8gdG90YWxfZXhwIDogdG90YWxfZXhwID4+IDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLmJlZm9yZS5sZXZlbCAhPT0gY2hhbmdlLmFmdGVyLmxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKGAke2NoYXIubmFtZX0gaXMgbm93IGEgbGV2ZWwgJHtjaGFyLmxldmVsfSAke2NoYXIuY2xhc3MubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2FpbmVkX2FiaWxpdGllcyA9IF8uZGlmZmVyZW5jZShjaGFuZ2UuYWZ0ZXIuYWJpbGl0aWVzLCBjaGFuZ2UuYmVmb3JlLmFiaWxpdGllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbZ2FpbmVkX2FiaWxpdGllc1tqXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgTWFzdGVyZWQgdGhlICR7Y2hhci5jbGFzcy5uYW1lfSdzICR7YWJpbGl0eS5uYW1lfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFuZ2UuYmVmb3JlLnN0YXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdCA9IE9iamVjdC5rZXlzKGNoYW5nZS5iZWZvcmUuc3RhdHNbal0pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjaGFuZ2UuYWZ0ZXIuc3RhdHNbal1bc3RhdF0gLSBjaGFuZ2UuYmVmb3JlLnN0YXRzW2pdW3N0YXRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGF0X3RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1heF9ocFwiOiBzdGF0X3RleHQgPSBcIk1heGltdW0gSFBcIjsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWF4X3BwXCI6IHN0YXRfdGV4dCA9IFwiTWF4aW11bSBQUFwiOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdGtcIjogc3RhdF90ZXh0ID0gXCJBdHRhY2tcIjsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGVmXCI6IHN0YXRfdGV4dCA9IFwiRGVmZW5zZVwiOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhZ2lcIjogc3RhdF90ZXh0ID0gXCJBZ2lsaXR5XCI7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImx1a1wiOiBzdGF0X3RleHQgPSBcIkx1Y2tcIjsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgJHtzdGF0X3RleHR9IHJpc2VzIGJ5ICR7ZGlmZi50b1N0cmluZygpfSFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0b3RhbF9jb2lucyA9IHRoaXMuZW5lbWllc19pbmZvLm1hcChpbmZvID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGluZm8uaW5zdGFuY2UgYXMgRW5lbXkpLmNvaW5zX3Jld2FyZDtcbiAgICAgICAgICAgIH0pLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbG9nLmFkZChgWW91IGdvdCAke3RvdGFsX2NvaW5zLnRvU3RyaW5nKCl9IGNvaW5zLmApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbmVtaWVzX2luZm8ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmVteSA9IHRoaXMuZW5lbWllc19pbmZvW2ldLmluc3RhbmNlIGFzIEVuZW15O1xuICAgICAgICAgICAgICAgIGlmIChlbmVteS5pdGVtX3Jld2FyZCAmJiBNYXRoLnJhbmRvbSgpIDwgZW5lbXkuaXRlbV9yZXdhcmRfY2hhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYWRkIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZW5lbXkuaXRlbV9yZXdhcmRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuYWRkKGBZb3UgZ290IGEgJHtpdGVtLm5hbWV9LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0X2Zvcl9rZXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2xvZy5hZGQoYCR7ZW5lbXkuaXRlbV9yZXdhcmR9IG5vdCByZWdpc3RlcmVkLi4uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRfZm9yX2tleSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5zZXRfYmF0dGxlKCk7XG4gICAgfVxuXG4gICAgdW5zZXRfYmF0dGxlKCkge1xuICAgICAgICB0aGlzLmJhdHRsZV9maW5pc2hpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmJhdHRsZV9zdGFnZS51bnNldF9zdGFnZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9sb2cuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfbWVudS5kZXN0cm95X21lbnUoKTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xuICAgICAgICAgICAgICAgIHNpZ25hbF9iaW5kaW5nLmRldGFjaCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldF93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25fbWFuYWdlci5kZXN0cm95KCk7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5pbl9iYXR0bGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5iYXR0bGVfaW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5iYXR0bGVfZmluaXNoaW5nKSByZXR1cm47XG4gICAgICAgIHRoaXMuYmF0dGxlX3N0YWdlLnVwZGF0ZV9zdGFnZSgpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbl9tYW5hZ2VyLnJlbmRlcigpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGluaXRfY2FzdF9hdXJhLCB0aW50X21hcF9sYXllcnMgfSBmcm9tIFwiLi9wc3luZXJneV9jYXN0XCI7XG5pbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIGRpcmVjdGlvbnNfY291bnQsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgSW50ZXJhY3RhYmxlT2JqZWN0cywgaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcyB9IGZyb20gXCIuLi9JbnRlcmFjdGFibGVPYmplY3RzXCI7XG5pbXBvcnQgeyBGaWVsZFBzeW5lcmd5V2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvRmllbGRQc3luZXJneVdpbmRvd1wiO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSBcIi4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHsgQ29udHJvbGxhYmxlQ2hhciB9IGZyb20gXCIuLi9Db250cm9sbGFibGVDaGFyXCI7XG5cbi8qRGVmaW5lcyBhbmQgbWFuYWdlcyB0aGUgdXNhZ2Ugb2YgZmllbGQgcHN5bmVyZ3lcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGFiaWxpdHlfa2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB0YXJnZXRfbWF4X3JhbmdlOiBudW1iZXI7XG4gICAgcHVibGljIGFjdGlvbl9rZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuZWVkX3RhcmdldDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYm9vdHN0cmFwX21ldGhvZDogRnVuY3Rpb247XG4gICAgcHVibGljIGNhc3RfZmluaXNoZXI6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjb250cm9sbGFibGVfY2hhcjogQ29udHJvbGxhYmxlQ2hhcjtcbiAgICBwdWJsaWMgdGFyZ2V0X2ZvdW5kOiBib29sZWFuO1xuICAgIHB1YmxpYyB0YXJnZXRfb2JqZWN0OiBJbnRlcmFjdGFibGVPYmplY3RzO1xuICAgIHB1YmxpYyBzdG9wX2Nhc3Rpbmc6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBmaWVsZF9wc3luZXJneV93aW5kb3c6IEZpZWxkUHN5bmVyZ3lXaW5kb3c7XG4gICAgcHVibGljIGNhc3RfZGlyZWN0aW9uOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBhYmlsaXR5X2tleV9uYW1lLCB0YXJnZXRfbWF4X3JhbmdlLCBhY3Rpb25fa2V5X25hbWUsIG5lZWRfdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSA9IGFiaWxpdHlfa2V5X25hbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMudGFyZ2V0X21heF9yYW5nZSA9IHRhcmdldF9tYXhfcmFuZ2U7XG4gICAgICAgIHRoaXMuYWN0aW9uX2tleV9uYW1lID0gYWN0aW9uX2tleV9uYW1lO1xuICAgICAgICB0aGlzLm5lZWRfdGFyZ2V0ID0gbmVlZF90YXJnZXQ7XG4gICAgICAgIHRoaXMuYm9vdHN0cmFwX21ldGhvZCA9ICgpID0+IHt9O1xuICAgICAgICB0aGlzLmNhc3RfZmluaXNoZXIgPSAoKSA9PiB7fTtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cgPSBuZXcgRmllbGRQc3luZXJneVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBwc3luZXJneSBjYXN0IGRpcmVjdGlvblxuICAgIEZvciBkaWFnb25hbHMsIHBpY2sgdGhlIG5leHQgY2xvY2t3aXNlIG5vbi1kaWFnb25hbFxuXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSAtIEN1cnJlbnQgZGlyZWN0aW9uXG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdIC0gTm9uLWRpYWdvbmFsIGNhc3QgZGlyZWN0aW9uKi9cbiAgICBnZXRfY2FzdF9kaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmKGRpcmVjdGlvbiUyPT09MCkgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICAgICAgZGlyZWN0aW9uKys7XG4gICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IGRpcmVjdGlvbnNfY291bnQgPyBkaXJlY3Rpb25zLnJpZ2h0IDogZGlyZWN0aW9uO1xuICAgIH1cblxuICAgIHNldF9oZXJvX2Nhc3RfYW5pbSgpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5wbGF5KHRoaXMuYWN0aW9uX2tleV9uYW1lLCByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0pO1xuICAgIH1cblxuICAgIHVuc2V0X2hlcm9fY2FzdF9hbmltKCkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnJldmVyc2VPbmNlKCk7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY2FzdF9kaXJlY3Rpb25dKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIucGxheSh0aGlzLmFjdGlvbl9rZXlfbmFtZSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuY2FzdF9kaXJlY3Rpb25dKTtcbiAgICB9XG5cbiAgICBzZXRfYm9vdHN0cmFwX21ldGhvZChtZXRob2QpIHtcbiAgICAgICAgdGhpcy5ib290c3RyYXBfbWV0aG9kID0gbWV0aG9kO1xuICAgIH1cblxuICAgIHNldF9jYXN0X2ZpbmlzaGVyX21ldGhvZChtZXRob2QpIHtcbiAgICAgICAgdGhpcy5jYXN0X2ZpbmlzaGVyID0gbWV0aG9kO1xuICAgIH1cblxuICAgIHNlYXJjaF9mb3JfdGFyZ2V0KCkge1xuICAgICAgICB0aGlzLnRhcmdldF9mb3VuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgbWluX3gsIG1heF94LCBtaW5feSwgbWF4X3k7XG4gICAgICAgIGlmICh0aGlzLmNhc3RfZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLnVwIHx8IHRoaXMuY2FzdF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMuZG93bikge1xuICAgICAgICAgICAgbWluX3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgIG1heF94ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXM7XG4gICAgICAgICAgICBpZiAodGhpcy5jYXN0X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy51cCkge1xuICAgICAgICAgICAgICAgIG1pbl95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSAtIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXMgLSB0aGlzLnRhcmdldF9tYXhfcmFuZ2U7XG4gICAgICAgICAgICAgICAgbWF4X3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluX3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55ICsgdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgICAgICBtYXhfeSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnkgKyB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzICsgdGhpcy50YXJnZXRfbWF4X3JhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWluX3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgIG1heF95ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueSArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXM7XG4gICAgICAgICAgICBpZiAodGhpcy5jYXN0X2RpcmVjdGlvbiA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XG4gICAgICAgICAgICAgICAgbWluX3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS54IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5ib2R5X3JhZGl1cyAtIHRoaXMudGFyZ2V0X21heF9yYW5nZTtcbiAgICAgICAgICAgICAgICBtYXhfeCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW5feCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLnggKyB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgICAgIG1heF94ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCArIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuYm9keV9yYWRpdXMgKyB0aGlzLnRhcmdldF9tYXhfcmFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNxcl9kaXN0YW5jZSA9IEluZmluaXR5O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBpbnRlcmFjdGFibGVfb2JqZWN0ID0gdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tpXTtcbiAgICAgICAgICAgIGlmICghKHRoaXMuYWJpbGl0eV9rZXlfbmFtZSBpbiB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW2ludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWVdLnBzeW5lcmd5X2tleXMpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1feF9weCA9IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1feV9weCA9IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCArICh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ID4+IDEpO1xuICAgICAgICAgICAgY29uc3QgeF9jb25kaXRpb24gPSBpdGVtX3hfcHggPj0gbWluX3ggJiYgaXRlbV94X3B4IDw9IG1heF94O1xuICAgICAgICAgICAgY29uc3QgeV9jb25kaXRpb24gPSBpdGVtX3lfcHggPj0gbWluX3kgJiYgaXRlbV95X3B4IDw9IG1heF95O1xuICAgICAgICAgICAgaWYgKHhfY29uZGl0aW9uICYmIHlfY29uZGl0aW9uICYmIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfc3FyX2Rpc3RhbmNlID0gTWF0aC5wb3coaXRlbV94X3B4IC0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUueCwgMikgKyBNYXRoLnBvdyhpdGVtX3lfcHggLSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS55LCAyKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpc19zcXJfZGlzdGFuY2UgPCBzcXJfZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc3FyX2Rpc3RhbmNlID0gdGhpc19zcXJfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0ID0gaW50ZXJhY3RhYmxlX29iamVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfdGFyZ2V0X2Nhc3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0X29iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgcHN5bmVyZ3lfcHJvcGVydGllcyA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5wc3luZXJneV9rZXlzW3RoaXMuYWJpbGl0eV9rZXlfbmFtZV07XG4gICAgICAgICAgICBpZiAocHN5bmVyZ3lfcHJvcGVydGllcy5pbnRlcmFjdGlvbl90eXBlID09PSBpbnRlcmFjdGFibGVfb2JqZWN0X2ludGVyYWN0aW9uX3R5cGVzLk9OQ0UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYXN0ZWRfcHJvcGVydHkgPSB0aGlzLmFiaWxpdHlfa2V5X25hbWUgKyBcIl9jYXN0ZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhW2Nhc3RlZF9wcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YVtjYXN0ZWRfcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYXN0KGNvbnRyb2xsYWJsZV9jaGFyLCBjYXN0ZXJfa2V5X25hbWUpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhciA9IGNvbnRyb2xsYWJsZV9jaGFyO1xuICAgICAgICBpZiAodGhpcy5jb250cm9sbGFibGVfY2hhci5jYXN0aW5nX3BzeW5lcmd5KSByZXR1cm47XG4gICAgICAgIGlmIChjYXN0ZXJfa2V5X25hbWUgIT09IHVuZGVmaW5lZCAmJiBjYXN0ZXJfa2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8ubWFpbl9jaGFyX2xpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhc3RlciA9IHRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0W2Nhc3Rlcl9rZXlfbmFtZV07XG4gICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXR5X2tleV9uYW1lXTtcbiAgICAgICAgICAgIGlmIChjYXN0ZXIuY3VycmVudF9wcCA8IGFiaWxpdHkucHBfY29zdCB8fCAhY2FzdGVyLmFiaWxpdGllcy5pbmNsdWRlcyh0aGlzLmFiaWxpdHlfa2V5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzdGVyLmN1cnJlbnRfcHAgLT0gYWJpbGl0eS5wcF9jb3N0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cud2luZG93LnNlbmRfdG9fZnJvbnQoKTtcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cub3Blbih0aGlzLmFiaWxpdHlfa2V5X25hbWUpO1xuXG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY2FzdGluZ19wc3luZXJneSA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3RvcF9jaGFyKGZhbHNlKTtcblxuICAgICAgICB0aGlzLmNhc3RfZGlyZWN0aW9uID0gdGhpcy5nZXRfY2FzdF9kaXJlY3Rpb24odGhpcy5jb250cm9sbGFibGVfY2hhci5jdXJyZW50X2RpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc2V0X2RpcmVjdGlvbih0aGlzLmNhc3RfZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMubmVlZF90YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoX2Zvcl90YXJnZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3RhcmdldF9jYXN0ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgIGxldCByZXNldF9tYXA7XG4gICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nID0gaW5pdF9jYXN0X2F1cmEodGhpcy5nYW1lLCB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZSwgdGhpcy5kYXRhLm5wY19ncm91cCwgdGhpcy5jb250cm9sbGFibGVfY2hhci5jb2xvcl9maWx0ZXIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc2V0X21hcCA9IHRpbnRfbWFwX2xheWVycyh0aGlzLmdhbWUsIHRoaXMuZGF0YS5tYXAsIHRoaXMuZGF0YS5tYXAuY29sb3JfZmlsdGVyKTtcbiAgICAgICAgICAgIHRoaXMuYm9vdHN0cmFwX21ldGhvZCgpO1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuY2FzdGluZ19wc3luZXJneSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0ID0gbnVsbDtcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYXN0X2ZpbmlzaGVyKCk7XG4gICAgICAgICAgICByZXNldF9tYXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHsgcmV2ZXJzZV9kaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnMgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgRm9vdHN0ZXBzIH0gZnJvbSBcIi4vdXRpbHMvRm9vdHN0ZXBzXCI7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tIFwiLi9TcHJpdGVCYXNlXCI7XG5cbmNvbnN0IERFRkFVTFRfU0hBRE9XX0tFWU5BTUUgPSBcInNoYWRvd1wiO1xuXG5jb25zdCBERUZBVUxUX1NIQURPV19BTkNIT1JfWCA9IDAuNDU7XG5jb25zdCBERUZBVUxUX1NIQURPV19BTkNIT1JfWSA9IDAuMDU7XG5jb25zdCBERUZBVUxUX1NQUklURV9BTkNIT1JfWCA9IDAuNTA7XG5jb25zdCBERUZBVUxUX1NQUklURV9BTkNIT1JfWSA9IDAuODA7XG5cbmNvbnN0IGRlZmF1bHRfYW5jaG9yID0ge1xuICAgIHg6IERFRkFVTFRfU1BSSVRFX0FOQ0hPUl9YLFxuICAgIHk6IERFRkFVTFRfU1BSSVRFX0FOQ0hPUl9ZXG59O1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbGxhYmxlQ2hhciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGtleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHhfc3BlZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgeV9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBleHRyYV9zcGVlZDogbnVtYmVyO1xuICAgIHB1YmxpYyBzdG9wX2J5X2NvbGxpZGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgZm9yY2VfZGlyZWN0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbGltYmluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgcHVzaGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMganVtcGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2xpZGluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2FzdGluZ19wc3luZXJneTogYm9vbGVhbjtcbiAgICBwdWJsaWMgdGVsZXBvcnRpbmc6IGJvb2xlYW47XG4gICAgcHVibGljIGlkbGVfY2xpbWJpbmc6IGJvb2xlYW47XG4gICAgcHVibGljIHNwcml0ZV9pbmZvOiBTcHJpdGVCYXNlO1xuICAgIHB1YmxpYyBzcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIHNoYWRvdzogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgYm9keV9yYWRpdXM6IG51bWJlcjtcbiAgICBwdWJsaWMgdGlsZV94X3BvczogbnVtYmVyO1xuICAgIHB1YmxpYyB0aWxlX3lfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYWN0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnJlbnRfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIHJlcXVpcmVkX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBkZXNpcmVkX2RpcmVjdGlvbjogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xvcl9maWx0ZXI6IFBoYXNlci5GaWx0ZXI7XG4gICAgcHVibGljIGVuYWJsZV9mb290c3RlcHM6IGJvb2xlYW47XG4gICAgcHVibGljIGZvb3RzdGVwczogRm9vdHN0ZXBzO1xuICAgIHB1YmxpYyB0cnlpbmdfdG9fcHVzaDogYm9vbGVhbjtcbiAgICBwdWJsaWMgdHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIHB1c2hfdGltZXI6IFBoYXNlci5UaW1lckV2ZW50O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwga2V5X25hbWUsIGluaXRpYWxfeCwgaW5pdGlhbF95LCBpbml0aWFsX2FjdGlvbiwgaW5pdGlhbF9kaXJlY3Rpb24sIGVuYWJsZV9mb290c3RlcHMpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLnhfc3BlZWQgPSAwO1xuICAgICAgICB0aGlzLnlfc3BlZWQgPSAwO1xuICAgICAgICB0aGlzLmV4dHJhX3NwZWVkID0gMDtcbiAgICAgICAgdGhpcy5zdG9wX2J5X2NvbGxpZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsaW1iaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHVzaGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FzdGluZ19wc3luZXJneSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRlbGVwb3J0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaWRsZV9jbGltYmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcml0ZV9pbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBudWxsO1xuICAgICAgICB0aGlzLnNoYWRvdyA9IG51bGw7XG4gICAgICAgIHRoaXMuYm9keV9yYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLnRpbGVfeF9wb3MgPSBpbml0aWFsX3g7XG4gICAgICAgIHRoaXMudGlsZV95X3BvcyA9IGluaXRpYWxfeTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IGluaXRpYWxfYWN0aW9uO1xuICAgICAgICB0aGlzLmN1cnJlbnRfZGlyZWN0aW9uID0gaW5pdGlhbF9kaXJlY3Rpb247XG4gICAgICAgIHRoaXMucmVxdWlyZWRfZGlyZWN0aW9uID0gMDtcbiAgICAgICAgdGhpcy5kZXNpcmVkX2RpcmVjdGlvbiA9IGluaXRpYWxfZGlyZWN0aW9uO1xuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcbiAgICAgICAgdGhpcy50cnlpbmdfdG9fcHVzaCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMucHVzaF90aW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW5hYmxlX2Zvb3RzdGVwcyA9IGVuYWJsZV9mb290c3RlcHMgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogZW5hYmxlX2Zvb3RzdGVwcztcbiAgICAgICAgdGhpcy5mb290c3RlcHMgPSBuZXcgRm9vdHN0ZXBzKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICBpbl9hY3Rpb24oYWxsb3dfY2xpbWJpbmcgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYXN0aW5nX3BzeW5lcmd5IHx8IHRoaXMucHVzaGluZyB8fCAodGhpcy5jbGltYmluZyAmJiAhYWxsb3dfY2xpbWJpbmcpIHx8IHRoaXMuanVtcGluZyB8fCB0aGlzLnRlbGVwb3J0aW5nIHx8IHRoaXMuc2xpZGluZztcbiAgICB9XG5cbiAgICBzZXRfc3ByaXRlKGdyb3VwLCBzcHJpdGVfaW5mbywgbWFwX3Nwcml0ZSwgbGF5ZXIsIGFuY2hvcl94PywgYW5jaG9yX3k/KSB7XG4gICAgICAgIGFuY2hvcl94ID0gYW5jaG9yX3ggPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRfYW5jaG9yLnggOiBhbmNob3JfeDtcbiAgICAgICAgYW5jaG9yX3kgPSBhbmNob3JfeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdF9hbmNob3IueSA6IGFuY2hvcl95O1xuICAgICAgICB0aGlzLnNwcml0ZV9pbmZvID0gc3ByaXRlX2luZm87XG4gICAgICAgIGNvbnN0IGFjdGlvbl9rZXkgPSB0aGlzLnNwcml0ZV9pbmZvLmdldEFjdGlvbktleSh0aGlzLmN1cnJlbnRfYWN0aW9uKTtcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBncm91cC5jcmVhdGUoMCwgMCwgYWN0aW9uX2tleSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmNlbnRlclggPSAoKHRoaXMudGlsZV94X3BvcyArIDEuNSkgKiBtYXBfc3ByaXRlLnRpbGVXaWR0aCkgfCAwO1xuICAgICAgICB0aGlzLnNwcml0ZS5jZW50ZXJZID0gKCh0aGlzLnRpbGVfeV9wb3MgKyAxLjUpICogbWFwX3Nwcml0ZS50aWxlSGVpZ2h0KSB8IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMuc3ByaXRlLnJvdW5kUHggPSB0cnVlO1xuICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3Iuc2V0VG8oYW5jaG9yX3gsIGFuY2hvcl95KTtcbiAgICB9XG5cbiAgICByZXNldF9hbmNob3IocHJvcGVydHk/KSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkICYmIFsneCcsICd5J10uaW5jbHVkZXMocHJvcGVydHkpKSB7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5hbmNob3JbcHJvcGVydHldID0gZGVmYXVsdF9hbmNob3JbcHJvcGVydHldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSBkZWZhdWx0X2FuY2hvci54O1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnkgPSBkZWZhdWx0X2FuY2hvci55O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3NoYWRvdyhrZXlfbmFtZSwgZ3JvdXAsIGxheWVyLCBzaGFkb3dfYW5jaG9yX3g/LCBzaGFkb3dfYW5jaG9yX3k/KSB7XG4gICAgICAgIGtleV9uYW1lID0ga2V5X25hbWUgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfU0hBRE9XX0tFWU5BTUUgOiBrZXlfbmFtZTtcbiAgICAgICAgc2hhZG93X2FuY2hvcl94ID0gc2hhZG93X2FuY2hvcl94ID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NIQURPV19BTkNIT1JfWCA6IHNoYWRvd19hbmNob3JfeDtcbiAgICAgICAgc2hhZG93X2FuY2hvcl95ID0gc2hhZG93X2FuY2hvcl95ID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NIQURPV19BTkNIT1JfWSA6IHNoYWRvd19hbmNob3JfeTtcbiAgICAgICAgdGhpcy5zaGFkb3cgPSBncm91cC5jcmVhdGUoMCwgMCwga2V5X25hbWUpO1xuICAgICAgICB0aGlzLnNoYWRvdy5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuTVVMVElQTFk7XG4gICAgICAgIHRoaXMuc2hhZG93LmRpc2FibGVSb3VuZFB4ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zaGFkb3cuYW5jaG9yLnNldFRvKHNoYWRvd19hbmNob3JfeCwgc2hhZG93X2FuY2hvcl95KTtcbiAgICAgICAgdGhpcy5zaGFkb3cuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSBsYXllcjtcbiAgICB9XG5cbiAgICBjYW1lcmFfZm9sbG93KCkge1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZvbGxvdyh0aGlzLnNwcml0ZSwgUGhhc2VyLkNhbWVyYS5GT0xMT1dfTE9DS09OLCBudW1iZXJzLkNBTUVSQV9MRVJQLCBudW1iZXJzLkNBTUVSQV9MRVJQKTtcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5mb2N1c09uKHRoaXMuc3ByaXRlKTtcbiAgICB9XG5cbiAgICBzZXRfY29sbGlzaW9uX2xheWVyKGxheWVyKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMuc2hhZG93LmJhc2VfY29sbGlzaW9uX2xheWVyID0gbGF5ZXI7XG4gICAgfVxuXG4gICAgcGxheShhY3Rpb24/LCBhbmltYXRpb24/LCBzdGFydCA9IHRydWUpIHtcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLmN1cnJlbnRfYWN0aW9uIDogYWN0aW9uO1xuICAgICAgICBhbmltYXRpb24gPSBhbmltYXRpb24gPT09IHVuZGVmaW5lZCA/IHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmN1cnJlbnRfZGlyZWN0aW9uXSA6IGFuaW1hdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuc3ByaXRlX2luZm8uZ2V0U3ByaXRlQWN0aW9uKHRoaXMuc3ByaXRlKSAhPT0gYWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25fa2V5ID0gdGhpcy5zcHJpdGVfaW5mby5nZXRBY3Rpb25LZXkoYWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmxvYWRUZXh0dXJlKGFjdGlvbl9rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSB0aGlzLnNwcml0ZV9pbmZvLmdldEFuaW1hdGlvbktleShhY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5zcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24oYW5pbWF0aW9uX2tleSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlX2luZm8uc2V0QW5pbWF0aW9uKHRoaXMuc3ByaXRlLCBhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9vYmogPSB0aGlzLnNwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fa2V5KTtcbiAgICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uX2tleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltYXRpb25fb2JqLnN0b3AodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbl9vYmo7XG4gICAgfVxuXG4gICAgc2V0X2ZyYW1lKGRpcmVjdGlvbjogbnVtYmVyLCBmcmFtZV9pbmRleCA9IDApIHtcbiAgICAgICAgY29uc3QgZnJhbWVfbmFtZSA9IHRoaXMuc3ByaXRlX2luZm8uZ2V0RnJhbWVOYW1lKHRoaXMuY3VycmVudF9hY3Rpb24sIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25dLCBmcmFtZV9pbmRleCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmZyYW1lTmFtZSA9IGZyYW1lX25hbWU7XG4gICAgfVxuXG4gICAgdXBkYXRlX3NoYWRvdygpIHtcbiAgICAgICAgdGhpcy5zaGFkb3cueCA9IHRoaXMuc3ByaXRlLmJvZHkueDtcbiAgICAgICAgdGhpcy5zaGFkb3cueSA9IHRoaXMuc3ByaXRlLmJvZHkueTtcbiAgICB9XG5cbiAgICBzdG9wX2NoYXIoY2hhbmdlX3Nwcml0ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS55ID0gdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS54ID0gMDtcbiAgICAgICAgaWYgKGNoYW5nZV9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2RpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdGlvbiA9IHRoaXMuZGVzaXJlZF9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbihjaGVja19vbl9ldmVudCA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChjaGVja19vbl9ldmVudCAmJiB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFjdGlvbiA9IHRoaXMuY3VycmVudF9hY3Rpb247XG4gICAgICAgIGxldCBpZGxlX2NsaW1iaW5nID0gdGhpcy5pZGxlX2NsaW1iaW5nO1xuICAgICAgICBpZiAodGhpcy5zdG9wX2J5X2NvbGxpZGluZyAmJiAhdGhpcy5wdXNoaW5nICYmICF0aGlzLmNsaW1iaW5nKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBiYXNlX2FjdGlvbnMuSURMRTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0b3BfYnlfY29sbGlkaW5nICYmICF0aGlzLnB1c2hpbmcgJiYgdGhpcy5jbGltYmluZykge1xuICAgICAgICAgICAgaWRsZV9jbGltYmluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uID0gaWRsZV9jbGltYmluZyA/IGJhc2VfYWN0aW9ucy5JRExFIDogcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuZGVzaXJlZF9kaXJlY3Rpb25dO1xuICAgICAgICB0aGlzLnBsYXkoYWN0aW9uLCBhbmltYXRpb24pO1xuICAgIH1cblxuICAgIHRpbGVfYWJsZV90b19zaG93X2Zvb3RwcmludCgpIHtcbiAgICAgICAgY29uc3QgdGlsZXMgPSB0aGlzLmRhdGEubWFwLmdldF9jdXJyZW50X3RpbGUodGhpcyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aWxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0aWxlLnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoXCJkaXNhYmxlX2Zvb3RwcmludFwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVycyA9IHRpbGUucHJvcGVydGllcy5kaXNhYmxlX2Zvb3RwcmludC5zcGxpdChcIixcIikubWFwKGxheWVyID0+IHBhcnNlSW50KGxheWVyKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVycy5pbmNsdWRlcyh0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRfY3VycmVudF9hY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZWRfZGlyZWN0aW9uID09PSBudWxsICYmIHRoaXMuY3VycmVudF9hY3Rpb24gIT09IGJhc2VfYWN0aW9ucy5JRExFICYmICF0aGlzLmNsaW1iaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZXF1aXJlZF9kaXJlY3Rpb24gIT09IG51bGwgJiYgIXRoaXMuY2xpbWJpbmcgJiYgIXRoaXMucHVzaGluZykge1xuICAgICAgICAgICAgY29uc3QgZm9vdHN0ZXBzID0gdGhpcy5lbmFibGVfZm9vdHN0ZXBzICYmIHRoaXMuZGF0YS5tYXAuc2hvd19mb290c3RlcHMgJiYgdGhpcy50aWxlX2FibGVfdG9fc2hvd19mb290cHJpbnQoKTtcbiAgICAgICAgICAgIGlmKHRoaXMuZm9vdHN0ZXBzLmNhbl9tYWtlX2Zvb3RwcmludCAmJiBmb290c3RlcHMpe1xuICAgICAgICAgICAgICAgIHRoaXMuZm9vdHN0ZXBzLmNyZWF0ZV9zdGVwKHRoaXMuY3VycmVudF9kaXJlY3Rpb24sdGhpcy5jdXJyZW50X2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaGlmdF9wcmVzc2VkID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmlzRG93bihQaGFzZXIuS2V5Ym9hcmQuU0hJRlQpO1xuICAgICAgICAgICAgaWYgKHNoaWZ0X3ByZXNzZWQgJiYgdGhpcy5jdXJyZW50X2FjdGlvbiAhPT0gYmFzZV9hY3Rpb25zLkRBU0gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLkRBU0g7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzaGlmdF9wcmVzc2VkICYmIHRoaXMuY3VycmVudF9hY3Rpb24gIT09IGJhc2VfYWN0aW9ucy5XQUxLKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5XQUxLO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3RpbGVfcG9zaXRpb24obWFwX3Nwcml0ZSkge1xuICAgICAgICB0aGlzLnRpbGVfeF9wb3MgPSAodGhpcy5zcHJpdGUueC9tYXBfc3ByaXRlLnRpbGVXaWR0aCkgfCAwO1xuICAgICAgICB0aGlzLnRpbGVfeV9wb3MgPSAodGhpcy5zcHJpdGUueS9tYXBfc3ByaXRlLnRpbGVIZWlnaHQpIHwgMDtcbiAgICB9XG5cbiAgICBjYWxjdWxhdGVfc3BlZWQoKSB7IC8vd2hlbiBzZXR0aW5nIHRlbXBfeCBvciB0ZW1wX3ksIGl0IG1lYW5zIHRoYXQgdGhlc2UgdmVsb2NpdGllcyB3aWxsIHN0aWxsIGJlIGFuYWx5emVkIGluIGNvbGxpc2lvbl9kZWFsZXIgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgZGVsdGFfdGltZSA9IHRoaXMuZ2FtZS50aW1lLmVsYXBzZWRNUyAvIG51bWJlcnMuREVMVEFfVElNRV9GQUNUT1I7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuREFTSCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ggPSAoZGVsdGFfdGltZSAqIHRoaXMueF9zcGVlZCAqICh0aGlzLnNwcml0ZV9pbmZvLmRhc2hfc3BlZWQgKyB0aGlzLmV4dHJhX3NwZWVkKSkgfCAwO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3kgPSAoZGVsdGFfdGltZSAqIHRoaXMueV9zcGVlZCAqICh0aGlzLnNwcml0ZV9pbmZvLmRhc2hfc3BlZWQgKyB0aGlzLmV4dHJhX3NwZWVkKSkgfCAwO1xuICAgICAgICB9IGVsc2UgaWYodGhpcy5jdXJyZW50X2FjdGlvbiA9PT0gYmFzZV9hY3Rpb25zLldBTEspIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnhfc3BlZWQgKiAodGhpcy5zcHJpdGVfaW5mby53YWxrX3NwZWVkICsgdGhpcy5leHRyYV9zcGVlZCkpIHwgMDtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnlfc3BlZWQgKiAodGhpcy5zcHJpdGVfaW5mby53YWxrX3NwZWVkICsgdGhpcy5leHRyYV9zcGVlZCkpIHwgMDtcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5DTElNQikge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ggPSAoZGVsdGFfdGltZSAqIHRoaXMueF9zcGVlZCAqIHRoaXMuc3ByaXRlX2luZm8uY2xpbWJfc3BlZWQpIHwgMDtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gKGRlbHRhX3RpbWUgKiB0aGlzLnlfc3BlZWQgKiB0aGlzLnNwcml0ZV9pbmZvLmNsaW1iX3NwZWVkKSB8IDA7XG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuSURMRSkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS55ID0gdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS54ID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFwcGx5X3NwZWVkKCkge1xuICAgICAgICBpZiAoW2Jhc2VfYWN0aW9ucy5XQUxLLCBiYXNlX2FjdGlvbnMuREFTSCwgYmFzZV9hY3Rpb25zLkNMSU1CXS5pbmNsdWRlcyh0aGlzLmN1cnJlbnRfYWN0aW9uKSkgeyAvL3NldHMgdGhlIGZpbmFsIHZlbG9jaXR5XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnggPSB0aGlzLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnRlbXBfeDtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3NwZWVkKHhfc3BlZWQsIHlfc3BlZWQpIHtcbiAgICAgICAgdGhpcy54X3NwZWVkID0geF9zcGVlZCA9PT0gdW5kZWZpbmVkID8gdGhpcy54X3NwZWVkIDogeF9zcGVlZDtcbiAgICAgICAgdGhpcy55X3NwZWVkID0geV9zcGVlZCA9PT0gdW5kZWZpbmVkID8gdGhpcy55X3NwZWVkIDogeV9zcGVlZDtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVfc3BlZWQoKTtcbiAgICAgICAgdGhpcy5hcHBseV9zcGVlZCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAgXCIuLi9tYWdpY19udW1iZXJzXCI7XG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIH0gZnJvbSBcIi4uL3RpbGVfZXZlbnRzL1RpbGVFdmVudFwiO1xuaW1wb3J0IHsgZ2V0X3N1cnJvdW5kaW5ncywgZ2V0X29wcG9zaXRlX2RpcmVjdGlvbiwgZGlyZWN0aW9ucywgcmV2ZXJzZV9kaXJlY3Rpb25zLCBiYXNlX2FjdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IEp1bXBFdmVudCB9IGZyb20gXCIuLi90aWxlX2V2ZW50cy9KdW1wRXZlbnRcIjtcblxuY29uc3QgRFVTVF9DT1VOVCA9IDc7XG5jb25zdCBEVVNUX1JBRElVUyA9IDE4O1xuY29uc3QgUFVTSF9TSElGVCA9IDE2O1xuY29uc3QgRFVTVF9LRVkgPSBcImR1c3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbF9wdXNoKGdhbWUsIGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QpIHtcbiAgICBpZiAoZGF0YS5oZXJvLnRyeWluZ190b19wdXNoICYmIFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd24sIGRpcmVjdGlvbnMubGVmdCwgZGlyZWN0aW9ucy5yaWdodF0uaW5jbHVkZXMoZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbikgJiYgZGF0YS5oZXJvLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9PT0gZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uICYmICFkYXRhLmhlcm8uY2FzdGluZ19wc3luZXJneSAmJiAhZGF0YS5oZXJvLmp1bXBpbmcgJiYgIWRhdGEuaW5fYmF0dGxlKSB7XG4gICAgICAgIGZpcmVfcHVzaF9tb3ZlbWVudChnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0KTtcbiAgICB9XG4gICAgZGF0YS5oZXJvLnRyeWluZ190b19wdXNoID0gZmFsc2U7XG4gICAgZGF0YS5oZXJvLnB1c2hfdGltZXIgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0X29ubHlfcHVzaChnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBiZWZvcmVfbW92ZSwgcHVzaF9lbmQsIGVuYWJsZV9waHlzaWNzX2F0X2VuZCA9IHRydWUsIG9uX3B1c2hfdXBkYXRlID0gdW5kZWZpbmVkKSB7XG4gICAgZmlyZV9wdXNoX21vdmVtZW50KGdhbWUsIGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIHB1c2hfZW5kLCBiZWZvcmVfbW92ZSwgdHJ1ZSwgZW5hYmxlX3BoeXNpY3NfYXRfZW5kLCBvbl9wdXNoX3VwZGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXJlX3B1c2hfbW92ZW1lbnQoZ2FtZSwgZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgcHVzaF9lbmQ/LCBiZWZvcmVfbW92ZT8sIHRhcmdldF9vbmx5ID0gZmFsc2UsIGVuYWJsZV9waHlzaWNzX2F0X2VuZCA9IHRydWUsIG9uX3B1c2hfdXBkYXRlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IGV4cGVjdGVkX3Bvc2l0aW9uO1xuICAgIGlmICghdGFyZ2V0X29ubHkpIHtcbiAgICAgICAgbGV0IHBvc2l0aXZlX2xpbWl0ID0gZGF0YS5oZXJvLnNwcml0ZS54ICsgKC1pbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZS55IC0gaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUueCk7XG4gICAgICAgIGxldCBuZWdhdGl2ZV9saW1pdCA9IC1kYXRhLmhlcm8uc3ByaXRlLnggKyAoLWludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLnkgKyBpbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZS54KTtcbiAgICAgICAgaWYgKC1kYXRhLmhlcm8uc3ByaXRlLnkgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWRhdGEuaGVyby5zcHJpdGUueSA+PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgZXhwZWN0ZWRfcG9zaXRpb24gPSBkaXJlY3Rpb25zLmRvd247XG4gICAgICAgIH0gZWxzZSBpZiAoLWRhdGEuaGVyby5zcHJpdGUueSA8PSBwb3NpdGl2ZV9saW1pdCAmJiAtZGF0YS5oZXJvLnNwcml0ZS55ID49IG5lZ2F0aXZlX2xpbWl0KSB7XG4gICAgICAgICAgICBleHBlY3RlZF9wb3NpdGlvbiA9IGRpcmVjdGlvbnMubGVmdDtcbiAgICAgICAgfSBlbHNlIGlmICgtZGF0YS5oZXJvLnNwcml0ZS55IDw9IHBvc2l0aXZlX2xpbWl0ICYmIC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gbmVnYXRpdmVfbGltaXQpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkX3Bvc2l0aW9uID0gZGlyZWN0aW9ucy51cDtcbiAgICAgICAgfSBlbHNlIGlmICgtZGF0YS5oZXJvLnNwcml0ZS55ID49IHBvc2l0aXZlX2xpbWl0ICYmIC1kYXRhLmhlcm8uc3ByaXRlLnkgPD0gbmVnYXRpdmVfbGltaXQpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkX3Bvc2l0aW9uID0gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFyZ2V0X29ubHkgfHwgZXhwZWN0ZWRfcG9zaXRpb24gPT09IGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0YXJnZXRfb25seSkge1xuICAgICAgICAgICAgZGF0YS5oZXJvLnB1c2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLlBVU0g7XG4gICAgICAgICAgICBkYXRhLmhlcm8uc2V0X2FjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuICAgICAgICBsZXQgdHdlZW5feCA9IDAsIHR3ZWVuX3kgPSAwO1xuICAgICAgICBsZXQgZXZlbnRfc2hpZnRfeCA9IDAsIGV2ZW50X3NoaWZ0X3kgPSAwO1xuICAgICAgICBzd2l0Y2ggKGRhdGEuaGVyby50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICBldmVudF9zaGlmdF95ID0gLTE7XG4gICAgICAgICAgICAgICAgdHdlZW5feSA9IC1QVVNIX1NISUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICAgICAgZXZlbnRfc2hpZnRfeSA9IDE7XG4gICAgICAgICAgICAgICAgdHdlZW5feSA9IFBVU0hfU0hJRlQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICBldmVudF9zaGlmdF94ID0gLTE7XG4gICAgICAgICAgICAgICAgdHdlZW5feCA9IC1QVVNIX1NISUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnJpZ2h0OlxuICAgICAgICAgICAgICAgIGV2ZW50X3NoaWZ0X3ggPSAxO1xuICAgICAgICAgICAgICAgIHR3ZWVuX3ggPSBQVVNIX1NISUZUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNoaWZ0X2V2ZW50cyhkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBldmVudF9zaGlmdF94LCBldmVudF9zaGlmdF95KTtcbiAgICAgICAgbGV0IHNwcml0ZXMgPSBbaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUuYm9keV07XG4gICAgICAgIGlmICghdGFyZ2V0X29ubHkpIHtcbiAgICAgICAgICAgIHNwcml0ZXMucHVzaCguLi5bZGF0YS5oZXJvLnNoYWRvdywgZGF0YS5oZXJvLnNwcml0ZS5ib2R5XSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldl94ID0gaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3g7XG4gICAgICAgIGNvbnN0IHByZXZfeSA9IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95O1xuICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeCArPSBldmVudF9zaGlmdF94O1xuICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSArPSBldmVudF9zaGlmdF95O1xuICAgICAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgaWYgKGJlZm9yZV9tb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJlZm9yZV9tb3ZlKHR3ZWVuX3gsIHR3ZWVuX3kpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrKSB7XG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NraW5nX3N0YWlyX2Jsb2NrLnggKz0gdHdlZW5feDtcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2sueSArPSB0d2Vlbl95O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ByaXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGJvZHkgPSBzcHJpdGVzW2ldO1xuICAgICAgICAgICAgbGV0IGRlc3RfeCA9IGJvZHkueCArIHR3ZWVuX3g7XG4gICAgICAgICAgICBsZXQgZGVzdF95ID0gYm9keS55ICsgdHdlZW5feTtcbiAgICAgICAgICAgIGlmIChib2R5ID09PSBkYXRhLmhlcm8uc2hhZG93IHx8IGJvZHkgPT09IGRhdGEuaGVyby5zcHJpdGUuYm9keSkge1xuICAgICAgICAgICAgICAgIGlmICh0d2Vlbl94ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RfeCA9IGRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAocHJldl94ICsgZXZlbnRfc2hpZnRfeCArIDAuNSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0d2Vlbl95ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RfeSA9IGRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICogKHByZXZfeSArIGV2ZW50X3NoaWZ0X3kgKyAwLjUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwcm9taXNlX3Jlc29sdmU7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBwcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlOyB9KSlcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfdHdlZW4gPSBnYW1lLmFkZC50d2Vlbihib2R5KS50byh7XG4gICAgICAgICAgICAgICAgeDogZGVzdF94LFxuICAgICAgICAgICAgICAgIHk6IGRlc3RfeVxuICAgICAgICAgICAgfSwgbnVtYmVycy5QVVNIX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xuICAgICAgICAgICAgaWYgKG9uX3B1c2hfdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpc190d2Vlbi5vblVwZGF0ZUNhbGxiYWNrKG9uX3B1c2hfdXBkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNfdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZHJvcF9mb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBzcHJpdGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5vYmplY3RfZHJvcF90aWxlcy5mb3JFYWNoKGRyb3BfdGlsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcF90aWxlLnggPT09IGludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF94ICYmIGRyb3BfdGlsZS55ID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BfZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RfeV9zaGlmdF9weCA9IChkcm9wX3RpbGUuZGVzdF95IC0gaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnRfZXZlbnRzKGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIDAsIGRyb3BfdGlsZS5kZXN0X3kgLSBpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3kgPSBkcm9wX3RpbGUuZGVzdF95O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY2hhbmdlX2NvbGxpZGVyX2xheWVyKGRhdGEsIGRyb3BfdGlsZS5kZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hZGQudHdlZW4oaW50ZXJhY3RhYmxlX29iamVjdC5zcHJpdGUuYm9keSkudG8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBpbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZS5ib2R5LnkgKyBkZXN0X3lfc2hpZnRfcHhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BfdGlsZS5hbmltYXRpb25fZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuSW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRyb3BfdGlsZS5kdXN0X2FuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5oZXJvLmN1cnJlbnRfYWN0aW9uID0gYmFzZV9hY3Rpb25zLklETEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmhlcm8ucGxheShkYXRhLmhlcm8uY3VycmVudF9hY3Rpb24sIHJldmVyc2VfZGlyZWN0aW9uc1tkYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb25dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1c3RfYW5pbWF0aW9uKGdhbWUsIGRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QsIHByb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZHJvcF9mb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBkYXRhLmhlcm8ucHVzaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVuYWJsZV9waHlzaWNzX2F0X2VuZCkge1xuICAgICAgICAgICAgICAgIGdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwdXNoX2VuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcHVzaF9lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaGlmdF9ldmVudHMoZGF0YSwgaW50ZXJhY3RhYmxlX29iamVjdCwgZXZlbnRfc2hpZnRfeCwgZXZlbnRfc2hpZnRfeSkge1xuICAgIGxldCBvYmplY3RfZXZlbnRzID0gaW50ZXJhY3RhYmxlX29iamVjdC5nZXRfZXZlbnRzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3RfZXZlbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCBldmVudCA9IG9iamVjdF9ldmVudHNbaV07XG4gICAgICAgIGRhdGEubWFwLmV2ZW50c1tldmVudC5sb2NhdGlvbl9rZXldID0gZGF0YS5tYXAuZXZlbnRzW2V2ZW50LmxvY2F0aW9uX2tleV0uZmlsdGVyKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGUuaWQgIT09IGV2ZW50LmlkO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRhdGEubWFwLmV2ZW50c1tldmVudC5sb2NhdGlvbl9rZXldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIGRhdGEubWFwLmV2ZW50c1tldmVudC5sb2NhdGlvbl9rZXldO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvbGRfeCA9IGV2ZW50Lng7XG4gICAgICAgIGxldCBvbGRfeSA9IGV2ZW50Lnk7XG4gICAgICAgIGxldCBuZXdfeCA9IG9sZF94ICsgZXZlbnRfc2hpZnRfeDtcbiAgICAgICAgbGV0IG5ld195ID0gb2xkX3kgKyBldmVudF9zaGlmdF95O1xuICAgICAgICBjb25zdCBuZXdfZXZlbnRfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkobmV3X3gsIG5ld195KTtcbiAgICAgICAgZXZlbnQueCA9IG5ld194O1xuICAgICAgICBldmVudC55ID0gbmV3X3k7XG4gICAgICAgIGV2ZW50LmxvY2F0aW9uX2tleSA9IG5ld19ldmVudF9sb2NhdGlvbl9rZXk7XG4gICAgICAgIGlmICghKG5ld19ldmVudF9sb2NhdGlvbl9rZXkgaW4gZGF0YS5tYXAuZXZlbnRzKSkge1xuICAgICAgICAgICAgZGF0YS5tYXAuZXZlbnRzW25ld19ldmVudF9sb2NhdGlvbl9rZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5tYXAuZXZlbnRzW25ld19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2goZXZlbnQpO1xuICAgICAgICBjb25zdCBuZXdfc3Vycm91bmRpbmdzID0gZ2V0X3N1cnJvdW5kaW5ncyhuZXdfeCwgbmV3X3ksIGZhbHNlLCAyKTtcbiAgICAgICAgSnVtcEV2ZW50LmFjdGl2ZV9qdW1wX3N1cnJvdW5kaW5ncyhkYXRhLCBuZXdfc3Vycm91bmRpbmdzLCBpbnRlcmFjdGFibGVfb2JqZWN0LmNvbGxpZGVyX2xheWVyX3NoaWZ0ICsgaW50ZXJhY3RhYmxlX29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIGNvbnN0IG9sZF9zdXJyb3VuZGluZ3MgPSBnZXRfc3Vycm91bmRpbmdzKG9sZF94LCBvbGRfeSwgZmFsc2UsIDIpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9sZF9zdXJyb3VuZGluZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZF9zdXJyb3VuZGluZyA9IG9sZF9zdXJyb3VuZGluZ3Nbal07XG4gICAgICAgICAgICBjb25zdCBvbGRfa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkob2xkX3N1cnJvdW5kaW5nLngsIG9sZF9zdXJyb3VuZGluZy55KTtcbiAgICAgICAgICAgIGlmIChvbGRfa2V5IGluIGRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YS5tYXAuZXZlbnRzW29sZF9rZXldLmxlbmd0aDsgKytrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZF9zdXJyX2V2ZW50ID0gZGF0YS5tYXAuZXZlbnRzW29sZF9rZXldW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkX3N1cnJfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuSlVNUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID0gaW50ZXJhY3RhYmxlX29iamVjdC5jb2xsaWRlcl9sYXllcl9zaGlmdCArIGludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkX3N1cnJfZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLmluY2x1ZGVzKHRhcmdldF9sYXllcikgJiYgb2xkX3N1cnJfZXZlbnQuZHluYW1pYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRfc3Vycl9ldmVudC5kZWFjdGl2YXRlX2F0KGdldF9vcHBvc2l0ZV9kaXJlY3Rpb24ob2xkX3N1cnJvdW5kaW5nLmRpcmVjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkdXN0X2FuaW1hdGlvbihnYW1lLCBkYXRhLCBpbnRlcmFjdGFibGVfb2JqZWN0LCBwcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBuZXcgQXJyYXkoRFVTVF9DT1VOVCk7XG4gICAgbGV0IHNwcml0ZXMgPSBuZXcgQXJyYXkoRFVTVF9DT1VOVCk7XG4gICAgY29uc3Qgb3JpZ2luX3ggPSAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggKyAwLjUpICogZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcbiAgICBjb25zdCBvcmlnaW5feSA9IChpbnRlcmFjdGFibGVfb2JqZWN0LmN1cnJlbnRfeSArIDAuNSkgKiBkYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICBjb25zdCBkdXN0X3Nwcml0ZV9iYXNlID0gZGF0YS5pbmZvLm1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFtEVVNUX0tFWV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBEVVNUX0NPVU5UOyArK2kpIHtcbiAgICAgICAgY29uc3QgdGhpc19hbmdsZSA9IChNYXRoLlBJICsgbnVtYmVycy5kZWdyZWU2MCkgKiBpLyhEVVNUX0NPVU5UIC0gMSkgLSBudW1iZXJzLmRlZ3JlZTMwO1xuICAgICAgICBjb25zdCB4ID0gb3JpZ2luX3ggKyBEVVNUX1JBRElVUyAqIE1hdGguY29zKHRoaXNfYW5nbGUpO1xuICAgICAgICBjb25zdCB5ID0gb3JpZ2luX3kgKyBEVVNUX1JBRElVUyAqIE1hdGguc2luKHRoaXNfYW5nbGUpO1xuICAgICAgICBsZXQgZHVzdF9zcHJpdGUgPSBkYXRhLm5wY19ncm91cC5jcmVhdGUob3JpZ2luX3gsIG9yaWdpbl95LCBEVVNUX0tFWSk7XG4gICAgICAgIGlmICh0aGlzX2FuZ2xlIDwgMCB8fCB0aGlzX2FuZ2xlID4gTWF0aC5QSSkge1xuICAgICAgICAgICAgZGF0YS5ucGNfZ3JvdXAuc2V0Q2hpbGRJbmRleChkdXN0X3Nwcml0ZSwgZGF0YS5ucGNfZ3JvdXAuZ2V0Q2hpbGRJbmRleChpbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGR1c3Rfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgIGdhbWUuYWRkLnR3ZWVuKGR1c3Rfc3ByaXRlKS50byh7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9LCA0MDAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xuICAgICAgICBzcHJpdGVzW2ldID0gZHVzdF9zcHJpdGU7XG4gICAgICAgIGR1c3Rfc3ByaXRlX2Jhc2Uuc2V0QW5pbWF0aW9uKGR1c3Rfc3ByaXRlLCBEVVNUX0tFWSk7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbl9rZXkgPSBkdXN0X3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShEVVNUX0tFWSwgXCJzcHJlYWRcIik7XG4gICAgICAgIGxldCByZXNvbHZlX2Z1bmM7XG4gICAgICAgIHByb21pc2VzW2ldID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuYyA9IHJlc29sdmU7IH0pO1xuICAgICAgICBkdXN0X3Nwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fa2V5KS5vbkNvbXBsZXRlLmFkZE9uY2UocmVzb2x2ZV9mdW5jKTtcbiAgICAgICAgZHVzdF9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1hdGlvbl9rZXkpO1xuICAgIH1cbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgIHNwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgZGF0YS5ucGNfZ3JvdXAucmVtb3ZlKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9taXNlX3Jlc29sdmUoKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgU3ByaXRlQmFzZSB9IGZyb20gJy4uL1Nwcml0ZUJhc2UnO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93JztcblxuY29uc3QgRElBTE9HX0NSWVNUQUxfS0VZID0gXCJkaWFsb2dfY3J5c3RhbFwiO1xuXG4vL0EgZGlhbG9nIGNhbiBiZSBkaXZpZGVkIGluIE4gd2luZG93cy4gRWFjaCBkaXZpc2lvbiBoYXMgYSBzdGVwIGluZGV4LlxuLy9UbyBzZXQgYSBkaWFsb2csIGNhbGwgdGhlIERpYWxvZ01hbmFnZXIuc2V0X2RpYWxvZyBmdW5jdGlvbiBhbmQgcGFzcyB0aGUgZW50aXJlIGRpYWxvZyB0ZXh0LlxuLy9UbyBhZHZhbmNlIHRoZSBkaWFsb2cgKGNhbGwgbmV4dCB3aW5kb3cpLCBjYWxsIHRoZSBEaWFsb2dNYW5hZ2VyLm5leHQgZnVuY3Rpb24uXG5leHBvcnQgY2xhc3MgRGlhbG9nTWFuYWdlciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHBhcnRzOiB7XG4gICAgICAgIGxpbmVzOiBzdHJpbmdbXSxcbiAgICAgICAgd2lkdGg6IG51bWJlcixcbiAgICAgICAgaGVpZ2h0OiBudW1iZXJcbiAgICB9W107XG4gICAgcHVibGljIHN0ZXA6IG51bWJlcjtcbiAgICBwdWJsaWMgZmluaXNoZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGF2YXRhcjogc3RyaW5nO1xuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgYXZhdGFyX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBpdGFsaWNfZm9udDogYm9vbGVhbjtcbiAgICBwdWJsaWMgaGVyb19kaXJlY3Rpb246IG51bWJlcjtcbiAgICBwdWJsaWMgZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2U6IFNwcml0ZUJhc2U7XG4gICAgcHVibGljIGRpYWxvZ19jcnlzdGFsOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBkaWFsb2dfY3J5c3RhbF9hbmltX2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBkaWFsb2dfY3J5c3RhbF90d2VlbjogUGhhc2VyLlR3ZWVuO1xuICAgIHB1YmxpYyBzaG93X2NyeXN0YWw6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBpdGFsaWNfZm9udCA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5pdGFsaWNfZm9udCA9IGl0YWxpY19mb250O1xuXG4gICAgICAgIHRoaXMucGFydHMgPSBudWxsOyAvL3BhcnRzIG9mIHRoZSBkaWFsb2cgdGV4dFxuICAgICAgICB0aGlzLnN0ZXAgPSAwOyAvL3N0ZXAgaW5kZXhcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuYXZhdGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cgPSBudWxsO1xuICAgICAgICB0aGlzLmhlcm9fZGlyZWN0aW9uID0gdXRpbHMuZGlyZWN0aW9ucy5kb3duO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbRElBTE9HX0NSWVNUQUxfS0VZXTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KERJQUxPR19DUllTVEFMX0tFWSk7XG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSgwLCAwLCBzcHJpdGVfa2V5KTtcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF9zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24odGhpcy5kaWFsb2dfY3J5c3RhbCwgRElBTE9HX0NSWVNUQUxfS0VZKTtcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbF9hbmltX2tleSA9IHRoaXMuZGlhbG9nX2NyeXN0YWxfc3ByaXRlX2Jhc2UuZ2V0QW5pbWF0aW9uS2V5KERJQUxPR19DUllTVEFMX0tFWSwgXCJyb3RhdGVcIik7XG5cbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gPSBudWxsO1xuICAgICAgICB0aGlzLnNob3dfY3J5c3RhbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpe1xuICAgICAgICBpZih0aGlzLmF2YXRhcil7XG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cudXBkYXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvL0ludGVybmFsIG1ldGhvZC4gVHJ5IHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRpYWxvZyB3aW5kb3dcbiAgICBnZXRfZGlhbG9nX3dpbmRvd19wb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHggPSAobnVtYmVycy5HQU1FX1dJRFRIIC0gd2lkdGgpID4+IDE7XG4gICAgICAgIGxldCB5ID0gKG51bWJlcnMuTUFYX0RJQUdfV0lOX0hFSUdIVCAtIGhlaWdodCkgPj4gMTtcbiAgICAgICAgaWYgKCFbdXRpbHMuZGlyZWN0aW9ucy51cCwgdXRpbHMuZGlyZWN0aW9ucy51cF9sZWZ0LCB1dGlscy5kaXJlY3Rpb25zLnVwX3JpZ2h0XS5pbmNsdWRlcyh0aGlzLmhlcm9fZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgeSA9IG51bWJlcnMuR0FNRV9IRUlHSFQgLSAobnVtYmVycy5NQVhfRElBR19XSU5fSEVJR0hUICsgNCkgKyB5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7eDogeCwgeTogeX07XG4gICAgfVxuXG4gICAgLy9JbnRlcm5hbCBtZXRob2QuIFRyeSB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBhdmF0YXIgd2luZG93XG4gICAgZ2V0X2F2YXRhcl9wb3NpdGlvbih3aW5fcG9zKSB7XG4gICAgICAgIGNvbnN0IHggPSAoKHRoaXMucGFydHNbdGhpcy5zdGVwXS53aWR0aCA+PiAyKSArIHdpbl9wb3MueCkgfCAwO1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgaWYgKHdpbl9wb3MueSA+PSBudW1iZXJzLkdBTUVfSEVJR0hUID4+IDEpIHtcbiAgICAgICAgICAgIHkgPSB3aW5fcG9zLnkgLSBudW1iZXJzLkFWQVRBUl9TSVpFIC0gODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkgPSB3aW5fcG9zLnkgKyB0aGlzLnBhcnRzW3RoaXMuc3RlcF0uaGVpZ2h0ICsgNDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3g6IHgsIHk6IHl9O1xuICAgIH1cblxuICAgIC8vc2V0IGN1cnJlbnQgYXZhdGFyIGtleSBuYW1lXG4gICAgc2V0X2F2YXRhcihhdmF0YXIpIHtcbiAgICAgICAgdGhpcy5hdmF0YXIgPSBhdmF0YXI7XG4gICAgfVxuXG4gICAgLy9zZXQgY3VycmVudCBoZXJvIGRpcmVjdGlvblxuICAgIHNldF9oZXJvX2RpcmVjdGlvbihoZXJvX2RpcmVjdGlvbikge1xuICAgICAgICBpZiAoaGVyb19kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5oZXJvX2RpcmVjdGlvbiA9IGhlcm9fZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9DYWxscyB0aGUgbmV4dCBkaWFsb2cgd2luZG93LiBJZiB0aGUgZGlhbG9nIGlzIGZpbmlzaGVkLCB0aGlzIGZ1bmN0aW9uIHBhc3NlcyB0cnVlIHRvIHRoZSBjYWxsYmFjay5cbiAgICBuZXh0KGNhbGxiYWNrLCBjdXN0b21fcG9zLCBjdXN0b21fYXZhdGFyX3Bvcykge1xuICAgICAgICBpZiAodGhpcy5hdmF0YXJfd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmF2YXRhcl93aW5kb3cgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0ZXAgPj0gdGhpcy5wYXJ0cy5sZW5ndGgpIHsgLy9maW5pc2hlcyB0aGUgZGlhbG9nXG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRlc3Ryb3kodHJ1ZSwgY2FsbGJhY2suYmluZCh0aGlzLCB0aGlzLmZpbmlzaGVkKSk7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZ19jcnlzdGFsLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53aW5kb3cpIHsgLy9kZXN0cm95cyB0aGUgY3VycmVudCB3aW5kb3dcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KGNhbGxiYWNrLCBjdXN0b21fcG9zLCBjdXN0b21fYXZhdGFyX3Bvcyk7XG4gICAgICAgICsrdGhpcy5zdGVwO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdyhjYWxsYmFjaywgY3VzdG9tX3BvcywgY3VzdG9tX2F2YXRhcl9wb3MpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGxldCB3aW5fcG9zID0gdGhpcy5nZXRfZGlhbG9nX3dpbmRvd19wb3NpdGlvbih0aGlzLnBhcnRzW3RoaXMuc3RlcF0ud2lkdGgsIHRoaXMucGFydHNbdGhpcy5zdGVwXS5oZWlnaHQpO1xuICAgICAgICBpZiAoY3VzdG9tX3BvcyAmJiBjdXN0b21fcG9zLnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luX3Bvcy54ID0gY3VzdG9tX3Bvcy54O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXN0b21fcG9zICYmIGN1c3RvbV9wb3MueSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aW5fcG9zLnkgPSBjdXN0b21fcG9zLnk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgd2luX3Bvcy54LCB3aW5fcG9zLnksIHRoaXMucGFydHNbdGhpcy5zdGVwXS53aWR0aCwgdGhpcy5wYXJ0c1t0aGlzLnN0ZXBdLmhlaWdodCwgZmFsc2UpO1xuICAgICAgICB0aGlzLndpbmRvdy5zaG93KCgoc3RlcCwgaXRhbGljX2ZvbnQsIG5leHRfY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93LnNldF90ZXh0KHRoaXMucGFydHNbc3RlcF0ubGluZXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQgLCBpdGFsaWNfZm9udCwgdHJ1ZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPCB0aGlzLnBhcnRzLmxlbmd0aCAtIDEgfHwgdGhpcy5zaG93X2NyeXN0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC54ID0gdGhpcy53aW5kb3cucmVhbF94ICsgdGhpcy5wYXJ0c1tzdGVwXS53aWR0aCAtIHRoaXMuZGlhbG9nX2NyeXN0YWwud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWwueSA9IHRoaXMud2luZG93LnJlYWxfeSArIHRoaXMucGFydHNbc3RlcF0uaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmRpYWxvZ19jcnlzdGFsLnBhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnNldENoaWxkSW5kZXgodGhpcy5kaWFsb2dfY3J5c3RhbCwgcGFyZW50LmdldENoaWxkSW5kZXgodGhpcy53aW5kb3cuZ3JvdXApKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2dfY3J5c3RhbC5wbGF5KHRoaXMuZGlhbG9nX2NyeXN0YWxfYW5pbV9rZXkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0d2Vlbl90b195ID0gW3RoaXMuZGlhbG9nX2NyeXN0YWwueSAtICh0aGlzLmRpYWxvZ19jcnlzdGFsLmhlaWdodCA+PiAxKSwgdGhpcy5kaWFsb2dfY3J5c3RhbC55XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gJiYgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4uc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gPSB0aGlzLmdhbWUudHdlZW5zLmNyZWF0ZSh0aGlzLmRpYWxvZ19jcnlzdGFsKS50byh7eTogdHdlZW5fdG9feX0sIDE0MDAsIFBoYXNlci5FYXNpbmcuUXVhZHJhdGljLkluT3V0LCB0cnVlLCAwLCAtMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4gJiYgdGhpcy5kaWFsb2dfY3J5c3RhbF90d2Vlbi5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nX2NyeXN0YWxfdHdlZW4uc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKG5leHRfY2FsbGJhY2spIG5leHRfY2FsbGJhY2sodGhpcy5maW5pc2hlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkuYmluZCh0aGlzLCB0aGlzLnN0ZXAsIHRoaXMuaXRhbGljX2ZvbnQsIGNhbGxiYWNrKSk7XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcikge1xuICAgICAgICAgICAgbGV0IGF2YXRhcl9wb3MgPSB0aGlzLmdldF9hdmF0YXJfcG9zaXRpb24od2luX3Bvcyk7XG4gICAgICAgICAgICBpZiAoY3VzdG9tX2F2YXRhcl9wb3MgJiYgY3VzdG9tX2F2YXRhcl9wb3MueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXZhdGFyX3Bvcy54ID0gY3VzdG9tX2F2YXRhcl9wb3MueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXN0b21fYXZhdGFyX3BvcyAmJiBjdXN0b21fYXZhdGFyX3Bvcy55ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhdmF0YXJfcG9zLnkgPSBjdXN0b21fYXZhdGFyX3Bvcy55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2luZG93X3NpemUgPSBudW1iZXJzLkFWQVRBUl9TSVpFICsgNDtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBhdmF0YXJfcG9zLngsIGF2YXRhcl9wb3MueSwgd2luZG93X3NpemUsIHdpbmRvd19zaXplKTtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoNCwgNCwgXCJhdmF0YXJzXCIsIHVuZGVmaW5lZCwgdGhpcy5hdmF0YXIpO1xuICAgICAgICAgICAgdGhpcy5hdmF0YXJfd2luZG93LnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vUmVjZWl2ZXMgYSB0ZXh0IHN0cmluZyBhbmQgbW91bnQgdGhlIHRoZSBkaWFsb2cgc2VjdGlvbnMgdGhhdCB3aWxsIGdvIHRvIGVhY2ggd2luZG93IG9mIHRoZSBkaWFsb2cuXG4gICAgLy9PcHRpb25hbGx5LCBhbHNvIHJlY2VpdmVzIGFuIGluaXRpYWwgYXZhdGFyIGFuZCB0aGUgaGVybyB0YWxraW5nIGRpcmVjdGlvblxuICAgIHNldF9kaWFsb2codGV4dCwgYXZhdGFyLCBoZXJvX2RpcmVjdGlvbikge1xuICAgICAgICB0aGlzLnNldF9hdmF0YXIoYXZhdGFyKTtcbiAgICAgICAgdGhpcy5zZXRfaGVyb19kaXJlY3Rpb24oaGVyb19kaXJlY3Rpb24pO1xuICAgICAgICBjb25zdCBtYXhfZWZlY3RpdmVfd2lkdGggPSBudW1iZXJzLk1BWF9ESUFHX1dJTl9XSURUSCAtIDIgKiBudW1iZXJzLldJTkRPV19QQURESU5HX0ggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEg7XG4gICAgICAgIGxldCB3b3JkcyA9IHRleHQuc3BsaXQoJyAnKTtcbiAgICAgICAgbGV0IHdpbmRvd3MgPSBbXTsgLy9hcnJheSBvZiBsaW5lc1xuICAgICAgICBsZXQgbGluZXMgPSBbXTsgLy9hcnJheSBvZiBzdHJpbmdzXG4gICAgICAgIGxldCBsaW5lID0gW107IC8vYXJyYXkgb2Ygd29yZHNcbiAgICAgICAgbGV0IGxpbmVfd2lkdGggPSAwOyAvL2luIHB4XG4gICAgICAgIGxldCBtYXhfd2luZG93X3dpZHRoID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgICAgICAgbGluZV93aWR0aCA9IHV0aWxzLmdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgbGluZS5qb2luKCcgJykgKyB3b3JkLCB0aGlzLml0YWxpY19mb250KTtcbiAgICAgICAgICAgIGlmIChsaW5lX3dpZHRoID49IG1heF9lZmVjdGl2ZV93aWR0aCkgeyAvL2NoZWNrIGlmIGl0J3MgdGhlIGVuZCBvZiB0aGUgbGluZVxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVfdGV4dCA9IGxpbmUuam9pbignICcpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2gobGluZV90ZXh0KTtcbiAgICAgICAgICAgICAgICBtYXhfd2luZG93X3dpZHRoID0gTWF0aC5tYXgobWF4X3dpbmRvd193aWR0aCwgdXRpbHMuZ2V0X3RleHRfd2lkdGgodGhpcy5nYW1lLCBsaW5lX3RleHQsIHRoaXMuaXRhbGljX2ZvbnQpKTtcbiAgICAgICAgICAgICAgICBsaW5lID0gW107XG4gICAgICAgICAgICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgICAgICAgICAgIGxpbmVfd2lkdGggPSB1dGlscy5nZXRfdGV4dF93aWR0aCh0aGlzLmdhbWUsIHdvcmQsIHRoaXMuaXRhbGljX2ZvbnQpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPT09IG51bWJlcnMuTUFYX0xJTkVTX1BFUl9ESUFHX1dJTikgeyAvL2NoZWNrIGlmIGl0J3MgdGhlIGVuZCBvZiB0aGUgd2luZG93XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lczogbGluZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBtYXhfd2luZG93X3dpZHRoICsgMiAqIG51bWJlcnMuV0lORE9XX1BBRERJTkdfSCArIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogbnVtYmVycy5XSU5ET1dfUEFERElOR19UT1AgKyBudW1iZXJzLldJTkRPV19QQURESU5HX0JPVFRPTSArIGxpbmVzLmxlbmd0aCAqIChudW1iZXJzLkZPTlRfU0laRSArIG51bWJlcnMuU1BBQ0VfQkVUV0VFTl9MSU5FUykgLSBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG1heF93aW5kb3dfd2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICBsaW5lcyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCkgeyAvL2RlYWwgd2l0aCB0aGUgbGFzdCB3aW5kb3cgdGhhdCBkb2VzIG5vdCBoYXZlIDMgbGluZXNcbiAgICAgICAgICAgIG1heF93aW5kb3dfd2lkdGggPSBNYXRoLm1heChtYXhfd2luZG93X3dpZHRoLCB1dGlscy5nZXRfdGV4dF93aWR0aCh0aGlzLmdhbWUsIGxpbmUuam9pbignICcpLCB0aGlzLml0YWxpY19mb250KSk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUuam9pbignICcpKTtcbiAgICAgICAgICAgIHdpbmRvd3MucHVzaCh7XG4gICAgICAgICAgICAgICAgbGluZXM6IGxpbmVzLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgd2lkdGg6IG1heF93aW5kb3dfd2lkdGggKyAyICogbnVtYmVycy5XSU5ET1dfUEFERElOR19IICsgbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgMixcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG51bWJlcnMuV0lORE9XX1BBRERJTkdfVE9QICsgbnVtYmVycy5XSU5ET1dfUEFERElOR19CT1RUT00gKyBsaW5lcy5sZW5ndGggKiAobnVtYmVycy5GT05UX1NJWkUgKyBudW1iZXJzLlNQQUNFX0JFVFdFRU5fTElORVMpIC0gbnVtYmVycy5TUEFDRV9CRVRXRUVOX0xJTkVTXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IHdpbmRvd3M7XG4gICAgfVxuXG4gICAgLy9DYWxscyBhIHdpbmRvdyBhbmQgbGV0IGl0IG9wZW4gdGlsbCB5b3UgY2FsbCBxdWlja19uZXh0IGFnYWluIG9yIGNhbGwga2lsbF9kaWFsb2cuIElzIGV4cGVjdGVkIHRoYXQgdGV4dCBmaXRzIGluIG9uZSB3aW5kb3cuXG4gICAgcXVpY2tfbmV4dCh0ZXh0LCBjYWxsYmFjaywgYXZhdGFyLCBoZXJvX2RpcmVjdGlvbiwgY3VzdG9tX3BvcywgY3VzdG9tX2F2YXRhcl9wb3MsIHNob3dfY3J5c3RhbCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucGFydHMgPSBudWxsO1xuICAgICAgICB0aGlzLnN0ZXAgPSAwO1xuICAgICAgICBpZiAodGhpcy53aW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXMud2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcl93aW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93X2NyeXN0YWwgPSBzaG93X2NyeXN0YWw7XG4gICAgICAgIHRoaXMuc2V0X2RpYWxvZyh0ZXh0LCBhdmF0YXIsIGhlcm9fZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coY2FsbGJhY2ssIGN1c3RvbV9wb3MsIGN1c3RvbV9hdmF0YXJfcG9zKTtcbiAgICB9XG5cbiAgICBraWxsX2RpYWxvZyhjYWxsYmFjaywgZGlhbG9nX29ubHk9ZmFsc2UsIGRlc3Ryb3lfY3J5c3RhbD1mYWxzZSkge1xuICAgICAgICBpZighZGlhbG9nX29ubHkpe1xuICAgICAgICAgICAgaWYgKHRoaXMuYXZhdGFyX3dpbmRvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuYXZhdGFyX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy53aW5kb3cpIHtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuZGVzdHJveSh0cnVlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICBpZihkZXN0cm95X2NyeXN0YWwpIHRoaXMuZGlhbG9nX2NyeXN0YWwuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3ByaXRlQmFzZSB9IGZyb20gJy4vU3ByaXRlQmFzZSc7XG5pbXBvcnQgeyBldmVudF90eXBlcyBhcyBnYW1lX2V2ZW50X3R5cGVzLCBHYW1lRXZlbnQgfSBmcm9tIFwiLi9nYW1lX2V2ZW50cy9HYW1lRXZlbnRcIjtcbmltcG9ydCB7IG1vdW50X2NvbGxpc2lvbl9wb2x5Z29uIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBDb250cm9sbGFibGVDaGFyIH0gZnJvbSAnLi9Db250cm9sbGFibGVDaGFyJztcbmltcG9ydCB7IEJhdHRsZUV2ZW50IH0gZnJvbSAnLi9nYW1lX2V2ZW50cy9CYXR0bGVFdmVudCc7XG5cbmV4cG9ydCBjbGFzcyBOUENfU3ByaXRlIGV4dGVuZHMgU3ByaXRlQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKGtleV9uYW1lLCBhY3Rpb25zKSB7XG4gICAgICAgIHN1cGVyKGtleV9uYW1lLCBhY3Rpb25zKTtcbiAgICB9XG59XG5cbmNvbnN0IE5QQ19UQUxLX1JBTkdFID0gMy4wO1xuXG5leHBvcnQgY29uc3QgbnBjX21vdmVtZW50X3R5cGVzID0ge1xuICAgIElETEU6IFwiaWRsZVwiLFxuICAgIFdBTEtfQVJPVU5EOiBcIndhbGtfYXJvdW5kXCJcbn07XG5cbmV4cG9ydCBjb25zdCBucGNfdHlwZXMgPSB7XG4gICAgTk9STUFMOiBcIm5vcm1hbFwiLFxuICAgIElOTjogXCJpbm5cIixcbiAgICBTSE9QOiBcInNob3BcIlxufTtcblxuZXhwb3J0IGNsYXNzIE5QQyBleHRlbmRzIENvbnRyb2xsYWJsZUNoYXIge1xuICAgIHB1YmxpYyBtb3ZlbWVudF90eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIG5wY190eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZztcbiAgICBwdWJsaWMgdGhvdWdodF9tZXNzYWdlOiBzdHJpbmc7XG4gICAgcHVibGljIGF2YXRhcjogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXNlX2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyB0YWxrX3JhbmdlX2ZhY3RvcjogbnVtYmVyO1xuICAgIHB1YmxpYyBldmVudHM6IEdhbWVFdmVudFtdO1xuICAgIHB1YmxpYyBzaG9wX2tleTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBpbml0aWFsX3gsXG4gICAgICAgIGluaXRpYWxfeSxcbiAgICAgICAgaW5pdGlhbF9hY3Rpb24sXG4gICAgICAgIGluaXRpYWxfZGlyZWN0aW9uLFxuICAgICAgICBlbmFibGVfZm9vdHN0ZXBzLFxuICAgICAgICBucGNfdHlwZSxcbiAgICAgICAgbW92ZW1lbnRfdHlwZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgdGhvdWdodF9tZXNzYWdlLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIHNob3Bfa2V5LFxuICAgICAgICBiYXNlX2NvbGxpc2lvbl9sYXllcixcbiAgICAgICAgdGFsa19yYW5nZV9mYWN0b3IsXG4gICAgICAgIGV2ZW50c19pbmZvXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGtleV9uYW1lLCBpbml0aWFsX3gsIGluaXRpYWxfeSwgaW5pdGlhbF9hY3Rpb24sIGluaXRpYWxfZGlyZWN0aW9uLCBlbmFibGVfZm9vdHN0ZXBzKTtcbiAgICAgICAgdGhpcy5ucGNfdHlwZSA9IG5wY190eXBlO1xuICAgICAgICB0aGlzLm1vdmVtZW50X3R5cGUgPSBtb3ZlbWVudF90eXBlO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLnRob3VnaHRfbWVzc2FnZSA9IHRob3VnaHRfbWVzc2FnZTtcbiAgICAgICAgdGhpcy5hdmF0YXIgPSBhdmF0YXI7XG4gICAgICAgIHRoaXMuc2hvcF9rZXkgPSBzaG9wX2tleTtcbiAgICAgICAgdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciA9IGJhc2VfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLnRhbGtfcmFuZ2VfZmFjdG9yID0gdGFsa19yYW5nZV9mYWN0b3IgPT09IHVuZGVmaW5lZCA/IE5QQ19UQUxLX1JBTkdFIDogdGFsa19yYW5nZV9mYWN0b3I7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgICAgIHRoaXMuc2V0X2V2ZW50cyhldmVudHNfaW5mbyk7XG4gICAgfVxuXG4gICAgc2V0X3Nwcml0ZV9hc19ucGMoKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlLmlzX25wYyA9IHRydWU7XG4gICAgfVxuXG4gICAgc2V0X2V2ZW50cyhldmVudHNfaW5mbykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50c19pbmZvLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudF9pbmZvID0gZXZlbnRzX2luZm9baV07XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50X2luZm8udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgZ2FtZV9ldmVudF90eXBlcy5CQVRUTEU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2gobmV3IEJhdHRsZUV2ZW50KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCBldmVudF9pbmZvLmJhY2tncm91bmRfa2V5LCBldmVudF9pbmZvLmVuZW15X3BhcnR5X2tleSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRfdHlwZSA9PT0gbnBjX21vdmVtZW50X3R5cGVzLklETEUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jaGFyKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZV9zaGFkb3coKTtcbiAgICB9XG5cbiAgICBjb25maWdfYm9keShjb2xsaXNpb25fb2JqKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLmVuYWJsZSh0aGlzLnNwcml0ZSwgZmFsc2UpO1xuICAgICAgICAvL0ltcG9ydGFudCB0byBiZSBhZnRlciB0aGUgcHJldmlvdXMgY29tbWFuZFxuICAgICAgICBpZiAodGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKCd4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMubnBjX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci55ID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3k7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0X2FuY2hvcigneScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgdGhpcy5ib2R5X3JhZGl1cyA9IHRoaXMuZGF0YS5kYnMubnBjX2RiW3RoaXMua2V5X25hbWVdLmJvZHlfcmFkaXVzO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuYm9keV9yYWRpdXMgPDwgMTtcbiAgICAgICAgY29uc3QgcG9seWdvbiA9IG1vdW50X2NvbGxpc2lvbl9wb2x5Z29uKHdpZHRoLCAtKHdpZHRoID4+IDEpLCB0aGlzLmRhdGEuZGJzLm5wY19kYlt0aGlzLmtleV9uYW1lXS5jb2xsaXNpb25fYm9keV9iZXZlbCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuYWRkUG9seWdvbih7XG4gICAgICAgICAgICAgICAgb3B0aW1hbERlY29tcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2tpcFNpbXBsZUNoZWNrOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlbW92ZUNvbGxpbmVhclBvaW50czogZmFsc2VcbiAgICAgICAgfSwgcG9seWdvbik7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5ucGNfY29sbGlzaW9uX2dyb3Vwc1t0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZGFtcGluZyA9IDE7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuYW5ndWxhckRhbXBpbmcgPSAxO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnNldFplcm9Sb3RhdGlvbigpO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmZpeGVkUm90YXRpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zdGF0aWMgPSB0cnVlO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IHJhbmdlXzM2MCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGFiaWxpdHlfdGFyZ2V0X3R5cGVzIH0gZnJvbSAnLi4vQWJpbGl0eSc7XG5pbXBvcnQgeyBmaWdodGVyX3R5cGVzLCBwZXJtYW5lbnRfc3RhdHVzLCBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IFBsYXllckluZm8gfSBmcm9tICcuL0JhdHRsZSc7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgU0NBTEVfRkFDVE9SID0gMC44MzM0O1xuY29uc3QgQkdfWCA9IDA7XG5jb25zdCBCR19ZID0gMTc7XG5jb25zdCBCR19IRUlHSFQgPSAxMjA7XG5jb25zdCBDRU5URVJfWCA9IG51bWJlcnMuR0FNRV9XSURUSCA+PiAxO1xuY29uc3QgQ0VOVEVSX1kgPSBudW1iZXJzLkdBTUVfSEVJR0hUIC0gMzU7XG5jb25zdCBDQU1FUkFfU1BFRUQgPSAwLjAwOSAqIE1hdGguUEk7XG5jb25zdCBCR19TUEVFRCA9IDIuNDtcbmNvbnN0IEJHX1NQSU5fU1BFRUQgPSAwLjQ7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0NIQVJTID0gMzU7XG5jb25zdCBTRU1JX01BSk9SX0FYSVMgPSBudW1iZXJzLkdBTUVfV0lEVEgvMiAtIDUwO1xuY29uc3QgU0VNSV9NSU5PUl9BWElTID0gbnVtYmVycy5HQU1FX0hFSUdIVC81MDtcbmNvbnN0IElOSVRfVElNRSA9IDE1MDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9QT1NfQU5HTEUgPSAwLjc1NTEzMjc7XG5jb25zdCBJTklUSUFMX1BPU19BTkdMRSA9IC0yLjEyMDU3NTtcbmNvbnN0IElOSVRJQUxfU0NBTEUgPSAxLjI7XG5jb25zdCBCR19ERUZBVUxUX1NDQUxFID0gMS4wO1xuY29uc3QgQUNUSU9OX1BPU19CR19TQ0FMRSA9IDI7XG5jb25zdCBBQ1RJT05fUE9TX0FMTFlfWCA9IDg4O1xuY29uc3QgQUNUSU9OX1BPU19FTkVNWV9DRU5URVJfWCA9IDEwNjtcbmNvbnN0IEFDVElPTl9BTExZX1kgPSAxNjA7XG5jb25zdCBBQ1RJT05fRU5FTVlfWSA9IDk4O1xuY29uc3QgQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOID0gNDA7XG5jb25zdCBBQ1RJT05fUE9TX1NDQUxFX0FERCA9IDAuMjtcbmNvbnN0IENIT09TRV9UQVJHRVRfRU5FTVlfU0hJRlQgPSAxNTtcbmNvbnN0IENIT09TRV9UQVJHRVRfQUxMWV9TSElGVCA9IC0zO1xuY29uc3QgQ0hPT1NFX1RBUkdFVF9SSUdIVCA9IDE7XG5jb25zdCBDSE9PU0VfVEFSR0VUX0xFRlQgPSAtMTtcbmNvbnN0IFJBTkdFUyA9IFsxMSw5LDcsNSwzLDEsMyw1LDcsOSwxMV07XG5jb25zdCBCQVRUTEVfQ1VSU09SX1NDQUxFUyA9IFsuMSwuMiwuMywuNCwuNiwxLC42LC40LC4zLC4yLC4xXTtcbmNvbnN0IENIT09TSU5HX1RBUkdFVF9TQ1JFRU5fU0hJRlRfVElNRSA9IDE1MDtcblxuZXhwb3J0IHR5cGUgQ2FtZXJhQW5nbGUgPSB7XG4gICAgcmFkOiBudW1iZXIsXG4gICAgc3BpbmluZzogYm9vbGVhbixcbiAgICB1cGRhdGU6IEZ1bmN0aW9uXG59O1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlU3RhZ2Uge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgY2FtZXJhX2FuZ2xlOiBDYW1lcmFBbmdsZTtcbiAgICBwdWJsaWMgYmFja2dyb3VuZF9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgb2xkX2NhbWVyYV9hbmdsZTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXR0bGVfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgY3JvcF9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBncm91cF9lbmVtaWVzOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGdyb3VwX2FsbGllczogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBhbGxpZXNfaW5mbzogUGxheWVySW5mb1tdO1xuICAgIHB1YmxpYyBlbmVtaWVzX2luZm86IFBsYXllckluZm9bXTtcbiAgICBwdWJsaWMgYWxsaWVzX2NvdW50OiBudW1iZXI7XG4gICAgcHVibGljIGVuZW1pZXNfY291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgc2hpZnRfZnJvbV9taWRkbGVfZW5lbXk6IG51bWJlcjtcbiAgICBwdWJsaWMgc2hpZnRfZnJvbV9taWRkbGVfYWxseTogbnVtYmVyO1xuICAgIHB1YmxpYyBzcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBjaG9vc2VfdGltZXJfcmVwZWF0OiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIGNob29zZV90aW1lcl9zdGFydDogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBzaWduYWxfYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW107XG4gICAgcHVibGljIGNob29zaW5nX2FjdGlvbnM6IGJvb2xlYW47XG4gICAgcHVibGljIGNob29zaW5nX3RhcmdldHM6IGJvb2xlYW47XG4gICAgcHVibGljIHJpZ2h0X3ByZXNzZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxlZnRfcHJlc3NlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgdGFyZ2V0X3R5cGU6IHN0cmluZztcbiAgICBwdWJsaWMgYWJpbGl0eV9jYXN0ZXI6IFBsYXllcjtcbiAgICBwdWJsaWMgYmxhY2tfYmc6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgYmF0dGxlX2JnOiBQaGFzZXIuVGlsZVNwcml0ZTtcbiAgICBwdWJsaWMgYmF0dGxlX2JnMjogUGhhc2VyLlRpbGVTcHJpdGU7XG4gICAgcHVibGljIHVwcGVyX3JlY3Q6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgbG93ZXJfcmVjdDogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBmaXJzdF9hbGx5X2NoYXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGxhc3RfYWxseV9jaGFyOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBmaXJzdF9lbmVteV9jaGFyOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBsYXN0X2VuZW15X2NoYXI6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGNob29zaW5nX3RhcmdldHNfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyByYW5nZV9jdXJzb3JfcG9zaXRpb246IG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV9yYW5nZTogc3RyaW5nfG51bWJlcjtcbiAgICBwdWJsaWMgYWJpbGl0eV90eXBlOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnNvcnNfdHdlZW5zOiBQaGFzZXIuVHdlZW5bXTtcbiAgICBwdWJsaWMgY3Vyc29yczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBiZ19oZWlnaHQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGJhY2tncm91bmRfa2V5LCBhbGxpZXNfaW5mbywgZW5lbWllc19pbmZvLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5O1xuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk7XG4gICAgICAgIHRoaXMuY2FtZXJhX2FuZ2xlID0ge1xuICAgICAgICAgICAgcmFkIDogSU5JVElBTF9QT1NfQU5HTEUsXG4gICAgICAgICAgICBzcGluaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHVwZGF0ZTogdGhpcy51cGRhdGVfc3ByaXRlX3Byb3BlcnRpZXMuYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmJhY2tncm91bmRfa2V5ID0gYmFja2dyb3VuZF9rZXk7XG4gICAgICAgIHRoaXMub2xkX2NhbWVyYV9hbmdsZSA9IHRoaXMuY2FtZXJhX2FuZ2xlLnJhZDtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuY3JvcF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cF9lbmVtaWVzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwX2FsbGllcyA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5hbGxpZXNfaW5mbyA9IGFsbGllc19pbmZvO1xuICAgICAgICB0aGlzLmVuZW1pZXNfaW5mbyA9IGVuZW1pZXNfaW5mbztcbiAgICAgICAgdGhpcy5hbGxpZXNfY291bnQgPSBhbGxpZXNfaW5mby5sZW5ndGg7XG4gICAgICAgIHRoaXMuZW5lbWllc19jb3VudCA9IGVuZW1pZXNfaW5mby5sZW5ndGg7XG4gICAgICAgIHRoaXMuc2hpZnRfZnJvbV9taWRkbGVfZW5lbXkgPSBTUEFDRV9CRVRXRUVOX0NIQVJTICogdGhpcy5lbmVtaWVzX2NvdW50ICogMC41O1xuICAgICAgICB0aGlzLnNoaWZ0X2Zyb21fbWlkZGxlX2FsbHkgPSBTUEFDRV9CRVRXRUVOX0NIQVJTICogdGhpcy5hbGxpZXNfY291bnQgKiAwLjU7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAueCA9IHRoaXMueDtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAueSA9IHRoaXMueTtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuc2NhbGUuc2V0VG8oSU5JVElBTF9TQ0FMRSwgSU5JVElBTF9TQ0FMRSk7XG4gICAgICAgIHRoaXMuY3JvcF9ncm91cC54ID0gdGhpcy54O1xuICAgICAgICB0aGlzLmNyb3BfZ3JvdXAueSA9IHRoaXMueTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaG9vc2luZ190YXJnZXRzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF90YXJnZXRzKCk7XG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hvb3NpbmdfdGFyZ2V0cykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19maW5pc2hlZChudWxsKTtcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hvb3NpbmdfdGFyZ2V0cykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRfcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhDSE9PU0VfVEFSR0VUX1JJR0hUKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hvb3NpbmdfdGFyZ2V0cyB8fCAhdGhpcy5yaWdodF9wcmVzc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hvb3NpbmdfdGFyZ2V0cykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0X3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoQ0hPT1NFX1RBUkdFVF9MRUZUKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuTEVGVCkub25VcC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaG9vc2luZ190YXJnZXRzIHx8ICF0aGlzLmxlZnRfcHJlc3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBzZXRfdGFyZ2V0cygpIHtcbiAgICAgICAgbGV0IHBhcnR5X2NvdW50LCBwYXJ0eV9pbmZvO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudGFyZ2V0X3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV90YXJnZXRfdHlwZXMuQUxMWTpcbiAgICAgICAgICAgICAgICBwYXJ0eV9jb3VudCA9IHRoaXMuYWxsaWVzX2NvdW50O1xuICAgICAgICAgICAgICAgIHBhcnR5X2luZm8gPSB0aGlzLmFsbGllc19pbmZvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X3RhcmdldF90eXBlcy5FTkVNWTpcbiAgICAgICAgICAgICAgICBwYXJ0eV9jb3VudCA9IHRoaXMuZW5lbWllc19jb3VudDtcbiAgICAgICAgICAgICAgICBwYXJ0eV9pbmZvID0gdGhpcy5lbmVtaWVzX2luZm87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfdGFyZ2V0X3R5cGVzLlVTRVI6XG4gICAgICAgICAgICAgICAgcGFydHlfY291bnQgPSB0aGlzLmFiaWxpdHlfY2FzdGVyLmZpZ2h0ZXJfdHlwZSA9PT0gZmlnaHRlcl90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfY291bnQgOiB0aGlzLmVuZW1pZXNfY291bnQ7XG4gICAgICAgICAgICAgICAgcGFydHlfaW5mbyA9IHRoaXMuYWJpbGl0eV9jYXN0ZXIuZmlnaHRlcl90eXBlID09PSBmaWdodGVyX3R5cGVzLkVORU1ZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBfLnppcFdpdGgoXG4gICAgICAgICAgICBSQU5HRVMuc2xpY2UodGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gLSAocGFydHlfY291bnQ+PjEpLCB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiArIChwYXJ0eV9jb3VudD4+MSkgKyAxKS5yZXZlcnNlKCksXG4gICAgICAgICAgICBwYXJ0eV9pbmZvLFxuICAgICAgICAgICAgKG1hZ25pdHVkZSwgdGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHttYWduaXR1ZGU6IG1hZ25pdHVkZSA+IHRoaXMuYWJpbGl0eV9yYW5nZSA/IG51bGwgOiBtYWduaXR1ZGUsIHRhcmdldDogdGFyZ2V0fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLlVTRVIpIHtcbiAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19jYWxsYmFjayh0YXJnZXRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19maW5pc2hlZCh0YXJnZXRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3BfdGltZXJzKCkge1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdG9wKCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdG9wKCk7XG4gICAgfVxuXG4gICAgc2V0X2NoYW5nZV90aW1lcnMoc3RlcCkge1xuICAgICAgICB0aGlzLmNoYW5nZV90YXJnZXQoc3RlcCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmFkZChQaGFzZXIuVGltZXIuUVVBUlRFUiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0Lmxvb3AoUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSwgdGhpcy5jaGFuZ2VfdGFyZ2V0LmJpbmQodGhpcywgc3RlcCkpO1xuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0YXJ0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdGFydCgpO1xuICAgIH1cblxuICAgIGNoYW5nZV90YXJnZXQoc3RlcCwgdHdlZW5fdG9fcG9zID0gdHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuRU5FTVkpIHtcbiAgICAgICAgICAgIHN0ZXAgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3JvdXBfaW5mbyA9IHRoaXMudGFyZ2V0X3R5cGUgPT09IGFiaWxpdHlfdGFyZ2V0X3R5cGVzLkFMTFkgPyB0aGlzLmFsbGllc19pbmZvIDogdGhpcy5lbmVtaWVzX2luZm87XG4gICAgICAgIGNvbnN0IGdyb3VwX2xlbmd0aCA9IGdyb3VwX2luZm8ubGVuZ3RoO1xuICAgICAgICBjb25zdCBncm91cF9oYWxmX2xlbmd0aCA9IGdyb3VwX2xlbmd0aCAlIDIgPyBncm91cF9sZW5ndGggPj4gMSA6IChncm91cF9sZW5ndGggPj4gMSkgLSAxO1xuXG4gICAgICAgIGxldCB0YXJnZXRfc3ByaXRlX2luZGV4O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiArPSBzdGVwO1xuICAgICAgICAgICAgaWYgKHN0ZXAgPT09IDApIHN0ZXAgPSBDSE9PU0VfVEFSR0VUX0xFRlQ7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJfc2hpZnQgPSB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiAtIChSQU5HRVMubGVuZ3RoID4+IDEpO1xuICAgICAgICAgICAgdGFyZ2V0X3Nwcml0ZV9pbmRleCA9IGdyb3VwX2hhbGZfbGVuZ3RoICsgY2VudGVyX3NoaWZ0O1xuICAgICAgICAgICAgaWYgKHRhcmdldF9zcHJpdGVfaW5kZXggPj0gZ3JvdXBfbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gPSAoUkFOR0VTLmxlbmd0aCA+PiAxKSAtIGdyb3VwX2hhbGZfbGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRhcmdldF9zcHJpdGVfaW5kZXggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRfc3ByaXRlX2luZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VfY3Vyc29yX3Bvc2l0aW9uID0gKFJBTkdFUy5sZW5ndGggPj4gMSkgKyBncm91cF9oYWxmX2xlbmd0aCArICgrIShncm91cF9sZW5ndGggJSAyKSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X3Nwcml0ZV9pbmRleCA9IGdyb3VwX2xlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGdyb3VwX2luZm9bdGFyZ2V0X3Nwcml0ZV9pbmRleF0uaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKTtcblxuICAgICAgICB0aGlzLnNldF9iYXR0bGVfY3Vyc29yc19wb3NpdGlvbih0d2Vlbl90b19wb3MpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVfc3ByaXRlcygpIHtcbiAgICAgICAgdGhpcy5ibGFja19iZyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmJsYWNrX2JnKTtcbiAgICAgICAgdGhpcy5ibGFja19iZy5iZWdpbkZpbGwoMHgwLCAxKTtcbiAgICAgICAgdGhpcy5ibGFja19iZy5kcmF3UmVjdCgwLCAwLCBudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICB0aGlzLmJsYWNrX2JnLmVuZEZpbGwoKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcgPSB0aGlzLmdhbWUuYWRkLnRpbGVTcHJpdGUoQkdfWCwgQkdfWSwgbnVtYmVycy5HQU1FX1dJRFRILCBCR19IRUlHSFQsIFwiYmF0dGxlX2JhY2tncm91bmRzXCIsIHRoaXMuYmFja2dyb3VuZF9rZXkpO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIgPSB0aGlzLmdhbWUuYWRkLnRpbGVTcHJpdGUoQkdfWCwgQkdfWSwgbnVtYmVycy5HQU1FX1dJRFRILCBCR19IRUlHSFQsIFwiYmF0dGxlX2JhY2tncm91bmRzXCIsIHRoaXMuYmFja2dyb3VuZF9rZXkpO1xuICAgICAgICB0aGlzLmJnX2hlaWdodCA9IHRoaXMuYmF0dGxlX2JnLmhlaWdodDtcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcuc2NhbGUuc2V0VG8oQkdfREVGQVVMVF9TQ0FMRSwgQkdfREVGQVVMVF9TQ0FMRSk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMi5zY2FsZS5zZXRUbyhCR19ERUZBVUxUX1NDQUxFLCBCR19ERUZBVUxUX1NDQUxFKTtcbiAgICAgICAgY29uc3Qgc2V0X3Nwcml0ZSA9IChncm91cCwgaW5mbywgaXNfYWxseSwgYW5pbWF0aW9uLCBzcHJpdGVfYmFzZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gZ3JvdXAuY3JlYXRlKDAsIDAsIGluZm8uc3ByaXRlX2tleSk7XG4gICAgICAgICAgICBzcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMSk7XG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oaW5mby5zY2FsZSwgaW5mby5zY2FsZSk7XG4gICAgICAgICAgICBzcHJpdGUuZWxsaXBzZXNfc2VtaV9tYWpvciA9IFNFTUlfTUFKT1JfQVhJUztcbiAgICAgICAgICAgIHNwcml0ZS5lbGxpcHNlc19zZW1pX21pbm9yID0gU0VNSV9NSU5PUl9BWElTO1xuICAgICAgICAgICAgc3ByaXRlLmRhdGEuaXNfQWxseSA9IGlzX2FsbHk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBbmltYXRpb24oc3ByaXRlLCBcImJhdHRsZVwiKTtcbiAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHNwcml0ZSk7XG4gICAgICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFsbGllc19pbmZvLmZvckVhY2goaW5mbyA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBzZXRfc3ByaXRlKHRoaXMuZ3JvdXBfYWxsaWVzLCBpbmZvLCB0cnVlLCBcImJhdHRsZV9iYWNrXCIsIHRoaXMuZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0W2luZm8uaW5zdGFuY2Uua2V5X25hbWVdLnNwcml0ZV9iYXNlKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlID0gc3ByaXRlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmVtaWVzX2luZm8uZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHNldF9zcHJpdGUodGhpcy5ncm91cF9lbmVtaWVzLCBpbmZvLCBmYWxzZSwgXCJiYXR0bGVfZnJvbnRcIiwgdGhpcy5kYXRhLmluZm8uZW5lbWllc19saXN0W2luZm8uaW5zdGFuY2Uua2V5X25hbWVdLnNwcml0ZV9iYXNlKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlID0gc3ByaXRlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5maXJzdF9hbGx5X2NoYXIgPSB0aGlzLmdyb3VwX2FsbGllcy5jaGlsZHJlblswXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICB0aGlzLmxhc3RfYWxseV9jaGFyID0gdGhpcy5ncm91cF9hbGxpZXMuY2hpbGRyZW5bdGhpcy5hbGxpZXNfY291bnQgLSAxXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICB0aGlzLmZpcnN0X2VuZW15X2NoYXIgPSB0aGlzLmdyb3VwX2VuZW1pZXMuY2hpbGRyZW5bMF0gYXMgUGhhc2VyLlNwcml0ZTtcbiAgICAgICAgdGhpcy5sYXN0X2VuZW15X2NoYXIgPSB0aGlzLmdyb3VwX2VuZW1pZXMuY2hpbGRyZW5bdGhpcy5lbmVtaWVzX2NvdW50IC0gMV0gYXMgUGhhc2VyLlNwcml0ZTtcbiAgICB9XG5cbiAgICBpbnRpYWxpemVfY3JvcF9yZWN0YW5nbGVzKCkge1xuICAgICAgICBjb25zdCB1cHBlcl94ID0gMDtcbiAgICAgICAgY29uc3QgdXBwZXJfeSA9IDA7XG4gICAgICAgIHRoaXMudXBwZXJfcmVjdCA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3ModXBwZXJfeCwgdXBwZXJfeSk7XG4gICAgICAgIHRoaXMuY3JvcF9ncm91cC5hZGQodGhpcy51cHBlcl9yZWN0KTtcbiAgICAgICAgdGhpcy51cHBlcl9yZWN0LmJlZ2luRmlsbCgweDAsIDEpO1xuICAgICAgICB0aGlzLnVwcGVyX3JlY3QuZHJhd1JlY3QoMCwgMCwgbnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUID4+IDEpO1xuICAgICAgICB0aGlzLnVwcGVyX3JlY3QuZW5kRmlsbCgpO1xuICAgICAgICBjb25zdCBsb3dlcl94ID0gMDtcbiAgICAgICAgY29uc3QgbG93ZXJfeSA9IEJHX1kgKyAodGhpcy5iZ19oZWlnaHQgPj4gMSkgKyAyO1xuICAgICAgICB0aGlzLmxvd2VyX3JlY3QgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKGxvd2VyX3gsIGxvd2VyX3kpO1xuICAgICAgICB0aGlzLmNyb3BfZ3JvdXAuYWRkKHRoaXMubG93ZXJfcmVjdCk7XG4gICAgICAgIHRoaXMubG93ZXJfcmVjdC5iZWdpbkZpbGwoMHgwLCAxKTtcbiAgICAgICAgdGhpcy5sb3dlcl9yZWN0LmRyYXdSZWN0KDAsIDAsIG51bWJlcnMuR0FNRV9XSURUSCwgKG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkgKyAyKTtcbiAgICAgICAgdGhpcy5sb3dlcl9yZWN0LmVuZEZpbGwoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX3N0YWdlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfYWN0aW9ucyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNob29zaW5nX3RhcmdldHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZV9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuaW50aWFsaXplX2Nyb3BfcmVjdGFuZ2xlcygpO1xuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5iYXR0bGVfYmcpO1xuICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5hZGQodGhpcy5iYXR0bGVfYmcyKTtcbiAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuYWRkKHRoaXMuZ3JvdXBfZW5lbWllcyk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2dyb3VwLmFkZCh0aGlzLmdyb3VwX2FsbGllcyk7XG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy51cHBlcl9yZWN0KS50byh7XG4gICAgICAgICAgICBoZWlnaHQ6IEJHX1lcbiAgICAgICAgfSwgSU5JVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvd2VyX3JlY3QpLnRvKHtcbiAgICAgICAgICAgIHk6IEJHX1kgKyB0aGlzLmJnX2hlaWdodCAtIDEsXG4gICAgICAgICAgICBoZWlnaHQ6IG51bWJlcnMuR0FNRV9IRUlHSFQgLSB0aGlzLmJnX2hlaWdodCAtIEJHX1kgKyAxXG4gICAgICAgIH0sIElOSVRfVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5jYW1lcmFfYW5nbGUpLnRvKHtcbiAgICAgICAgICAgIHJhZDogREVGQVVMVF9QT1NfQU5HTEVcbiAgICAgICAgfSwgSU5JVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5iYXR0bGVfZ3JvdXAuc2NhbGUpLnRvKHtcbiAgICAgICAgICAgIHg6IDEsIHk6IDFcbiAgICAgICAgfSwgSU5JVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRfc3RhZ2VfZGVmYXVsdF9wb3NpdGlvbigpIHtcbiAgICAgICAgbGV0IHByb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBwcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlIH0pO1xuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuY2FtZXJhX2FuZ2xlKS50byh7XG4gICAgICAgICAgICByYWQ6IERFRkFVTFRfUE9TX0FOR0xFXG4gICAgICAgIH0sIDMwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKHByb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IHByb21pc2U7XG4gICAgfVxuXG4gICAgc2V0X2Nob29zaW5nX2FjdGlvbl9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19hY3Rpb25zID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnggPSAwO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIuc2NhbGUuc2V0VG8oQUNUSU9OX1BPU19CR19TQ0FMRSwgQUNUSU9OX1BPU19CR19TQ0FMRSk7XG4gICAgICAgIHRoaXMuYmF0dGxlX2JnMi55ID0gLXRoaXMuYmF0dGxlX2JnLmhlaWdodCAqIChBQ1RJT05fUE9TX0JHX1NDQUxFIC0gMSkgKyBCR19ZIC0gQ0hPT1NFX1RBUkdFVF9BTExZX1NISUZUO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ByaXRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zcHJpdGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgaW5kZXhfc2hpZnRlZCA9IHNwcml0ZS5kYXRhLmlzX0FsbHkgPyBpIDogKHRoaXMuZW5lbWllc19jb3VudCAtIDEpIC0gKGkgLSB0aGlzLmFsbGllc19jb3VudCk7XG4gICAgICAgICAgICBjb25zdCB4X3NoaWZ0ID0gc3ByaXRlLmRhdGEuaXNfQWxseSA/IEFDVElPTl9QT1NfQUxMWV9YIDogQUNUSU9OX1BPU19FTkVNWV9DRU5URVJfWCAtICh0aGlzLmVuZW1pZXNfY291bnQgPj4gMSkgKiBBQ1RJT05fUE9TX1NQQUNFX0JFVFdFRU47XG4gICAgICAgICAgICBjb25zdCBwb3NfeCA9IHhfc2hpZnQgKyBpbmRleF9zaGlmdGVkICogQUNUSU9OX1BPU19TUEFDRV9CRVRXRUVOO1xuICAgICAgICAgICAgY29uc3QgcG9zX3kgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gQUNUSU9OX0FMTFlfWSA6IEFDVElPTl9FTkVNWV9ZO1xuICAgICAgICAgICAgc3ByaXRlLnggPSBwb3NfeDtcbiAgICAgICAgICAgIHNwcml0ZS55ID0gcG9zX3k7XG4gICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlX3ggPSBzcHJpdGUuc2NhbGUueCArIE1hdGguc2lnbihzcHJpdGUuc2NhbGUueCkgKiBBQ1RJT05fUE9TX1NDQUxFX0FERDtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfc2NhbGVfeSA9IHNwcml0ZS5zY2FsZS55ICsgTWF0aC5zaWduKHNwcml0ZS5zY2FsZS55KSAqIEFDVElPTl9QT1NfU0NBTEVfQUREO1xuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKHRoaXNfc2NhbGVfeCwgdGhpc19zY2FsZV95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0X3Bvc2l0aW9ucygpIHtcbiAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnNjYWxlLnNldFRvKEJHX0RFRkFVTFRfU0NBTEUsIEJHX0RFRkFVTFRfU0NBTEUpO1xuICAgICAgICB0aGlzLmJhdHRsZV9iZzIueSA9IEJHX1k7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcHJpdGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSB0aGlzLnNwcml0ZXNbaV07XG4gICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlX3ggPSBzcHJpdGUuc2NhbGUueCAtIE1hdGguc2lnbihzcHJpdGUuc2NhbGUueCkgKiBBQ1RJT05fUE9TX1NDQUxFX0FERDtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfc2NhbGVfeSA9IHNwcml0ZS5zY2FsZS55IC0gTWF0aC5zaWduKHNwcml0ZS5zY2FsZS55KSAqIEFDVElPTl9QT1NfU0NBTEVfQUREO1xuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKHRoaXNfc2NhbGVfeCwgdGhpc19zY2FsZV95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9iYXR0bGVfY3Vyc29yc19wb3NpdGlvbih0d2Vlbl90b19wb3MgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwX2luZm8gPSB0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5BTExZID8gdGhpcy5hbGxpZXNfaW5mbyA6IHRoaXMuZW5lbWllc19pbmZvO1xuICAgICAgICBjb25zdCBncm91cF9oYWxmX2xlbmd0aCA9IGdyb3VwX2luZm8ubGVuZ3RoICUgMiA/IGdyb3VwX2luZm8ubGVuZ3RoID4+IDEgOiAoZ3JvdXBfaW5mby5sZW5ndGggPj4gMSkgLSAxO1xuICAgICAgICBjb25zdCBjZW50ZXJfc2hpZnQgPSB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiAtIChSQU5HRVMubGVuZ3RoID4+IDEpO1xuICAgICAgICB0aGlzLmN1cnNvcnMuZm9yRWFjaCgoY3Vyc29yX3Nwcml0ZSwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IHRhcmdldF9pbmRleCA9IGkgLSAoKHRoaXMuY3Vyc29ycy5sZW5ndGggPj4gMSkgLSBncm91cF9oYWxmX2xlbmd0aCkgKyBjZW50ZXJfc2hpZnQ7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRfaW5mbyA9IGdyb3VwX2luZm9bdGFyZ2V0X2luZGV4XTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRfaW5mbyAmJiAhdGFyZ2V0X2luZm8uaW5zdGFuY2UuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X3Nwcml0ZSA9IHRhcmdldF9pbmZvLnNwcml0ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX3NjYWxlID0gQkFUVExFX0NVUlNPUl9TQ0FMRVNbdGhpcy5yYW5nZV9jdXJzb3JfcG9zaXRpb24gLSBjZW50ZXJfc2hpZnQgLSAodGhpcy5jdXJzb3JzLmxlbmd0aCA+PiAxKSArIGldO1xuICAgICAgICAgICAgICAgIGN1cnNvcl9zcHJpdGUuc2NhbGUuc2V0VG8odGhpc19zY2FsZSwgdGhpc19zY2FsZSk7XG4gICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS5hbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yc190d2VlbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JzX3R3ZWVuc1tpXS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RfeCA9IHRhcmdldF9zcHJpdGUueDtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0X3kgPSB0YXJnZXRfc3ByaXRlLnkgLSB0YXJnZXRfc3ByaXRlLmhlaWdodCAtIDU7XG4gICAgICAgICAgICAgICAgaWYgKHR3ZWVuX3RvX3Bvcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKGN1cnNvcl9zcHJpdGUpLnRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclg6IGRlc3RfeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGRlc3RfeVxuICAgICAgICAgICAgICAgICAgICB9LCA4NSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc190d2VlbnNbaV0gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKGN1cnNvcl9zcHJpdGUpLnRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBjdXJzb3Jfc3ByaXRlLnkgLSA0XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUsIDAsIC0xLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS5jZW50ZXJYID0gZGVzdF94O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLnkgPSBkZXN0X3k7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc190d2VlbnNbaV0gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKGN1cnNvcl9zcHJpdGUpLnRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGN1cnNvcl9zcHJpdGUueSAtIDRcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlLCAwLCAtMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmFscGhhID0gMDtcbiAgICAgICAgICAgICAgICB0YXJnZXRfaW5kZXggPSB0YXJnZXRfaW5kZXggPCAwID8gMCA6IGdyb3VwX2luZm8ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRfc3ByaXRlID0gZ3JvdXBfaW5mb1t0YXJnZXRfaW5kZXhdLnNwcml0ZTtcbiAgICAgICAgICAgICAgICBjdXJzb3Jfc3ByaXRlLmNlbnRlclggPSB0YXJnZXRfc3ByaXRlLng7XG4gICAgICAgICAgICAgICAgY3Vyc29yX3Nwcml0ZS55ID0gdGFyZ2V0X3Nwcml0ZS55IC0gdGFyZ2V0X3Nwcml0ZS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuc2V0X2JhdHRsZV9jdXJzb3JzKCkge1xuICAgICAgICB0aGlzLmN1cnNvcnMuZm9yRWFjaCgoc3ByaXRlLCBpKSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Vyc29yc190d2VlbnNbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zW2ldLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICB9XG5cbiAgICBjaG9vc2VfdGFyZ2V0cyhyYW5nZSwgdGFyZ2V0X3R5cGUsIGFiaWxpdHlfdHlwZSwgYWJpbGl0eV9jYXN0ZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2hvb3NpbmdfdGFyZ2V0c19jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLnJhbmdlX2N1cnNvcl9wb3NpdGlvbiA9IFJBTkdFUy5sZW5ndGggPj4gMTtcbiAgICAgICAgdGhpcy5hYmlsaXR5X3JhbmdlID0gcmFuZ2UgPT09IFwiYWxsXCIgPyBSQU5HRVNbMF0gOiByYW5nZTtcbiAgICAgICAgdGhpcy5hYmlsaXR5X3R5cGUgPSBhYmlsaXR5X3R5cGU7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9jYXN0ZXIgPSBhYmlsaXR5X2Nhc3RlcjtcbiAgICAgICAgdGhpcy50YXJnZXRfdHlwZSA9IHRhcmdldF90eXBlO1xuICAgICAgICBpZiAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuVVNFUikge1xuICAgICAgICAgICAgdGhpcy5zZXRfdGFyZ2V0cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmJhdHRsZV9ncm91cCkudG8oe1xuICAgICAgICAgICAgICAgIHk6IHRoaXMuYmF0dGxlX2dyb3VwLnkgKyAodGhpcy50YXJnZXRfdHlwZSA9PT0gYWJpbGl0eV90YXJnZXRfdHlwZXMuQUxMWSA/IENIT09TRV9UQVJHRVRfQUxMWV9TSElGVCA6IENIT09TRV9UQVJHRVRfRU5FTVlfU0hJRlQpXG4gICAgICAgICAgICB9LCBDSE9PU0lOR19UQVJHRVRfU0NSRUVOX1NISUZUX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyc29yX2NvdW50ID0gdGhpcy5hYmlsaXR5X3JhbmdlO1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29ycyA9IG5ldyBBcnJheTxQaGFzZXIuU3ByaXRlPihjdXJzb3JfY291bnQgYXMgbnVtYmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcnNfdHdlZW5zID0gbmV3IEFycmF5PFBoYXNlci5Ud2Vlbj4oY3Vyc29yX2NvdW50IGFzIG51bWJlcikuZmlsbChudWxsKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnNvcl9jb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc1tpXSA9IHRoaXMuYmF0dGxlX2dyb3VwLmNyZWF0ZSgwLCAwLCBcImJhdHRsZV9jdXJzb3JcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc1tpXS5hbmltYXRpb25zLmFkZChcImFuaW1cIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yc1tpXS5hbmltYXRpb25zLnBsYXkoXCJhbmltXCIsIDQwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV90YXJnZXQoMCwgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaG9vc2luZ190YXJnZXRzX2ZpbmlzaGVkKHRhcmdldHMpIHtcbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmJhdHRsZV9ncm91cCkudG8oe1xuICAgICAgICAgICAgeTogdGhpcy5iYXR0bGVfZ3JvdXAueSAtICh0aGlzLnRhcmdldF90eXBlID09PSBhYmlsaXR5X3RhcmdldF90eXBlcy5BTExZID8gQ0hPT1NFX1RBUkdFVF9BTExZX1NISUZUIDogQ0hPT1NFX1RBUkdFVF9FTkVNWV9TSElGVClcbiAgICAgICAgfSwgQ0hPT1NJTkdfVEFSR0VUX1NDUkVFTl9TSElGVF9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMudW5zZXRfYmF0dGxlX2N1cnNvcnMoKTtcbiAgICAgICAgdGhpcy5jaG9vc2luZ190YXJnZXRzX2NhbGxiYWNrKHRhcmdldHMpO1xuICAgIH1cblxuICAgIHByZXZlbnRfY2FtZXJhX2FuZ2xlX292ZXJmbG93KCkge1xuICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgPSByYW5nZV8zNjAodGhpcy5jYW1lcmFfYW5nbGUucmFkKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfc3RhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2FjdGlvbnMpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5QQUdFX1VQKSAmJiB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5QQUdFX0RPV04pKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgLT0gQ0FNRVJBX1NQRUVEO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcueCAtPSBCR19TUEVFRFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oUGhhc2VyLktleWJvYXJkLlBBR0VfVVApICYmICF0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5QQUdFX0RPV04pKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9hbmdsZS5yYWQgKz0gQ0FNRVJBX1NQRUVEO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcueCArPSBCR19TUEVFRFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSByYW5nZV8zNjAodGhpcy5jYW1lcmFfYW5nbGUucmFkKSAtIHJhbmdlXzM2MCh0aGlzLm9sZF9jYW1lcmFfYW5nbGUpO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcueCArPSBCR19TUElOX1NQRUVEICogdGhpcy5iYXR0bGVfYmcud2lkdGggKiBkZWx0YTsgLy90aWUgYmcgeCBwb3NpdGlvbiB3aXRoIGNhbWVyYSBhbmdsZSB3aGVuIHNwaW5pbmdcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2xkX2NhbWVyYV9hbmdsZSA9IHRoaXMuY2FtZXJhX2FuZ2xlLnJhZDtcblxuICAgICAgICBpZiAodGhpcy5iYXR0bGVfYmcueCA+IHRoaXMuYmF0dGxlX2JnLndpZHRoIHx8IHRoaXMuYmF0dGxlX2JnLnggPCAtdGhpcy5iYXR0bGVfYmcud2lkdGgpIHsgLy9jaGVjayBiZyB4IHBvc2l0aW9uIHN1cnBsdXNcbiAgICAgICAgICAgIHRoaXMuYmF0dGxlX2JnLnggPSB0aGlzLmJhdHRsZV9iZzIueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJhdHRsZV9iZy54ID4gMCkgeyAvL21ha2UgYmcyIGZvbGxvdyBkZWZhdWx0IGJnXG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9iZzIueCA9IHRoaXMuYmF0dGxlX2JnLnggLSB0aGlzLmJhdHRsZV9iZy53aWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJhdHRsZV9iZy54IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfYmcyLnggPSB0aGlzLmJhdHRsZV9iZy54ICsgdGhpcy5iYXR0bGVfYmcud2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5zaW4odGhpcy5jYW1lcmFfYW5nbGUucmFkKSA+IDAgJiYgdGhpcy5iYXR0bGVfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmdyb3VwX2FsbGllcykgPCB0aGlzLmJhdHRsZV9ncm91cC5nZXRDaGlsZEluZGV4KHRoaXMuZ3JvdXBfZW5lbWllcykpIHsgLy9jaGVjayBwYXJ0eSBhbmQgZW5lbXkgeiBpbmRleFxuICAgICAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuc3dhcENoaWxkcmVuKHRoaXMuZ3JvdXBfZW5lbWllcywgdGhpcy5ncm91cF9hbGxpZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKE1hdGguc2luKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPCAwICYmIHRoaXMuYmF0dGxlX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5ncm91cF9hbGxpZXMpID4gdGhpcy5iYXR0bGVfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmdyb3VwX2VuZW1pZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmJhdHRsZV9ncm91cC5zd2FwQ2hpbGRyZW4odGhpcy5ncm91cF9lbmVtaWVzLCB0aGlzLmdyb3VwX2FsbGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5jb3ModGhpcy5jYW1lcmFfYW5nbGUucmFkKSA8IDAgJiYgdGhpcy5maXJzdF9hbGx5X2NoYXIueiA+IHRoaXMubGFzdF9hbGx5X2NoYXIueikgeyAvL2NoZWNrIGFsbHkgeiBpbmRleCBvcmRlclxuICAgICAgICAgICAgdGhpcy5ncm91cF9hbGxpZXMucmV2ZXJzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKE1hdGguY29zKHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCkgPiAwICYmIHRoaXMuZmlyc3RfYWxseV9jaGFyLnogPCB0aGlzLmxhc3RfYWxseV9jaGFyLnopIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBfYWxsaWVzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5jb3ModGhpcy5jYW1lcmFfYW5nbGUucmFkKSA8IDAgJiYgdGhpcy5maXJzdF9lbmVteV9jaGFyLnogPCB0aGlzLmxhc3RfZW5lbXlfY2hhci56KSB7IC8vY2hlY2sgZW5lbXkgeiBpbmRleCBvcmRlclxuICAgICAgICAgICAgdGhpcy5ncm91cF9lbmVtaWVzLnJldmVyc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChNYXRoLmNvcyh0aGlzLmNhbWVyYV9hbmdsZS5yYWQpID4gMCAmJiB0aGlzLmZpcnN0X2VuZW15X2NoYXIueiA+IHRoaXMubGFzdF9lbmVteV9jaGFyLnopIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBfZW5lbWllcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9zcHJpdGVfcHJvcGVydGllcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNwcml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMuc3ByaXRlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX2FuZ2xlID0gc3ByaXRlLmRhdGEuaXNfQWxseSA/IHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCA6IHRoaXMuY2FtZXJhX2FuZ2xlLnJhZCArIE1hdGguUEk7XG4gICAgICAgICAgICBjb25zdCBhbmdsZV9wb3NpdGlvbiA9IEJhdHRsZVN0YWdlLmdldF9hbmdsZShyZWxhdGl2ZV9hbmdsZSk7XG4gICAgICAgICAgICBjb25zdCBwb3NfeCA9IEJhdHRsZVN0YWdlLmVsbGlwc2VfcG9zaXRpb24oc3ByaXRlLCBhbmdsZV9wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBwb3NfeSA9IEJhdHRsZVN0YWdlLmVsbGlwc2VfcG9zaXRpb24oc3ByaXRlLCBhbmdsZV9wb3NpdGlvbiwgZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgc2hpZnRfZnJvbV9taWRkbGUgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9hbGx5IDogdGhpcy5zaGlmdF9mcm9tX21pZGRsZV9lbmVteTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4X3NoaWZ0ZWQgPSBzcHJpdGUuZGF0YS5pc19BbGx5ID8gaSA6IGkgLSB0aGlzLmFsbGllc19jb3VudDtcbiAgICAgICAgICAgIHNwcml0ZS54ID0gcG9zX3ggKyAoKFNQQUNFX0JFVFdFRU5fQ0hBUlMgKiBpbmRleF9zaGlmdGVkIC0gc2hpZnRfZnJvbV9taWRkbGUpICsgKFNQQUNFX0JFVFdFRU5fQ0hBUlMgPj4gMSkpICogTWF0aC5zaW4ocmVsYXRpdmVfYW5nbGUpOyAvL3NoaWZ0IHBhcnR5IHBsYXllcnMgZnJvbSBiYXNlIHBvaW50XG4gICAgICAgICAgICBzcHJpdGUueSA9IHBvc195O1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHNwcml0ZS5kYXRhLmlzX0FsbHkgPyB0aGlzLmFsbGllc19pbmZvW2luZGV4X3NoaWZ0ZWRdIDogdGhpcy5lbmVtaWVzX2luZm9baW5kZXhfc2hpZnRlZF07XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IEJhdHRsZVN0YWdlLmdldF9zY2FsZShpbmZvLnNjYWxlLCByZWxhdGl2ZV9hbmdsZSk7XG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgICAgIGlmIChNYXRoLnNpbihyZWxhdGl2ZV9hbmdsZSkgPiAwICYmICFzcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5uYW1lLmVuZHNXaXRoKCdiYWNrJykpIHsgLy9jaGFuZ2UgdGV4dHVyZSBpbiBmdW5jdGlvbiBvZiBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5yZXBsYWNlKCdmcm9udCcsICdiYWNrJykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLnNpbihyZWxhdGl2ZV9hbmdsZSkgPD0gMCAmJiAhc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5lbmRzV2l0aCgnZnJvbnQnKSkge1xuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLnBsYXkoc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ubmFtZS5yZXBsYWNlKCdiYWNrJywgJ2Zyb250JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguY29zKHJlbGF0aXZlX2FuZ2xlKSA+IDAgJiYgc3ByaXRlLnNjYWxlLnggPCAwKSB7IC8vY2hhbmdlIHNpZGUgaW4gZnVuY3Rpb24gb2YgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBzcHJpdGUuc2NhbGUuc2V0VG8oc3ByaXRlLnNjYWxlLngsIHNwcml0ZS5zY2FsZS55KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5jb3MocmVsYXRpdmVfYW5nbGUpIDw9IDAgJiYgc3ByaXRlLnNjYWxlLnggPiAwKSB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnNldFRvKC1zcHJpdGUuc2NhbGUueCwgc3ByaXRlLnNjYWxlLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5zZXRfc3RhZ2Uob25fZmFkZV9jb21wbGV0ZSwgb25fZmxhc2hfY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5mYWRlKCk7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEub25GYWRlQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAob25fZmFkZV9jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIG9uX2ZhZGVfY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xuICAgICAgICAgICAgICAgIHNpZ25hbF9iaW5kaW5nLmRldGFjaCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5iYXR0bGVfZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy51cHBlcl9yZWN0LmhlaWdodCA9IHRoaXMubG93ZXJfcmVjdC5oZWlnaHQgPSBudW1iZXJzLkdBTUVfSEVJR0hUID4+IDE7XG4gICAgICAgICAgICB0aGlzLnVwcGVyX3JlY3QueSA9IDA7XG4gICAgICAgICAgICB0aGlzLmxvd2VyX3JlY3QueSA9IG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMTtcbiAgICAgICAgICAgIGNvbnN0IGZhZGVfdGltZSA9IDMwMDtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEucmVzZXRGWCgpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLnVwcGVyX3JlY3QpLnRvKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgICAgIH0sIGZhZGVfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob25fZmxhc2hfY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb25fZmxhc2hfY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jcm9wX2dyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvd2VyX3JlY3QpLnRvKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsIHk6IG51bWJlcnMuR0FNRV9IRUlHSFRcbiAgICAgICAgICAgIH0sIGZhZGVfdGltZSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbGxpcHNlKGFuZ2xlLCBhLCBiKSB7IC8vZWxsaXBzZSBmb3JtdWxhXG4gICAgICAgIGEgPSBhID09PSB1bmRlZmluZWQgPyBTRU1JX01BSk9SX0FYSVMgOiBhO1xuICAgICAgICBiID0gYiA9PT0gdW5kZWZpbmVkID8gU0VNSV9NSU5PUl9BWElTIDogYjtcbiAgICAgICAgcmV0dXJuIGEqYi9NYXRoLnNxcnQoTWF0aC5wb3coYipNYXRoLmNvcyhhbmdsZSksIDIpICsgTWF0aC5wb3coYSpNYXRoLnNpbihhbmdsZSksIDIpKTtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGVsbGlwc2VfcG9zaXRpb24oc3ByaXRlLCBhbmdsZSwgaXNfeCkge1xuICAgICAgICBpZiAoaXNfeCkge1xuICAgICAgICAgICAgY29uc3QgYSA9IHNwcml0ZS5lbGxpcHNlc19zZW1pX21ham9yO1xuICAgICAgICAgICAgcmV0dXJuIENFTlRFUl9YICsgQmF0dGxlU3RhZ2UuZWxsaXBzZShhbmdsZSwgYSwgU0VNSV9NSU5PUl9BWElTKSAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGIgPSBzcHJpdGUuZWxsaXBzZXNfc2VtaV9taW5vcjtcbiAgICAgICAgICAgIHJldHVybiBDRU5URVJfWSArIEJhdHRsZVN0YWdlLmVsbGlwc2UoYW5nbGUsIFNFTUlfTUFKT1JfQVhJUywgYikgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldF9hbmdsZShhbmdsZSkgeyAvL2VxdWlkaXN0YW50IGVsbGlwc2UgYW5nbGUgZm9ybXVsYTogaHR0cHM6Ly9tYXRoLnN0YWNrZXhjaGFuZ2UuY29tL2EvMTEyMzQ0OC8yMDI0MzVcbiAgICAgICAgcmV0dXJuIGFuZ2xlICsgTWF0aC5hdGFuKCgoU0VNSV9NSU5PUl9BWElTIC0gU0VNSV9NQUpPUl9BWElTKSAqIE1hdGgudGFuKGFuZ2xlKSkvKFNFTUlfTUFKT1JfQVhJUyArIFNFTUlfTUlOT1JfQVhJUypNYXRoLnBvdyhNYXRoLnRhbihhbmdsZSksIDIpKSk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXRfc2NhbGUoZGVmYXVsdF9zY2FsZSwgYW5nbGUpIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLnNpbihhbmdsZSkvNyArIFNDQUxFX0ZBQ1RPUikgKiBkZWZhdWx0X3NjYWxlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi9XaW5kb3cnO1xuaW1wb3J0IHsgZ2V0X3RleHRfd2lkdGgsIG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgRGppbm4gfSBmcm9tICcuLi9Eamlubic7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gJy4uL01haW5DaGFyJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgV0lEVEhfUEVSX0NIQVIgPSA0NjtcbmNvbnN0IFNUQVRVU19XSU5fSEVJR0hUID0gMzU7XG5jb25zdCBTVEFUVVNfV0lOX0hFSUdIVF9DT01QQUNUID0gMjQ7XG5jb25zdCBTVEFUVVNfQkFSX1dJRFRIID0gNDM7XG5jb25zdCBTVEFUVVNfQkFSX0hFSUdIVCA9IDM7XG5jb25zdCBTVEFUVVNfQkFSX0NPTE9SX0dPT0QgPSBudW1iZXJzLkJMVUVfRk9OVF9DT0xPUjtcbmNvbnN0IFNUQVRVU19CQVJfQ09MT1JfQkFEID0gbnVtYmVycy5SRURfRk9OVF9DT0xPUjtcbmNvbnN0IE1BWF9DSEFSU19OVU1CRVIgPSA0O1xuY29uc3QgU1RBVF9YID0gNDA7XG5jb25zdCBOQU1FX1kgPSA4O1xuY29uc3QgTkFNRV9ZX0NPTVBBQ1QgPSAwO1xuY29uc3QgSU5JVElBTF9QQURESU5HX1ggPSA4O1xuY29uc3QgREpJTk5fSU5GT19XSURUSCA9IDM2O1xuY29uc3QgU1RBUlNfWCA9IFswLCAxNl07XG5jb25zdCBTVEFSU19ZID0gWzEsIDldO1xuY29uc3QgU1RBTkRCWV9DT1VOVF9YID0gWzIwLCAzNl07XG5jb25zdCBTVEFOREJZX0NPVU5UX1NISUZUX1kgPSBbOCwgMTZdO1xuY29uc3QgU0VQQVJBVE9SX1dJRFRIID0gMztcbmNvbnN0IElOSVRJQUxfUEFERElOR19fREpJTk5JX1ggPSA3O1xuXG50eXBlIEluZm9TcHJpdGUgPSB7XG4gICAgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBuYW1lOiBUZXh0T2JqO1xuICAgIGhwX2Jhcl9ncmFwaGljczogUGhhc2VyLkdyYXBoaWNzO1xuICAgIGhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBocF9oZWFkZXI6IFRleHRPYmo7XG4gICAgaHA6IFRleHRPYmo7XG4gICAgcHBfYmFyX2dyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHBfYmFyX2RhbWFnZV9ncmFwaGljczogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHBwX2hlYWRlcjogVGV4dE9iajtcbiAgICBwcDogVGV4dE9iajtcbn07XG5cbi8qQSB3aW5kb3cgZGlzcGxheWluZyB0aGUgY2hhcmFjdGVyJ3MgbmFtZSBhbmQgSFAvUFBcblRoZSBub3JtYWwgdmVyc2lvbiBpcyB1c2VkIGluIHRoZSBmaWVsZCBtZW51XG5UaGUgY29tcGFjdGVkIHZlcnNpb24gYW5kIERqaW5uIGluZm9ybWF0aW9uIGFyZSBkaXNwbGF5ZWQgaW4gYmF0dGxlXG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlXG4gICAgICAgZGppbm5faW5mbyBbYm9vbGVhbl0gLSBJZiB0cnVlLCB3aWxsIGRpc3BsYXkgRGppbm4gb24gc3RhbmRieVxuICAgICAgIGNvbXBhY3QgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgZGlzcGxheXMgdGhlIGNvbXBhY3RlZCB2ZXJzaW9uKi9cbmV4cG9ydCBjbGFzcyBDaGFyc1N0YXR1c1dpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGRqaW5uaV9pbmZvOiBib29sZWFuO1xuICAgIHB1YmxpYyBjb21wYWN0OiBib29sZWFuO1xuICAgIHB1YmxpYyBuYW1lX3k6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdHVzX3dpbl9oZWlnaHQ6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdHVzX3dpbl93aWR0aDogbnVtYmVyO1xuICAgIHB1YmxpYyBzdGF0dXNfd2luX3g6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhdHVzX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBzdGF0dXNfaGVhZGVyX3dpZHRoOiBudW1iZXI7XG4gICAgcHVibGljIGluZm9fc3ByaXRlczoge1tjaGFyX2tleTogc3RyaW5nXTogSW5mb1Nwcml0ZX07XG4gICAgcHVibGljIHN0YXJzX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHN0YW5kYnlfY291bnRfdGV4dDoge1tlbGVtZW50OiBzdHJpbmddOiBUZXh0T2JqfTtcbiAgICBwdWJsaWMgc3RhbmRieV9kamlubmk6IHtbZWxlbWVudDogc3RyaW5nXTogbnVtYmVyfTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGRqaW5uaV9pbmZvID0gZmFsc2UsIGNvbXBhY3QgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmRqaW5uaV9pbmZvID0gZGppbm5pX2luZm87XG4gICAgICAgIHRoaXMuY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgICAgIHRoaXMubmFtZV95ID0gTkFNRV9ZO1xuICAgICAgICBpZiAodGhpcy5jb21wYWN0KSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVfeSA9IE5BTUVfWV9DT01QQUNUO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbl9oZWlnaHQgPSBTVEFUVVNfV0lOX0hFSUdIVDtcbiAgICAgICAgaWYgKHRoaXMuY29tcGFjdCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luX2hlaWdodCA9IFNUQVRVU19XSU5fSEVJR0hUX0NPTVBBQ1Q7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhcnNfbnVtYmVyID0gXy5jbGFtcCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoLCBNQVhfQ0hBUlNfTlVNQkVSKTtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luX3dpZHRoID0gY2hhcnNfbnVtYmVyICogKFdJRFRIX1BFUl9DSEFSICsgU1RBVFVTX0JBUl9IRUlHSFQpICsgKElOSVRJQUxfUEFERElOR19YID4+IDEpO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5feCA9IG51bWJlcnMuR0FNRV9XSURUSCAtIHRoaXMuc3RhdHVzX3dpbl93aWR0aCAtIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEg7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLnN0YXR1c193aW5feCwgMCwgdGhpcy5zdGF0dXNfd2luX3dpZHRoLCB0aGlzLnN0YXR1c193aW5faGVpZ2h0LCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc3RhdHVzX2hlYWRlcl93aWR0aCA9IGdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgXCJIUCBcIik7XG4gICAgICAgIHRoaXMuaW5mb19zcHJpdGVzID0ge307XG4gICAgICAgIHRoaXMuc2V0X2NoYXJzX2luZm8oKTtcbiAgICAgICAgaWYgKHRoaXMuZGppbm5pX2luZm8pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhbmRieV9jb3VudF90ZXh0ID0ge307XG4gICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGklMiwgeSA9ICsoaT4xKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwLmNyZWF0ZShTVEFSU19YW3hdLCBTVEFSU19ZW3ldLCBlbGVtZW50ICsgXCJfc3RhclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YW5kYnlfY291bnRfdGV4dFtlbGVtZW50XSA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBTVEFOREJZX0NPVU5UX1hbeF0sIHRoaXMubmFtZV95ICsgU1RBTkRCWV9DT1VOVF9TSElGVF9ZW3ldLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuc3RhcnNfZ3JvdXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSB3aW5kb3cncyBwb3NpdGlvblxuXG4gICAgSW5wdXQ6IGZvcmNlIFtib29sZWFuXSA9IElmIHRydWUsIGZvcmNlcyBhbiB1cGRhdGUqL1xuICAgIHVwZGF0ZV9wb3NpdGlvbihmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGUoZm9yY2UpO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgY2hhcmFjdGVycycgaW5mb3JtYXRpb24gYW5kIGNyZWF0ZXMgdGhlIGdyYXBoaWNzXG4gICAgUmVtb3ZlcyBzcHJpdGVzIGZyb20gdGhlIFdpbmRvdyBncm91cCBhbmQgZ2l2ZXMgdGhlbSB0byB0aGUgaW50ZXJuYWwgZ3JvdXAqL1xuICAgIHNldF9jaGFyc19pbmZvKCkge1xuICAgICAgICBjb25zdCBjaGFyc19saXN0ID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLnNsaWNlKDAsIE1BWF9DSEFSU19OVU1CRVIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzX2xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBpbmZvX3Nwcml0ZXNfb2JqOiBJbmZvU3ByaXRlID0ge1xuICAgICAgICAgICAgICAgIGdyb3VwOiBudWxsLFxuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgaHBfYmFyX2dyYXBoaWNzOiBudWxsLFxuICAgICAgICAgICAgICAgIGhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3M6IG51bGwsXG4gICAgICAgICAgICAgICAgaHBfaGVhZGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGhwOiBudWxsLFxuICAgICAgICAgICAgICAgIHBwX2Jhcl9ncmFwaGljczogbnVsbCxcbiAgICAgICAgICAgICAgICBwcF9iYXJfZGFtYWdlX2dyYXBoaWNzOiBudWxsLFxuICAgICAgICAgICAgICAgIHBwX2hlYWRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcDogbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBjaGFyc19saXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgYmFzZV94X3BvcyA9ICBpICogKFdJRFRIX1BFUl9DSEFSICsgU0VQQVJBVE9SX1dJRFRIKSArIElOSVRJQUxfUEFERElOR19YO1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBfa2V5ID0gY2hhci5rZXlfbmFtZSArIFwiX3N0YXR1c1wiO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwID0gdGhpcy5zdGF0dXNfd2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChncm91cF9rZXkpO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLm5hbWUgPSB0aGlzLnN0YXR1c193aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oY2hhci5uYW1lLCBiYXNlX3hfcG9zLCB0aGlzLm5hbWVfeSwgZmFsc2UsIGZhbHNlLCB0aGlzLnN0YXR1c193aW5kb3cuZm9udF9jb2xvciwgdGhpcy5jb21wYWN0LCBncm91cF9rZXkpO1xuICAgICAgICAgICAgbGV0IHlfcG9zID0gdGhpcy5uYW1lX3kgKyBudW1iZXJzLkZPTlRfU0laRTtcblxuICAgICAgICAgICAgbGV0IHlfcG9zX2JhciA9IHlfcG9zICsgbnVtYmVycy5GT05UX1NJWkUgLSBTVEFUVVNfQkFSX0hFSUdIVDtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHBfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcyhiYXNlX3hfcG9zLCB5X3Bvc19iYXIpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5ocF9iYXJfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfR09PRCwgMSk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcy5kcmF3UmVjdCgwLCAwLCBTVEFUVVNfQkFSX1dJRFRILCBTVEFUVVNfQkFSX0hFSUdIVCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcy5lbmRGaWxsKCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9ncmFwaGljcyk7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouaHBfYmFyX2RhbWFnZV9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZGF0YS5kZWZhdWx0X3kgPSB5X3Bvc19iYXI7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmdyb3VwLmFkZChpbmZvX3Nwcml0ZXNfb2JqLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MpO1xuXG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwX2hlYWRlciA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkhQXCIsIGJhc2VfeF9wb3MsIHlfcG9zLCBmYWxzZSwgZmFsc2UsIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLCBmYWxzZSwgZ3JvdXBfa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHhfbnVtYmVyX3BvcyA9IGJhc2VfeF9wb3MgKyBTVEFUX1g7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLmhwID0gdGhpcy5zdGF0dXNfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGNoYXIuY3VycmVudF9ocC50b1N0cmluZygpLCB4X251bWJlcl9wb3MsIHlfcG9zLCB0cnVlLCBmYWxzZSwgdGhpcy5zdGF0dXNfd2luZG93LmZvbnRfY29sb3IsIGZhbHNlLCBncm91cF9rZXkpO1xuXG4gICAgICAgICAgICB5X3BvcyA9IHRoaXMubmFtZV95ICsgMiAqIG51bWJlcnMuRk9OVF9TSVpFO1xuICAgICAgICAgICAgeV9wb3NfYmFyID0geV9wb3MgKyBudW1iZXJzLkZPTlRfU0laRSAtIFNUQVRVU19CQVJfSEVJR0hUO1xuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKGJhc2VfeF9wb3MsIHlfcG9zX2Jhcik7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZXNfb2JqLnBwX2Jhcl9ncmFwaGljcy5iZWdpbkZpbGwoU1RBVFVTX0JBUl9DT0xPUl9HT09ELCAxKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIFNUQVRVU19CQVJfV0lEVEgsIFNUQVRVU19CQVJfSEVJR0hUKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzLmVuZEZpbGwoKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouZ3JvdXAuYWRkKGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2dyYXBoaWNzKTtcblxuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kYXRhLmRlZmF1bHRfeSA9IHlfcG9zX2JhcjtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmouZ3JvdXAuYWRkKGluZm9fc3ByaXRlc19vYmoucHBfYmFyX2RhbWFnZV9ncmFwaGljcyk7XG5cbiAgICAgICAgICAgIGluZm9fc3ByaXRlc19vYmoucHBfaGVhZGVyID0gdGhpcy5zdGF0dXNfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiUFBcIiwgYmFzZV94X3BvcywgeV9wb3MsIGZhbHNlLCBmYWxzZSwgdGhpcy5zdGF0dXNfd2luZG93LmZvbnRfY29sb3IsIGZhbHNlLCBncm91cF9rZXkpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGVzX29iai5wcCA9IHRoaXMuc3RhdHVzX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihjaGFyLmN1cnJlbnRfcHAudG9TdHJpbmcoKSwgeF9udW1iZXJfcG9zLCB5X3BvcywgdHJ1ZSwgZmFsc2UsIHRoaXMuc3RhdHVzX3dpbmRvdy5mb250X2NvbG9yLCBmYWxzZSwgZ3JvdXBfa2V5KTtcblxuICAgICAgICAgICAgdGhpcy5pbmZvX3Nwcml0ZXNbY2hhci5rZXlfbmFtZV0gPSBpbmZvX3Nwcml0ZXNfb2JqO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBkaXNwbGF5ZWQqL1xuICAgIHVwZGF0ZV9jaGFyc19pbmZvKCkge1xuICAgICAgICBsZXQgc2hvd19kamlubl9pbmZvID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmRqaW5uaV9pbmZvKSB7XG4gICAgICAgICAgICB0aGlzLnN0YW5kYnlfZGppbm5pID0gRGppbm4uZ2V0X3N0YW5kYnlfZGppbm5pKHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LCBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgTUFYX0NIQVJTX05VTUJFUikpO1xuICAgICAgICAgICAgc2hvd19kamlubl9pbmZvID0gXy5zb21lKHRoaXMuc3RhbmRieV9kamlubmksIEJvb2xlYW4pO1xuICAgICAgICAgICAgaWYgKHNob3dfZGppbm5faW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnNfZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnNfZ3JvdXAueCA9IElOSVRJQUxfUEFERElOR19fREpJTk5JX1g7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyc19ncm91cC55ID0gdGhpcy5uYW1lX3kgKyBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yZGVyZWRfZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBlbGVtZW50IGluIHRoaXMuc3RhbmRieV9kamlubmkgPyB0aGlzLnN0YW5kYnlfZGppbm5pW2VsZW1lbnRdLnRvU3RyaW5nKCkgOiBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0KHRleHQsIHRoaXMuc3RhbmRieV9jb3VudF90ZXh0W2VsZW1lbnRdLCB1bmRlZmluZWQsIHRoaXMubmFtZV95ICsgU1RBTkRCWV9DT1VOVF9TSElGVF9ZWysoaT4xKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBvcmRlcmVkX2VsZW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5zdGFuZGJ5X2NvdW50X3RleHRbZWxlbWVudF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzX2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFyc19udW1iZXIgPSBfLmNsYW1wKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgsIE1BWF9DSEFSU19OVU1CRVIpO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5fd2lkdGggPSBjaGFyc19udW1iZXIgKiAoV0lEVEhfUEVSX0NIQVIgKyBTRVBBUkFUT1JfV0lEVEgpICsgKElOSVRJQUxfUEFERElOR19YID4+IDEpICsgKHNob3dfZGppbm5faW5mbyA/IERKSU5OX0lORk9fV0lEVEggOiAwKTtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luX3ggPSBudW1iZXJzLkdBTUVfV0lEVEggLSB0aGlzLnN0YXR1c193aW5fd2lkdGggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggLSBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIO1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3NpemUoe3dpZHRoOiB0aGlzLnN0YXR1c193aW5fd2lkdGh9KTtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogdGhpcy5zdGF0dXNfd2luX3h9KTtcbiAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LmNsZWFyX3NlcGFyYXRvcnMoKTtcbiAgICAgICAgbGV0IGN1cnJlbnRfY2hhcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyc19udW1iZXI7ICsraSkge1xuICAgICAgICAgICAgbGV0IGNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaV07XG4gICAgICAgICAgICBjdXJyZW50X2NoYXJzLnB1c2goY2hhci5rZXlfbmFtZSk7XG4gICAgICAgICAgICBsZXQgaW5mb19zcHJpdGUgPSB0aGlzLmluZm9fc3ByaXRlc1tjaGFyLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmdyb3VwLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgYmFzZV94X3BvcyA9ICBpICogKFdJRFRIX1BFUl9DSEFSICsgU0VQQVJBVE9SX1dJRFRIKSArIElOSVRJQUxfUEFERElOR19YICsgKHNob3dfZGppbm5faW5mbyA/IERKSU5OX0lORk9fV0lEVEggOiAwKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLm5hbWUsIGluZm9fc3ByaXRlLm5hbWUsIGJhc2VfeF9wb3MpO1xuICAgICAgICAgICAgY29uc3QgeF9udW1iZXJfcG9zID0gYmFzZV94X3BvcyArIFNUQVRfWDtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dChjaGFyLmN1cnJlbnRfaHAsIGluZm9fc3ByaXRlLmhwLCB4X251bWJlcl9wb3MpO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNfd2luZG93LnVwZGF0ZV90ZXh0KGNoYXIuY3VycmVudF9wcCwgaW5mb19zcHJpdGUucHAsIHhfbnVtYmVyX3Bvcyk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogYmFzZV94X3Bvc30sIGluZm9fc3ByaXRlLmhwX2hlYWRlcik7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IGJhc2VfeF9wb3N9LCBpbmZvX3Nwcml0ZS5wcF9oZWFkZXIpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUuaHBfYmFyX2dyYXBoaWNzLnggPSBiYXNlX3hfcG9zO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUucHBfYmFyX2dyYXBoaWNzLnggPSBiYXNlX3hfcG9zO1xuXG4gICAgICAgICAgICBjb25zdCBocF9kYW1hZ2VfYmFyX3dpZHRoID0gKFNUQVRVU19CQVJfV0lEVEggKiAoMSAtIGNoYXIuY3VycmVudF9ocC9jaGFyLm1heF9ocCkpIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGhwX2RhbWFnZV9iYXJfeCA9IGJhc2VfeF9wb3MgKyBTVEFUVVNfQkFSX1dJRFRIIC0gaHBfZGFtYWdlX2Jhcl93aWR0aDtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuYmVnaW5GaWxsKFNUQVRVU19CQVJfQ09MT1JfQkFELCAxKTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmhwX2Jhcl9kYW1hZ2VfZ3JhcGhpY3MuZHJhd1JlY3QoaHBfZGFtYWdlX2Jhcl94LCBpbmZvX3Nwcml0ZS5ocF9iYXJfZGFtYWdlX2dyYXBoaWNzLmRhdGEuZGVmYXVsdF95LCBocF9kYW1hZ2VfYmFyX3dpZHRoLCBTVEFUVVNfQkFSX0hFSUdIVCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5ocF9iYXJfZGFtYWdlX2dyYXBoaWNzLmVuZEZpbGwoKTtcblxuICAgICAgICAgICAgY29uc3QgcHBfZGFtYWdlX2Jhcl93aWR0aCA9IChTVEFUVVNfQkFSX1dJRFRIICogKDEgLSBjaGFyLmN1cnJlbnRfcHAvY2hhci5tYXhfcHApKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBwcF9kYW1hZ2VfYmFyX3ggPSBiYXNlX3hfcG9zICsgU1RBVFVTX0JBUl9XSURUSCAtIHBwX2RhbWFnZV9iYXJfd2lkdGg7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzLmJlZ2luRmlsbChTVEFUVVNfQkFSX0NPTE9SX0JBRCwgMSk7XG4gICAgICAgICAgICBpbmZvX3Nwcml0ZS5wcF9iYXJfZGFtYWdlX2dyYXBoaWNzLmRyYXdSZWN0KHBwX2RhbWFnZV9iYXJfeCwgaW5mb19zcHJpdGUucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5kYXRhLmRlZmF1bHRfeSwgcHBfZGFtYWdlX2Jhcl93aWR0aCwgU1RBVFVTX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgaW5mb19zcHJpdGUucHBfYmFyX2RhbWFnZV9ncmFwaGljcy5lbmRGaWxsKCk7XG5cbiAgICAgICAgICAgIGlmIChpICE9PSAwIHx8IHNob3dfZGppbm5faW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5kcmF3X3NlcGFyYXRvcihiYXNlX3hfcG9zIC0gNCwgMywgYmFzZV94X3BvcyAtIDQsIHRoaXMuc3RhdHVzX3dpbl9oZWlnaHQgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBrZXlfbmFtZSBpbiB0aGlzLmluZm9fc3ByaXRlcykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRfY2hhcnMuaW5jbHVkZXMoa2V5X25hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCBpbmZvX3Nwcml0ZSA9IHRoaXMuaW5mb19zcHJpdGVzW2tleV9uYW1lXTtcbiAgICAgICAgICAgIGluZm9fc3ByaXRlLmdyb3VwLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qRGlzcGxheXMgdGhpcyB3aW5kb3cqL1xuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzX3dpbmRvdy5zaG93KCk7XG4gICAgfVxuXG4gICAgLypDbG9zZXMgdGhpcyB3aW5kb3cqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvKkRlc3Ryb3lzIHRoaXMgd2luZG93Ki9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnN0YXR1c193aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgfVxufSIsImltcG9ydCB7IGVsZW1lbnRzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuZXhwb3J0IGNsYXNzIENsYXNzZXMge1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHJlcXVpcmVkX3ZlbnVzX2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIHJlcXVpcmVkX21lcmN1cnlfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVxdWlyZWRfbWFyc19sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyByZXF1aXJlZF9qdXBpdGVyX2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIGhwX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIHBwX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGF0a19ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWZfYm9vc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYWdpX2Jvb3N0OiBudW1iZXI7XG4gICAgcHVibGljIGx1a19ib29zdDogbnVtYmVyO1xuICAgIHB1YmxpYyBhYmlsaXR5X2xldmVsX3BhaXJzOiB7XG4gICAgICAgIGFiaWxpdHk6IHN0cmluZyxcbiAgICAgICAgbGV2ZWw6IG51bWJlclxuICAgIH1bXTtcbiAgICBwdWJsaWMgY2xhc3NfdHlwZTogbnVtYmVyO1xuICAgIHB1YmxpYyB2dWxuZXJhYmlsaXRpZXM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBrZXlfbmFtZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcmVxdWlyZWRfdmVudXNfbGV2ZWwsXG4gICAgICAgIHJlcXVpcmVkX21lcmN1cnlfbGV2ZWwsXG4gICAgICAgIHJlcXVpcmVkX21hcnNfbGV2ZWwsXG4gICAgICAgIHJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWwsXG4gICAgICAgIGhwX2Jvb3N0LFxuICAgICAgICBwcF9ib29zdCxcbiAgICAgICAgYXRrX2Jvb3N0LFxuICAgICAgICBkZWZfYm9vc3QsXG4gICAgICAgIGFnaV9ib29zdCxcbiAgICAgICAgbHVrX2Jvb3N0LFxuICAgICAgICBhYmlsaXR5X2xldmVsX3BhaXJzLFxuICAgICAgICBjbGFzc190eXBlLFxuICAgICAgICB2dWxuZXJhYmlsaXRpZXNcbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnJlcXVpcmVkX3ZlbnVzX2xldmVsID0gcmVxdWlyZWRfdmVudXNfbGV2ZWw7XG4gICAgICAgIHRoaXMucmVxdWlyZWRfbWVyY3VyeV9sZXZlbCA9IHJlcXVpcmVkX21lcmN1cnlfbGV2ZWw7XG4gICAgICAgIHRoaXMucmVxdWlyZWRfbWFyc19sZXZlbCA9IHJlcXVpcmVkX21hcnNfbGV2ZWw7XG4gICAgICAgIHRoaXMucmVxdWlyZWRfanVwaXRlcl9sZXZlbCA9IHJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWw7XG4gICAgICAgIHRoaXMuaHBfYm9vc3QgPSBocF9ib29zdDtcbiAgICAgICAgdGhpcy5wcF9ib29zdCA9IHBwX2Jvb3N0O1xuICAgICAgICB0aGlzLmF0a19ib29zdCA9IGF0a19ib29zdDtcbiAgICAgICAgdGhpcy5kZWZfYm9vc3QgPSBkZWZfYm9vc3Q7XG4gICAgICAgIHRoaXMuYWdpX2Jvb3N0ID0gYWdpX2Jvb3N0O1xuICAgICAgICB0aGlzLmx1a19ib29zdCA9IGx1a19ib29zdDtcbiAgICAgICAgdGhpcy5hYmlsaXR5X2xldmVsX3BhaXJzID0gYWJpbGl0eV9sZXZlbF9wYWlycztcbiAgICAgICAgdGhpcy5jbGFzc190eXBlID0gY2xhc3NfdHlwZTtcbiAgICAgICAgdGhpcy52dWxuZXJhYmlsaXRpZXMgPSB2dWxuZXJhYmlsaXRpZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogdnVsbmVyYWJpbGl0aWVzO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNob29zZV9yaWdodF9jbGFzcyhjbGFzc2VzX2xpc3Q6IHtbY2xhc3Nfa2V5OiBzdHJpbmddOiBDbGFzc2VzfSwgY2xhc3NfdGFibGUsIGVsZW1lbnRfYWZpbml0eSwgdmVudXNfbHZsLCBtZXJjdXJ5X2x2bCwgbWFyc19sdmwsIGp1cGl0ZXJfbHZsKTogQ2xhc3NlcyB7XG4gICAgbGV0IHNlY29uZGFyeV9lbGVtZW50cyA9IFtcbiAgICAgICAgLi4uZWxlbWVudF9hZmluaXR5ICE9PSBlbGVtZW50cy5WRU5VUyA/IFt7ZWxlbWVudDogZWxlbWVudHMuVkVOVVMsIGxldmVsOiB2ZW51c19sdmx9XSA6IFtdLFxuICAgICAgICAuLi5lbGVtZW50X2FmaW5pdHkgIT09IGVsZW1lbnRzLk1FUkNVUlkgPyBbe2VsZW1lbnQ6IGVsZW1lbnRzLk1FUkNVUlksIGxldmVsOiBtZXJjdXJ5X2x2bH1dIDogW10sXG4gICAgICAgIC4uLmVsZW1lbnRfYWZpbml0eSAhPT0gZWxlbWVudHMuTUFSUyA/IFt7ZWxlbWVudDogZWxlbWVudHMuTUFSUywgbGV2ZWw6IG1hcnNfbHZsfV0gOiBbXSxcbiAgICAgICAgLi4uZWxlbWVudF9hZmluaXR5ICE9PSBlbGVtZW50cy5KVVBJVEVSID8gW3tlbGVtZW50OiBlbGVtZW50cy5KVVBJVEVSLCBsZXZlbDoganVwaXRlcl9sdmx9XSA6IFtdXG4gICAgXTtcbiAgICBjb25zdCBub19zZWNvbmRhcnkgPSBzZWNvbmRhcnlfZWxlbWVudHMuZXZlcnkoZWxlbWVudCA9PiBlbGVtZW50LmxldmVsID09PSAwKTtcbiAgICBsZXQgc2Vjb25kYXJ5X2FmaW5pdHk7XG4gICAgaWYgKG5vX3NlY29uZGFyeSkge1xuICAgICAgICBzZWNvbmRhcnlfYWZpbml0eSA9IGVsZW1lbnRfYWZpbml0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWNvbmRhcnlfYWZpbml0eSA9IF8ubWF4Qnkoc2Vjb25kYXJ5X2VsZW1lbnRzLCBlbGVtZW50ID0+IGVsZW1lbnQubGV2ZWwpLmVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzX3R5cGUgPSBjbGFzc190YWJsZVtlbGVtZW50X2FmaW5pdHldW3NlY29uZGFyeV9hZmluaXR5XTtcbiAgICBsZXQgY2xhc3NlczogQ2xhc3Nlc1tdID0gT2JqZWN0LnZhbHVlcyhjbGFzc2VzX2xpc3QpLmZpbHRlcigodGhpc19jbGFzczogQ2xhc3NlcykgPT4gdGhpc19jbGFzcy5jbGFzc190eXBlID09PSBjbGFzc190eXBlKTtcbiAgICBjbGFzc2VzID0gY2xhc3Nlcy5maWx0ZXIoKHRoaXNfY2xhc3M6IENsYXNzZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXNfY2xhc3MucmVxdWlyZWRfdmVudXNfbGV2ZWwgPD0gdmVudXNfbHZsICYmXG4gICAgICAgIHRoaXNfY2xhc3MucmVxdWlyZWRfbWVyY3VyeV9sZXZlbCA8PSBtZXJjdXJ5X2x2bCAmJlxuICAgICAgICB0aGlzX2NsYXNzLnJlcXVpcmVkX21hcnNfbGV2ZWwgPD0gbWFyc19sdmwgJiZcbiAgICAgICAgdGhpc19jbGFzcy5yZXF1aXJlZF9qdXBpdGVyX2xldmVsIDw9IGp1cGl0ZXJfbHZsO1xuICAgIH0pO1xuICAgIHJldHVybiBfLnNvcnRCeShjbGFzc2VzLCBbKHRoaXNfY2xhc3M6IENsYXNzZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXNfY2xhc3MucmVxdWlyZWRfdmVudXNfbGV2ZWwgKyB0aGlzX2NsYXNzLnJlcXVpcmVkX21lcmN1cnlfbGV2ZWwgKyB0aGlzX2NsYXNzLnJlcXVpcmVkX21hcnNfbGV2ZWwgKyB0aGlzX2NsYXNzLnJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWw7XG4gICAgfV0pLnJldmVyc2UoKVswXTtcbn1cbiIsImltcG9ydCB7IGdldF90ZXh0X3dpZHRoIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uL1dpbmRvdyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi9Hb2xkZW5TdW4nO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IEZPUldBUkQgPSAxO1xuY29uc3QgQkFDS1dBUkQgPSAtMTtcbmNvbnN0IEJVVFRPTl9XSURUSCA9IDI0O1xuY29uc3QgQlVUVE9OX0hFSUdIVCA9IDI0O1xuY29uc3QgQlVUVE9OX1kgPSBudW1iZXJzLkdBTUVfSEVJR0hUIC0gQlVUVE9OX0hFSUdIVDtcbmNvbnN0IFRJVExFX1dJTkRPV19IRUlHSFQgPSBCVVRUT05fSEVJR0hUIC0gbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSCAtIG51bWJlcnMuSU5TSURFX0JPUkRFUl9XSURUSDtcblxuLypBIGhvcml6b250YWwgbWVudVxuVXNlZCBpbiBCYXR0bGUgTWVudXMgYW5kIHRoZSBmaWVsZCBNZW51XG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlXG4gICAgICAgYnV0dG9ucyBbYXJyYXldIC0gVGhlIGJ1dHRvbiBrZXlzIChhcnJheSBvZiBzdHJpbmcpXG4gICAgICAgdGl0bGVzIFthcnJheV0gLSBUaGUgbmFtZXMgb2YgdGhlIGJ1dHRvbnMgKGFycmF5IG9mIHN0cmluZylcbiAgICAgICBvbl9jaG9vc2UgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIFwiQ2hvb3NlXCIgb3B0aW9uXG4gICAgICAgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgW251bWJlcl0gLSBDb3VudHMgcGFyZW50LWNoaWxkIHN0YXR1cyBmb3IgRW50ZXIga2V5IChDaG9vc2UvU2VsZWN0KVxuICAgICAgIG9uX2NhbmNlbCBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDYW5jZWxcIiBvcHRpb25cbiAgICAgICBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgW251bWJlcl0gLSBDb3VudHMgcGFyZW50LWNoaWxkIHN0YXR1cyBmb3IgRVNDIGtleSAoQ2FuY2VsL0JhY2spXG4gICAgICAgdGl0bGVfd2luZG93X3dpZHRoIFtudW1iZXJdIC0gVGhlIHdpZHRoIG9mIHRoZSB0aXRsZSB3aW5kb3dcbiAgICAgICBkb2NrX3JpZ2h0IFtib29sZWFuXSAtIElmIHRydWUsIHBsYWNlcyB0aGUgbWVudSBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgc2NyZWVuKi9cbmV4cG9ydCBjbGFzcyBIb3Jpem9udGFsTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGJ1dHRvbnNfa2V5czogc3RyaW5nW107XG4gICAgcHVibGljIHRpdGxlczogc3RyaW5nW107XG4gICAgcHVibGljIGJ1dHRvbnNfbnVtYmVyOiBudW1iZXI7XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyB0aXRsZV93aW5kb3dfd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgZG9ja19yaWdodDogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHRpdGxlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9idXR0b25faW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVudV9vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBtZW51X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfYnV0dG9uX3R3ZWVuOiBQaGFzZXIuVHdlZW47XG4gICAgcHVibGljIGNob29zZV90aW1lcl9yZXBlYXQ6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgY2hvb3NlX3RpbWVyX3N0YXJ0OiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIG9uX2Nob29zZTogRnVuY3Rpb247XG4gICAgcHVibGljIG9uX2NhbmNlbDogRnVuY3Rpb247XG4gICAgcHVibGljIHJpZ2h0X3ByZXNzZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxlZnRfcHJlc3NlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2lnbmFsX2JpbmRpbmdzOiBQaGFzZXIuU2lnbmFsQmluZGluZ1tdO1xuICAgIHB1YmxpYyBidXR0b25zOiB7XG4gICAgICAgIHNwcml0ZTogUGhhc2VyLlNwcml0ZSxcbiAgICAgICAgdGl0bGU6IHN0cmluZ1xuICAgIH1bXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGJ1dHRvbnMsIHRpdGxlcywgb25fY2hvb3NlLCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgb25fY2FuY2VsLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRpdGxlX3dpbmRvd193aWR0aD8sIGRvY2tfcmlnaHQgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmJ1dHRvbnNfa2V5cyA9IGJ1dHRvbnM7XG4gICAgICAgIHRoaXMudGl0bGVzID0gdGl0bGVzO1xuICAgICAgICB0aGlzLmJ1dHRvbnNfbnVtYmVyID0gYnV0dG9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XG4gICAgICAgIGNvbnN0IG1heF90aXRsZV93aWR0aCA9IGdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgXy5tYXhCeSh0aXRsZXMsIHRpdGxlID0+IHRpdGxlLmxlbmd0aCkpO1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCA9IHRpdGxlX3dpbmRvd193aWR0aCAhPT0gdW5kZWZpbmVkID8gdGl0bGVfd2luZG93X3dpZHRoIDogbWF4X3RpdGxlX3dpZHRoICsgMiAqIChudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEgpO1xuICAgICAgICBjb25zdCB0b3RhbF93aWR0aCA9IEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIgKyB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCArIDIgKiBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIICsgMjtcbiAgICAgICAgdGhpcy5kb2NrX3JpZ2h0ID0gZG9ja19yaWdodDtcbiAgICAgICAgdGhpcy54ID0gbnVtYmVycy5HQU1FX1dJRFRIIC0gdG90YWxfd2lkdGg7XG4gICAgICAgIGlmICghdGhpcy5kb2NrX3JpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnggPj4gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnkgPSBCVVRUT05fWTtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54ICsgQlVUVE9OX1dJRFRIICogdGhpcy5idXR0b25zX251bWJlciwgdGhpcy55LCB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCwgVElUTEVfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5tb3VudF9idXR0b25zKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5tZW51X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tZW51X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdyb3VwLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5ncm91cC5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2VlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5vbl9jaG9vc2UgPSBvbl9jaG9vc2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hvb3NlO1xuICAgICAgICB0aGlzLm9uX2NhbmNlbCA9IG9uX2NhbmNlbCA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jYW5jZWw7XG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICB9XG5cbiAgICAvKk1hbmFnZXMgaW50ZXJhY3Rpb24gd2l0aCB0aGUgcGFyZW50IG1lbnVcbiAgICBQYXNzZXMgY29udHJvbCBvdmVyIHRvIHRoZSBDaG9vc2UvQ2FuY2VsIGZ1bmN0aW9uc1xuICAgIE1hbmFnZXMgdGhlIExlZnQvUmlnaHQgaW50ZXJhY3Rpb24gd2l0aGluIHRoZSBtZW51Ki9cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tZW51X29wZW4gfHwgIXRoaXMubWVudV9hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub25fY2hvb3NlKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4KTtcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpLFxuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tZW51X29wZW4gfHwgIXRoaXMubWVudV9hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2NhbmNlbCgpO1xuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpLFxuICAgICAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tZW51X29wZW4gfHwgIXRoaXMubWVudV9hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0X3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2NoYW5nZV90aW1lcnMoRk9SV0FSRCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vblVwLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSB8fCAhdGhpcy5yaWdodF9wcmVzc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWVudV9vcGVuIHx8ICF0aGlzLm1lbnVfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRfcHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY2hhbmdlX3RpbWVycyhCQUNLV0FSRCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWVudV9vcGVuIHx8ICF0aGlzLm1lbnVfYWN0aXZlIHx8ICF0aGlzLmxlZnRfcHJlc3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgdGhlIHNwcml0ZXMgZm9yIHRoZSBidXR0b25zXG5cbiAgICBJbnB1dDogZmlsdGVyZWRfYnV0dG9ucyBbYXJyYXldIC0gQnV0dG9ucyB0byBtb3VudCovXG4gICAgbW91bnRfYnV0dG9ucyhmaWx0ZXJlZF9idXR0b25zID0gW10pIHtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuYnV0dG9uc19rZXlzLmZpbHRlcihrZXkgPT4gIWZpbHRlcmVkX2J1dHRvbnMuaW5jbHVkZXMoa2V5KSk7XG4gICAgICAgIHRoaXMuYnV0dG9uc19udW1iZXIgPSBidXR0b25zLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdG90YWxfd2lkdGggPSBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyICsgdGhpcy50aXRsZV93aW5kb3dfd2lkdGggKyAobnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSCA8PCAxKSArIDI7XG4gICAgICAgIHRoaXMueCA9IG51bWJlcnMuR0FNRV9XSURUSCAtIHRvdGFsX3dpZHRoO1xuICAgICAgICBpZiAoIXRoaXMuZG9ja19yaWdodCkge1xuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy54ID4+IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiB0aGlzLnggKyBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyfSk7XG4gICAgICAgIGlmICh0aGlzLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICAgICAgb2JqLnNwcml0ZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBuZXcgQXJyYXkodGhpcy5idXR0b25zX251bWJlcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5idXR0b25zX251bWJlcjsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0gPSB7XG4gICAgICAgICAgICAgICAgc3ByaXRlOiB0aGlzLmdyb3VwLmNyZWF0ZSgwLCAwLCBcImJ1dHRvbnNcIiwgYnV0dG9uc1tpXSksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGVzW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0uc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEpO1xuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLnNwcml0ZS5jZW50ZXJYID0gKEJVVFRPTl9XSURUSCAqIChpICsgMC41KSkgfCAwO1xuICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLnNwcml0ZS5jZW50ZXJZID0gKEJVVFRPTl9IRUlHSFQgPj4gMSkgfCAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSB0aW1lciB0byB0cmlnZ2VyIGFub3RoZXIgbWVudSBidXR0b24gY2hhbmdlXG4gICAgSWYgdGhlIGlucHV0IGtleSBpcyBoZWxkIGRvd24sIG11bHRpcGxlIGJ1dHRvbiBjaGFuZ2VzIHdpbGwgb2NjdXJcblxuICAgIHN0ZXA9MSwgc2VsZWN0IHRoZSBuZXh0IGJ1dHRvbiAocmlnaHQpXG4gICAgc3RlcD0tMSwgc2VsZWN0IHRoZSBwcmV2aW91cyBidXR0b24gKGxlZnQpXG4gICAgVGhpcyBzZWxlY3Rpb24gd2lsbCBsb29wIG92ZXIgaWYgbmVjZXNzYXJ5XG5cbiAgICBJbnB1dDogc3RlcCBbbnVtYmVyXSAtIFRoZSBzdGVwIGluY3JlYXNlL2RlY3JlYXNlKi9cbiAgICBzZXRfY2hhbmdlX3RpbWVycyhzdGVwKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlX2J1dHRvbihzdGVwKTtcbiAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfc3RhcnQuYWRkKFBoYXNlci5UaW1lci5RVUFSVEVSLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQubG9vcChQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLCB0aGlzLmNoYW5nZV9idXR0b24uYmluZCh0aGlzLCBzdGVwKSk7XG4gICAgICAgICAgICB0aGlzLmNob29zZV90aW1lcl9yZXBlYXQuc3RhcnQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLypTdG9wcyB0aGUgYnV0dG9uIGNoYW5nZSB0aW1lcnMqL1xuICAgIHN0b3BfdGltZXJzKCkge1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdG9wKCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdG9wKCk7XG4gICAgfVxuXG4gICAgLypNb3ZlcyB0aGUgYnV0dG9uIHNlbGVjdGlvbiBieSBhIGdpdmVuIHZhbHVlXG4gICAgXG4gICAgc3RlcD0xLCBzZWxlY3QgdGhlIG5leHQgYnV0dG9uIChyaWdodClcbiAgICBzdGVwPS0xLCBzZWxlY3QgdGhlIHByZXZpb3VzIGJ1dHRvbiAobGVmdClcbiAgICBUaGlzIHNlbGVjdGlvbiB3aWxsIGxvb3Agb3ZlciBpZiBuZWNlc3NhcnlcblxuICAgIElucHV0OiBzdGVwIFtudW1iZXJdIC0gVGhlIHN0ZXAgaW5jcmVhc2UvZGVjcmVhc2UqL1xuICAgIGNoYW5nZV9idXR0b24oc3RlcCkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9ICh0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCArIHN0ZXApICUgdGhpcy5idXR0b25zX251bWJlcjtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSB0aGlzLmJ1dHRvbnNfbnVtYmVyIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zZXRfdGV4dChbW3RoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0udGl0bGVdXSk7XG4gICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xuICAgIH1cblxuICAgIC8qUmVzZXRzIHRoZSBjdXJyZW50IGJ1dHRvbiBhbmQgc2V0cyB0aGUgbmV3IGJ1dHRvblxuICAgIFVwZGF0ZXMgdGhlIHRleHQgb24gdGhlIHRpdGxlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gVGhlIG5ldyBidXR0b24ncyBpbmRleCovXG4gICAgc2V0X3RvX3Bvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNldF90ZXh0KFtbdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS50aXRsZV1dKTtcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XG4gICAgfVxuXG4gICAgLypTY2FsZXMgdGhlIGJ1dHRvbiB1cCBhbmQgYWRkcyBhIGdyYWR1YWwgZmxpY2tlciBlZmZlY3RcbiAgICBQbGFjZXMgdGhlIGJ1dHRvbiBvbiB0b3Agb2YgdGhlIHJlbWFpbmluZywgbGF5ZXItd2lzZSovXG4gICAgc2V0X2J1dHRvbigpIHtcbiAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuc2NhbGUuc2V0VG8oMS4yLCAxLjIpO1xuICAgICAgICB0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnNwcml0ZS5icmluZ1RvVG9wKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX3R3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnNwcml0ZS5zY2FsZSkudG8oXG4gICAgICAgICAgICB7IHg6IDEuMywgeTogMS4zIH0sXG4gICAgICAgICAgICBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxLFxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLypTY2FsZXMgdGhlIGJ1dHRvbiB0byBpdHMgb3JpZ2luYWwgc2l6ZVxuICAgIERpc2FibGVzIHRoZSBmbGlja2VyIGVmZmVjdCovXG4gICAgcmVzZXRfYnV0dG9uKCkge1xuICAgICAgICBpZiAodGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuc2NhbGUuc2V0VG8oMS4wLCAxLjApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2Vlbikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4uc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBtZW51J3MgcG9zaXRpb24qL1xuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnk7XG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnVwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKk9wZW5zIHRoaXMgd2luZG93XG4gICAgSW5wdXQ6IGNhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpXG4gICAgICAgICAgIHNlbGVjdF9pbmRleCBbbnVtYmVyXSAtIERlZmF1bHQgc2VsZWN0ZWQgYnV0dG9uIGluZGV4XG4gICAgICAgICAgIHN0YXJ0X2FjdGl2ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzZXRzIHRoaXMgd2luZG93IHRvIFwiYWN0aXZlXCIgbW9kZSovXG4gICAgb3BlbihjYWxsYmFjaz8sIHNlbGVjdF9pbmRleD8sIHN0YXJ0X2FjdGl2ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24oKTtcbiAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBzdGFydF9hY3RpdmU7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHNlbGVjdF9pbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IHNlbGVjdF9pbmRleDtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xuICAgICAgICBsZXQgd2luZG93X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHdpbmRvd19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlOyB9KVxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zaG93KHdpbmRvd19wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICBsZXQgYnV0dG9uc19yZXNvbHZlO1xuICAgICAgICBsZXQgYnV0dG9uc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IGJ1dHRvbnNfcmVzb2x2ZSA9IHJlc29sdmU7IH0pXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5ncm91cCkudG8oXG4gICAgICAgICAgICB7IHdpZHRoOiBCVVRUT05fV0lEVEggKiB0aGlzLmJ1dHRvbnNfbnVtYmVyLCBoZWlnaHQ6IEJVVFRPTl9IRUlHSFQgfSxcbiAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDIsXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZShidXR0b25zX3Jlc29sdmUpO1xuICAgICAgICBQcm9taXNlLmFsbChbd2luZG93X3Byb21pc2UsIGJ1dHRvbnNfcHJvbWlzZV0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XG4gICAgICAgICAgICB0aGlzLm1lbnVfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGlzIHdpbmRvd1xuICAgIFxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKVxuICAgICAgICAgICBhbmltYXRlIFtib29sZWFuXSAtIElmIHRydWUsIHdpbGwgcGxheSBhbiBhbmltYXRpb24gd2hpbGUgY2xvc2luZyovXG4gICAgY2xvc2UoY2FsbGJhY2s/LCBhbmltYXRlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLm1lbnVfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgICAgICBsZXQgd2luZG93X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgd2luZG93X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7IH0pXG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5jbG9zZSh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25fdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDI7XG4gICAgICAgICAgICBsZXQgYnV0dG9uc19yZXNvbHZlO1xuICAgICAgICAgICAgbGV0IGJ1dHRvbnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyBidXR0b25zX3Jlc29sdmUgPSByZXNvbHZlOyB9KVxuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmdyb3VwKS50byhcbiAgICAgICAgICAgICAgICB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX3RpbWUsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZShidXR0b25zX3Jlc29sdmUpO1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW3dpbmRvd19wcm9taXNlLCBidXR0b25zX3Byb21pc2VdKS50aGVuKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgPyBjYWxsYmFjayA6ICgpID0+IHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGVfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5ncm91cC53aWR0aCA9IHRoaXMuZ3JvdXAuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkVuYWJsZXMgdGhlIFwiYWN0aXZlXCIgc3RhdGUgZm9yIHRoaXMgd2luZG93Ki9cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVmdF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICAgICAgb2JqLnNwcml0ZS5hbHBoYSA9IDE7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMudGl0bGVfd2luZG93Lm9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcbiAgICB9XG5cbiAgICAvKkRpc2FibGVzIHRoZSBcImFjdGl2ZVwiIHN0YXRlIGZvciB0aGlzIHdpbmRvd1xuICAgIFxuICAgIElucHV0OiBoaWRlIFtib29sZWFuXSAtIElmIHRydWUsIGhpZGVzIHRoZSBidXR0b25zKi9cbiAgICBkZWFjdGl2YXRlKGhpZGUgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24oKTtcbiAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICAgICAgb2JqLnNwcml0ZS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudGl0bGVfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypEZXN0cm95cyB0aGlzIG1lbnUgYW5kIGl0cyBjb21wb25lbnRzKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICAgICAgdGhpcy5ncm91cC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MuZm9yRWFjaChzaWduYWxfYmluZGluZyA9PiB7XG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tIFwiLi9TcHJpdGVCYXNlXCI7XG5pbXBvcnQgeyBQbGF5ZXIsIGZpZ2h0ZXJfdHlwZXMgfSBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gXCIuL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7IGVmZmVjdF90eXBlcyB9IGZyb20gXCIuL0VmZmVjdFwiO1xuXG5leHBvcnQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBQbGF5ZXIge1xuICAgIHB1YmxpYyBsZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyB0dXJuczogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXhfaHA6IG51bWJlcjtcbiAgICBwdWJsaWMgbWF4X3BwOiBudW1iZXI7XG4gICAgcHVibGljIGhwX3JlY292ZXJ5OiBudW1iZXI7XG4gICAgcHVibGljIHBwX3JlY292ZXJ5OiBudW1iZXI7XG4gICAgcHVibGljIGF0azogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWY6IG51bWJlcjtcbiAgICBwdWJsaWMgYWdpOiBudW1iZXI7XG4gICAgcHVibGljIGx1azogbnVtYmVyO1xuICAgIHB1YmxpYyBpdGVtczoge1xuICAgICAgICBrZXlfbmFtZTogc3RyaW5nLFxuICAgICAgICBxdWFudGl0eTogbnVtYmVyLFxuICAgICAgICB1c2Vfd2VpZ2h0OiBudW1iZXJcbiAgICB9W107XG4gICAgcHVibGljIGFiaWxpdGllczoge1xuICAgICAgICBrZXlfbmFtZTogc3RyaW5nLFxuICAgICAgICB1c2Vfd2VpZ2h0OiBudW1iZXJcbiAgICB9W107XG4gICAgcHVibGljIGNvaW5zX3Jld2FyZDogbnVtYmVyO1xuICAgIHB1YmxpYyBpdGVtX3Jld2FyZDogc3RyaW5nO1xuICAgIHB1YmxpYyBpdGVtX3Jld2FyZF9jaGFuY2U6IG51bWJlcjtcbiAgICBwdWJsaWMgZXhwX3Jld2FyZDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyBtZXJjdXJ5X2xldmVsOiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfbGV2ZWw6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9sZXZlbDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19wb3dlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBtZXJjdXJ5X3Bvd2VyOiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcG93ZXI6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9wb3dlcjogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19yZXNpc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9yZXNpc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgbWFyc19yZXNpc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9yZXNpc3Q6IG51bWJlcjtcbiAgICBwdWJsaWMgYmF0dGxlX2FuaW1hdGlvbnNfdmFyaWF0aW9uczoge1thYmlsaXR5X2tleTogc3RyaW5nXTogc3RyaW5nfTtcbiAgICBwdWJsaWMgY2xhc3M6IGFueTtcbiAgICBwdWJsaWMgY3VycmVudF9leHA6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VycmVudF9ocDogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X3BwOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfaHBfcmVjb3Zlcnk6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VycmVudF9wcF9yZWNvdmVyeTogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2F0azogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2RlZjogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2FnaTogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJyZW50X2x1azogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZW51c19sZXZlbF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1lcmN1cnlfbGV2ZWxfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX2xldmVsX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMganVwaXRlcl9sZXZlbF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIHZlbnVzX3Bvd2VyX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9wb3dlcl9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIG1hcnNfcG93ZXJfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBqdXBpdGVyX3Bvd2VyX2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgdmVudXNfcmVzaXN0X2N1cnJlbnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVyY3VyeV9yZXNpc3RfY3VycmVudDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXJzX3Jlc2lzdF9jdXJyZW50OiBudW1iZXI7XG4gICAgcHVibGljIGp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGVuZW15X2RhdGEsIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoZW5lbXlfZGF0YS5rZXlfbmFtZSwgbmFtZSA/IG5hbWUgOiBlbmVteV9kYXRhLm5hbWUpO1xuICAgICAgICB0aGlzLmxldmVsID0gZW5lbXlfZGF0YS5sZXZlbDtcbiAgICAgICAgdGhpcy50dXJucyA9IGVuZW15X2RhdGEudHVybnM7XG4gICAgICAgIHRoaXMubWF4X2hwID0gZW5lbXlfZGF0YS5tYXhfaHA7XG4gICAgICAgIHRoaXMubWF4X3BwID0gZW5lbXlfZGF0YS5tYXhfcHA7XG4gICAgICAgIHRoaXMuaHBfcmVjb3ZlcnkgPSBlbmVteV9kYXRhLmhwX3JlY292ZXJ5O1xuICAgICAgICB0aGlzLnBwX3JlY292ZXJ5ID0gZW5lbXlfZGF0YS5wcF9yZWNvdmVyeTtcbiAgICAgICAgdGhpcy5hdGsgPSBlbmVteV9kYXRhLmF0aztcbiAgICAgICAgdGhpcy5kZWYgPSBlbmVteV9kYXRhLmRlZjtcbiAgICAgICAgdGhpcy5hZ2kgPSBlbmVteV9kYXRhLmFnaTtcbiAgICAgICAgdGhpcy5sdWsgPSBlbmVteV9kYXRhLmx1aztcbiAgICAgICAgdGhpcy5pdGVtcyA9IGVuZW15X2RhdGEuaXRlbXM7XG4gICAgICAgIHRoaXMuYWJpbGl0aWVzID0gZW5lbXlfZGF0YS5hYmlsaXRpZXM7XG4gICAgICAgIHRoaXMuY29pbnNfcmV3YXJkID0gZW5lbXlfZGF0YS5jb2luc19yZXdhcmQ7XG4gICAgICAgIHRoaXMuaXRlbV9yZXdhcmQgPSBlbmVteV9kYXRhLml0ZW1fcmV3YXJkO1xuICAgICAgICB0aGlzLml0ZW1fcmV3YXJkX2NoYW5jZSA9IGVuZW15X2RhdGEuaXRlbV9yZXdhcmRfY2hhbmNlO1xuICAgICAgICB0aGlzLmV4cF9yZXdhcmQgPSBlbmVteV9kYXRhLmV4cF9yZXdhcmQ7XG4gICAgICAgIHRoaXMudmVudXNfbGV2ZWwgPSBlbmVteV9kYXRhLnZlbnVzX2xldmVsO1xuICAgICAgICB0aGlzLm1lcmN1cnlfbGV2ZWwgPSBlbmVteV9kYXRhLm1lcmN1cnlfbGV2ZWw7XG4gICAgICAgIHRoaXMubWFyc19sZXZlbCA9IGVuZW15X2RhdGEubWFyc19sZXZlbDtcbiAgICAgICAgdGhpcy5qdXBpdGVyX2xldmVsID0gZW5lbXlfZGF0YS5qdXBpdGVyX2xldmVsO1xuICAgICAgICB0aGlzLnZlbnVzX3Bvd2VyID0gZW5lbXlfZGF0YS52ZW51c19wb3dlcjtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Bvd2VyID0gZW5lbXlfZGF0YS5tZXJjdXJ5X3Bvd2VyO1xuICAgICAgICB0aGlzLm1hcnNfcG93ZXIgPSBlbmVteV9kYXRhLm1hcnNfcG93ZXI7XG4gICAgICAgIHRoaXMuanVwaXRlcl9wb3dlciA9IGVuZW15X2RhdGEuanVwaXRlcl9wb3dlcjtcbiAgICAgICAgdGhpcy52ZW51c19yZXNpc3QgPSBlbmVteV9kYXRhLnZlbnVzX3Jlc2lzdDtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Jlc2lzdCA9IGVuZW15X2RhdGEubWVyY3VyeV9yZXNpc3Q7XG4gICAgICAgIHRoaXMubWFyc19yZXNpc3QgPSBlbmVteV9kYXRhLm1hcnNfcmVzaXN0O1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcmVzaXN0ID0gZW5lbXlfZGF0YS5qdXBpdGVyX3Jlc2lzdDtcbiAgICAgICAgdGhpcy5iYXR0bGVfc2NhbGUgPSBlbmVteV9kYXRhLmJhdHRsZV9zY2FsZTtcbiAgICAgICAgdGhpcy5iYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZW5lbXlfZGF0YS5iYXR0bGVfYW5pbWF0aW9uc192YXJpYXRpb25zKTtcbiAgICAgICAgdGhpcy5maWdodGVyX3R5cGUgPSBmaWdodGVyX3R5cGVzLkVORU1ZO1xuICAgICAgICB0aGlzLmNsYXNzID0ge1xuICAgICAgICAgICAgbmFtZTogXCJObyBDbGFzc1wiLFxuICAgICAgICAgICAgdnVsbmVyYWJpbGl0aWVzOiBlbmVteV9kYXRhLnZ1bG5lcmFiaWxpdGllcyA9PT0gdW5kZWZpbmVkID8gW10gOiBlbmVteV9kYXRhLnZ1bG5lcmFiaWxpdGllc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmN1cnJlbnRfZXhwID0gLTE7XG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLnNldF9iYXNlX2F0dHJpYnV0ZXMoKTtcbiAgICB9XG5cbiAgICBzZXRfYmFzZV9hdHRyaWJ1dGVzKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRfaHAgPSB0aGlzLm1heF9ocDtcbiAgICAgICAgdGhpcy5jdXJyZW50X3BwID0gdGhpcy5tYXhfcHA7XG4gICAgICAgIHRoaXMuY3VycmVudF9ocF9yZWNvdmVyeSA9IHRoaXMuaHBfcmVjb3Zlcnk7XG4gICAgICAgIHRoaXMuY3VycmVudF9wcF9yZWNvdmVyeSA9IHRoaXMucHBfcmVjb3Zlcnk7XG4gICAgICAgIHRoaXMuY3VycmVudF9hdGsgPSB0aGlzLmF0aztcbiAgICAgICAgdGhpcy5jdXJyZW50X2RlZiA9IHRoaXMuZGVmO1xuICAgICAgICB0aGlzLmN1cnJlbnRfYWdpID0gdGhpcy5hZ2k7XG4gICAgICAgIHRoaXMuY3VycmVudF9sdWsgPSB0aGlzLmx1aztcbiAgICAgICAgdGhpcy52ZW51c19sZXZlbF9jdXJyZW50ID0gdGhpcy52ZW51c19sZXZlbDtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X2xldmVsX2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfbGV2ZWw7XG4gICAgICAgIHRoaXMubWFyc19sZXZlbF9jdXJyZW50ID0gdGhpcy5tYXJzX2xldmVsO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfbGV2ZWxfY3VycmVudCA9IHRoaXMuanVwaXRlcl9sZXZlbDtcbiAgICAgICAgdGhpcy52ZW51c19wb3dlcl9jdXJyZW50ID0gdGhpcy52ZW51c19wb3dlcjtcbiAgICAgICAgdGhpcy5tZXJjdXJ5X3Bvd2VyX2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfcG93ZXI7XG4gICAgICAgIHRoaXMubWFyc19wb3dlcl9jdXJyZW50ID0gdGhpcy5tYXJzX3Bvd2VyO1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcG93ZXJfY3VycmVudCA9IHRoaXMuanVwaXRlcl9wb3dlcjtcbiAgICAgICAgdGhpcy52ZW51c19yZXNpc3RfY3VycmVudCA9IHRoaXMudmVudXNfcmVzaXN0O1xuICAgICAgICB0aGlzLm1lcmN1cnlfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLm1lcmN1cnlfcmVzaXN0O1xuICAgICAgICB0aGlzLm1hcnNfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLm1hcnNfcmVzaXN0O1xuICAgICAgICB0aGlzLmp1cGl0ZXJfcmVzaXN0X2N1cnJlbnQgPSB0aGlzLmp1cGl0ZXJfcmVzaXN0O1xuICAgIH1cblxuICAgIHVwZGF0ZV9hbGwoKSB7XG4gICAgICAgIHRoaXMuc2V0X2Jhc2VfYXR0cmlidXRlcygpO1xuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChlZmZlY3QgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChlZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlBPV0VSOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5NQVhfSFA6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5ERUZFTlNFOlxuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTFVDSzpcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0LmFwcGx5X2VmZmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZF9lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG9yZGVyZWRfZWxlbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwb3dlcl9rZXkgPSBlbGVtZW50ICsgXCJfcG93ZXJfY3VycmVudFwiO1xuICAgICAgICAgICAgY29uc3QgcmVzaXN0X2tleSA9IGVsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiO1xuICAgICAgICAgICAgdGhpc1twb3dlcl9rZXldID0gXy5jbGFtcCh0aGlzW3Bvd2VyX2tleV0sIG51bWJlcnMuRUxFTV9BVFRSX01JTiwgbnVtYmVycy5FTEVNX0FUVFJfTUFYKTtcbiAgICAgICAgICAgIHRoaXNbcmVzaXN0X2tleV0gPSBfLmNsYW1wKHRoaXNbcmVzaXN0X2tleV0sIG51bWJlcnMuRUxFTV9BVFRSX01JTiwgbnVtYmVycy5FTEVNX0FUVFJfTUFYKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVuZW15QmFzZSBleHRlbmRzIFNwcml0ZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGtleV9uYW1lKSB7XG4gICAgICAgIHN1cGVyKGtleV9uYW1lLCBbXCJiYXR0bGVcIl0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldF9lbmVteV9pbnN0YW5jZShlbmVteV9kYXRhLCBzdWZmaXgpIHtcbiAgICByZXR1cm4gbmV3IEVuZW15KGVuZW15X2RhdGEsIGVuZW15X2RhdGEubmFtZSArIHN1ZmZpeCk7XG59IiwiaW1wb3J0IHsgU3ByaXRlQmFzZSB9IGZyb20gXCIuL1Nwcml0ZUJhc2VcIjtcbmltcG9ydCB7IFRpbGVFdmVudCwgZXZlbnRfdHlwZXMgYXMgdGlsZV9ldmVudF90eXBlcyB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgZGlyZWN0aW9ucywgZ2V0X3N1cnJvdW5kaW5ncywgbW91bnRfY29sbGlzaW9uX3BvbHlnb24gfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgSnVtcEV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50XCI7XG5pbXBvcnQgeyBDbGltYkV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvQ2xpbWJFdmVudFwiO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSBcIi4vR29sZGVuU3VuXCI7XG5cbmV4cG9ydCBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0X2ludGVyYWN0aW9uX3R5cGVzID0ge1xuICAgIE9OQ0U6IFwib25jZVwiLFxuICAgIElORklOSVRFOiBcImluZmluaXRlXCJcbn07XG5cbmV4cG9ydCBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0X2V2ZW50X3R5cGVzID0ge1xuICAgIEpVTVA6IFwianVtcFwiLFxuICAgIEpVTVBfQVJPVU5EOiBcImp1bXBfYXJvdW5kXCIsXG4gICAgQ0xJTUI6IFwiY2xpbWJcIlxufTtcblxuZXhwb3J0IGNsYXNzIEludGVyYWN0YWJsZU9iamVjdHNfU3ByaXRlIGV4dGVuZHMgU3ByaXRlQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKGtleV9uYW1lLCBhY3Rpb25zKSB7XG4gICAgICAgIHN1cGVyKGtleV9uYW1lLCBhY3Rpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcmFjdGFibGVPYmplY3RzIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHNwcml0ZV9pbmZvOiBTcHJpdGVCYXNlO1xuICAgIHB1YmxpYyBhbGxvd2VkX3RpbGVzOiB7eDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbGxpc2lvbl9sYXllcjogbnVtYmVyfVtdO1xuICAgIHB1YmxpYyBiYXNlX2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xsaWRlcl9sYXllcl9zaGlmdDogbnVtYmVyO1xuICAgIHB1YmxpYyBpbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbm90X2FsbG93ZWRfdGlsZXM6IHt4OiBudW1iZXIsIHk6IG51bWJlcn1bXTtcbiAgICBwdWJsaWMgb2JqZWN0X2Ryb3BfdGlsZXM6IGFueTtcbiAgICBwdWJsaWMgZXZlbnRzOiBTZXQ8VGlsZUV2ZW50PjtcbiAgICBwdWJsaWMgZXZlbnRzX2luZm86IGFueTtcbiAgICBwdWJsaWMgY3VycmVudF94OiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfeTogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXN0b21fZGF0YTogYW55O1xuICAgIHB1YmxpYyBjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uczogRnVuY3Rpb25bXTtcbiAgICBwdWJsaWMgY29sb3JfZmlsdGVyOiBhbnk7XG4gICAgcHVibGljIHNwcml0ZTogUGhhc2VyLlNwcml0ZTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGtleV9uYW1lLCB4LCB5LCBhbGxvd2VkX3RpbGVzLCBiYXNlX2NvbGxpc2lvbl9sYXllciwgY29sbGlkZXJfbGF5ZXJfc2hpZnQsIG5vdF9hbGxvd2VkX3RpbGVzLCBvYmplY3RfZHJvcF90aWxlcywgaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5zcHJpdGVfaW5mbyA9IG51bGw7XG4gICAgICAgIHRoaXMuYWxsb3dlZF90aWxlcyA9IGFsbG93ZWRfdGlsZXM7XG4gICAgICAgIHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSBiYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdCA9IGNvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdCA9IGludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdCA9PT0gdW5kZWZpbmVkID8gMCA6IGludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgdGhpcy5ub3RfYWxsb3dlZF90aWxlcyA9IG5vdF9hbGxvd2VkX3RpbGVzID09PSB1bmRlZmluZWQgPyBbXSA6IG5vdF9hbGxvd2VkX3RpbGVzO1xuICAgICAgICB0aGlzLm9iamVjdF9kcm9wX3RpbGVzID0gb2JqZWN0X2Ryb3BfdGlsZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogb2JqZWN0X2Ryb3BfdGlsZXM7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmV2ZW50c19pbmZvID0ge307XG4gICAgICAgIHRoaXMuY3VycmVudF94ID0geDtcbiAgICAgICAgdGhpcy5jdXJyZW50X3kgPSB5O1xuICAgICAgICB0aGlzLmN1c3RvbV9kYXRhID0ge1xuICAgICAgICAgICAgY29sbGlzaW9uX3RpbGVzX2JvZGllczogW11cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmNvbG9yX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcbiAgICB9XG5cbiAgICBzZXRfc3ByaXRlKHNwcml0ZSkge1xuICAgICAgICB0aGlzLnNwcml0ZSA9IHNwcml0ZTtcbiAgICB9XG5cbiAgICBwb3NpdGlvbl9hbGxvd2VkKHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHMuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY3VycmVudF94ID09PSB4ICYmIGl0ZW0uY3VycmVudF95ID09PSB5O1xuICAgICAgICB9KS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWxsb3dlZF90aWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuYWxsb3dlZF90aWxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0aWxlLnggPT09IHggJiYgdGlsZS55ID09PSB5ICYmIHRpbGUuY29sbGlzaW9uX2xheWVyID09PSB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcikgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldF9jdXJyZW50X3Bvc2l0aW9uKG1hcCkge1xuICAgICAgICBjb25zdCB4ID0gKHRoaXMuc3ByaXRlLngvbWFwLnNwcml0ZS50aWxlV2lkdGgpIHwgMDtcbiAgICAgICAgY29uc3QgeSA9ICh0aGlzLnNwcml0ZS55L21hcC5zcHJpdGUudGlsZUhlaWdodCkgfCAwO1xuICAgICAgICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG4gICAgfVxuXG4gICAgY2hhbmdlX2NvbGxpZGVyX2xheWVyKGRhdGEsIGRlc3RpbmF0aW9uX2NvbGxpZGVyX2xheWVyKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAoZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1t0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1tkZXN0aW5hdGlvbl9jb2xsaWRlcl9sYXllcl0pO1xuICAgICAgICB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyID0gZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXI7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gZGVzdGluYXRpb25fY29sbGlkZXJfbGF5ZXI7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMuZm9yRWFjaChmID0+IHsgZigpOyB9KTtcbiAgICB9XG5cbiAgICBpbnNlcnRfZXZlbnQoaWQpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuYWRkKGlkKTtcbiAgICB9XG5cbiAgICBnZXRfZXZlbnRzKCkge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuZXZlbnRzXS5tYXAoaWQgPT4gVGlsZUV2ZW50LmdldF9ldmVudChpZCkpO1xuICAgIH1cblxuICAgIHJlbW92ZV9ldmVudChpZCkge1xuICAgICAgICB0aGlzLmV2ZW50cy5kZWxldGUoaWQpO1xuICAgIH1cblxuICAgIGNyZWF0aW5nX2Jsb2NraW5nX3N0YWlyX2Jsb2NrKGNvbGxpc2lvbl9vYmopIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0X2xheWVyID0gdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuY3VzdG9tX2RhdGEuYmxvY2tfc3RhaXJfY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XG4gICAgICAgIGNvbnN0IHhfcG9zID0gKHRoaXMuY3VycmVudF94ICsgLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoO1xuICAgICAgICBjb25zdCB5X3BvcyA9ICh0aGlzLmN1cnJlbnRfeSArIDEuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0IC0gNDtcbiAgICAgICAgbGV0IGJvZHkgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi5jcmVhdGVCb2R5KHhfcG9zLCB5X3BvcywgMCwgdHJ1ZSk7XG4gICAgICAgIGJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmJvZHlfcmFkaXVzICogMjtcbiAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUod2lkdGgsIHdpZHRoLCAwLCAwKTtcbiAgICAgICAgaWYgKCEodGFyZ2V0X2xheWVyIGluIHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3VwcykpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1t0YXJnZXRfbGF5ZXJdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgfVxuICAgICAgICBib2R5LnNldENvbGxpc2lvbkdyb3VwKHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1t0YXJnZXRfbGF5ZXJdKTtcbiAgICAgICAgYm9keS5kYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgYm9keS5hbmd1bGFyRGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgIGJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIGJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgICAgIGJvZHkuZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICBib2R5LnN0YXRpYyA9IHRydWU7XG4gICAgICAgIGJvZHkuZGVidWcgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgYm9keS5jb2xsaWRlcyhjb2xsaXNpb25fb2JqLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgdGhpcy5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jayA9IGJvZHk7XG4gICAgfVxuXG4gICAgaW5pdGlhbF9jb25maWcobWFwX3Nwcml0ZSkge1xuICAgICAgICBjb25zdCBpbnRlcmFjdGFibGVfb2JqZWN0X3Nwcml0ZSA9IHRoaXMuZGF0YS5ucGNfZ3JvdXAuY3JlYXRlKDAsIDAsIHRoaXMua2V5X25hbWUgKyBcIl9cIiArIHRoaXMua2V5X25hbWUpO1xuICAgICAgICB0aGlzLnNldF9zcHJpdGUoaW50ZXJhY3RhYmxlX29iamVjdF9zcHJpdGUpO1xuICAgICAgICB0aGlzLnNwcml0ZS5pc19pbnRlcmFjdGFibGVfb2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcHJpdGUucm91bmRQeCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyID0gdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5zcHJpdGUuaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLnNlbmRfdG9fYmFjayAhPT0gdW5kZWZpbmVkKSB7IFxuICAgICAgICAgICAgdGhpcy5zcHJpdGUuc2VuZF90b19iYWNrID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zZW5kX3RvX2JhY2s7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYW5jaG9yX3ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zcHJpdGUuYW5jaG9yLnggPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmFuY2hvcl94O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci55ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeTtcbiAgICAgICAgY29uc3Qgc2hpZnRfeCA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2hpZnRfeCAhPT0gdW5kZWZpbmVkID8gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF94IDogMDtcbiAgICAgICAgY29uc3Qgc2hpZnRfeSA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uc2hpZnRfeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5zaGlmdF95IDogMDtcbiAgICAgICAgdGhpcy5zcHJpdGUuY2VudGVyWCA9ICh0aGlzLnggKyAxKSAqIG1hcF9zcHJpdGUudGlsZVdpZHRoICsgc2hpZnRfeDtcbiAgICAgICAgY29uc3QgYW5jaG9yX3NoaWZ0ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeSAqIG1hcF9zcHJpdGUudGlsZVdpZHRoICogMC41O1xuICAgICAgICB0aGlzLnNwcml0ZS5jZW50ZXJZID0gdGhpcy55ICogbWFwX3Nwcml0ZS50aWxlV2lkdGggLSBhbmNob3Jfc2hpZnQgKyBzaGlmdF95O1xuICAgICAgICB0aGlzLnNwcml0ZV9pbmZvLnNldEFuaW1hdGlvbih0aGlzLnNwcml0ZSwgdGhpcy5rZXlfbmFtZSk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxfYW5pbWF0aW9uID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5pbml0aWFsX2FuaW1hdGlvbjtcbiAgICAgICAgdGhpcy5zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHRoaXMua2V5X25hbWUgKyBcIl9cIiArIGluaXRpYWxfYW5pbWF0aW9uKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX3JlbGF0ZWRfZXZlbnRzKG1hcF9ldmVudHMsIG1hcCkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0X2N1cnJlbnRfcG9zaXRpb24obWFwKTtcbiAgICAgICAgbGV0IHhfcG9zID0gcG9zaXRpb24ueDtcbiAgICAgICAgbGV0IHlfcG9zID0gcG9zaXRpb24ueTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmV2ZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRfaW5mbyA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uZXZlbnRzW2ldO1xuICAgICAgICAgICAgeF9wb3MgKz0gZXZlbnRfaW5mby54X3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLnhfc2hpZnQgOiAwO1xuICAgICAgICAgICAgeV9wb3MgKz0gZXZlbnRfaW5mby55X3NoaWZ0ICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLnlfc2hpZnQgOiAwO1xuICAgICAgICAgICAgbGV0IGNvbGxpZGVyX2xheWVyX3NoaWZ0ID0gZXZlbnRfaW5mby5jb2xsaWRlcl9sYXllcl9zaGlmdCAhPT0gdW5kZWZpbmVkID8gZXZlbnRfaW5mby5jb2xsaWRlcl9sYXllcl9zaGlmdCA6IDA7XG4gICAgICAgICAgICBjb2xsaWRlcl9sYXllcl9zaGlmdCA9IHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQgIT09IHVuZGVmaW5lZCA/IHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQgOiBjb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQgPSBjb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZV9ldmVudCA9IGV2ZW50X2luZm8uYWN0aXZlICE9PSB1bmRlZmluZWQgPyBldmVudF9pbmZvLmFjdGl2ZSA6IHRydWU7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRfbGF5ZXIgPSB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50X2luZm8udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgaW50ZXJhY3RhYmxlX29iamVjdF9ldmVudF90eXBlcy5KVU1QOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9qdW1wX3R5cGVfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgaW50ZXJhY3RhYmxlX29iamVjdF9ldmVudF90eXBlcy5KVU1QX0FST1VORDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfanVtcF9hcm91bmRfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgaW50ZXJhY3RhYmxlX29iamVjdF9ldmVudF90eXBlcy5DTElNQjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfc3RhaXJfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBub3RfYWxsb3dlZF90aWxlX3Rlc3QoeCwgeSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm90X2FsbG93ZWRfdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdF9hbGxvd2VkX3RpbGUgPSB0aGlzLm5vdF9hbGxvd2VkX3RpbGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vdF9hbGxvd2VkX3RpbGUueCA9PT0geCAmJiBub3RfYWxsb3dlZF90aWxlLnkgPT09IHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0X2p1bXBfdHlwZV9ldmVudChldmVudF9pbmZvLCB4X3BvcywgeV9wb3MsIGFjdGl2ZV9ldmVudCwgdGFyZ2V0X2xheWVyLCBtYXBfZXZlbnRzKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdF9hbGxvd2VkX3RpbGVfdGVzdCh4X3BvcywgeV9wb3MpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkoeF9wb3MsIHlfcG9zKTtcbiAgICAgICAgaWYgKCEodGhpc19ldmVudF9sb2NhdGlvbl9rZXkgaW4gbWFwX2V2ZW50cykpIHtcbiAgICAgICAgICAgIG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IEp1bXBFdmVudChcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHhfcG9zLFxuICAgICAgICAgICAgeV9wb3MsXG4gICAgICAgICAgICBbZGlyZWN0aW9ucy51cCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLnJpZ2h0LCBkaXJlY3Rpb25zLmxlZnRdLFxuICAgICAgICAgICAgW3RhcmdldF9sYXllcl0sXG4gICAgICAgICAgICBldmVudF9pbmZvLmR5bmFtaWMsXG4gICAgICAgICAgICBhY3RpdmVfZXZlbnQsXG4gICAgICAgICAgICBldmVudF9pbmZvLmlzX3NldCA9PT0gdW5kZWZpbmVkID8gdHJ1ZTogZXZlbnRfaW5mby5pc19zZXRcbiAgICAgICAgKTtcbiAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB0aGlzLmluc2VydF9ldmVudChuZXdfZXZlbnQuaWQpO1xuICAgICAgICB0aGlzLmV2ZW50c19pbmZvW2V2ZW50X2luZm8udHlwZV0gPSBldmVudF9pbmZvO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgbmV3X2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdF07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldF9qdW1wX2Fyb3VuZF9ldmVudChldmVudF9pbmZvLCB4X3BvcywgeV9wb3MsIGFjdGl2ZV9ldmVudCwgdGFyZ2V0X2xheWVyLCBtYXBfZXZlbnRzKSB7XG4gICAgICAgIGxldCBpc19zZXQgPSBldmVudF9pbmZvLmlzX3NldCA9PT0gdW5kZWZpbmVkID8gdHJ1ZTogZXZlbnRfaW5mby5pc19zZXQ7XG4gICAgICAgIGdldF9zdXJyb3VuZGluZ3MoeF9wb3MsIHlfcG9zKS5mb3JFYWNoKChwb3MsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub3RfYWxsb3dlZF90aWxlX3Rlc3QocG9zLngsIHBvcy55KSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudF9sb2NhdGlvbl9rZXkgPSBUaWxlRXZlbnQuZ2V0X2xvY2F0aW9uX2tleShwb3MueCwgcG9zLnkpO1xuICAgICAgICAgICAgaWYgKHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5IGluIG1hcF9ldmVudHMpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGFscmVhZHkgdGhlcmVzIGEganVtcCBldmVudCBpbiB0aGlzIHBsYWNlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBtYXBfZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5sZW5ndGg7ICsraykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5KVU1QICYmIGV2ZW50LmlzX3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyh0YXJnZXRfbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcF9ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcG9zLngsXG4gICAgICAgICAgICAgICAgcG9zLnksXG4gICAgICAgICAgICAgICAgW2RpcmVjdGlvbnMucmlnaHQsIGRpcmVjdGlvbnMubGVmdCwgZGlyZWN0aW9ucy5kb3duLCBkaXJlY3Rpb25zLnVwXVtpbmRleF0sXG4gICAgICAgICAgICAgICAgW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXJdLFxuICAgICAgICAgICAgICAgIGV2ZW50X2luZm8uZHluYW1pYyxcbiAgICAgICAgICAgICAgICBhY3RpdmVfZXZlbnQsXG4gICAgICAgICAgICAgICAgaXNfc2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRfZXZlbnQobmV3X2V2ZW50LmlkKTtcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3X2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmVudHNfaW5mb1tldmVudF9pbmZvLnR5cGVdID0gZXZlbnRfaW5mbztcbiAgICB9XG5cbiAgICBzZXRfc3RhaXJfZXZlbnQoZXZlbnRfaW5mbywgeF9wb3MsIHlfcG9zLCBhY3RpdmVfZXZlbnQsIHRhcmdldF9sYXllciwgbWFwX2V2ZW50cykge1xuICAgICAgICBjb25zdCBldmVudHNfZGF0YSA9IFt7XG4gICAgICAgICAgICB4OiB4X3BvcyxcbiAgICAgICAgICAgIHk6IHlfcG9zICsgMSxcbiAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogW2RpcmVjdGlvbnMudXBdLFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllcl0sXG4gICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICBjbGltYmluZ19vbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIGNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb246IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyXTtcbiAgICAgICAgICAgICAgICBldmVudC5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyID0gdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LHtcbiAgICAgICAgICAgIHg6IHhfcG9zLFxuICAgICAgICAgICAgeTogeV9wb3MsXG4gICAgICAgICAgICBhY3RpdmF0aW9uX2RpcmVjdGlvbnM6IFtkaXJlY3Rpb25zLmRvd25dLFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XSxcbiAgICAgICAgICAgIGNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXI6IHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIsXG4gICAgICAgICAgICBjbGltYmluZ19vbmx5OiB0cnVlLFxuICAgICAgICAgICAgY29sbGlzaW9uX2NoYW5nZV9mdW5jdGlvbjogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQuYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID0gW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgKyB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdF07XG4gICAgICAgICAgICAgICAgZXZlbnQuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9IHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0se1xuICAgICAgICAgICAgeDogeF9wb3MsXG4gICAgICAgICAgICB5OiB5X3BvcyArIGV2ZW50X2luZm8ubGFzdF95X3NoaWZ0ICsgMSxcbiAgICAgICAgICAgIGFjdGl2YXRpb25fZGlyZWN0aW9uczogW2RpcmVjdGlvbnMudXBdLFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzOiBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XSxcbiAgICAgICAgICAgIGNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXI6IHRhcmdldF9sYXllcixcbiAgICAgICAgICAgIGNsaW1iaW5nX29ubHk6IHRydWUsXG4gICAgICAgICAgICBjb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPSBbdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuaW50ZXJtZWRpYXRlX2NvbGxpZGVyX2xheWVyX3NoaWZ0XTtcbiAgICAgICAgICAgICAgICBldmVudC5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyID0gdGhpcy5iYXNlX2NvbGxpc2lvbl9sYXllciArIHRoaXMuY29sbGlkZXJfbGF5ZXJfc2hpZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0se1xuICAgICAgICAgICAgeDogeF9wb3MsXG4gICAgICAgICAgICB5OiB5X3BvcyArIGV2ZW50X2luZm8ubGFzdF95X3NoaWZ0LFxuICAgICAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zOiBbZGlyZWN0aW9ucy5kb3duXSxcbiAgICAgICAgICAgIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVyczogW3RhcmdldF9sYXllcl0sXG4gICAgICAgICAgICBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyOiB0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5pbnRlcm1lZGlhdGVfY29sbGlkZXJfbGF5ZXJfc2hpZnQsXG4gICAgICAgICAgICBjbGltYmluZ19vbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIGNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb246IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA9IFt0aGlzLmJhc2VfY29sbGlzaW9uX2xheWVyICsgdGhpcy5jb2xsaWRlcl9sYXllcl9zaGlmdF07XG4gICAgICAgICAgICAgICAgZXZlbnQuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9IHRoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXIgKyB0aGlzLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV07XG4gICAgICAgIGV2ZW50c19kYXRhLmZvckVhY2goZXZlbnRfZGF0YSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2xvY2F0aW9uX2tleSA9IFRpbGVFdmVudC5nZXRfbG9jYXRpb25fa2V5KGV2ZW50X2RhdGEueCwgZXZlbnRfZGF0YS55KTtcbiAgICAgICAgICAgIGlmICghKHRoaXNfbG9jYXRpb25fa2V5IGluIG1hcF9ldmVudHMpKSB7XG4gICAgICAgICAgICAgICAgbWFwX2V2ZW50c1t0aGlzX2xvY2F0aW9uX2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBDbGltYkV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgZXZlbnRfZGF0YS54LFxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEueSxcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLmFjdGl2YXRpb25fZGlyZWN0aW9ucyxcbiAgICAgICAgICAgICAgICBldmVudF9kYXRhLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyxcbiAgICAgICAgICAgICAgICBldmVudF9pbmZvLmR5bmFtaWMsXG4gICAgICAgICAgICAgICAgYWN0aXZlX2V2ZW50LFxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcixcbiAgICAgICAgICAgICAgICBldmVudF9pbmZvLmlzX3NldCxcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGV2ZW50X2RhdGEuY2xpbWJpbmdfb25seVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hcF9ldmVudHNbdGhpc19sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0X2V2ZW50KG5ld19ldmVudC5pZCk7XG4gICAgICAgICAgICB0aGlzLmNvbGxpc2lvbl9jaGFuZ2VfZnVuY3Rpb25zLnB1c2goZXZlbnRfZGF0YS5jb2xsaXNpb25fY2hhbmdlX2Z1bmN0aW9uLmJpbmQobnVsbCwgbmV3X2V2ZW50KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV2ZW50c19pbmZvW2V2ZW50X2luZm8udHlwZV0gPSBldmVudF9pbmZvO1xuICAgIH1cblxuICAgIGNvbmZpZ19ib2R5KGNvbGxpc2lvbl9vYmopIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYm9keV9yYWRpdXMgPT09IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgY29sbGlzaW9uX2dyb3VwcyA9IGNvbGxpc2lvbl9vYmouaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3VwcztcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuc3ByaXRlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmFuY2hvci55ID0gdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLmtleV9uYW1lXS5hbmNob3JfeTsgLy9JbXBvcnRhbnQgdG8gYmUgYWZ0ZXIgdGhlIHByZXZpb3VzIGNvbW1hbmRcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy5rZXlfbmFtZV0uYm9keV9yYWRpdXMgPDwgMTtcbiAgICAgICAgY29uc3QgcG9seWdvbiA9IG1vdW50X2NvbGxpc2lvbl9wb2x5Z29uKHdpZHRoLCAtKHdpZHRoID4+IDEpLCB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMua2V5X25hbWVdLmNvbGxpc2lvbl9ib2R5X2JldmVsKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hZGRQb2x5Z29uKHtcbiAgICAgICAgICAgICAgICBvcHRpbWFsRGVjb21wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBza2lwU2ltcGxlQ2hlY2s6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ29sbGluZWFyUG9pbnRzOiBmYWxzZVxuICAgICAgICB9LCBwb2x5Z29uKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDb2xsaXNpb25Hcm91cChjb2xsaXNpb25fZ3JvdXBzW3RoaXMuYmFzZV9jb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5kYW1waW5nID0gMTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hbmd1bGFyRGFtcGluZyA9IDE7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcml0ZS5ib2R5LnN0YXRpYyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbV9kYXRhLmJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRpbmdfYmxvY2tpbmdfc3RhaXJfYmxvY2soY29sbGlzaW9uX29iaik7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IEp1bXBFdmVudCB9IGZyb20gXCIuL0p1bXBFdmVudFwiO1xuaW1wb3J0IHsgVGlsZUV2ZW50LCBldmVudF90eXBlcyB9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xpbWJFdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XG4gICAgcHVibGljIGNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgaXNfc2V0OiBib29sZWFuO1xuICAgIHB1YmxpYyBjbGltYmluZ19vbmx5OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciwgaXNfc2V0Pywgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Q/LCBjbGltYmluZ19vbmx5Pykge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBldmVudF90eXBlcy5DTElNQiwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QpO1xuICAgICAgICB0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgPSBjaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmlzX3NldCA9IGlzX3NldCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzX3NldDtcbiAgICAgICAgdGhpcy5jbGltYmluZ19vbmx5ID0gY2xpbWJpbmdfb25seSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBjbGltYmluZ19vbmx5O1xuICAgIH1cblxuICAgIGZpcmUoYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZyB8fCAhdGhpcy5jaGVja19wb3NpdGlvbigpIHx8ICF0aGlzLmRhdGEuaGVyb19tb3ZlbWVudF9hbGxvd2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nICYmICF0aGlzLmNsaW1iaW5nX29ubHkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfY2xpbWJpbmcoYWN0aXZhdGlvbl9kaXJlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLmRhdGEuaGVyby5jbGltYmluZyAmJiAhdGhpcy5jbGltYmluZ19vbmx5KSB8fCAodGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgJiYgdGhpcy5jbGltYmluZ19vbmx5KSkge1xuICAgICAgICAgICAgdGhpcy5maW5pc2hfY2xpbWJpbmcoYWN0aXZhdGlvbl9kaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnRfY2xpbWJpbmcoYWN0aXZhdGlvbl9kaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucGF1c2UoKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jaGFuZ2VfbWFwX2JvZHkodGhpcy5kYXRhLCB0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSB0cnVlO1xuICAgICAgICBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMuZG93bikge1xuICAgICAgICAgICAgY29uc3QgdHVybl9hbmltYXRpb24gPSB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5DTElNQiwgXCJ0dXJuXCIpO1xuICAgICAgICAgICAgdHVybl9hbmltYXRpb24ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHhfdHdlZW4gPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54ICsgMC41KTtcbiAgICAgICAgICAgICAgICBjb25zdCB5X3R3ZWVuID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgKyAyNTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KS50byhcbiAgICAgICAgICAgICAgICAgICAgeyB4OiB4X3R3ZWVuLCB5OiB5X3R3ZWVuIH0sXG4gICAgICAgICAgICAgICAgICAgIDMwMCxcbiAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfYW5pbWF0aW9uID0gdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuQ0xJTUIsIFwic3RhcnRcIik7XG4gICAgICAgICAgICAgICAgc3RhcnRfYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5DTElNQjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVfY2xpbWJfY29sbGlzaW9uX2JvZGllcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLkNMSU1CLCBiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICBjb25zdCBvdXRfdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSLzM7XG4gICAgICAgICAgICBjb25zdCB4X3R3ZWVuID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XG4gICAgICAgICAgICBjb25zdCB5X3R3ZWVuID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNTtcbiAgICAgICAgICAgIGlmICh0aGlzLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9jbGltYl9jb2xsaXNpb25fYm9kaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KS50byhcbiAgICAgICAgICAgICAgICB7IHg6IHhfdHdlZW4sIHk6IHlfdHdlZW4gfSxcbiAgICAgICAgICAgICAgICBvdXRfdGltZSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9hY3Rpb24gPSBiYXNlX2FjdGlvbnMuQ0xJTUI7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5pZGxlX2NsaW1iaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmlzaF9jbGltYmluZyhhY3RpdmF0aW9uX2RpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5wYXVzZSgpO1xuICAgICAgICBpZiAoYWN0aXZhdGlvbl9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRfaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHRfaW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggIT09IHRoaXMueCB8fCBuZXh0X2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICE9PSB0aGlzLnkgLSAxKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFuZ2VfdG9fY29sbGlzaW9uX2xheWVyICE9PSBuZXh0X2ludGVyYWN0YWJsZV9vYmplY3QuYmFzZV9jb2xsaXNpb25fbGF5ZXIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGVuZF9hbmltYXRpb24gPSB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5DTElNQiwgXCJlbmRcIik7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keSkudG8oXG4gICAgICAgICAgICAgICAgeyB5OiB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSAtIDE1IH0sXG4gICAgICAgICAgICAgICAgMTcwLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsX3NoYWRvd19wb3MgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSAtIDE1O1xuICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgxNzAsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cueSA9IGZpbmFsX3NoYWRvd19wb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbmRfYW5pbWF0aW9uLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgxNTAsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnkgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUueTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMudXBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfY2xpbWJfY29sbGlzaW9uX2JvZGllcyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgyNTAsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmNsaW1iaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5JRExFO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2RpcmVjdGlvbihkaXJlY3Rpb25zLnVwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGl2YXRpb25fZGlyZWN0aW9uID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5nZV90b19jb2xsaXNpb25fbGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNoYW5nZV9tYXBfYm9keSh0aGlzLmRhdGEsIHRoaXMuY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLklETEUsIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XG4gICAgICAgICAgICBjb25zdCBvdXRfdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSLzM7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KS50byhcbiAgICAgICAgICAgICAgICB7IHk6IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS55ICsgMTUgfSxcbiAgICAgICAgICAgICAgICBvdXRfdGltZSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY2xpbWJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHluYW1pYykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlX2NsaW1iX2NvbGxpc2lvbl9ib2RpZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy55ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5JRExFO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2RpcmVjdGlvbihkaXJlY3Rpb25zLnVwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZV9jbGltYl9jb2xsaXNpb25fYm9kaWVzKCkge1xuICAgICAgICB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZS5zZW5kX3RvX2JhY2sgPSB0cnVlO1xuICAgICAgICBjb25zdCBwb3N0aW9ucyA9IHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuZXZlbnRzX2luZm8uY2xpbWIuY29sbGlzaW9uX3RpbGVzLm1hcCh0aWxlX3NoaWZ0ID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7eDogdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5jdXJyZW50X3ggKyB0aWxlX3NoaWZ0LngsIHk6IHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3QuY3VycmVudF95ICsgdGlsZV9zaGlmdC55fTtcbiAgICAgICAgfSk7XG4gICAgICAgIEp1bXBFdmVudC51bnNldF9zZXRfanVtcF9jb2xsaXNpb24odGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5tYXBfY29sbGlzaW9uX2dyb3VwLCB0cnVlKTtcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCwgdHJ1ZSk7XG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5yZW1vdmVDb2xsaXNpb25Hcm91cCh0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbY29sbGlkZV9pbmRleF0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHhfcG9zID0gKHBvc3Rpb25zW2ldLnggKyAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICBjb25zdCB5X3BvcyA9IChwb3N0aW9uc1tpXS55ICsgLjUpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodDtcbiAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQm9keSh4X3BvcywgeV9wb3MsIDAsIHRydWUpO1xuICAgICAgICAgICAgYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICAgICAgYm9keS5zZXRSZWN0YW5nbGUodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoLCB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0LCAwLCAwKTtcbiAgICAgICAgICAgIGJvZHkuc2V0Q29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2V2ZW50c19jb2xsaXNpb25fZ3JvdXApO1xuICAgICAgICAgICAgYm9keS5kYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgICAgIGJvZHkuYW5ndWxhckRhbXBpbmcgPSBudW1iZXJzLk1BUF9EQU1QSU5HO1xuICAgICAgICAgICAgYm9keS5zZXRaZXJvUm90YXRpb24oKTtcbiAgICAgICAgICAgIGJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgICAgIGJvZHkuc3RhdGljID0gdHJ1ZTtcbiAgICAgICAgICAgIGJvZHkuZGVidWcgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgICAgIGJvZHkuY29sbGlkZXModGhpcy5kYXRhLmNvbGxpc2lvbi5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbGxpc2lvbl90aWxlc19ib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZV9jbGltYl9jb2xsaXNpb25fYm9kaWVzKGNvbGxpZGVfd2l0aF9tYXAgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMub3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Quc3ByaXRlLnNlbmRfdG9fYmFjayA9IGZhbHNlO1xuICAgICAgICBKdW1wRXZlbnQuc2V0X2p1bXBfY29sbGlzaW9uKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgaWYgKGNvbGxpZGVfd2l0aF9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuZGF0YS5jb2xsaXNpb24ubWFwX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLmhlcm9fY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjb2xsaWRlX2luZGV4IGluIHRoaXMuZGF0YS5jb2xsaXNpb24uaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpZGVfaW5kZXhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgaW4gdGhpcy5kYXRhLmNvbGxpc2lvbi5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5jb2xsaWRlcyh0aGlzLmRhdGEuY29sbGlzaW9uLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYm9kaWVzID0gdGhpcy5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5jb2xsaXNpb25fdGlsZXNfYm9kaWVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgYm9kaWVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBib2RpZXMgPSBbXTtcbiAgICB9XG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93JztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vdXRpbHMvQ3Vyc29yQ29udHJvbCc7XG5pbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMDA7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAzNjtcbmNvbnN0IE1BWF9QRVJfTElORSA9IDQ7XG5jb25zdCBXT1JLSU5HX1dJRFRIID0gQkFTRV9XSU5fV0lEVEggLSAyICogKG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEgpO1xuY29uc3QgU0xPVF9XSURUSCA9IChXT1JLSU5HX1dJRFRIL01BWF9QRVJfTElORSkgfCAwO1xuY29uc3QgU0xPVF9XSURUSF9DRU5URVIgPSAoV09SS0lOR19XSURUSC9NQVhfUEVSX0xJTkUvMikgfCAwO1xuXG4vKkEgd2luZG93IHRlbXBsYXRlIHNob3dpbmcgY2hhcmFjdGVyIHNwcml0ZXNcbkRpc3BsYXlzIGNoYXJhY3RlcnMgaW4gbGluZSwgdXNpbmcgdGhlaXIgaWRsZSBhbmltYXRpb25zXG5Vc2VkIGZvciBQc3luZXJneSBhbmQgSXRlbSBtZW51c1xuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZVxuICAgICAgIG9uX2Nob29zZSBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDaG9vc2VcIiBvcHRpb25cbiAgICAgICBvbl9jYW5jZWwgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIFwiQ2FuY2VsXCIgb3B0aW9uXG4gICAgICAgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IFtudW1iZXJdIC0gQ291bnRzIHBhcmVudC1jaGlsZCBzdGF0dXMgZm9yIEVTQyBrZXkgKENhbmNlbC9CYWNrKVxuICAgICAgIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5IFtudW1iZXJdIC0gQ291bnRzIHBhcmVudC1jaGlsZCBzdGF0dXMgZm9yIEVudGVyIGtleSAoQ2hvb3NlL1NlbGVjdCkqL1xuZXhwb3J0IGNsYXNzIENoYXJzTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBvbl9jaG9vc2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBvbl9jaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBvbl9jYW5jZWw6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfeTogbnVtYmVyO1xuICAgIHB1YmxpYyB1bnNlbGVjdGVkX3k6IG51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfYnV0dG9uX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGxpbmVfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVudV9vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBtZW51X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgY3Vyc29yX2NvbnRyb2w6IEN1cnNvckNvbnRyb2w7XG4gICAgcHVibGljIGNoYXJfYnV0dG9uczoge1xuICAgICAgICBbY2hhcl9rZXlfbmFtZTogc3RyaW5nXTogUGhhc2VyLlNwcml0ZVxuICAgIH07XG4gICAgcHVibGljIGJ1dHRvbnNfbnVtYmVyOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBvbl9jaG9vc2UsIG9uX2NoYW5nZSwgb25fY2FuY2VsLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XG4gICAgICAgIHRoaXMub25fY2hvb3NlID0gb25fY2hvb3NlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX2Nob29zZTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hhbmdlO1xuICAgICAgICB0aGlzLm9uX2NhbmNlbCA9IG9uX2NhbmNlbCA9PT0gdW5kZWZpbmVkID8gKCkgPT4ge30gOiBvbl9jYW5jZWw7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgMCwgMCwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF95ID0gMDtcbiAgICAgICAgdGhpcy51bnNlbGVjdGVkX3kgPSAtNDtcbiAgICAgICAgdGhpcy5zZXRfY2hhcnMoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSAwO1xuICAgICAgICB0aGlzLmxpbmVfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1lbnVfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbCA9IG5ldyBDdXJzb3JDb250cm9sKHRoaXMuZ2FtZSwgdHJ1ZSwgZmFsc2UsIHRoaXMuZ2V0X21heF9wZXJfbGluZS5iaW5kKHRoaXMpLCB1bmRlZmluZWQsIHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICB0aGlzLmNoYW5nZV9idXR0b24uYmluZCh0aGlzKSwgdW5kZWZpbmVkLCB0aGlzLmdldF9zZWxlY3RlZF9idXR0b25faW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfc2VsZWN0ZWRfYnV0dG9uX2luZGV4LmJpbmQodGhpcyksXG4gICAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZhdGVkLmJpbmQodGhpcyksIHRoaXMuZ2V0X2N1cnNvcl94LmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBjdXJzb3IncyB4IHZhbHVlXG4gICAgXG4gICAgT3V0cHV0OiBbbnVtYmVyXSovXG4gICAgZ2V0X2N1cnNvcl94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFyX2J1dHRvbnNbdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5rZXlfbmFtZV0ueDtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIGN1cnNvcidzIHkgdmFsdWVcbiAgICBcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfY3Vyc29yX3koKSB7XG4gICAgICAgIHJldHVybiAyMjtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgcGVyIGxpbmVcbiAgICBcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfbWF4X3Blcl9saW5lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLnNsaWNlKHRoaXMubGluZV9pbmRleCAqIE1BWF9QRVJfTElORSwgKHRoaXMubGluZV9pbmRleCArIDEpICogTUFYX1BFUl9MSU5FKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBpbmRleCBmb3IgdGhlIHNlbGVjdGVkIGNoYXJhY3RlciBidXR0b25cbiAgICBcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfc2VsZWN0ZWRfYnV0dG9uX2luZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXg7XG4gICAgfVxuXG4gICAgLypTZXRzIGFuIGluZGV4IGZvciB0aGUgc2VsZWN0ZWQgY2hhcmFjdGVyIGJ1dHRvblxuICAgIFxuICAgIE91dHB1dDogW251bWJlcl0qL1xuICAgIHNldF9zZWxlY3RlZF9idXR0b25faW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyB0aGUgXCJvcGVuXCIgc3RhdGUgZm9yIHRoaXMgbWVudVxuXG4gICAgT3V0cHV0OiBbYm9vbGVhbl0qL1xuICAgIGlzX29wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lbnVfb3BlbjtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSBmb3IgdGhpcyBtZW51XG5cbiAgICBPdXRwdXQ6IFtib29sZWFuXSovXG4gICAgaXNfYWN0aXZhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZW51X2FjdGl2ZTtcbiAgICB9XG5cbiAgICAvKkNyZWF0ZXMgdGhlIGNoYXJhY3RlciBidXR0b25zIGZyb20gdGhlIHBhcnR5IGRhdGFcbiAgICBEaXNwbGF5cyBuZXcgc3ByaXRlcyBmb3IgZWFjaCBwYXJ0eSBtZW1iZXIgb24gc2NyZWVuIHdpdGggdGhlaXIgaWRsZSBhbmltYXRpb24qL1xuICAgIHNldF9jaGFycygpIHtcbiAgICAgICAgZm9yIChsZXQga2V5X25hbWUgaW4gdGhpcy5jaGFyX2J1dHRvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcl9idXR0b25zW2tleV9uYW1lXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfLmNsYW1wKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgsIDAsIE1BWF9QRVJfTElORSk7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIHRoaXMuY2hhcl9idXR0b25zW2NoYXIua2V5X25hbWVdID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgY2hhci5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoYmFzZV9hY3Rpb25zLklETEUpKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXS5zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24odGhpcy5jaGFyX2J1dHRvbnNbY2hhci5rZXlfbmFtZV0sIGJhc2VfYWN0aW9ucy5JRExFKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcl9idXR0b25zW2NoYXIua2V5X25hbWVdLmFuaW1hdGlvbnMucGxheShjaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qTWFuYWdlcyBpbnRlcmFjdGlvbiB3aXRoIHRoZSBwYXJlbnQgbWVudVxuICAgIFBhc3NlcyBjb250cm9sIG92ZXIgdG8gdGhlIENob29zZS9DYW5jZWwgZnVuY3Rpb25zKi9cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWVudV9vcGVuIHx8ICF0aGlzLm1lbnVfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UodGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm1lbnVfb3BlbiB8fCAhdGhpcy5tZW51X2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICB0aGlzLm9uX2NhbmNlbCgpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBwb3NpdGlvbiBmb3IgdGhlIGNoYXJhY3RlciBtZW51Ki9cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF8uY2xhbXAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCwgMCwgTUFYX1BFUl9MSU5FKTsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnNbY2hhci5rZXlfbmFtZV0uY2VudGVyWCA9IGkgKiBTTE9UX1dJRFRIICsgU0xPVF9XSURUSF9DRU5URVIgKyBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIICsgbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIO1xuICAgICAgICAgICAgdGhpcy5jaGFyX2J1dHRvbnNbY2hhci5rZXlfbmFtZV0ueSA9IHRoaXMudW5zZWxlY3RlZF95O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXJcblxuICAgIElucHV0OiBvbGRfaW5kZXggW251bWJlcl0gLSBQcmV2aW91c2x5IHNlbGVjdGVkIGluZGV4XG4gICAgICAgICAgIG5ld19pbmRleCBbbnVtYmVyXSAtIE5ldyBpbmRleCB0byBiZSBzZWxlY3RlZCovXG4gICAgY2hhbmdlX2J1dHRvbihvbGRfaW5kZXgsIG5ld19pbmRleCkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbihvbGRfaW5kZXgpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZShuZXdfaW5kZXgpO1xuICAgICAgICB0aGlzLnNldF9idXR0b24obmV3X2luZGV4KTtcbiAgICB9XG5cbiAgICAvKlNob3dzIHRoZSBjaGFyYWN0ZXIgYXMgXCJzZWxlY3RlZFwiXG4gICAgTW92ZXMgdGhlIGNoYXJhY3RlciBkb3duIG9uIHNjcmVlIG4qL1xuICAgIHNldF9idXR0b24oaW5kZXgpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkX2NoYXIgPSB0aGlzLmNoYXJfYnV0dG9uc1t0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXhdLmtleV9uYW1lXTtcbiAgICAgICAgc2VsZWN0ZWRfY2hhci55ID0gdGhpcy5zZWxlY3RlZF95O1xuICAgIH1cblxuICAgIC8qUmVzZXRzIHRoZSBjaGFyYWN0ZXIncyBcInNlbGVjdGVkXCIgc3RhdGVcbiAgICBNb3ZlcyB0aGUgY2hhcmFjdGVyIGJhY2sgaW4gbGluZSB3aXRoIHRoZSByZW1haW5pbmcgdW5zZWxlY3RlZCBtZW1iZXJzKi9cbiAgICByZXNldF9idXR0b24oaW5kZXgpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkX2NoYXIgPSB0aGlzLmNoYXJfYnV0dG9uc1t0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbaW5kZXhdLmtleV9uYW1lXTtcbiAgICAgICAgc2VsZWN0ZWRfY2hhci55ID0gdGhpcy51bnNlbGVjdGVkX3k7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXIgaW5kZXggdXNpbmcgdGhlIHBhcnR5IGluZGV4XG4gICAgXG4gICAgSW5wdXQ6IHBhcnR5X2luZGV4IFtudW1iZXJdIC0gVGhlIGNoYXJhY3RlcidzIHBhcnR5IGluZGV4Ki9cbiAgICBzZXRfY2hhcl9ieV9pbmRleChwYXJ0eV9pbmRleCkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbih0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gcGFydHlfaW5kZXg7XG4gICAgICAgIHRoaXMuc2V0X2J1dHRvbih0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCk7XG4gICAgfVxuXG4gICAgLypPcGVucyB0aGlzIHdpbmRvd1xuXG4gICAgSW5wdXQ6IHNlbGVjdF9pbmRleCBbbnVtYmVyXSAtIERlZmF1bHQgY2hhcmFjdGVyIHNlbGVjdGVkIGluZGV4XG4gICAgICAgICAgIHN0YXJ0X2FjdGl2ZSBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgbWVudSBzdGFydHMgaW4gXCJhY3RpdmVcIiBzdGF0ZSovXG4gICAgb3BlbihzZWxlY3RfaW5kZXgsIHN0YXJ0X2FjdGl2ZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuY2hhcl9idXR0b25zKS5sZW5ndGggIT0gXy5jbGFtcCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoLCAwLCBNQVhfUEVSX0xJTkUpKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9jaGFycygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnV0dG9uc19udW1iZXIgPSBfLmNsYW1wKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgsIDAsIE1BWF9QRVJfTElORSk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gc2VsZWN0X2luZGV4ID09PSB1bmRlZmluZWQgPyAwIDogc2VsZWN0X2luZGV4O1xuICAgICAgICB0aGlzLmxpbmVfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9idXR0b24odGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gc3RhcnRfYWN0aXZlO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKkNsb3NlcyB0aGlzIHdpbmRvdyovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4KTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qRW5hYmxlcyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSBmb3IgdGhpcyB3aW5kb3cqL1xuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIC8qRGlzYWJsZXMgdGhlIFwiYWN0aXZlXCIgc3RhdGUgZm9yIHRoaXMgd2luZG93Ki9cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLm1lbnVfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSAnLi4vTWFpbkNoYXInO1xuaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSAnLi4vV2luZG93JztcblxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMDA7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSA5MjtcbmNvbnN0IEJBU0VfV0lOX1ggPSAwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xuXG4vKkEgd2luZG93IHRlbXBsYXRlIHdpdGggY2hhcmFjdGVyIGluZm9ybWF0aW9uXG5Vc2VkIGZvciBQc3luZXJneSBhbmQgSXRlbSBtZW51c1xuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0Ki9cbmV4cG9ydCBjbGFzcyBCYXNpY0luZm9XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgYXZhdGFyX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHhfYXZhdGFyOiBudW1iZXI7XG4gICAgcHVibGljIHlfYXZhdGFyOiBudW1iZXI7XG4gICAgcHVibGljIGF2YXRhcjogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgbmFtZV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBsdl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjbGFzc190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBocF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBwcF90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBtYXhfaHBfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbWF4X3BwX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGV4cF90ZXh0OiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1g7XG4gICAgICAgIHRoaXMueSA9IEJBU0VfV0lOX1k7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54LCB0aGlzLnksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuXG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnhfYXZhdGFyID0gdGhpcy54ICsgODtcbiAgICAgICAgdGhpcy55X2F2YXRhciA9IHRoaXMueSArIDg7XG4gICAgICAgIHRoaXMuYXZhdGFyID0gbnVsbDtcblxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiTHZcIiwgNDgsIDI0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkhQXCIsIDgsIDQ4KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIDgsIDU2KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIi9cIiwgNTYsIDQ5KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIi9cIiwgNTYsIDU2KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkV4cFwiLCA4LCA3Myk7XG5cbiAgICAgICAgdGhpcy5uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgOCk7XG4gICAgICAgIHRoaXMubHZfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDgwLCAyNCk7XG4gICAgICAgIHRoaXMuY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDgsIDQwKTtcbiAgICAgICAgdGhpcy5ocF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNTEsIDQ4LCB0cnVlKTtcbiAgICAgICAgdGhpcy5wcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNTEsIDU2LCB0cnVlKTtcbiAgICAgICAgdGhpcy5tYXhfaHBfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDk0LCA0OCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubWF4X3BwX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA5NCwgNTYsIHRydWUpO1xuICAgICAgICB0aGlzLmV4cF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgOTQsIDgwLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKiBQbGFjZXMgdGhlIGF2YXRhciBncm91cCBjb3JyZWN0bHkgb24gc2NyZWVuICovXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54X2F2YXRhcjtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueV9hdmF0YXI7XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBzZWxlY3RlZCBjaGFyYWN0ZXJcbiAgICBUaGUgY2hhcmFjdGVyJ3MgYXZhdGFyIGlzIGxvYWRlZCBmcm9tIGNhY2hlXG5cbiAgICBJbnB1dDogY2hhciBbc3RyaW5nXSAtIFRoZSBzZWxlY3RlZCBjaGFyYWN0ZXIncyBuYW1lKi9cbiAgICBzZXRfY2hhcihjaGFyKSB7XG4gICAgICAgIGlmIChjaGFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5sZXZlbC50b1N0cmluZygpLCB0aGlzLmx2X3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jbGFzcy5uYW1lLCB0aGlzLmNsYXNzX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jdXJyZW50X2hwLnRvU3RyaW5nKCksIHRoaXMuaHBfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmN1cnJlbnRfcHAudG9TdHJpbmcoKSwgdGhpcy5wcF90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubWF4X2hwLnRvU3RyaW5nKCksIHRoaXMubWF4X2hwX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5tYXhfcHAudG9TdHJpbmcoKSwgdGhpcy5tYXhfcHBfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmN1cnJlbnRfZXhwLnRvU3RyaW5nKCksIHRoaXMuZXhwX3RleHQpO1xuXG4gICAgICAgIGlmICh0aGlzLmF2YXRhcikge1xuICAgICAgICAgICAgdGhpcy5hdmF0YXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXZhdGFyID0gdGhpcy5hdmF0YXJfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiYXZhdGFyc1wiLCB0aGlzLmNoYXIua2V5X25hbWUpO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhlIHdpbmRvdyB3aXRoIHRoZSBzZWxlY3RlZCBwYXJ0eSBtZW1iZXJcblxuICAgIElucHV0OiBpbml0aWFsX2NoYXIgW3N0cmluZ10gLSBUaGUgY2hhcmFjdGVyIHNlbGVjdGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbCkqL1xuICAgIG9wZW4oaW5pdGlhbF9jaGFyLCBjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnNldF9jaGFyKGluaXRpYWxfY2hhcik7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qQ2xvc2VzIHRoZSB3aW5kb3dcblxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgY2xvc2UoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBXaW5kb3csIFRleHRPYmogfSBmcm9tIFwiLi4vV2luZG93XCI7XG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSBcIi4uL3V0aWxzL0N1cnNvckNvbnRyb2xcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgeyBJdGVtU2xvdCwgTWFpbkNoYXIgfSBmcm9tIFwiLi4vTWFpbkNoYXJcIjtcblxuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9YID0gMTA0O1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9ZID0gMjQ7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1dJRFRIID0gMTMyO1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9IRUlHSFQgPSAxMDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gMTtcbmNvbnN0IEVMRU1fUEFERElOR19UT1AgPSAxMjtcbmNvbnN0IEVMRU1fUEFERElOR19MRUZUID0gODtcbmNvbnN0IEVMRU1fUEVSX1BBR0UgPSA1O1xuY29uc3QgUFNZX1BQX1ggPSAxMjU7XG5jb25zdCBQU1lfUFBfQ09TVF9YID0gMTAyO1xuY29uc3QgUFNZX1BQX0NPU1RfWSA9IDg7XG5jb25zdCBFTEVNX05BTUVfSUNPTl9TSElGVCA9IDQ7XG5jb25zdCBISUdITElHSFRfV0lEVEggPSAxMTQ7XG5jb25zdCBISUdITElHSFRfSEVJR0hUID0gbnVtYmVycy5GT05UX1NJWkU7XG5jb25zdCBTVUJfSUNPTl9YID0gMDtcbmNvbnN0IFNVQl9JQ09OX1kgPSAwO1xuXG4vKkRpc3BsYXlzIHRoZSBjaGFyYWN0ZXIncyBQc3luZXJneSBvciBJdGVtc1xuVXNlZCBpbiBhIHNlbGVjdGlvbi10eXBlIG1lbnUsIHJlZmVycmluZyB0byB0aGUgYWJvdmVcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcbiAgICAgICBpc19wc3luZXJneV93aW5kb3cgW2Jvb2xlYW5dIC0gV2hldGhlciB0aGlzIHdpbmRvdyBzaG93cyBwc3luZXJneSBvciBpdGVtc1xuICAgICAgIG9uX2Nob29zZSBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZXhlY3V0ZWQgb24gXCJDaG9vc2VcIiBvcHRpb25cbiAgICAgICBvbl9jaGFuZ2UgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGV4ZWN1dGVkIG9uIGEgXCJDaGFuZ2VcIiBldmVudFxuICAgICAgIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSBbbnVtYmVyXSAtIENvdW50cyBwYXJlbnQtY2hpbGQgc3RhdHVzIGZvciBFU0Mga2V5IChDYW5jZWwvQmFjaylcbiAgICAgICBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSBbbnVtYmVyXSAtIENvdW50cyBwYXJlbnQtY2hpbGQgc3RhdHVzIGZvciBFbnRlciBrZXkgKENob29zZS9TZWxlY3QpKi9cbmV4cG9ydCBjbGFzcyBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBpc19wc3luZXJneV93aW5kb3c6IGJvb2xlYW47XG4gICAgcHVibGljIGVsZW1lbnRfbGlzdDogYW55O1xuICAgIHB1YmxpYyBlbGVtZW50X3Nwcml0ZV9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgb25fY2hvb3NlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgb25fY2hhbmdlOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHdpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2YXRlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgY2hhcl9zZWxlY3RfY29udHJvbHNfc3ByaXRlczogKFBoYXNlci5TcHJpdGV8UGhhc2VyLkJpdG1hcFRleHQpW107XG4gICAgcHVibGljIHBhZ2VfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9udW1iZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgdGV4dF9zcHJpdGVzX2luX3dpbmRvdzogVGV4dE9ialtdO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZXNfaW5fd2luZG93OiAoUGhhc2VyLlNwcml0ZXxQaGFzZXIuR3JvdXApW107XG4gICAgcHVibGljIHNlbGVjdGVkX2VsZW1lbnRfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgZWxlbWVudHM6IHN0cmluZ1tdfEl0ZW1TbG90W107XG4gICAgcHVibGljIGN1cnNvcl9jb250cm9sOiBDdXJzb3JDb250cm9sO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9lbGVtZW50X3R3ZWVuOiBQaGFzZXIuVHdlZW47XG4gICAgcHVibGljIGhpZ2hsaWdodF9iYXI6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBpdGVtX29ianM6IEl0ZW1TbG90W107XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBpc19wc3luZXJneV93aW5kb3csIG9uX2NoYW5nZSwgb25fY2hvb3NlLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5Pykge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA9IGlzX3BzeW5lcmd5X3dpbmRvdztcbiAgICAgICAgdGhpcy5lbGVtZW50X2xpc3QgPSB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0IDogdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdDtcbiAgICAgICAgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXkgPSB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IFwiYWJpbGl0aWVzX2ljb25zXCIgOiBcIml0ZW1zX2ljb25zXCI7XG4gICAgICAgIHRoaXMub25fY2hvb3NlID0gb25fY2hvb3NlID09PSB1bmRlZmluZWQgPyAoKSA9PiB7fSA6IG9uX2Nob29zZTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hhbmdlO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFBTWV9PVkVSVklFV19XSU5fWCwgUFNZX09WRVJWSUVXX1dJTl9ZLCBQU1lfT1ZFUlZJRVdfV0lOX1dJRFRILCBQU1lfT1ZFUlZJRVdfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbCgpO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMgPSBbXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoOSwgOTcsIFwic2hpZnRfa2V5Ym9hcmRcIiwgMHgwKSxcbiAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCg4LCA5NiwgXCJzaGlmdF9rZXlib2FyZFwiKSxcbiAgICAgICAgICAgIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cCgzMiwgOTcsIFwidGFiX2tleWJvYXJkXCIsIDB4MCksXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoMzEsIDk2LCBcInRhYl9rZXlib2FyZFwiKVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBzcHJpdGVfcGFpciA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiOiBDaGFuZ2UgQ2hhclwiLCA0OSwgOTYpO1xuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMucHVzaChzcHJpdGVfcGFpci50ZXh0LCBzcHJpdGVfcGFpci5zaGFkb3cpO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbCA9IG5ldyBDdXJzb3JDb250cm9sKHRoaXMuZ2FtZSwgdHJ1ZSwgdHJ1ZSwgdGhpcy5nZXRfcGFnZV9udW1iZXIuYmluZCh0aGlzKSwgdGhpcy5nZXRfZWxlbV9wZXJfcGFnZS5iaW5kKHRoaXMpLCB0aGlzLmdyb3VwLFxuICAgICAgICAgICAgdGhpcy5wYWdlX2NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLmVsZW1lbnRfY2hhbmdlLmJpbmQodGhpcyksIHRoaXMuZ2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfZWxlbWVudF9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9lbGVtZW50X2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2YXRlZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4gPSBudWxsO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmhpZ2hsaWdodF9iYXIpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmVnaW5GaWxsKHRoaXMud2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEVMRU1fUEFERElOR19MRUZUICsgKG51bWJlcnMuSUNPTl9XSURUSCA+PiAxKSwgMCwgSElHSExJR0hUX1dJRFRILCBISUdITElHSFRfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmVuZEZpbGwoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93KSB7XG4gICAgICAgICAgICB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIFBTWV9QUF9DT1NUX1gsIFBTWV9QUF9DT1NUX1kpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2luZG93LmluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCk7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBQc3luZXJneS9JdGVtXG5cbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gOiBUaGUgZWxlbWVudCdzIGluZGV4XG5cbiAgICBPdXRwdXQ6IFtzdHJpbmddKi9cbiAgICBnZXRfZWxlbWVudF9rZXlfbmFtZShpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB0aGlzLmVsZW1lbnRzW2luZGV4XSA6ICh0aGlzLmVsZW1lbnRzW2luZGV4XSBhcyBJdGVtU2xvdCkua2V5X25hbWU7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZhdGVkKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZhdGVkKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ICYmIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZWxlbWVudHNbdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4XSBhcyBzdHJpbmddLmlzX2ZpZWxkX3BzeW5lcmd5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UoXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZSh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpIGFzIHN0cmluZ10sXG4gICAgICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXG4gICAgICAgICAgICApO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyBcIm9wZW5cIiBzdGF0ZVxuXG4gICAgT3V0cHV0OiBbYm9vbGVhbl0gLSBUcnVlIGlmIFwib3BlblwiKi9cbiAgICBpc19vcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyBcImFjdGl2YXRlZFwiIHN0YXRlXG5cbiAgICBPdXRwdXQ6IFtib29sZWFuXSAtIFRydWUgaWYgXCJhY3RpdmF0ZWRcIiovXG4gICAgaXNfYWN0aXZhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfYWN0aXZhdGVkO1xuICAgIH1cblxuICAgIC8qUmV0dXJucyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVsZW1lbnQncyBpbmRleFxuXG4gICAgT3V0cHV0OiBbbnVtYmVyXSovXG4gICAgZ2V0X2VsZW1lbnRfaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXg7XG4gICAgfVxuXG4gICAgLypTZWxlY3RzIGEgbmV3IGVsZW1lbnRcblxuICAgIElucHV0OiBpbmRleCBbbnVtYmVyXSAtIFRoZSBuZXcgZWxlbWVudCdzIGluZGV4Ki9cbiAgICBzZXRfZWxlbWVudF9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIGN1cnJlbnQgcGFnZSdzIGluZGV4XG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9pbmRleDtcbiAgICB9XG5cbiAgICAvKlNlbGVjdHMgYSBuZXcgcGFnZVxuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gVGhlIG5ldyBwYWdlJ3MgaW5kZXgqL1xuICAgIHNldF9wYWdlX2luZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIC8qUmV0dXJucyB0aGUgY3Vyc29yJ3MgeCB2YWx1ZVxuXG4gICAgT3V0cHV0OiBbbnVtYmVyXSovXG4gICAgZ2V0X2N1cnNvcl94KCkge1xuICAgICAgICByZXR1cm4gLTU7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBjdXJzb3IncyB5IHZhbHVlXG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfY3Vyc29yX3koKSB7XG4gICAgICAgIHJldHVybiBFTEVNX1BBRERJTkdfVE9QICsgKChudW1iZXJzLklDT05fSEVJR0hUID4+IDEpfDApICsgdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ICogKG51bWJlcnMuSUNPTl9IRUlHSFQgKyBTUEFDRV9CRVRXRUVOX0lURU1TKTtcbiAgICB9XG5cbiAgICAvKlJldHVybnMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGlzIHBhZ2VcbiAgICBcbiAgICBPdXRwdXQ6IFtudW1iZXJdKi9cbiAgICBnZXRfZWxlbV9wZXJfcGFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgdG90YWwgcGFnZSBudW1iZXIqL1xuICAgIHNldF9wYWdlX251bWJlcigpIHtcbiAgICAgICAgbGV0IGxpc3RfbGVuZ3RoOiBudW1iZXI7XG4gICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgbGlzdF9sZW5ndGggPSB0aGlzLmNoYXIuYWJpbGl0aWVzLmZpbHRlcihlbGVtX2tleV9uYW1lID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVsZW1fa2V5X25hbWUgaW4gdGhpcy5lbGVtZW50X2xpc3QpICYmICh0aGlzLmVsZW1lbnRfbGlzdFtlbGVtX2tleV9uYW1lXS5pc19maWVsZF9wc3luZXJneSB8fCB0aGlzLmVsZW1lbnRfbGlzdFtlbGVtX2tleV9uYW1lXS5lZmZlY3RzX291dHNpZGVfYmF0dGxlKTtcbiAgICAgICAgICAgIH0pLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RfbGVuZ3RoID0gdGhpcy5jaGFyLml0ZW1zLmZpbHRlcihpdGVtX29iaiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1fb2JqLmtleV9uYW1lIGluIHRoaXMuZWxlbWVudF9saXN0O1xuICAgICAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSB0b3RhbCBwYWdlIG51bWJlclxuICAgIFxuICAgIE91dHB1dDogW251bWJlcl0qL1xuICAgIGdldF9wYWdlX251bWJlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9udW1iZXI7XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoaXMgd2luZG93J3MgcG9zaXRpb24qL1xuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgUFNZX09WRVJWSUVXX1dJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBQU1lfT1ZFUlZJRVdfV0lOX1k7XG4gICAgfVxuXG4gICAgLypBZGRzIHRoZSBpdGVtcy9wc3luZXJnaWVzIHRvIHRoZSB3aW5kb3cqL1xuICAgIHNldF9lbGVtZW50cygpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuaXRlbV9vYmpzID0gW107XG4gICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuY2hhci5hYmlsaXRpZXMuZmlsdGVyKGVsZW1fa2V5X25hbWUgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoZWxlbV9rZXlfbmFtZSBpbiB0aGlzLmVsZW1lbnRfbGlzdCkgJiYgKHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmlzX2ZpZWxkX3BzeW5lcmd5IHx8IHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWVdLmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpO1xuICAgICAgICAgICAgfSkuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5jaGFyLml0ZW1zLmZpbHRlcihpdGVtX29iaiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmtleV9uYW1lIGluIHRoaXMuZWxlbWVudF9saXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmpzLnB1c2goaXRlbV9vYmopO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSkuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XG4gICAgICAgICAgICB0aGlzLml0ZW1fb2JqcyA9IHRoaXMuaXRlbV9vYmpzLnNsaWNlKHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAqIEVMRU1fUEVSX1BBR0UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggPj0gdGhpcy5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCA9IHRoaXMuZWxlbWVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbV9rZXlfbmFtZSA9IHRoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUoaSk7XG4gICAgICAgICAgICBjb25zdCB4ID0gRUxFTV9QQURESU5HX0xFRlQ7XG4gICAgICAgICAgICBjb25zdCB5ID0gRUxFTV9QQURESU5HX1RPUCArIGkgKiAobnVtYmVycy5JQ09OX0hFSUdIVCArIFNQQUNFX0JFVFdFRU5fSVRFTVMpO1xuICAgICAgICAgICAgY29uc3QgaWNvbl94ID0geCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSk7XG4gICAgICAgICAgICBjb25zdCBpY29uX3kgPSB5ICsgKG51bWJlcnMuSUNPTl9IRUlHSFQgPj4gMSk7XG4gICAgICAgICAgICBjb25zdCB4X2VsZW1fbmFtZSA9IEVMRU1fUEFERElOR19MRUZUICsgbnVtYmVycy5JQ09OX1dJRFRIICsgKHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ID8gMiA6IDQpO1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2godGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5lbGVtZW50X2xpc3RbZWxlbV9rZXlfbmFtZSBhcyBzdHJpbmddLm5hbWUsIHhfZWxlbV9uYW1lLCB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXksIHVuZGVmaW5lZCwgZWxlbV9rZXlfbmFtZSkpO1xuICAgICAgICAgICAgICAgICh0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0gYXMgUGhhc2VyLlNwcml0ZSkuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGljb25fZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgICAgICAgICAgbGV0IGljb25fc3ByaXRlID0gaWNvbl9ncm91cC5jcmVhdGUoMCwgMCwgdGhpcy5lbGVtZW50X3Nwcml0ZV9rZXksIGVsZW1fa2V5X25hbWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpY29uX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb2Jqc1tpXS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBpY29uX2dyb3VwLmNyZWF0ZShTVUJfSUNPTl9YLCBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX29ianNbaV0ucXVhbnRpdHkgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KFNVQl9JQ09OX1gsIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29ianNbaV0ucXVhbnRpdHkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGljb25fZ3JvdXAuYWRkKGl0ZW1fY291bnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKGljb25fZ3JvdXApO1xuICAgICAgICAgICAgICAgIGljb25fZ3JvdXAueCA9IGljb25feDtcbiAgICAgICAgICAgICAgICBpY29uX2dyb3VwLnkgPSBpY29uX3k7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93LnB1c2goaWNvbl9ncm91cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc19wc3luZXJneV93aW5kb3cpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4X2VsZW1fcHBfY29zdCA9IFBTWV9QUF9YO1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuZWxlbWVudF9saXN0W2VsZW1fa2V5X25hbWUgYXMgc3RyaW5nXS5wcF9jb3N0LCB4X2VsZW1fcHBfY29zdCwgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZULCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlNob3dzIGFuZCBwb3NpdGlvbnMgdGhlIGhpZ2hsaWdodCBiYXIqL1xuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IEVMRU1fUEFERElOR19UT1AgKyB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXggKiAobnVtYmVycy5JQ09OX0hFSUdIVCArIFNQQUNFX0JFVFdFRU5fSVRFTVMpICsgNDtcbiAgICB9XG5cbiAgICAvKkhpZGVzIHRoZSBoaWdobGlnaHQgYmFyKi9cbiAgICB1bnNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgc2NhbGluZyBlZmZlY3QgZm9yIHRoZSBzZWxlY3RlZCBpdGVtKi9cbiAgICBzZXRfZWxlbWVudF90d2VlbihiZWZvcmVfaW5kZXg/KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2Vlbi5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbYmVmb3JlX2luZGV4XS5zY2FsZS5zZXRUbygxLCAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkX2VsZW1lbnRfdHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdLnNjYWxlKS50byhcbiAgICAgICAgICAgIHsgeDogMS42LCB5OiAxLjYgfSxcbiAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSLFxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLypTdG9wcyB0aGUgc2NhbGluZyBlZmZlY3QqL1xuICAgIHVuc2V0X2VsZW1lbnRfdHdlZW4oKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2Vlbi5zdG9wKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZWxlbWVudF90d2VlbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLypTZWxlY3RzIGEgbmV3IGVsZW1lbnRcbiAgICBcbiAgICBJbnB1dDogYmVmb3JlX2luZGV4IFtudW1iZXJdIC0gUHJldmlvdXMgZWxlbWVudFxuICAgICAgICAgICBhZnRlcl9pbmRleCBbbnVtYmVyXSAtIE5leHQgZWxlbWVudCovXG4gICAgZWxlbWVudF9jaGFuZ2UoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50X3R3ZWVuKGJlZm9yZV9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfbGlzdFt0aGlzLmdldF9lbGVtZW50X2tleV9uYW1lKGFmdGVyX2luZGV4KSBhcyBzdHJpbmddLFxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1thZnRlcl9pbmRleF1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIGEgbmV3IHBhZ2UqL1xuICAgIHBhZ2VfY2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50cygpO1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50X3R3ZWVuKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRfbGlzdFt0aGlzLmdldF9lbGVtZW50X2tleV9uYW1lKHRoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleCkgYXMgc3RyaW5nXSxcbiAgICAgICAgICAgIHRoaXMuaXNfcHN5bmVyZ3lfd2luZG93ID8gdW5kZWZpbmVkIDogdGhpcy5pdGVtX29ianNbdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4XVxuICAgICAgICApO1xuICAgICAgICB0aGlzLndpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0KHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgfVxuICAgIFxuICAgIC8qUmVtb3ZlcyBhbGwgc3ByaXRlcyBmcm9tIHRoaXMgd2luZG93Ki9cbiAgICBjbGVhcl9zcHJpdGVzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMud2luZG93LnJlbW92ZV90ZXh0KHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgfVxuXG4gICAgLypIaWRlcyB0aGlzIHdpbmRvdyovXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuZ3JvdXAuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIC8qU2hvd3MgdGhpcyB3aW5kb3cqL1xuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMud2luZG93Lmdyb3VwLmFscGhhID0gMTtcbiAgICB9XG5cbiAgICAvKk9wZW5zIHRoaXMgd2luZG93XG5cbiAgICBJbnB1dDogY2hhcl9pbmRleCBbbnVtYmVyXSA9IFRoZSBzZWxlY3RlZCBjaGFyYWN0ZXIncyBwYXJ0eSBpbmRleFxuICAgICAgICAgICBjbG9zZV9jYWxsYmFjayBbZnVuY3Rpb25dID0gQ2xvc2luZyBjYWxsYmFjayAoT3B0aW9uYWwpXG4gICAgICAgICAgIG9wZW5fY2FsbGJhY2sgW2Z1bmN0aW9uXSA9IE9wZW5pbmcgY2FsbGJhY2sgKE9wdGlvbmFsKSovXG4gICAgb3BlbihjaGFyX2luZGV4LCBjbG9zZV9jYWxsYmFjaywgb3Blbl9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5jaGFyX2luZGV4ID0gY2hhcl9pbmRleDtcbiAgICAgICAgdGhpcy5jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2NoYXJfaW5kZXhdO1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLndpbmRvdy5zaG93KG9wZW5fY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy53aW5kb3cuc2V0X3BhZ2VfaW5kaWNhdG9yKHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5zZXRfZWxlbWVudF90d2VlbigpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMub25fY2hhbmdlKFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50X2xpc3RbdGhpcy5nZXRfZWxlbWVudF9rZXlfbmFtZSh0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXgpIGFzIHN0cmluZ10sXG4gICAgICAgICAgICB0aGlzLmlzX3BzeW5lcmd5X3dpbmRvdyA/IHVuZGVmaW5lZCA6IHRoaXMuaXRlbV9vYmpzW3RoaXMuc2VsZWN0ZWRfZWxlbWVudF9pbmRleF1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLypDbG9zZXMgdGhpcyB3aW5kb3cqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLndpbmRvdy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy53aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMudW5zZXRfZWxlbWVudF90d2VlbigpO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2YXRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGlzIHdpbmRvdydzIHN0YXRlIGFzIFwiYWN0aXZhdGVkXCJcbiAgICBFbmFibGVzIHNldmVyYWwgVUkgZWxlbWVudHMqL1xuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuICAgICAgICB0aGlzLnNldF9lbGVtZW50cygpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZShcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudF9saXN0W3RoaXMuZ2V0X2VsZW1lbnRfa2V5X25hbWUodGhpcy5zZWxlY3RlZF9lbGVtZW50X2luZGV4KSBhcyBzdHJpbmddLFxuICAgICAgICAgICAgdGhpcy5pc19wc3luZXJneV93aW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLml0ZW1fb2Jqc1t0aGlzLnNlbGVjdGVkX2VsZW1lbnRfaW5kZXhdXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMud2luZG93LnNldF9wYWdlX2luZGljYXRvcih0aGlzLnBhZ2VfbnVtYmVyLCB0aGlzLnBhZ2VfaW5kZXgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuc2V0X2VsZW1lbnRfdHdlZW4oKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoYXJfc2VsZWN0X2NvbnRyb2xzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLmFscGhhID0gMTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypEaXNhYmxlcyB0aGlzIHdpbmRvdydzIFwiYWN0aXZhdGVkXCIgc3RhdGVcbiAgICBEaXNhYmxlcyBzZXZlcmFsIFVJIGVsZW1lbnRzKi9cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy53aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMudW5zZXRfZWxlbWVudF90d2VlbigpO1xuICAgICAgICB0aGlzLnVuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcl9zZWxlY3RfY29udHJvbHNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuYWxwaGEgPSAwO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgZ2V0X3RleHRfd2lkdGggfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vV2luZG93JztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBDb250cm9sTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL0NvbnRyb2xNYW5hZ2VyJztcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBGT1JXQVJEID0gMTtcbmNvbnN0IEJBQ0tXQVJEID0gLTE7XG5jb25zdCBCVVRUT05fV0lEVEggPSAyNDtcbmNvbnN0IEJVVFRPTl9IRUlHSFQgPSAyNDtcbmNvbnN0IEJVVFRPTl9ZID0gbnVtYmVycy5HQU1FX0hFSUdIVCAtIEJVVFRPTl9IRUlHSFQ7XG5jb25zdCBUSVRMRV9XSU5ET1dfSEVJR0hUID0gQlVUVE9OX0hFSUdIVCAtIG51bWJlcnMuT1VUU0lERV9CT1JERVJfV0lEVEggLSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEg7XG5cbmV4cG9ydCBjbGFzcyBCdXR0b25TZWxlY3RNZW51IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYnV0dG9uc19rZXlzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgdGl0bGVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgYnV0dG9uc19udW1iZXI6IG51bWJlcjtcbiAgICBwdWJsaWMgb25fY2FuY2VsOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgb25fcHJlc3M6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjb250cm9sX21hbmFnZXI6IENvbnRyb2xNYW5hZ2VyO1xuICAgIHB1YmxpYyB0aXRsZV93aW5kb3dfd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgY3VzdG9tX3NjYWxlOiB7XG4gICAgICAgIGFjdGl2ZV9kZWZhdWx0OiBudW1iZXI7XG4gICAgICAgIG1heF9zY2FsZTogbnVtYmVyO1xuICAgIH1cbiAgICBwdWJsaWMgZG9ja19yaWdodDogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHRpdGxlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9idXR0b25faW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgbWVudV9vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBtZW51X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfYnV0dG9uX3R3ZWVuOiBQaGFzZXIuVHdlZW47XG4gICAgcHVibGljIGJ1dHRvbnM6IHtcbiAgICAgICAgc3ByaXRlOiBQaGFzZXIuU3ByaXRlLFxuICAgICAgICB0aXRsZTogc3RyaW5nXG4gICAgfVtdO1xuICAgIGNvbnN0cnVjdG9yKGdhbWU6UGhhc2VyLkdhbWUsIGRhdGE6R29sZGVuU3VuLCBidXR0b25zOnN0cmluZ1tdLCB0aXRsZXM6c3RyaW5nW10sIGNhbGxiYWNrczp7XG4gICAgICAgIG9uX2NhbmNlbDogRnVuY3Rpb24sIG9uX3ByZXNzOkZ1bmN0aW9ufSwgY29udHJvbF9tYW5hZ2VyOkNvbnRyb2xNYW5hZ2VyLCB0aXRsZV93aW5kb3dfd2lkdGg/Om51bWJlciwgZG9ja19yaWdodDpib29sZWFuPWZhbHNlKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuYnV0dG9uc19rZXlzID0gYnV0dG9ucztcbiAgICAgICAgdGhpcy50aXRsZXMgPSB0aXRsZXM7XG4gICAgICAgIHRoaXMub25fY2FuY2VsID0gY2FsbGJhY2tzLm9uX2NhbmNlbDtcbiAgICAgICAgdGhpcy5vbl9wcmVzcyA9IGNhbGxiYWNrcy5vbl9wcmVzcztcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIgPSBjb250cm9sX21hbmFnZXI7XG4gICAgICAgIHRoaXMuYnV0dG9uc19udW1iZXIgPSBidXR0b25zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jdXN0b21fc2NhbGUgPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IG1heF90aXRsZV93aWR0aCA9IGdldF90ZXh0X3dpZHRoKHRoaXMuZ2FtZSwgXy5tYXhCeSh0aXRsZXMsIHRpdGxlID0+IHRpdGxlLmxlbmd0aCkpO1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCA9IHRpdGxlX3dpbmRvd193aWR0aCAhPT0gdW5kZWZpbmVkID8gdGl0bGVfd2luZG93X3dpZHRoIDogbWF4X3RpdGxlX3dpZHRoICsgMiAqIChudW1iZXJzLldJTkRPV19QQURESU5HX0ggKyBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEgpO1xuICAgICAgICBjb25zdCB0b3RhbF93aWR0aCA9IEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIgKyB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCArIDIgKiBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIICsgMjtcbiAgICAgICAgdGhpcy5kb2NrX3JpZ2h0ID0gZG9ja19yaWdodDtcblxuICAgICAgICB0aGlzLnggPSBudW1iZXJzLkdBTUVfV0lEVEggLSB0b3RhbF93aWR0aDtcbiAgICAgICAgaWYgKCF0aGlzLmRvY2tfcmlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueCA+PiAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueSA9IEJVVFRPTl9ZO1xuXG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIHRoaXMueCArIEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIsIHRoaXMueSwgdGhpcy50aXRsZV93aW5kb3dfd2lkdGgsIFRJVExFX1dJTkRPV19IRUlHSFQpO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMubW91bnRfYnV0dG9ucygpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMubWVudV9vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncm91cC53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuZ3JvdXAuaGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4gPSBudWxsO1xuICAgIH1cblxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICBpZih0aGlzLmNvbnRyb2xfbWFuYWdlci5pbml0aWFsaXplZCkgdGhpcy5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2wodHJ1ZSwgZmFsc2UsIHRydWUsIGZhbHNlLCB7cmlnaHQ6IHRoaXMubmV4dF9idXR0b24uYmluZCh0aGlzKSwgbGVmdDogdGhpcy5wcmV2aW91c19idXR0b24uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGVzYzogdGhpcy5vbl9jYW5jZWwuYmluZCh0aGlzKSwgZW50ZXI6IHRoaXMub25fcHJlc3MuYmluZCh0aGlzKX0pO1xuICAgIH1cblxuICAgIG1vdW50X2J1dHRvbnMoZmlsdGVyZWRfYnV0dG9uczpzdHJpbmdbXT1bXSkge1xuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5idXR0b25zX2tleXMuZmlsdGVyKGtleSA9PiAhZmlsdGVyZWRfYnV0dG9ucy5pbmNsdWRlcyhrZXkpKTtcbiAgICAgICAgdGhpcy5idXR0b25zX251bWJlciA9IGJ1dHRvbnMubGVuZ3RoO1xuICAgICAgICBjb25zdCB0b3RhbF93aWR0aCA9IEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIgKyB0aGlzLnRpdGxlX3dpbmRvd193aWR0aCArIChudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIIDw8IDEpICsgMjtcbiAgICAgICAgdGhpcy54ID0gbnVtYmVycy5HQU1FX1dJRFRIIC0gdG90YWxfd2lkdGg7XG4gICAgICAgIGlmICghdGhpcy5kb2NrX3JpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnggPj4gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IHRoaXMueCArIEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXJ9KTtcbiAgICAgICAgaWYgKHRoaXMuYnV0dG9ucykge1xuICAgICAgICAgICAgdGhpcy5idXR0b25zLmZvckVhY2gob2JqID0+IHtcbiAgICAgICAgICAgICAgICBvYmouc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnV0dG9ucyA9IG5ldyBBcnJheSh0aGlzLmJ1dHRvbnNfbnVtYmVyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJ1dHRvbnNfbnVtYmVyOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBzcHJpdGU6IHRoaXMuZ3JvdXAuY3JlYXRlKDAsIDAsIFwiYnV0dG9uc1wiLCBidXR0b25zW2ldKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZXNbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1tpXS5zcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMSk7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0uc3ByaXRlLmNlbnRlclggPSAoQlVUVE9OX1dJRFRIICogKGkgKyAwLjUpKSB8IDA7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0uc3ByaXRlLmNlbnRlclkgPSAoQlVUVE9OX0hFSUdIVCA+PiAxKSB8IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfYnV0dG9uKHN0ZXA6bnVtYmVyKSB7XG4gICAgICAgIHRoaXMucmVzZXRfYnV0dG9uKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ID0gKHRoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4ICsgc3RlcCkgJSB0aGlzLmJ1dHRvbnNfbnVtYmVyO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHRoaXMuYnV0dG9uc19udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnNldF90ZXh0KFtbdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS50aXRsZV1dKTtcbiAgICAgICAgdGhpcy5zZXRfYnV0dG9uKCk7XG4gICAgfVxuXG4gICAgbmV4dF9idXR0b24oKXtcbiAgICAgICAgdGhpcy5jaGFuZ2VfYnV0dG9uKEZPUldBUkQpO1xuICAgIH1cblxuICAgIHByZXZpb3VzX2J1dHRvbigpe1xuICAgICAgICB0aGlzLmNoYW5nZV9idXR0b24oQkFDS1dBUkQpO1xuICAgIH1cblxuICAgIHNldF90b19wb3NpdGlvbihpbmRleDpudW1iZXIpIHtcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24oKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2V0X3RleHQoW1t0aGlzLmJ1dHRvbnNbdGhpcy5zZWxlY3RlZF9idXR0b25faW5kZXhdLnRpdGxlXV0pO1xuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcbiAgICB9XG5cbiAgICBzZXRfYnV0dG9uKCkge1xuICAgICAgICBsZXQgYWN0aXZlX2RlZmF1bHQgPSAxLjI7XG4gICAgICAgIGxldCBtYXhfc2NhbGUgPSAxLjM7XG4gICAgICAgIGlmKHRoaXMuY3VzdG9tX3NjYWxlKXtcbiAgICAgICAgICAgIGFjdGl2ZV9kZWZhdWx0ID0gdGhpcy5jdXN0b21fc2NhbGUuYWN0aXZlX2RlZmF1bHQ7XG4gICAgICAgICAgICBtYXhfc2NhbGUgPSB0aGlzLmN1c3RvbV9zY2FsZS5tYXhfc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuc2NhbGUuc2V0VG8oYWN0aXZlX2RlZmF1bHQsIGFjdGl2ZV9kZWZhdWx0KTtcbiAgICAgICAgdGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuYnJpbmdUb1RvcCgpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl90d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5idXR0b25zW3RoaXMuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XS5zcHJpdGUuc2NhbGUpLnRvKFxuICAgICAgICAgICAgeyB4OiBtYXhfc2NhbGUsIHk6IG1heF9zY2FsZSB9LFxuICAgICAgICAgICAgUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSxcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIC0xLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlc2V0X2J1dHRvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0uc3ByaXRlLnNjYWxlLnNldFRvKDEuMCwgMS4wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9idXR0b25fdHdlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfYnV0dG9uX3R3ZWVuLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgdGhpcy54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLnk7XG4gICAgICAgIHRoaXMudGl0bGVfd2luZG93LnVwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICBvcGVuKGNhbGxiYWNrOkZ1bmN0aW9uLCBzZWxlY3RfaW5kZXg6bnVtYmVyPTAsIHN0YXJ0X2FjdGl2ZTpib29sZWFuPXRydWUsXG4gICAgICAgIGN1c3RvbV9zY2FsZT86e2FjdGl2ZV9kZWZhdWx0OiBudW1iZXIsIG1heF9zY2FsZTogbnVtYmVyfSkge1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuZ3JvdXApO1xuICAgICAgICBpZihjdXN0b21fc2NhbGUpIHRoaXMuY3VzdG9tX3NjYWxlID0gY3VzdG9tX3NjYWxlO1xuXG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBzdGFydF9hY3RpdmU7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleCA9IHNlbGVjdF9pbmRleDtcblxuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zZXRfdGV4dChbW3RoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0udGl0bGVdXSk7XG5cbiAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlX3Jlc29sdmU7XG4gICAgICAgIGxldCB3aW5kb3dfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyB3aW5kb3dfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsgfSlcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2hvdyh3aW5kb3dfcHJvbWlzZV9yZXNvbHZlKTtcblxuICAgICAgICBsZXQgYnV0dG9uc19yZXNvbHZlO1xuICAgICAgICBsZXQgYnV0dG9uc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IGJ1dHRvbnNfcmVzb2x2ZSA9IHJlc29sdmU7IH0pXG5cbiAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmdyb3VwKS50byhcbiAgICAgICAgICAgIHsgd2lkdGg6IEJVVFRPTl9XSURUSCAqIHRoaXMuYnV0dG9uc19udW1iZXIsIGhlaWdodDogQlVUVE9OX0hFSUdIVCB9LFxuICAgICAgICAgICAgUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMixcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKGJ1dHRvbnNfcmVzb2x2ZSk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW3dpbmRvd19wcm9taXNlLCBidXR0b25zX3Byb21pc2VdKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xuICAgICAgICAgICAgdGhpcy5tZW51X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/OiAoKSA9PiB2b2lkLCBhbmltYXRlOmJvb2xlYW49dHJ1ZSkge1xuICAgICAgICB0aGlzLm1lbnVfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0X2J1dHRvbigpO1xuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIGxldCB3aW5kb3dfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgbGV0IHdpbmRvd19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHdpbmRvd19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlOyB9KVxuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuY2xvc2Uod2luZG93X3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uX3RpbWUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAyO1xuICAgICAgICAgICAgbGV0IGJ1dHRvbnNfcmVzb2x2ZTtcbiAgICAgICAgICAgIGxldCBidXR0b25zX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgYnV0dG9uc19yZXNvbHZlID0gcmVzb2x2ZTsgfSlcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5ncm91cCkudG8oXG4gICAgICAgICAgICAgICAgeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbl90aW1lLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoYnV0dG9uc19yZXNvbHZlKTtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKFt3aW5kb3dfcHJvbWlzZSwgYnV0dG9uc19wcm9taXNlXSkudGhlbihjYWxsYmFjayAhPT0gdW5kZWZpbmVkID8gY2FsbGJhY2sgOiAoKSA9PiB7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAud2lkdGggPSB0aGlzLmdyb3VwLmhlaWdodCA9IDA7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICBvYmouc3ByaXRlLmFscGhhID0gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy50aXRsZV93aW5kb3cub3Blbikge1xuICAgICAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpdGxlX3dpbmRvdy5zZXRfdGV4dChbW3RoaXMuYnV0dG9uc1t0aGlzLnNlbGVjdGVkX2J1dHRvbl9pbmRleF0udGl0bGVdXSk7XG4gICAgICAgIHRoaXMuc2V0X2J1dHRvbigpO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoaGlkZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMubWVudV9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy5yZXNldF9idXR0b24oKTtcbiAgICAgICAgaWYgKGhpZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKG9iaiA9PiB7XG4gICAgICAgICAgICAgICAgb2JqLnNwcml0ZS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudGl0bGVfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy50aXRsZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBUaWxlRXZlbnQgfSBmcm9tICcuL3RpbGVfZXZlbnRzL1RpbGVFdmVudCc7XG5pbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4vZGVidWcvRGVidWcnO1xuaW1wb3J0IHsgbG9hZF9hbGwgfSBmcm9tICcuL2luaXRpYWxpemVycy9hc3NldHNfbG9hZGVyJztcbmltcG9ydCB7IENvbGxpc2lvbiB9IGZyb20gJy4vQ29sbGlzaW9uJztcbmltcG9ydCB7IGRpcmVjdGlvbnMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEhlcm8gfSBmcm9tICcuL0hlcm8nO1xuaW1wb3J0IHsgVGlsZUV2ZW50TWFuYWdlciB9IGZyb20gJy4vdGlsZV9ldmVudHMvVGlsZUV2ZW50TWFuYWdlcic7XG5pbXBvcnQgeyBHYW1lRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi9nYW1lX2V2ZW50cy9HYW1lRXZlbnRNYW5hZ2VyJztcbmltcG9ydCB7IGxvYWRfZGF0YWJhc2VzIH0gZnJvbSAnLi9pbml0aWFsaXplcnMvZGF0YWJhc2VzX2xvYWRlcic7XG5pbXBvcnQgeyBpbml0aWFsaXplX2dhbWVfZGF0YSB9IGZyb20gJy4vaW5pdGlhbGl6ZXJzL2luaXRpYWxpemVfaW5mbyc7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICcuL01hcCc7XG5pbXBvcnQgeyBCYXR0bGUgfSBmcm9tICcuL2JhdHRsZS9CYXR0bGUnO1xuaW1wb3J0IHsgTWFpbk1lbnUgfSBmcm9tICcuL21haW5fbWVudXMvTWFpbk1lbnUnO1xuaW1wb3J0IHsgU2hvcE1lbnUgfSBmcm9tICcuL21haW5fbWVudXMvU2hvcE1lbnUnO1xuXG5leHBvcnQgY2xhc3MgR29sZGVuU3VuIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWUgPSBudWxsO1xuICAgIHB1YmxpYyBkYnM6IGFueSA9IHt9O1xuICAgIHB1YmxpYyBpbmZvOiBhbnkgPSB7fTtcblxuICAgIC8vbWFpbiBnYW1lIHN0YXRlc1xuICAgIHB1YmxpYyBtZW51X29wZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgc2hvcF9vcGVuOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHVibGljIGluX2JhdHRsZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBjcmVhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHVibGljIGZvcmNlX3N0b3BfbW92ZW1lbnQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8vZ2FtZSBvYmplY3RzXG4gICAgcHVibGljIGhlcm86IEhlcm8gPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xhc3MgcmVzcG9uc2libGUgZm9yIHRoZSBjb250cm9sIG9mIHRoZSBtYWluIGhlcm9cbiAgICBwdWJsaWMgY29sbGlzaW9uOiBDb2xsaXNpb24gPSBudWxsOyAgICAgICAgICAgICAgICAgLy9jbGFzcyByZXNwb25zaWJsZSBmb3IgdGhlIGNvbGxpc2lvbiBzeXN0ZW1cbiAgICBwdWJsaWMgZGVidWc6IERlYnVnID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGFzcyByZXNwb25zaWJsZSBmb3IgdGhlIGRlYnVnIHN5c3RlbXNcbiAgICBwdWJsaWMgbWFpbl9tZW51OiBNYWluTWVudSA9IG51bGw7ICAgICAgICAgICAgICAgICAgLy9jbGFzcyByZXNwb25iaWJsZSBmb3IgdGhlIG1haW4gbWVudVxuICAgIHB1YmxpYyBzaG9wX21lbnU6IFNob3BNZW51ID0gbnVsbDsgICAgICAgICAgICAgICAgICAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciB0aGUgc2hvcCBzeXN0ZW1cbiAgICBwdWJsaWMgbWFwOiBNYXAgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGUgY3VycmVudCBhY3RpdmUgbWFwXG4gICAgcHVibGljIHRpbGVfZXZlbnRfbWFuYWdlcjogVGlsZUV2ZW50TWFuYWdlciA9IG51bGw7IC8vY2xhc3MgcmVzcG9uc2libGUgZm9yIHRoZSB0aWxlIGV2ZW50c1xuICAgIHB1YmxpYyBnYW1lX2V2ZW50X21hbmFnZXI6IEdhbWVFdmVudE1hbmFnZXIgPSBudWxsOyAvL2NsYXNzIHJlc3BvbnNpYmxlIGZvciB0aGUgZ2FtZSBldmVudHNcbiAgICBwdWJsaWMgYmF0dGxlX2luc3RhbmNlOiBCYXR0bGUgPSBudWxsOyAgICAgICAgICAgICAgLy9jbGFzcyByZXNwb25zaWJsZSBmb3IgYSBiYXR0bGVcblxuICAgIC8vaW5wdXRzXG4gICAgcHVibGljIGVudGVyX2lucHV0OiBQaGFzZXIuU2lnbmFsID0gbnVsbDtcbiAgICBwdWJsaWMgZXNjX2lucHV0OiBQaGFzZXIuU2lnbmFsID0gbnVsbDtcbiAgICBwdWJsaWMgc2hpZnRfaW5wdXQ6IFBoYXNlci5TaWduYWwgPSBudWxsO1xuICAgIHB1YmxpYyBzcGFjZWJhcl9pbnB1dDogUGhhc2VyLlNpZ25hbCA9IG51bGw7XG5cbiAgICAvL3ZhcmlhYmxlcyB0aGF0IGNvbnRyb2wgdGhlIGNhbnZhc1xuICAgIHB1YmxpYyBmdWxsc2NyZWVuOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHVibGljIHNjYWxlX2ZhY3RvcjogbnVtYmVyID0gMTtcblxuICAgIC8vZ3JvdXBzIHRoYXQgd2lsbCBob2xkIHRoZSBzcHJpdGVzIHRoYXQgYXJlIGJlbG93IHRoZSBoZXJvLCBzYW1lIGxldmVsIHRoYW4gaGVybyBhbmQgYWJvdmUgdGhlIGhlcm9cbiAgICBwdWJsaWMgdW5kZXJsYXllcl9ncm91cDogUGhhc2VyLkdyb3VwID0gbnVsbDtcbiAgICBwdWJsaWMgbnBjX2dyb3VwOiBQaGFzZXIuR3JvdXAgPSBudWxsO1xuICAgIHB1YmxpYyBvdmVybGF5ZXJfZ3JvdXA6IFBoYXNlci5Hcm91cCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gbmV3IFBoYXNlci5HYW1lKFxuICAgICAgICAgICAgbnVtYmVycy5HQU1FX1dJRFRILFxuICAgICAgICAgICAgbnVtYmVycy5HQU1FX0hFSUdIVCxcbiAgICAgICAgICAgIFBoYXNlci5XRUJHTCxcbiAgICAgICAgICAgIFwiZ2FtZVwiLCAvL2RvbSBlbGVtZW50IGlkXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcHJlbG9hZDogdGhpcy5wcmVsb2FkLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgY3JlYXRlOiB0aGlzLmNyZWF0ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogdGhpcy51cGRhdGUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgbG9hZFJlbmRlcjogdGhpcy5sb2FkUmVuZGVyLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZSwgLy90cmFuc3BhcmVudFxuICAgICAgICAgICAgZmFsc2UgLy9hbnRpYWxpYXNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcmVsb2FkKCkge1xuICAgICAgICBsb2FkX2FsbCh0aGlzLmdhbWUpO1xuXG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmFkdmFuY2VkVGltaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nYW1lLnN0YWdlLnNtb290aGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEucm91bmRQeCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2FtZS5yZW5kZXJlci5yZW5kZXJTZXNzaW9uLnJvdW5kUGl4ZWxzID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmZhZGUoMHgwLCAxKTtcbiAgICB9XG5cbiAgICByZW5kZXJfbG9hZGluZygpIHtcbiAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoJ0xvYWRpbmcuLi4nLCA1LCAxNSwgXCIjMDBmZjAwXCIpO1xuICAgIH1cblxuICAgIGxvYWRSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyX2xvYWRpbmcoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGUoKSB7XG4gICAgICAgIC8vbG9hZCBzb21lIGpzb24gZmlsZXMgZnJvbSBhc3NldHMgZm9sZGVyXG4gICAgICAgIGxvYWRfZGF0YWJhc2VzKHRoaXMuZ2FtZSwgdGhpcy5kYnMpO1xuXG4gICAgICAgIC8vaW5pdGlhbGl6ZSBjb21tb24gaW5wdXRzXG4gICAgICAgIHRoaXMuZW50ZXJfaW5wdXQgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5FTlRFUikub25Eb3duO1xuICAgICAgICB0aGlzLmVzY19pbnB1dCA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkVTQykub25Eb3duO1xuICAgICAgICB0aGlzLnNoaWZ0X2lucHV0ID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuU0hJRlQpLm9uRG93bjtcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9pbnB1dCA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKS5vbkRvd247XG5cbiAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSB0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfc2NhbGVfZmFjdG9yO1xuXG4gICAgICAgIC8vaW5pdCBkZWJ1ZyBzeXN0ZW1zXG4gICAgICAgIHRoaXMuZGVidWcgPSBuZXcgRGVidWcodGhpcy5nYW1lLCB0aGlzKTtcbiAgICAgICAgdGhpcy5kZWJ1Zy5pbml0aWFsaXplX2NvbnRyb2xzKCk7XG5cbiAgICAgICAgLy9jcmVhdGluZyBncm91cHMuIE9yZGVyIGhlcmUgaXMgaW1wb3J0YW50XG4gICAgICAgIHRoaXMudW5kZXJsYXllcl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ucGNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMub3ZlcmxheWVyX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuXG4gICAgICAgIC8vdXNlIHRoZSBkYXRhIGxvYWRlZCBmcm9tIGpzb24gZmlsZXMgdG8gaW5pdGlhbGl6ZSBzb21lIGRhdGFcbiAgICAgICAgYXdhaXQgaW5pdGlhbGl6ZV9nYW1lX2RhdGEodGhpcy5nYW1lLCB0aGlzKTtcblxuICAgICAgICAvL2NvbmZpZ3MgbWFwIGxheWVyczogY3JlYXRlcyBzcHJpdGVzLCBpbnRlcmFjdGFibGUgb2JqZWN0cyBhbmQgbnBjcywgbGlzdHMgZXZlbnRzIGFuZCBzZXRzIHRoZSBtYXAgbGF5ZXJzXG4gICAgICAgIHRoaXMubWFwID0gYXdhaXQgdGhpcy5pbmZvLm1hcHNfbGlzdFt0aGlzLmRicy5pbml0X2RiLm1hcF9rZXlfbmFtZV0ubW91bnRfbWFwKHRoaXMuZGJzLmluaXRfZGIubWFwX3pfaW5kZXgpO1xuXG4gICAgICAgIC8vaW5pdGlhbGl6ZXMgdGhlIGNvbnRyb2xsYWJsZSBoZXJvXG4gICAgICAgIHRoaXMuaGVybyA9IG5ldyBIZXJvKFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHRoaXMuZGJzLmluaXRfZGIuaGVyb19rZXlfbmFtZSxcbiAgICAgICAgICAgIHRoaXMuZGJzLmluaXRfZGIueF90aWxlX3Bvc2l0aW9uLFxuICAgICAgICAgICAgdGhpcy5kYnMuaW5pdF9kYi55X3RpbGVfcG9zaXRpb24sXG4gICAgICAgICAgICB0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfYWN0aW9uLFxuICAgICAgICAgICAgZGlyZWN0aW9uc1t0aGlzLmRicy5pbml0X2RiLmluaXRpYWxfZGlyZWN0aW9uXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmhlcm8uc2V0X3Nwcml0ZSh0aGlzLm5wY19ncm91cCwgdGhpcy5pbmZvLm1haW5fY2hhcl9saXN0W3RoaXMuaGVyby5rZXlfbmFtZV0uc3ByaXRlX2Jhc2UsIHRoaXMubWFwLnNwcml0ZSwgdGhpcy5tYXAuY29sbGlzaW9uX2xheWVyKTtcbiAgICAgICAgdGhpcy5oZXJvLnNldF9zaGFkb3coJ3NoYWRvdycsIHRoaXMubnBjX2dyb3VwLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICB0aGlzLmhlcm8uY2FtZXJhX2ZvbGxvdygpO1xuICAgICAgICB0aGlzLmhlcm8ucGxheSgpO1xuXG4gICAgICAgIC8vaW5pdGlhbGl6ZXMgY29sbGlzaW9uIHN5c3RlbVxuICAgICAgICB0aGlzLmNvbGxpc2lvbiA9IG5ldyBDb2xsaXNpb24odGhpcy5nYW1lLCB0aGlzLmhlcm8pO1xuICAgICAgICB0aGlzLmhlcm8uY29uZmlnX2JvZHkodGhpcy5jb2xsaXNpb24pO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbi5jb25maWdfY29sbGlzaW9uX2dyb3Vwcyh0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMubWFwLmNvbmZpZ19hbGxfYm9kaWVzKHRoaXMuY29sbGlzaW9uLCB0aGlzLm1hcC5jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbi5jb25maWdfY29sbGlzaW9ucyh0aGlzLm1hcCwgdGhpcy5tYXAuY29sbGlzaW9uX2xheWVyLCB0aGlzLm5wY19ncm91cCk7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnVwZGF0ZUJvdW5kc0NvbGxpc2lvbkdyb3VwKCk7XG5cbiAgICAgICAgLy9pbml0aWFsaXplcyB0aGUgZXZlbnQgbWFuYWdlcnNcbiAgICAgICAgdGhpcy50aWxlX2V2ZW50X21hbmFnZXIgPSBuZXcgVGlsZUV2ZW50TWFuYWdlcih0aGlzLmdhbWUsIHRoaXMsIHRoaXMuaGVybywgdGhpcy5jb2xsaXNpb24pO1xuICAgICAgICB0aGlzLmdhbWVfZXZlbnRfbWFuYWdlciA9IG5ldyBHYW1lRXZlbnRNYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsaXplX3V0aWxzX2NvbnRyb2xzKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5yZXNldEZYKCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZV91dGlsc19jb250cm9scygpIHtcbiAgICAgICAgLy9zZXQgaW5pdGlhbCB6b29tXG4gICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX1dJRFRILCB0aGlzLnNjYWxlX2ZhY3RvciAqIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcblxuICAgICAgICAvL2VuYWJsZSBmdWxsIHNjcmVlblxuICAgICAgICB0aGlzLmdhbWUuc2NhbGUuZnVsbFNjcmVlblNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuU0hPV19BTEw7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5vblRhcC5hZGQoKHBvaW50ZXIsIGlzX2RvdWJsZV9jbGljaykgPT4ge1xuICAgICAgICAgICAgaWYgKGlzX2RvdWJsZV9jbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zdGFydEZ1bGxTY3JlZW4odHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUuc2NhbGUub25GdWxsU2NyZWVuQ2hhbmdlLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZ1bGxzY3JlZW4gPSAhdGhpcy5mdWxsc2NyZWVuO1xuICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAxO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnNldHVwU2NhbGUobnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUKTtcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2VuYWJsZSB6b29tXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLk9ORSkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5mdWxsc2NyZWVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnNjYWxlX2ZhY3RvciA9IDE7XG4gICAgICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2V0dXBTY2FsZShudW1iZXJzLkdBTUVfV0lEVEgsIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5UV08pLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbikgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5zY2FsZV9mYWN0b3IgPSAyO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnNldHVwU2NhbGUodGhpcy5zY2FsZV9mYWN0b3IgKiBudW1iZXJzLkdBTUVfV0lEVEgsIHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX0hFSUdIVCk7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlRIUkVFKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZ1bGxzY3JlZW4pIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuc2NhbGVfZmFjdG9yID0gMztcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXR1cFNjYWxlKHRoaXMuc2NhbGVfZmFjdG9yICogbnVtYmVycy5HQU1FX1dJRFRILCB0aGlzLnNjYWxlX2ZhY3RvciAqIG51bWJlcnMuR0FNRV9IRUlHSFQpO1xuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vZW5hYmxlIHBzeW5lcmdpZXMgc2hvcnRjdXRzIGZvciB0ZXN0aW5nXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlEpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGVyby5pbl9hY3Rpb24oKSB8fCB0aGlzLm1lbnVfb3BlbiB8fCB0aGlzLmluX2JhdHRsZSB8fCB0aGlzLnNob3Bfb3BlbikgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0Lm1vdmUuY2FzdCh0aGlzLmhlcm8sIHRoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9zaG9ydGN1dHMubW92ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5XKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5tZW51X29wZW4gfHwgdGhpcy5pbl9iYXR0bGUgfHwgdGhpcy5zaG9wX29wZW4pIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdC5mcm9zdC5jYXN0KHRoaXMuaGVybywgdGhpcy5kYnMuaW5pdF9kYi5pbml0aWFsX3Nob3J0Y3V0cy5mcm9zdCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5FKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlcm8uaW5fYWN0aW9uKCkgfHwgdGhpcy5tZW51X29wZW4gfHwgdGhpcy5pbl9iYXR0bGUgfHwgdGhpcy5zaG9wX29wZW4pIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdC5ncm93dGguY2FzdCh0aGlzLmhlcm8sIHRoaXMuZGJzLmluaXRfZGIuaW5pdGlhbF9zaG9ydGN1dHMuZ3Jvd3RoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGVyb19tb3ZlbWVudF9hbGxvd2VkKGFsbG93X2NsaW1iaW5nID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gISh0aGlzLmhlcm8uaW5fYWN0aW9uKGFsbG93X2NsaW1iaW5nKSB8fCB0aGlzLm1lbnVfb3BlbiB8fCB0aGlzLnNob3Bfb3BlbiB8fCB0aGlzLmluX2JhdHRsZSB8fCB0aGlzLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCB8fCB0aGlzLmZvcmNlX3N0b3BfbW92ZW1lbnQpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNyZWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyX2xvYWRpbmcoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZXJvX21vdmVtZW50X2FsbG93ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5oZXJvLnVwZGF0ZV90aWxlX3Bvc2l0aW9uKHRoaXMubWFwLnNwcml0ZSk7XG5cbiAgICAgICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyLmZpcmVfdHJpZ2dlcmVkX2V2ZW50cygpOyAvL3RyaWdnZXIgYW55IGV2ZW50IHRoYXQncyB3YWl0aW5nIHRvIGJlIHRyaWdnZXJlZFxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy5oZXJvLnRpbGVfeF9wb3MsIHRoaXMuaGVyby50aWxlX3lfcG9zKTtcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbl9rZXkgaW4gdGhpcy5tYXAuZXZlbnRzKSB7IC8vY2hlY2sgaWYgdGhlIGFjdHVhbCB0aWxlIGhhcyBhbiBldmVudFxuICAgICAgICAgICAgICAgIHRoaXMudGlsZV9ldmVudF9tYW5hZ2VyLmNoZWNrX3RpbGVfZXZlbnRzKGxvY2F0aW9uX2tleSwgdGhpcy5tYXApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmhlcm8udXBkYXRlKHRoaXMubWFwKTsgLy91cGRhdGUgaGVybyBwb3NpdGlvbi92ZWxvY2l0eS9zcHJpdGVcbiAgICAgICAgICAgIHRoaXMubWFwLnVwZGF0ZSgpOyAvL3VwZGF0ZSBtYXAgYW5kIGl0cyBvYmplY3RzIHBvc2l0aW9uL3ZlbG9jaXR5L3Nwcml0ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZXJvLnN0b3BfY2hhcihmYWxzZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5tZW51X29wZW4gJiYgdGhpcy5tYWluX21lbnUuaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2hvcF9vcGVuICYmIHRoaXMuc2hvcF9tZW51Lmhvcml6b250YWxfbWVudS5tZW51X2FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvcF9tZW51LnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmluX2JhdHRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmF0dGxlX2luc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmRlYnVnLnNldF9kZWJ1Z19pbmZvKCk7XG4gICAgICAgIGlmICh0aGlzLmdhbWUudGltZS5mcmFtZXMlOCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1Zy5maWxsX2tleV9kZWJ1Z190YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdhbWUudGltZS5mcmFtZXMlMzAgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcuZmlsbF9zdGF0c19kZWJ1Z190YWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgZ29sZGVuX3N1biA9IG5ldyBHb2xkZW5TdW4oKTtcblxuLy9kZWJ1Z2dpbmcgcG9ycG91c2VzXG4od2luZG93IGFzIGFueSkuZGF0YSA9IGdvbGRlbl9zdW47XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gXCIuLi9NYWluQ2hhclwiO1xuaW1wb3J0IHsgcmV2ZXJzZV9kaXJlY3Rpb25zLCBvcmRlcmVkX2VsZW1lbnRzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBEZWJ1ZyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGRlYnVnX3BoeXNpY3M6IGJvb2xlYW47XG4gICAgcHVibGljIGdyaWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGRlYnVnX2tleXM6IGJvb2xlYW47XG4gICAgcHVibGljIGRlYnVnX3N0YXRzOiBib29sZWFuO1xuICAgIHB1YmxpYyBzaG93X2ZwczogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGVidWdfc3RhdHNfaW5mbzoge1xuICAgICAgICBjaGFyczogTWFpbkNoYXJbXSxcbiAgICAgICAgc2VsZWN0ZWQ6IG51bWJlcixcbiAgICAgICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmRlYnVnX3BoeXNpY3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncmlkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdfa2V5cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlYnVnX3N0YXRzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd19mcHMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplX2NvbnRyb2xzKCkge1xuICAgICAgICAvL2FjdGl2YXRlIGRlYnVnIG1vZGVcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRCkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9kZWJ1Z19waHlzaWNzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy9hY3RpdmF0ZSBncmlkIG1vZGVcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuRykub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9ncmlkKCk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIC8vYWN0aXZhdGUga2V5cyBkZWJ1ZyBtb2RlXG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkspLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVfa2V5cygpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAvL2FjdGl2YXRlIHN0YXRzIGRlYnVnIG1vZGVcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUykub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZV9zdGF0cygpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAvL2VuYWJsZSBmcHMgc2hvd1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5GKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlX2ZwcygpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfZGVidWdfcGh5c2ljcyhmbGFnKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmRlYnVnID0gZmxhZztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc3ByaXRlOiBQaGFzZXIuU3ByaXRlID0gdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbltpXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUuaXNfbnBjICYmICFzcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5ib2R5KSBjb250aW51ZTtcbiAgICAgICAgICAgIHNwcml0ZS5ib2R5LmRlYnVnID0gZmxhZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZV9kZWJ1Z19waHlzaWNzKCkge1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZyA9ICF0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1ZztcbiAgICAgICAgdGhpcy51cGRhdGVfZGVidWdfcGh5c2ljcyh0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS5kZWJ1Zyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllc1tpXS5kZWJ1ZyA9ICF0aGlzLmRhdGEuY29sbGlzaW9uLmR5bmFtaWNfanVtcF9ldmVudHNfYm9kaWVzW2ldLmRlYnVnO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLm1hcC5pbnRlcmFjdGFibGVfb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdCA9IHRoaXMuZGF0YS5tYXAuaW50ZXJhY3RhYmxlX29iamVjdHNbaV07XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jaykge1xuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2suZGVidWcgPSAhaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jay5kZWJ1ZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlYnVnX3BoeXNpY3MgPSAhdGhpcy5kZWJ1Z19waHlzaWNzO1xuICAgIH1cblxuICAgIHRvZ2dsZV9rZXlzKCkge1xuICAgICAgICB0aGlzLmRlYnVnX2tleXMgPSAhdGhpcy5kZWJ1Z19rZXlzO1xuICAgICAgICBjb25zdCB0b2dnbGVyID0gKGlzX2Rvd24sIGUpID0+IHtcbiAgICAgICAgICAgIGxldCBjbGFzc19saXN0O1xuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXBlYXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIC51cFwiKS5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgLmRvd25cIikuY2xhc3NMaXN0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXBlYXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIC5yaWdodFwiKS5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnJlcGVhdCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc19saXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgLmxlZnRcIikuY2xhc3NMaXN0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2xhc3NfbGlzdCkge1xuICAgICAgICAgICAgICAgIGlmIChpc19kb3duKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzX2xpc3QuYWRkKCdwcmVzc2VkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NfbGlzdC5yZW1vdmUoJ3ByZXNzZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGVidWdfa2V5cykge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrZXlfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgZG9jdW1lbnQub25rZXlkb3duID0gdG9nZ2xlci5iaW5kKG51bGwsIHRydWUpO1xuICAgICAgICAgICAgZG9jdW1lbnQub25rZXl1cCA9IHRvZ2dsZXIuYmluZChudWxsLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImtleV9kZWJ1Z1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBkb2N1bWVudC5vbmtleWRvd24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkb2N1bWVudC5vbmtleXVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlsbF9rZXlfZGVidWdfdGFibGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kZWJ1Z19rZXlzKSByZXR1cm47XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5kaXJlY3Rpb25cIikuaW5uZXJIVE1MID0gcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uXTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLmFjdGlvblwiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbjtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnhcIikuaW5uZXJIVE1MID0gYCR7dGhpcy5kYXRhLmhlcm8udGlsZV94X3Bvc30vJHt0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS54LnRvRml4ZWQoMyl9YDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnlcIikuaW5uZXJIVE1MID0gYCR7dGhpcy5kYXRhLmhlcm8udGlsZV95X3Bvc30vJHt0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55LnRvRml4ZWQoMyl9YDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNrZXlfZGVidWcgdGFibGUgLnNwZWVkX3hcIikuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkudmVsb2NpdHkueC50b0ZpeGVkKDMpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2tleV9kZWJ1ZyB0YWJsZSAuc3BlZWRfeVwiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS52ZWxvY2l0eS55LnRvRml4ZWQoMyk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5mb3JjZV9kaXJlY3Rpb25cIikuaW5uZXJIVE1MID0gdGhpcy5kYXRhLmhlcm8uZm9yY2VfZGlyZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIja2V5X2RlYnVnIHRhYmxlIC5zdG9wX2J5X2NvbGxpZGluZ1wiKS5pbm5lckhUTUwgPSB0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZy50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHRvZ2dsZV9mcHMoKSB7XG4gICAgICAgIHRoaXMuc2hvd19mcHMgPSAhdGhpcy5zaG93X2ZwcztcbiAgICB9XG5cbiAgICB0b2dnbGVfZ3JpZCgpIHtcbiAgICAgICAgdGhpcy5ncmlkID0gIXRoaXMuZ3JpZDtcbiAgICB9XG5cbiAgICBzZXRfZGVidWdfaW5mbygpIHtcbiAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoJycsIDAsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3dfZnBzKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcudGV4dCgnRlBTOiAnICsgdGhpcy5nYW1lLnRpbWUuZnBzIHx8ICdGUFM6IC0tJywgNSwgMTUsIFwiIzAwZmYwMFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmdyaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVfd2lkdGggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuZ2FtZS53b3JsZC53aWR0aDsgeCArPSB0aWxlX3dpZHRoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLmdlb20obmV3IFBoYXNlci5MaW5lKHgsIDAsIHgsIHRoaXMuZ2FtZS53b3JsZC5oZWlnaHQpLCAncmdiYSgwLDI1NSwyNTUsMC4zNSknLCBmYWxzZSwgNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aWxlX2hlaWdodCA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuZ2FtZS53b3JsZC5oZWlnaHQ7IHkgKz0gdGlsZV9oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZGVidWcuZ2VvbShuZXcgUGhhc2VyLkxpbmUoMCwgeSwgdGhpcy5nYW1lLndvcmxkLndpZHRoLCB5KSwgJ3JnYmEoMCwyNTUsMjU1LDAuMzUpJywgZmFsc2UsIDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHhfcG9zID0gdGhpcy5kYXRhLmhlcm8udGlsZV94X3Bvcyp0aWxlX3dpZHRoO1xuICAgICAgICAgICAgbGV0IHlfcG9zID0gdGhpcy5kYXRhLmhlcm8udGlsZV95X3Bvcyp0aWxlX2hlaWdodDtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKG5ldyBQaGFzZXIuUmVjdGFuZ2xlKHhfcG9zLCB5X3BvcywgdGlsZV93aWR0aCwgdGlsZV9oZWlnaHQpLCAncmdiYSgyNTUsMCwwLDAuNSknKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy5nZW9tKG5ldyBQaGFzZXIuQ2lyY2xlKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS54LCB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSwgNSksICdyZ2JhKDIwLDc1LDAsMS4wKScpO1xuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnQgaW4gdGhpcy5kYXRhLm1hcC5ldmVudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gcG9pbnQuc3BsaXQoJ18nKS5tYXAocCA9PiBwYXJzZUludChwKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLmdlb20obmV3IFBoYXNlci5SZWN0YW5nbGUocG9zWzBdKnRpbGVfd2lkdGgsIHBvc1sxXSp0aWxlX2hlaWdodCwgdGlsZV93aWR0aCwgdGlsZV9oZWlnaHQpLCAncmdiYSgyNTUsMjU1LDYwLDAuNyknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIud2l0aGluR2FtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlX3ggPSAoKHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMuZ2FtZS5pbnB1dC5tb3VzZVBvaW50ZXIueC90aGlzLmRhdGEuc2NhbGVfZmFjdG9yKS90aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGgpIHwgMDtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3VzZV95ID0gKCh0aGlzLmdhbWUuY2FtZXJhLnkgKyB0aGlzLmdhbWUuaW5wdXQubW91c2VQb2ludGVyLnkvdGhpcy5kYXRhLnNjYWxlX2ZhY3RvcikvdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCkgfCAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KGB4OiAke21vdXNlX3h9LCB5OiAke21vdXNlX3l9YCwgMTQwLCAxNSwgXCIjMDBmZjAwXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50X2tleSA9IG1vdXNlX3ggKyBcIl9cIiArIG1vdXNlX3k7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50X2tleSBpbiB0aGlzLmRhdGEubWFwLmV2ZW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLmRhdGEubWFwLmV2ZW50c1tldmVudF9rZXldLm1hcChldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOiBcIltQaGFzZXIuR2FtZV1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIltHb2xkZW5TdW5dXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvbl9kaXJlY3Rpb25zOiBldmVudC5hY3RpdmF0aW9uX2RpcmVjdGlvbnMubWFwKGRpciA9PiByZXZlcnNlX2RpcmVjdGlvbnNbZGlyXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGV2ZW50Lm9yaWdpbl9pbnRlcmFjdGFibGVfb2JqZWN0ICYmIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luX2ludGVyYWN0YWJsZV9vYmplY3Q6IGBbJHtldmVudC5vcmlnaW5faW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZX1dYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2JqZWN0X2luc3BlY3RvclwiKS5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShldmVudHMsIG51bGwsIDQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmRlYnVnLnRleHQoYHg6IC0tLCB5OiAtLWAsIDE0MCwgMTUsIFwiIzAwZmYwMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib2JqZWN0X2luc3BlY3RvclwiKS5pbm5lclRleHQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlX3N0YXRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGF0YS5pbl9iYXR0bGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWdfc3RhdHMgPSAhdGhpcy5kZWJ1Z19zdGF0cztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWxlY3RfZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdfc2VsZWN0XCIpO1xuICAgICAgICBpZiAodGhpcy5kZWJ1Z19zdGF0cykge1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvID0ge1xuICAgICAgICAgICAgICAgIGNoYXJzOiB0aGlzLmRhdGEuYmF0dGxlX2luc3RhbmNlLmFsbGllc19pbmZvLmNvbmNhdCh0aGlzLmRhdGEuYmF0dGxlX2luc3RhbmNlLmVuZW1pZXNfaW5mbykubWFwKGluZm8gPT4gaW5mby5pbnN0YW5jZSBhcyBNYWluQ2hhciksXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IDAsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXI6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvLnNlbGVjdGVkID0gKGV2ZW50LnRhcmdldCBhcyBhbnkpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmRlYnVnX3N0YXRzX2luZm8uY2hhcnMuZm9yRWFjaCgoY2hhciwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gY2hhci5uYW1lO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBpbmRleC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RfZWxlbWVudC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxlY3RfZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmRlYnVnX3N0YXRzX2luZm8ubGlzdGVuZXIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGF0c19kZWJ1Z1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVidWdfc3RhdHNfaW5mbykge1xuICAgICAgICAgICAgICAgIHNlbGVjdF9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuZGVidWdfc3RhdHNfaW5mby5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z19zdGF0c19pbmZvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGF0c19kZWJ1Z19zZWxlY3RcIikuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHNfZGVidWdcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlsbF9zdGF0c19kZWJ1Z190YWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlYnVnX3N0YXRzIHx8ICF0aGlzLmRhdGEuaW5fYmF0dGxlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmRlYnVnX3N0YXRzX2luZm8uY2hhcnNbdGhpcy5kZWJ1Z19zdGF0c19pbmZvLnNlbGVjdGVkXTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubmFtZVwiKS5pbm5lckhUTUwgPSBjaGFyLm5hbWU7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmNsYXNzXCIpLmlubmVySFRNTCA9IGNoYXIuY2xhc3MubmFtZTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubGV2ZWxcIikuaW5uZXJIVE1MID0gY2hhci5sZXZlbC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5leHBcIikuaW5uZXJIVE1MID0gY2hhci5jdXJyZW50X2V4cC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5jdXJyZW50X2hwXCIpLmlubmVySFRNTCA9IGNoYXIuY3VycmVudF9ocC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXhfaHBcIikuaW5uZXJIVE1MID0gY2hhci5tYXhfaHAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuY3VycmVudF9wcFwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfcHAudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWF4X3BwXCIpLmlubmVySFRNTCA9IGNoYXIubWF4X3BwLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmF0a1wiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfYXRrLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmRlZlwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfZGVmLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmFnaVwiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfYWdpLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmx1a1wiKS5pbm5lckhUTUwgPSBjaGFyLmN1cnJlbnRfbHVrLnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLnZlbnVzX3Bvd2VyXCIpLmlubmVySFRNTCA9IGNoYXIudmVudXNfcG93ZXJfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC52ZW51c19yZXNpc3RcIikuaW5uZXJIVE1MID0gY2hhci52ZW51c19yZXNpc3RfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC52ZW51c19sZXZlbFwiKS5pbm5lckhUTUwgPSBjaGFyLnZlbnVzX2xldmVsX2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWVyY3VyeV9wb3dlclwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfcG93ZXJfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tZXJjdXJ5X3Jlc2lzdFwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfcmVzaXN0X2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAubWVyY3VyeV9sZXZlbFwiKS5pbm5lckhUTUwgPSBjaGFyLm1lcmN1cnlfbGV2ZWxfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXJzX3Bvd2VyXCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19wb3dlcl9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLm1hcnNfcmVzaXN0XCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19yZXNpc3RfY3VycmVudC50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5tYXJzX2xldmVsXCIpLmlubmVySFRNTCA9IGNoYXIubWFyc19sZXZlbF9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmp1cGl0ZXJfcG93ZXJcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX3Bvd2VyX2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuanVwaXRlcl9yZXNpc3RcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX3Jlc2lzdF9jdXJyZW50LnRvU3RyaW5nKCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmp1cGl0ZXJfbGV2ZWxcIikuaW5uZXJIVE1MID0gY2hhci5qdXBpdGVyX2xldmVsX2N1cnJlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAudHVybnNcIikuaW5uZXJIVE1MID0gY2hhci50dXJucy50b1N0cmluZygpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC50ZW1wX3N0YXR1c2VzXCIpLmlubmVySFRNTCA9IFsuLi5jaGFyLnRlbXBvcmFyeV9zdGF0dXNdLmpvaW4oXCIgXCIpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0YXRzX2RlYnVnIHRhYmxlIC5wZXJtX3N0YXR1c2VzXCIpLmlubmVySFRNTCA9IFsuLi5jaGFyLnBlcm1hbmVudF9zdGF0dXNdLmpvaW4oXCIgXCIpO1xuICAgICAgICBsZXQgYnVmZl9odG1sID0gXCJcIjtcbiAgICAgICAgT2JqZWN0LmtleXMoY2hhci5lZmZlY3RfdHVybnNfY291bnQpLnNvcnQoKS5mb3JFYWNoKGVmZmVjdCA9PiB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0ID09PSBcInBvd2VyXCIgfHwgZWZmZWN0ID09PSBcInJlc2lzdFwiKSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZF9lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fVske2VsZW1lbnR9XS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF1bZWxlbWVudF19IDxicj5gO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBidWZmX2h0bWwgKz0gYCR7ZWZmZWN0fS8ke2NoYXIuZWZmZWN0X3R1cm5zX2NvdW50W2VmZmVjdF19IDxicj5gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdGF0c19kZWJ1ZyB0YWJsZSAuYnVmZlwiKS5pbm5lckhUTUwgPSBidWZmX2h0bWw7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3RhdHNfZGVidWcgdGFibGUgLmVmZmVjdF9jb3VudFwiKS5pbm5lckhUTUwgPSBjaGFyLmVmZmVjdHMubGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgfVxufSIsImZ1bmN0aW9uIGxvYWRfYnV0dG9ucyhnYW1lKSB7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ2J1dHRvbnMnLCAnYXNzZXRzL2ltYWdlcy9idXR0b25zL2J1dHRvbnMucG5nJywgJ2Fzc2V0cy9pbWFnZXMvYnV0dG9ucy9idXR0b25zLmpzb24nKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3NoaWZ0X2tleWJvYXJkJywgJ2Fzc2V0cy9pbWFnZXMva2V5Ym9hcmQvc2hpZnQucG5nJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCd0YWJfa2V5Ym9hcmQnLCAnYXNzZXRzL2ltYWdlcy9rZXlib2FyZC90YWIucG5nJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdzcGFjZWJhcl9rZXlib2FyZCcsICdhc3NldHMvaW1hZ2VzL2tleWJvYXJkL3NwYWNlYmFyLnBuZycpO1xufVxuXG5mdW5jdGlvbiBsb2FkX2RiX2ZpbGVzKGdhbWUpIHtcbiAgICBnYW1lLmxvYWQuanNvbignaW5pdF9kYicsICdhc3NldHMvaW5pdC5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ2NsYXNzZXNfZGInLCAnYXNzZXRzL2Ricy9jbGFzc2VzX2RiLmpzb24nKTtcbiAgICBnYW1lLmxvYWQuanNvbignYWJpbGl0aWVzX2RiJywgJ2Fzc2V0cy9kYnMvYWJpbGl0aWVzX2RiLmpzb24nKTtcbiAgICBnYW1lLmxvYWQuanNvbignaXRlbXNfZGInLCAnYXNzZXRzL2Ricy9pdGVtc19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ25wY19kYicsICdhc3NldHMvZGJzL25wY19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ2ludGVyYWN0YWJsZV9vYmplY3RzX2RiJywgJ2Fzc2V0cy9kYnMvaW50ZXJhY3RhYmxlX29iamVjdHNfZGIuanNvbicpO1xuICAgIGdhbWUubG9hZC5qc29uKCdkamlubmlfZGInLCAnYXNzZXRzL2Ricy9kamlubmlfZGIuanNvbicpO1xuICAgIGdhbWUubG9hZC5qc29uKCdlbmVtaWVzX2RiJywgJ2Fzc2V0cy9kYnMvZW5lbWllc19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ2VuZW1pZXNfcGFydGllc19kYicsICdhc3NldHMvZGJzL2VuZW1pZXNfcGFydGllc19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ21hcHNfZGInLCAnYXNzZXRzL2Ricy9tYXBzX2RiLmpzb24nKTtcbiAgICBnYW1lLmxvYWQuanNvbignbWFpbl9jaGFyc19kYicsICdhc3NldHMvZGJzL21haW5fY2hhcnNfZGIuanNvbicpO1xuICAgIGdhbWUubG9hZC5qc29uKCdzdW1tb25zX2RiJywgJ2Fzc2V0cy9kYnMvc3VtbW9uc19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ21pc2NfYW5pbWF0aW9uc19kYicsICdhc3NldHMvZGJzL21pc2NfYW5pbWF0aW9uc19kYi5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmpzb24oJ3Nob3BrZWVwX2RpYWxvZ19kYicsJ2Fzc2V0cy9kYnMvc2hvcGtlZXBfZGlhbG9nX2RiLmpzb24nKTtcbiAgICBnYW1lLmxvYWQuanNvbignc2hvcHNfZGInLCdhc3NldHMvZGJzL3Nob3BzX2RiLmpzb24nKVxufVxuXG5mdW5jdGlvbiBsb2FkX21pc2MoZ2FtZSkge1xuICAgIGdhbWUubG9hZC5pbWFnZSgnc2hhZG93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9zaGFkb3cuanBnJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdjdXJzb3InLCAnYXNzZXRzL2ltYWdlcy9taXNjL2N1cnNvci5naWYnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ2dyZWVuX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9ncmVlbl9hcnJvdy5naWYnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3VwX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy91cF9hcnJvdy5naWYnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ2Rvd25fYXJyb3cnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2Rvd25fYXJyb3cuZ2lmJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdwYWdlX2Fycm93JywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9wYWdlX2Fycm93LnBuZycpO1xuICAgIGdhbWUubG9hZC5pbWFnZSgncHN5bmVyZ3lfYXVyYScsICdhc3NldHMvaW1hZ2VzL21pc2MvcHN5bmVyZ3lfYXVyYS5wbmcnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ2VxdWlwcGVkJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9lcXVpcHBlZC5naWYnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3ZlbnVzX3N0YXInLCAnYXNzZXRzL2ltYWdlcy9taXNjL3ZlbnVzX3N0YXIuZ2lmJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdtZXJjdXJ5X3N0YXInLCAnYXNzZXRzL2ltYWdlcy9taXNjL21lcmN1cnlfc3Rhci5naWYnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ21hcnNfc3RhcicsICdhc3NldHMvaW1hZ2VzL21pc2MvbWFyc19zdGFyLmdpZicpO1xuICAgIGdhbWUubG9hZC5pbWFnZSgnanVwaXRlcl9zdGFyJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9qdXBpdGVyX3N0YXIuZ2lmJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdzdGF0X3VwJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9zdGF0X3VwLmdpZicpO1xuICAgIGdhbWUubG9hZC5pbWFnZSgnc3RhdF9kb3duJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9zdGF0X2Rvd24uZ2lmJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdhcnJvd19jaGFuZ2UnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2Fycm93X2NoYW5nZS5wbmcnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ2l0ZW1fYm9yZGVyJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9pdGVtX2JvcmRlci5wbmcnKTtcbiAgICBnYW1lLmxvYWQuaW1hZ2UoJ3ByaWNlX3RhZycsICdhc3NldHMvaW1hZ2VzL21pc2MvcHJpY2VfdGFnLnBuZycpO1xuICAgIGdhbWUubG9hZC5pbWFnZSgnYnJva2VuJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9icm9rZW4ucG5nJyk7XG4gICAgZ2FtZS5sb2FkLmltYWdlKCdmcm9zdF9zbm93Zmxha2UnLCAnYXNzZXRzL2ltYWdlcy9pbnRlcmFjdGFibGVfb2JqZWN0cy9zbm93Zmxha2UucG5nJyk7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ2R1c3QnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2R1c3QucG5nJywgJ2Fzc2V0cy9pbWFnZXMvbWlzYy9kdXN0Lmpzb24nKTtcbiAgICBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgnYmF0dGxlX2N1cnNvcicsICdhc3NldHMvaW1hZ2VzL21pc2MvYmF0dGxlX2N1cnNvci5wbmcnLCAnYXNzZXRzL2ltYWdlcy9taXNjL2JhdHRsZV9jdXJzb3IuanNvbicpO1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdyYW5nZXMnLCAnYXNzZXRzL2ltYWdlcy9taXNjL3Jhbmdlcy5wbmcnLCAnYXNzZXRzL2ltYWdlcy9taXNjL3Jhbmdlcy5qc29uJyk7XG4gICAgZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goJ3BzeW5lcmd5X3BhcnRpY2xlJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfcGFydGljbGUucG5nJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfcGFydGljbGUuanNvbicpO1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdwc3luZXJneV9iYWxsJywgJ2Fzc2V0cy9pbWFnZXMvaW50ZXJhY3RhYmxlX29iamVjdHMvcHN5bmVyZ3lfYmFsbC5wbmcnLCAnYXNzZXRzL2ltYWdlcy9pbnRlcmFjdGFibGVfb2JqZWN0cy9wc3luZXJneV9iYWxsLmpzb24nKTtcbn1cblxuZnVuY3Rpb24gbG9hZF9hc3NldHMoZ2FtZSkge1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdiYXR0bGVfYmFja2dyb3VuZHMnLCAnYXNzZXRzL2ltYWdlcy9iYXR0bGVfYmFja2dyb3VuZHMvYmF0dGxlX2JhY2tncm91bmRzLnBuZycsICdhc3NldHMvaW1hZ2VzL2JhdHRsZV9iYWNrZ3JvdW5kcy9iYXR0bGVfYmFja2dyb3VuZHMuanNvbicpO1xuICAgIGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdhdmF0YXJzJywgJ2Fzc2V0cy9pbWFnZXMvYXZhdGFycy9hdmF0YXJzLnBuZycsICdhc3NldHMvaW1hZ2VzL2F2YXRhcnMvYXZhdGFycy5qc29uJyk7XG59XG5cbmZ1bmN0aW9uIGxvYWRfZm9udHMoZ2FtZSkge1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KCdncy1ibXAtZm9udCcsICdhc3NldHMvZm9udC9nb2xkZW4tc3VuLnBuZycsICdhc3NldHMvZm9udC9nb2xkZW4tc3VuLmZudCcpO1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KCdncy1pdGFsaWMtYm1wLWZvbnQnLCAnYXNzZXRzL2ZvbnQvZ29sZGVuLXN1bi1pdGFsaWMucG5nJywgJ2Fzc2V0cy9mb250L2dvbGRlbi1zdW4taXRhbGljLmZudCcpO1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KCdncy1pdGVtLWJtcC1mb250JywgJ2Fzc2V0cy9mb250L2dzLWl0ZW0tZm9udC5wbmcnLCAnYXNzZXRzL2ZvbnQvZ3MtaXRlbS1mb250LmZudCcpO1xuICAgIGdhbWUubG9hZC5iaXRtYXBGb250KCdncy1zaG9wLWJtcC1mb250JywgJ2Fzc2V0cy9mb250L2dzLXNob3AtZm9udC5wbmcnLCAnYXNzZXRzL2ZvbnQvZ3Mtc2hvcC1mb250LmZudCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZF9hbGwoZ2FtZSkge1xuICAgIGxvYWRfZGJfZmlsZXMoZ2FtZSk7XG4gICAgbG9hZF9taXNjKGdhbWUpO1xuICAgIGxvYWRfYXNzZXRzKGdhbWUpO1xuICAgIGxvYWRfYnV0dG9ucyhnYW1lKTtcbiAgICBsb2FkX2ZvbnRzKGdhbWUpO1xuICAgIGdhbWUubG9hZC5zY3JpcHQoJ2NvbG9yX2ZpbHRlcnMnLCAnYXNzZXRzL2ZpbHRlcnMvY29sb3JfZmlsdGVycy5qcycpO1xufSIsImltcG9ydCB7IEhlcm8gfSBmcm9tIFwiLi9IZXJvXCI7XG5cbmV4cG9ydCBjbGFzcyBDb2xsaXNpb24ge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgaGVybzogSGVybztcbiAgICBwdWJsaWMgaGVyb19jb2xsaXNpb25fZ3JvdXA6IFBoYXNlci5QaHlzaWNzLlAyLkNvbGxpc2lvbkdyb3VwO1xuICAgIHB1YmxpYyBkeW5hbWljX2V2ZW50c19jb2xsaXNpb25fZ3JvdXA6IFBoYXNlci5QaHlzaWNzLlAyLkNvbGxpc2lvbkdyb3VwO1xuICAgIHB1YmxpYyBtYXBfY29sbGlzaW9uX2dyb3VwOiBQaGFzZXIuUGh5c2ljcy5QMi5Db2xsaXNpb25Hcm91cDtcbiAgICBwdWJsaWMgbnBjX2NvbGxpc2lvbl9ncm91cHM6IHtbbGF5ZXJfaW5kZXg6IG51bWJlcl06IFBoYXNlci5QaHlzaWNzLlAyLkNvbGxpc2lvbkdyb3VwfTtcbiAgICBwdWJsaWMgaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwczoge1tsYXllcl9pbmRleDogbnVtYmVyXTogUGhhc2VyLlBoeXNpY3MuUDIuQ29sbGlzaW9uR3JvdXB9O1xuICAgIHB1YmxpYyBtYXhfbGF5ZXJzX2NyZWF0ZWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgZHluYW1pY19qdW1wX2V2ZW50c19ib2RpZXM6IFBoYXNlci5QaHlzaWNzLlAyLkJvZHlbXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGhlcm8pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5oZXJvID0gaGVybztcbiAgICAgICAgdGhpcy5jb25maWdfd29ybGQoKTtcbiAgICAgICAgdGhpcy5oZXJvX2NvbGxpc2lvbl9ncm91cCA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgIHRoaXMuZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgdGhpcy5tYXBfY29sbGlzaW9uX2dyb3VwID0gZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgIHRoaXMubnBjX2NvbGxpc2lvbl9ncm91cHMgPSB7fTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzID0ge307XG4gICAgICAgIHRoaXMubWF4X2xheWVyc19jcmVhdGVkID0gMDtcbiAgICAgICAgdGhpcy5keW5hbWljX2p1bXBfZXZlbnRzX2JvZGllcyA9IFtdO1xuICAgIH1cblxuICAgIGNvbmZpZ193b3JsZCgpIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3Muc3RhcnRTeXN0ZW0oUGhhc2VyLlBoeXNpY3MuUDJKUyk7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnNldEltcGFjdEV2ZW50cyh0cnVlKTtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIud29ybGQuZGVmYXVsdENvbnRhY3RNYXRlcmlhbC5yZXN0aXR1dGlvbiA9IDA7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwucmVsYXhhdGlvbiA9IDg7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLmRlZmF1bHRDb250YWN0TWF0ZXJpYWwuZnJpY3Rpb24gPSAwO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi53b3JsZC5kZWZhdWx0Q29udGFjdE1hdGVyaWFsLmNvbnRhY3RTa2luU2l6ZSA9IDFlLTM7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLnNldEdsb2JhbFN0aWZmbmVzcygxZTUpO1xuICAgICAgICB0aGlzLmdhbWUucGh5c2ljcy5wMi5yZXN0aXR1dGlvbiA9IDA7XG4gICAgfVxuXG4gICAgY29uZmlnX2NvbGxpc2lvbl9ncm91cHMobWFwKSB7XG4gICAgICAgIC8vcDIgaGFzIGEgbGltaXQgbnVtYmVyIG9mIGNvbGxpc2lvbiBncm91cHMgdGhhdCBjYW4gYmUgY3JlYXRlZC4gVGhlbiwgTlBDcyBhbmQgSS4gT2Jqcy4gZ3JvdXBzIHdpbGwgYmUgY3JlYXRlZCBvbiBkZW1hbmQuXG4gICAgICAgIGZvciAobGV0IGxheWVyX2luZGV4ID0gdGhpcy5tYXhfbGF5ZXJzX2NyZWF0ZWQ7IGxheWVyX2luZGV4IDwgbWFwLmNvbGxpc2lvbl9sYXllcnNfbnVtYmVyOyArK2xheWVyX2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzW2xheWVyX2luZGV4XSA9IHRoaXMuZ2FtZS5waHlzaWNzLnAyLmNyZWF0ZUNvbGxpc2lvbkdyb3VwKCk7XG4gICAgICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmpzX2NvbGxpc2lvbl9ncm91cHNbbGF5ZXJfaW5kZXhdID0gdGhpcy5nYW1lLnBoeXNpY3MucDIuY3JlYXRlQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heF9sYXllcnNfY3JlYXRlZCA9IE1hdGgubWF4KHRoaXMubWF4X2xheWVyc19jcmVhdGVkLCBtYXAuY29sbGlzaW9uX2xheWVyc19udW1iZXIpO1xuICAgIH1cblxuICAgIGNvbmZpZ19jb2xsaXNpb25zKG1hcCwgY29sbGlzaW9uX2xheWVyLCBucGNfZ3JvdXApIHtcbiAgICAgICAgdGhpcy5oZXJvLnNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMubWFwX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIG1hcC5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG5cbiAgICAgICAgZm9yIChsZXQgY29sbGlkZV9pbmRleCBpbiB0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaWRlX2luZGV4XSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbGxpc2lvbl9sYXllciBpbiB0aGlzLm5wY19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5ucGNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGNvbGxpZGVfaW5kZXggaW4gdGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzKSB7XG4gICAgICAgICAgICB0aGlzLmhlcm8uc3ByaXRlLmJvZHkucmVtb3ZlQ29sbGlzaW9uR3JvdXAodGhpcy5pbnRlcmFjdGFibGVfb2Jqc19jb2xsaXNpb25fZ3JvdXBzW2NvbGxpZGVfaW5kZXhdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sbGlzaW9uX2xheWVyIGluIHRoaXMuaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwcykge1xuICAgICAgICAgICAgdGhpcy5oZXJvLnNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuaW50ZXJhY3RhYmxlX29ianNfY29sbGlzaW9uX2dyb3Vwc1tjb2xsaXNpb25fbGF5ZXJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzcHJpdGUgPSBucGNfZ3JvdXAuY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAoIXNwcml0ZS5pc19ucGMgJiYgIXNwcml0ZS5pc19pbnRlcmFjdGFibGVfb2JqZWN0KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICghc3ByaXRlLmJvZHkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgc3ByaXRlLmJvZHkuY29sbGlkZXModGhpcy5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZXJvLnNwcml0ZS5ib2R5LmNvbGxpZGVzKHRoaXMuZHluYW1pY19ldmVudHNfY29sbGlzaW9uX2dyb3VwKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfbWFwX2JvZHkoZGF0YSwgbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4KSB7XG4gICAgICAgIGlmIChkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IG5ld19jb2xsaWRlcl9sYXllcl9pbmRleCkgcmV0dXJuO1xuICAgICAgICBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPSBuZXdfY29sbGlkZXJfbGF5ZXJfaW5kZXg7XG4gICAgICAgIHRoaXMuaGVyby5zaGFkb3cuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMuaGVyby5zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIGRhdGEubWFwLmNvbmZpZ19ib2R5KHRoaXMsIG5ld19jb2xsaWRlcl9sYXllcl9pbmRleCk7XG4gICAgICAgIHRoaXMuY29uZmlnX2NvbGxpc2lvbl9ncm91cHMoZGF0YS5tYXApO1xuICAgICAgICB0aGlzLmNvbmZpZ19jb2xsaXNpb25zKGRhdGEubWFwLCBkYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIsIGRhdGEubnBjX2dyb3VwKTtcbiAgICAgICAgbGV0IGxheWVycyA9IGRhdGEubWFwLmxheWVycztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBsYXllciA9IGxheWVyc1tpXTtcbiAgICAgICAgICAgIGxldCBpc19vdmVyID0gbGF5ZXIucHJvcGVydGllcy5vdmVyLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgaWYgKGlzX292ZXIubGVuZ3RoID4gbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgaXNfb3ZlciA9IGlzX292ZXIubGVuZ3RoID4gbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4ID8gKGlzX292ZXJbbmV3X2NvbGxpZGVyX2xheWVyX2luZGV4XSkgfCAwIDogKGlzX292ZXJbMF0pIHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoaXNfb3ZlciAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnVuZGVybGF5ZXJfZ3JvdXAucmVtb3ZlKGxheWVyLnNwcml0ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBkYXRhLm92ZXJsYXllcl9ncm91cC5jaGlsZHJlbi5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGRhdGEub3ZlcmxheWVyX2dyb3VwLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5sYXllcl96ID4gbGF5ZXIueikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3ZlcmxheWVyX2dyb3VwLmFkZEF0KGxheWVyLnNwcml0ZSwgaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZGF0YS5vdmVybGF5ZXJfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm92ZXJsYXllcl9ncm91cC5hZGQobGF5ZXIuc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEub3ZlcmxheWVyX2dyb3VwLnJlbW92ZShsYXllci5zcHJpdGUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgZGF0YS51bmRlcmxheWVyX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gZGF0YS51bmRlcmxheWVyX2dyb3VwLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5sYXllcl96ID4gbGF5ZXIueikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudW5kZXJsYXllcl9ncm91cC5hZGRBdChsYXllci5zcHJpdGUsIGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGRhdGEudW5kZXJsYXllcl9ncm91cC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudW5kZXJsYXllcl9ncm91cC5hZGQobGF5ZXIuc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbnRyb2xsYWJsZUNoYXIgfSBmcm9tIFwiLi9Db250cm9sbGFibGVDaGFyXCI7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvVGlsZUV2ZW50XCI7XG5pbXBvcnQgeyBnZXRfdHJhbnNpdGlvbl9kaXJlY3Rpb25zLCByYW5nZV8zNjAsIGRpcmVjdGlvbnMsIGJhc2VfYWN0aW9ucyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgbm9ybWFsX3B1c2ggfSBmcm9tIFwiLi9pbnRlcmFjdGFibGVfb2JqZWN0cy9wdXNoXCI7XG5cbmNvbnN0IFNQRUVEX0xJTUlUX1RPX1NUT1AgPSAxMztcbmNvbnN0IE1JTklNQUxfU0xPUEUgPSAwLjE7XG5cbi8vcm90YXRpb25fa2V5IGNhbiBjb252ZXJ0IGZyb20gcHJlc3NlZF9rZXlzIHRvIHRoZSBjb3JyZXNwb25kaW5nIGluLWdhbWUgcm90YXRpb25cbmNvbnN0IHJvdGF0aW9uX2tleSA9IFtcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL25vIGtleXMgcHJlc3NlZFxuICAgIGRpcmVjdGlvbnMucmlnaHQsICAgICAgIC8vcmlnaHRcbiAgICBkaXJlY3Rpb25zLmxlZnQsICAgICAgICAvL2xlZnRcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL3JpZ2h0IGFuZCBsZWZ0XG4gICAgZGlyZWN0aW9ucy51cCwgICAgICAgICAgLy91cFxuICAgIGRpcmVjdGlvbnMudXBfcmlnaHQsICAgIC8vdXAgYW5kIHJpZ2h0XG4gICAgZGlyZWN0aW9ucy51cF9sZWZ0LCAgICAgLy91cCBhbmQgbGVmdFxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vdXAsIGxlZnQsIGFuZCByaWdodFxuICAgIGRpcmVjdGlvbnMuZG93biwgICAgICAgIC8vZG93blxuICAgIGRpcmVjdGlvbnMuZG93bl9yaWdodCwgIC8vZG93biBhbmQgcmlnaHRcbiAgICBkaXJlY3Rpb25zLmRvd25fbGVmdCwgICAvL2Rvd24gYW5kIGxlZnRcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24sIGxlZnQsIGFuZCByaWdodFxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vZG93biBhbmQgdXBcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24sIHVwLCBhbmQgcmlnaHRcbiAgICBudWxsLCAgICAgICAgICAgICAgICAgICAvL2Rvd24sIHVwLCBhbmQgbGVmdFxuICAgIG51bGwsICAgICAgICAgICAgICAgICAgIC8vZG93biwgdXAsIGxlZnQsIGFuZCByaWdodFxuXTtcblxuLy9yb3RhdGlvbl9ub3JtYWwgY29udmVydHMgZnJvbSBub3JtYWxfYW5nbGUgcmVnaW9uIChmbG9vcigoYW5nbGUtMTUpLzMwKSkgdG8gaW4tZ2FtZSByb3RhdGlvblxuY29uc3Qgcm90YXRpb25fbm9ybWFsID0gW1xuICAgIGRpcmVjdGlvbnMucmlnaHQsICAgICAgLy8zNDUtMTUgZGVncmVlc1xuICAgIGRpcmVjdGlvbnMudXBfcmlnaHQsICAgLy8xNS00NSBkZWdyZWVzXG4gICAgZGlyZWN0aW9ucy51cF9yaWdodCwgICAvLzQ1LTc1IGRlZ3JlZXNcbiAgICBkaXJlY3Rpb25zLnVwLCAgICAgICAgIC8vNzUtMTA1IGRlZ3JlZXNcbiAgICBkaXJlY3Rpb25zLnVwX2xlZnQsICAgIC8vMTA1LTEzNSBkZWdyZWVzXG4gICAgZGlyZWN0aW9ucy51cF9sZWZ0LCAgICAvLzEzNS0xNjUgZGVncmVlc1xuICAgIGRpcmVjdGlvbnMubGVmdCwgICAgICAgLy8xNjUtMTk1IGRlZ3JlZXNcbiAgICBkaXJlY3Rpb25zLmRvd25fbGVmdCwgIC8vMTk1LTIyNSBkZWdyZWVzXG4gICAgZGlyZWN0aW9ucy5kb3duX2xlZnQsICAvLzIyNS0yNTUgZGVncmVlc1xuICAgIGRpcmVjdGlvbnMuZG93biwgICAgICAgLy8yNTUtMjg1IGRlZ3JlZXNcbiAgICBkaXJlY3Rpb25zLmRvd25fcmlnaHQsIC8vMjg1LTMxNSBkZWdyZWVzXG4gICAgZGlyZWN0aW9ucy5kb3duX3JpZ2h0LCAvLzMxNS0zNDUgZGVncmVlc1xuXTtcblxuY29uc3Qgc3BlZWRzID0ge1xuICAgIFtkaXJlY3Rpb25zLnJpZ2h0XToge3g6IDEsIHk6IDB9LFxuICAgIFtkaXJlY3Rpb25zLmxlZnRdOiB7eDogLTEsIHk6IDB9LFxuICAgIFtkaXJlY3Rpb25zLnVwXToge3g6IDAsIHk6IC0xfSxcbiAgICBbZGlyZWN0aW9ucy51cF9yaWdodF06IHt4OiBudW1iZXJzLklOVl9TUVJUMiwgeTogLW51bWJlcnMuSU5WX1NRUlQyfSxcbiAgICBbZGlyZWN0aW9ucy51cF9sZWZ0XToge3g6IC1udW1iZXJzLklOVl9TUVJUMiwgeTogLW51bWJlcnMuSU5WX1NRUlQyfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duXToge3g6IDAsIHk6IDF9LFxuICAgIFtkaXJlY3Rpb25zLmRvd25fcmlnaHRdOiB7eDogbnVtYmVycy5JTlZfU1FSVDIsIHk6IG51bWJlcnMuSU5WX1NRUlQyfSxcbiAgICBbZGlyZWN0aW9ucy5kb3duX2xlZnRdOiB7eDogLW51bWJlcnMuSU5WX1NRUlQyLCB5OiBudW1iZXJzLklOVl9TUVJUMn1cbn07XG5cbmV4cG9ydCBjbGFzcyBIZXJvIGV4dGVuZHMgQ29udHJvbGxhYmxlQ2hhciB7XG4gICAgcHVibGljIGFycm93X2lucHV0czogbnVtYmVyO1xuICAgIHB1YmxpYyBjdXJzb3JzOiBQaGFzZXIuQ3Vyc29yS2V5cztcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGtleV9uYW1lLCBpbml0aWFsX3gsIGluaXRpYWxfeSwgaW5pdGlhbF9hY3Rpb24sIGluaXRpYWxfZGlyZWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGtleV9uYW1lLCBpbml0aWFsX3gsIGluaXRpYWxfeSwgaW5pdGlhbF9hY3Rpb24sIGluaXRpYWxfZGlyZWN0aW9uLCB0cnVlKTtcbiAgICAgICAgdGhpcy5hcnJvd19pbnB1dHMgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnNvcnMgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9hcnJvd19pbnB1dHMoKSB7XG4gICAgICAgIHRoaXMuYXJyb3dfaW5wdXRzID1cbiAgICAgICAgICAgICAgMSAqICgrdGhpcy5jdXJzb3JzLnJpZ2h0LmlzRG93bilcbiAgICAgICAgICAgIHwgMiAqICgrdGhpcy5jdXJzb3JzLmxlZnQuaXNEb3duKVxuICAgICAgICAgICAgfCA0ICogKCt0aGlzLmN1cnNvcnMudXAuaXNEb3duKVxuICAgICAgICAgICAgfCA4ICogKCt0aGlzLmN1cnNvcnMuZG93bi5pc0Rvd24pO1xuICAgICAgICB0aGlzLnJlcXVpcmVkX2RpcmVjdGlvbiA9IHJvdGF0aW9uX2tleVt0aGlzLmFycm93X2lucHV0c107XG4gICAgfVxuXG4gICAgc2V0X3NwZWVkX2ZhY3RvcnMoY2hlY2tfb25fZXZlbnQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoY2hlY2tfb25fZXZlbnQgJiYgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZXNpcmVkX2RpcmVjdGlvbiA9IHJvdGF0aW9uX2tleVt0aGlzLmFycm93X2lucHV0c107XG4gICAgICAgIGlmICh0aGlzLmNsaW1iaW5nKSB7XG4gICAgICAgICAgICBpZiAoZGVzaXJlZF9kaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhfc3BlZWQgPSB0aGlzLnlfc3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaWRsZV9jbGltYmluZyA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoZGVzaXJlZF9kaXJlY3Rpb24gJiAxKSA9PT0gMSkgeyAvL3RyYW5zZm9ybXMgZGlhZ29uYWwgbW92ZW1lbnRzIGluIG5vbi1kaWFnb25hbFxuICAgICAgICAgICAgICAgICAgICAtLWRlc2lyZWRfZGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldF9kaXJlY3Rpb24oZGVzaXJlZF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuaWRsZV9jbGltYmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHNwZWVkc1tkZXNpcmVkX2RpcmVjdGlvbl0ueDtcbiAgICAgICAgICAgICAgICB0aGlzLnlfc3BlZWQgPSBzcGVlZHNbZGVzaXJlZF9kaXJlY3Rpb25dLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3doZW4gZm9yY2VfZGlyZWN0aW9uIGlzIHRydWUsIGl0IG1lYW5zIHRoYXQgdGhlIGhlcm8gaXMgZ29pbmcgdG8gZmFjZSBhIGRpZmZlcmVudCBkaXJlY3Rpb24gZnJvbSB0aGUgb25lIHNwZWNpZmllZCBpbiB0aGUga2V5Ym9hcmQgYXJyb3dzXG4gICAgICAgICAgICBpZiAoZGVzaXJlZF9kaXJlY3Rpb24gIT09IG51bGwgfHwgdGhpcy5mb3JjZV9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZm9yY2VfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSBkZXNpcmVkX2RpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS50aW1lLmZyYW1lcyAmIDEpIHsgLy9jaGFyIHR1cm4gdGltZSBmcmFtZSByYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc2lyZWRfZGlyZWN0aW9uID0gZ2V0X3RyYW5zaXRpb25fZGlyZWN0aW9ucyh0aGlzLmRlc2lyZWRfZGlyZWN0aW9uLCBkZXNpcmVkX2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXNpcmVkX2RpcmVjdGlvbiA9IHRoaXMuY3VycmVudF9kaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHNwZWVkc1tkZXNpcmVkX2RpcmVjdGlvbl0ueDtcbiAgICAgICAgICAgICAgICB0aGlzLnlfc3BlZWQgPSBzcGVlZHNbZGVzaXJlZF9kaXJlY3Rpb25dLnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMueF9zcGVlZCA9IHRoaXMueV9zcGVlZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja19pbnRlcmFjdGFibGVfb2JqZWN0cyhtYXAsIGNvbnRhY3QpIHtcbiAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbWFwLmludGVyYWN0YWJsZV9vYmplY3RzLmxlbmd0aDsgKytqKSB7IC8vY2hlY2sgaWYgaGVybyBpcyBjb2xsaWRpbmcgd2l0aCBhbnkgaW50ZXJhY3RhYmxlIG9iamVjdFxuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdF9ib2R5ID0gbWFwLmludGVyYWN0YWJsZV9vYmplY3RzW2pdLnNwcml0ZS5ib2R5O1xuICAgICAgICAgICAgaWYgKCFpbnRlcmFjdGFibGVfb2JqZWN0X2JvZHkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGNvbnRhY3QuYm9keUEgPT09IGludGVyYWN0YWJsZV9vYmplY3RfYm9keS5kYXRhIHx8IGNvbnRhY3QuYm9keUIgPT09IGludGVyYWN0YWJsZV9vYmplY3RfYm9keS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QuYm9keUEgPT09IHRoaXMuc3ByaXRlLmJvZHkuZGF0YSB8fCBjb250YWN0LmJvZHlCID09PSB0aGlzLnNwcml0ZS5ib2R5LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJhY3RhYmxlX29iamVjdCA9IG1hcC5pbnRlcmFjdGFibGVfb2JqZWN0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFtiYXNlX2FjdGlvbnMuV0FMSywgYmFzZV9hY3Rpb25zLkRBU0hdLmluY2x1ZGVzKHRoaXMuY3VycmVudF9hY3Rpb24pICYmIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyID09PSBpbnRlcmFjdGFibGVfb2JqZWN0LmJhc2VfY29sbGlzaW9uX2xheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnB1c2hfdGltZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiA9IHRoaXMuY3VycmVudF9kaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzX2luX3BvcyA9IG1hcC5ldmVudHNbVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkodGhpcy50aWxlX3hfcG9zLCB0aGlzLnRpbGVfeV9wb3MpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzX3N0YWlyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c19pbl9wb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzX2luX3Bvcy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBldmVudF90eXBlcy5DTElNQiAmJiBldmVudC5pc19zZXQgJiYgZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHRoaXMudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc19zdGFpciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNfc3RhaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1fcG9zaXRpb24gPSBpbnRlcmFjdGFibGVfb2JqZWN0LmdldF9jdXJyZW50X3Bvc2l0aW9uKG1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnkgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54IC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMucmlnaHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyYWN0YWJsZV9vYmplY3QucG9zaXRpb25fYWxsb3dlZChpdGVtX3Bvc2l0aW9uLngsIGl0ZW1fcG9zaXRpb24ueSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlFVQVJURVIsIG5vcm1hbF9wdXNoLmJpbmQodGhpcywgdGhpcy5nYW1lLCB0aGlzLmRhdGEsIGludGVyYWN0YWJsZV9vYmplY3QpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChqID09PSBtYXAuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRyeWluZ190b19wdXNoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb2xsaXNpb25fZGVhbGVyKG1hcCkge1xuICAgICAgICBsZXQgbm9ybWFscyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ2FtZS5waHlzaWNzLnAyLndvcmxkLm5hcnJvd3BoYXNlLmNvbnRhY3RFcXVhdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhY3QgPSB0aGlzLmdhbWUucGh5c2ljcy5wMi53b3JsZC5uYXJyb3dwaGFzZS5jb250YWN0RXF1YXRpb25zW2ldO1xuICAgICAgICAgICAgaWYgKGNvbnRhY3QuYm9keUEgPT09IHRoaXMuc3ByaXRlLmJvZHkuZGF0YSkgeyAvL2NoZWNrIGlmIGhlcm8gY29sbGlkZWQgd2l0aCBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICBub3JtYWxzLnB1c2goY29udGFjdC5ub3JtYWxBKTsgLy9jb2xsaXNpb24gbm9ybWFscyAob25lIG5vcm1hbCBmb3IgZWFjaCBjb250YWN0IHBvaW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGVja19pbnRlcmFjdGFibGVfb2JqZWN0cyhtYXAsIGNvbnRhY3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vbm9ybWFscyBoYXZpbmcgbGVuZ3RoLCBtZWFucyB0aGF0IGEgY29sbGlzaW9uIGlzIGhhcHBlbmluZ1xuICAgICAgICBpZiAobm9ybWFscy5sZW5ndGggJiYgW2Jhc2VfYWN0aW9ucy5XQUxLLCBiYXNlX2FjdGlvbnMuREFTSCwgYmFzZV9hY3Rpb25zLkNMSU1CXS5pbmNsdWRlcyh0aGlzLmN1cnJlbnRfYWN0aW9uKSkge1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueCkgPCBTUEVFRF9MSU1JVF9UT19TVE9QICYmIE1hdGguYWJzKHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkueSkgPCBTUEVFRF9MSU1JVF9UT19TVE9QKSB7IC8vc3BlZWRzIGJlbG93IFNQRUVEX0xJTUlUX1RPX1NUT1AgYXJlIG5vdCBjb25zaWRlcmVkXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRhY3RfcG9pbnRfZGlyZWN0aW9ucyA9IG5ldyBBcnJheShub3JtYWxzLmxlbmd0aCk7IC8vIGEgY29udGFjdCBwb2ludCBkaXJlY3Rpb24gaXMgdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBvZiB0aGUgY29udGFjdCBub3JtYWwgdmVjdG9yXG4gICAgICAgICAgICAgICAgbm9ybWFscy5mb3JFYWNoKChub3JtYWwsIGluZGV4KSA9PiB7IC8vc2xvcGVzIG91dHNpZGUgdGhlIE1JTklNQUxfU0xPUEUgcmFuZ2Ugd2lsbCBiZSBkZXNjb25zaWRlcmVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhub3JtYWxbMF0pIDwgTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzBdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbFsxXSkgPCBNSU5JTUFMX1NMT1BFKSBub3JtYWxbMV0gPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobm9ybWFsWzBdKSA+IDEgLSBNSU5JTUFMX1NMT1BFKSBub3JtYWxbMF0gPSBNYXRoLnNpZ24obm9ybWFsWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG5vcm1hbFsxXSkgPiAxIC0gTUlOSU1BTF9TTE9QRSkgbm9ybWFsWzFdID0gTWF0aC5zaWduKG5vcm1hbFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RfcG9pbnRfZGlyZWN0aW9uc1tpbmRleF0gPSByYW5nZV8zNjAoTWF0aC5hdGFuMihub3JtYWxbMV0sIC1ub3JtYWxbMF0pKTsgLy9zdG9yaW5nIHRoZSBhbmdsZSBhcyBpZiBpdCBpcyBpbiB0aGUgMXN0IHF1YWRyYW50XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzaXJlZF9kaXJlY3Rpb24gPSByYW5nZV8zNjAoTWF0aC5hdGFuMigtdGhpcy5zcHJpdGUuYm9keS52ZWxvY2l0eS50ZW1wX3ksIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94KSk7IC8vc3RvcmluZyB0aGUgYW5nbGUgYXMgaWYgaXQgaXMgaW4gdGhlIDFzdCBxdWFkcmFudFxuICAgICAgICAgICAgICAgIGNvbnRhY3RfcG9pbnRfZGlyZWN0aW9ucy5mb3JFYWNoKGRpcmVjdGlvbiA9PiB7IC8vY2hlY2sgaWYgdGhlIGRlc2lyZWQgZGlyZWN0aW9uIGlzIGdvaW5nIHRvd2FyZHMgYXQgbGVhc3Qgb25lIGNvbnRhY3QgZGlyZWN0aW9uIHdpdGggYSBlcnJvciBtYXJnaW4gb2YgMzAgZGVncmVlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID49IGRlc2lyZWRfZGlyZWN0aW9uIC0gbnVtYmVycy5kZWdyZWUxNSAmJiBkaXJlY3Rpb24gPD0gZGVzaXJlZF9kaXJlY3Rpb24gKyBudW1iZXJzLmRlZ3JlZTE1KSB7IC8vaWYgdHJ1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgaGVybyBpcyBnb2luZyB0aGUgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgY29sbGlzaW9uIG9iZWpjdCwgdGhlbiBpdCBtdXN0IHN0b3BcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF94ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlLmJvZHkudmVsb2NpdHkudGVtcF95ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9hY3Rpb24gIT09IGJhc2VfYWN0aW9ucy5DTElNQikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF9ieV9jb2xsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFscy5sZW5ndGggPT09IDEpIHsgLy9ldmVyeXRoaW5nIGluc2lkZSB0aGlzIGlmIGlzIHRvIGRlYWwgd2l0aCBkaXJlY3Rpb24gY2hhbmdpbmcgd2hlbiBjb2xsaWRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy9maW5kcyB3aGljaCAzMCBkZWdyZWUgc2VjdG9yIHRoZSBub3JtYWwgYW5nbGUgbGllcyB3aXRoaW4sIGFuZCBjb252ZXJ0cyB0byBhIGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YWxsX2RpcmVjdGlvbiA9IHJvdGF0aW9uX25vcm1hbFsocmFuZ2VfMzYwKE1hdGguYXRhbjIobm9ybWFsc1swXVsxXSwgLW5vcm1hbHNbMF1bMF0pICsgbnVtYmVycy5kZWdyZWUxNSkgLyBudW1iZXJzLmRlZ3JlZTMwKSB8IDBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZV9kaXJlY3Rpb24gPSAocm90YXRpb25fa2V5W3RoaXMuYXJyb3dfaW5wdXRzXSAtIHdhbGxfZGlyZWN0aW9uKSAmIDc7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYgcGxheWVyJ3MgZGlyZWN0aW9uIGlzIHdpdGhpbiAxIG9mIHdhbGxfZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZV9kaXJlY3Rpb24gPT09IDEgfHwgcmVsYXRpdmVfZGlyZWN0aW9uID09PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldF9kaXJlY3Rpb24oKHdhbGxfZGlyZWN0aW9uICsgKHJlbGF0aXZlX2RpcmVjdGlvbiA8PCAxKSkgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfZGlyZWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlX2RpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wX2J5X2NvbGxpZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wX2J5X2NvbGxpZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5mb3JjZV9kaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFwcGx5X3NwZWVkKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKG1hcCkge1xuICAgICAgICB0aGlzLnVwZGF0ZV9hcnJvd19pbnB1dHMoKTsgLy9jaGVjayB3aGljaCBhcnJvdyBrZXlzIGFyZSBiZWluZyBwcmVzc2VkXG4gICAgICAgIHRoaXMuc2V0X3NwZWVkX2ZhY3RvcnModHJ1ZSk7IC8vc2V0cyB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtb3ZlbWVudFxuICAgICAgICB0aGlzLnNldF9jdXJyZW50X2FjdGlvbigpOyAvL2Nob29zZXMgd2hpY2ggc3ByaXRlIHRoZSBoZXJvIHNoYWxsIGFzc3VtZVxuICAgICAgICB0aGlzLmNhbGN1bGF0ZV9zcGVlZCgpOyAvL2NhbGN1bGF0ZXMgdGhlIGZpbmFsIHNwZWVkXG4gICAgICAgIHRoaXMuY29sbGlzaW9uX2RlYWxlcihtYXApOyAvL2NoZWNrIGlmIHRoZSBoZXJvIGlzIGNvbGxpZGluZyBhbmQgaXRzIGNvbnNlcXVlbmNlc1xuICAgICAgICB0aGlzLnNldF9hY3Rpb24odHJ1ZSk7IC8vc2V0cyB0aGUgaGVybyBzcHJpdGVcbiAgICAgICAgdGhpcy51cGRhdGVfc2hhZG93KCk7IC8vdXBkYXRlcyB0aGUgaGVybydzIHNoYWRvdyBwb3NpdGlvblxuICAgIH1cblxuICAgIGNvbmZpZ19ib2R5KGNvbGxpc2lvbl9vYmopIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuc3ByaXRlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVzZXRfYW5jaG9yKCk7IC8vSW1wb3J0YW50IHRvIGJlIGFmdGVyIHRoZSBwcmV2aW91cyBjb21tYW5kXG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcbiAgICAgICAgdGhpcy5ib2R5X3JhZGl1cyA9IG51bWJlcnMuSEVST19CT0RZX1JBRElVUztcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5zZXRDaXJjbGUodGhpcy5ib2R5X3JhZGl1cywgMCwgMCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5oZXJvX2NvbGxpc2lvbl9ncm91cCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkubWFzcyA9IDEuMDtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5kYW1waW5nID0gMDtcbiAgICAgICAgdGhpcy5zcHJpdGUuYm9keS5hbmd1bGFyRGFtcGluZyA9IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuaW5lcnRpYSA9IDA7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuc3ByaXRlLmJvZHkuZml4ZWRSb3RhdGlvbiA9IHRydWU7XG4gICAgfVxufSIsImltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tIFwiLi4vU3ByaXRlQmFzZVwiO1xuaW1wb3J0IHtiYXNlX2FjdGlvbnMsIGRpcmVjdGlvbnN9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jb25zdCBGT09UU1RFUFNfVFRMID0gUGhhc2VyLlRpbWVyLlNFQ09ORCA8PCAxO1xuY29uc3QgV0FMS0lOR19USU1FX0lOVEVSVkFMID0gUGhhc2VyLlRpbWVyLlFVQVJURVI7XG5jb25zdCBSVU5OSU5HX1RJTUVfSU5URVJWQUwgPSBQaGFzZXIuVGltZXIuUVVBUlRFUjtcblxuY29uc3QgSU5JVElBTF9BQ1RJT04gPSBiYXNlX2FjdGlvbnMuSURMRTtcbmNvbnN0IElOSVRJQUxfRElSRUNUSU9OID0gZGlyZWN0aW9ucy5kb3duO1xuXG5jb25zdCBGT09UU1RFUFNfS0VZX05BTUUgPSBcImZvb3RwcmludHNcIjtcbmNvbnN0IEZPT1RTVEVQU19BTkNIT1IgPSAwLjU7XG5jb25zdCBNQVhfREVBRF9TSVpFID0gMjA7XG5cbmNvbnN0IGZvb3RfZm9yd2FyZF90eXBlcyA9IHtcbiAgICBOT05FOiBcIm5vbmVcIixcbiAgICBSSUdIVDogXCJyaWdodFwiLFxuICAgIExFRlQ6IFwibGVmdFwiXG59O1xuXG4vKkdlbmVyYXRlcyBhbmQgbWFuYWdlcyBmb290cHJpbnRzXG5DYW4gYmUgYXBwbGllZCB0byBhbnkgbW92YWJsZSB1bml0XG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlKi9cbmV4cG9ydCBjbGFzcyBGb290c3RlcHN7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHhfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIHlfcG9zOiBudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfYWN0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIGN1cnJlbnRfZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIGFuY2hvcl94OiBudW1iZXI7XG4gICAgcHVibGljIGFuY2hvcl95OiBudW1iZXI7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGRlYWRfc3RlcHM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgZGVhZF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBmb290X2ZvcndhcmQ6IHN0cmluZztcbiAgICBwdWJsaWMgY2FuX21ha2VfZm9vdHByaW50OiBib29sZWFuO1xuICAgIHB1YmxpYyBmb290c3RlcHNfdGltZV9pbnRlcnZhbDogbnVtYmVyO1xuICAgIHB1YmxpYyBuZXdfc3RlcF90aW1lcjogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBleHBpcmVfdGltZXI6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlOiBTcHJpdGVCYXNlO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSl7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMueF9wb3MgPSAwO1xuICAgICAgICB0aGlzLnlfcG9zID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50X2FjdGlvbiA9IElOSVRJQUxfQUNUSU9OO1xuICAgICAgICB0aGlzLmN1cnJlbnRfZGlyZWN0aW9uID0gSU5JVElBTF9ESVJFQ1RJT047XG4gICAgICAgIHRoaXMuYW5jaG9yX3ggPSBGT09UU1RFUFNfQU5DSE9SO1xuICAgICAgICB0aGlzLmFuY2hvcl95ID0gRk9PVFNURVBTX0FOQ0hPUjtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5zZW5kX3RvX2JhY2sgPSB0cnVlO1xuICAgICAgICB0aGlzLmdyb3VwLmJhc2VfY29sbGlzaW9uX2xheWVyID0gMDtcblxuICAgICAgICB0aGlzLmRlYWRfc3RlcHMgPSBuZXcgQXJyYXkoTUFYX0RFQURfU0laRSk7XG4gICAgICAgIHRoaXMuZGVhZF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZm9vdF9mb3J3YXJkID0gZm9vdF9mb3J3YXJkX3R5cGVzLk5PTkU7XG4gICAgICAgIHRoaXMuY2FuX21ha2VfZm9vdHByaW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mb290c3RlcHNfdGltZV9pbnRlcnZhbCA9IFdBTEtJTkdfVElNRV9JTlRFUlZBTDtcblxuICAgICAgICB0aGlzLm5ld19zdGVwX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5leHBpcmVfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlID0gdGhpcy5kYXRhLmluZm8ubWlzY19zcHJpdGVfYmFzZV9saXN0W0ZPT1RTVEVQU19LRVlfTkFNRV07XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBmb290cHJpbnQgaW50ZXJ2YWwgdGltZXIqL1xuICAgIHNldF9uZXdfc3RlcF90aW1lcigpe1xuICAgICAgICB0aGlzLmNhbl9tYWtlX2Zvb3RwcmludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5ld19zdGVwX3RpbWVyLmFkZCh0aGlzLmZvb3RzdGVwc190aW1lX2ludGVydmFsLCgpID0+IHt0aGlzLmNhbl9tYWtlX2Zvb3RwcmludCA9IHRydWU7fSlcbiAgICAgICAgdGhpcy5uZXdfc3RlcF90aW1lci5zdGFydCgpO1xuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgZm9vdHByaW50IGV4cGlyYXRpb24gdGltZXIqL1xuICAgIHNldF9leHBpcmVfdGltZXIoc3ByaXRlLCBhbmltYXRpb24pe1xuICAgICAgICB0aGlzLmV4cGlyZV90aW1lci5hZGQoRk9PVFNURVBTX1RUTCwoKT0+e1xuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShhbmltYXRpb24pO1xuICAgICAgICB9LHRoaXMpO1xuICAgICAgICB0aGlzLmV4cGlyZV90aW1lci5zdGFydCgpO1xuICAgIH1cblxuICAgIC8qRWl0aGVyIGtpbGxzIG9yIGRlc3Ryb3lzIGEgZ2l2ZW4gc3RlcFxuICAgIEtpbGxpbmcgbGVhdmVzIHRoZSBzcHJpdGUgaW4gbWVtb3J5IHRvIGJlIHJlY3ljbGVkXG5cbiAgICBJbnB1dDogZXhwaXJlZCBbUGhhc2VyOlNwcml0ZV06IFRoZSBzdGVwIHRvIGJlIGtpbGxlZC9kZXN0cm95ZWQqL1xuICAgIGtpbGxfc3RlcChleHBpcmVkKXtcbiAgICAgICAgaWYodGhpcy5kZWFkX2luZGV4ID09PSBNQVhfREVBRF9TSVpFKXtcbiAgICAgICAgICAgIGV4cGlyZWQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBleHBpcmVkLmtpbGwoKTtcbiAgICAgICAgICAgIHRoaXMuZGVhZF9zdGVwc1t0aGlzLmRlYWRfaW5kZXgrK10gPSBleHBpcmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypSb3RhdGVzIHRoZSBzdGVwIGFjY29yZGluZyB0aGUgcGFyZW50J3MgZGlyZWN0aW9uXG4gICAgQWxzbyBmbGlwcyB0aGUgc3ByaXRlIGhvcml6b250YWxseSBpZiBuZWNlc3NhcnlcbiAgICBcbiAgICBJbnB1dDogc3ByaXRlIFtQaGFzZXI6U3ByaXRlXSAtIFRoZSBzcHJpdGUgdG8gYmUgYWZmZWN0ZWQqL1xuICAgIHBvc2l0aW9uX2Zvb3RzdGVwcyhzcHJpdGUpe1xuICAgICAgICBzcHJpdGUuc2NhbGUueCA9IHRoaXMuZm9vdF9mb3J3YXJkID09PSBmb290X2ZvcndhcmRfdHlwZXMuUklHSFQgPyAtMSA6IDE7XG4gICAgICAgIHNwcml0ZS5yb3RhdGlvbiA9ICh0aGlzLmN1cnJlbnRfZGlyZWN0aW9uICsgMikqTWF0aC5QSS80O1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgYSBuZXcgc3RlcCBvbiBzY3JlZW5cbiAgICBXaWxsIHJlY3ljbGUgZGVhZCBzcHJpdGVzIGlmIGF2YWlsYWJsZVxuXG4gICAgSW5wdXQ6IGRpcmVjdGlvbiBbbnVtYmVyXSA9IFRoZSBwYXJlbnQncyBjdXJyZW50IGRpcmVjdGlvblxuICAgICAgICAgICBhY3Rpb24gW3N0cmluZ10gPSBUaGUgcGFyZW50J3MgY3VycmVudCBhY3Rpb24qL1xuICAgIGNyZWF0ZV9zdGVwKGRpcmVjdGlvbixhY3Rpb24pe1xuICAgICAgICBpZiAodGhpcy5kYXRhLm5wY19ncm91cC5nZXRJbmRleCh0aGlzLmdyb3VwKSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYWRkKHRoaXMuZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuY3VycmVudF9hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMudXBkYXRlX2Zvb3QoKTtcbiAgICAgICAgY29uc3QgZm9vdHN0ZXBzX3R5cGUgPSB0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuSURMRSA/IFwiZG91YmxlXCIgOiBcInNpbmdsZVwiO1xuICAgICAgICBjb25zdCBhbmltYXRpb25fbmFtZSA9IHRoaXMuZm9vdHN0ZXBzX3Nwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShGT09UU1RFUFNfS0VZX05BTUUsIGZvb3RzdGVwc190eXBlKTtcblxuICAgICAgICBsZXQgZm9vdHN0ZXBzX3Nwcml0ZTtcbiAgICAgICAgaWYodGhpcy5kZWFkX2luZGV4ID09PSAwKXtcbiAgICAgICAgICAgIGNvbnN0IHNwcml0ZV9rZXkgPSB0aGlzLmZvb3RzdGVwc19zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoRk9PVFNURVBTX0tFWV9OQU1FKTtcbiAgICAgICAgICAgIGZvb3RzdGVwc19zcHJpdGUgPSB0aGlzLmdyb3VwLmNyZWF0ZSgwLCAwLCBzcHJpdGVfa2V5KTtcbiAgICAgICAgICAgIGZvb3RzdGVwc19zcHJpdGUuYW5jaG9yLnNldFRvKHRoaXMuYW5jaG9yX3gsIHRoaXMuYW5jaG9yX3kpO1xuICAgICAgICAgICAgdGhpcy5mb290c3RlcHNfc3ByaXRlX2Jhc2Uuc2V0QW5pbWF0aW9uKGZvb3RzdGVwc19zcHJpdGUsIEZPT1RTVEVQU19LRVlfTkFNRSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGZvb3RzdGVwc19zcHJpdGUgPSB0aGlzLmRlYWRfc3RlcHNbLS10aGlzLmRlYWRfaW5kZXhdO1xuICAgICAgICAgICAgZm9vdHN0ZXBzX3Nwcml0ZS5yZXNldCgwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25fb2JqID0gZm9vdHN0ZXBzX3Nwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihhbmltYXRpb25fbmFtZSk7XG4gICAgICAgIGFuaW1hdGlvbl9vYmouc3RvcCh0cnVlKTtcbiAgICAgICAgdGhpcy5ncm91cC5iYXNlX2NvbGxpc2lvbl9sYXllciA9IHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyO1xuICAgICAgICBmb290c3RlcHNfc3ByaXRlLnggPSB0aGlzLmRhdGEuaGVyby5zaGFkb3cueDtcbiAgICAgICAgZm9vdHN0ZXBzX3Nwcml0ZS55ID0gdGhpcy5kYXRhLmhlcm8uc2hhZG93Lnk7XG4gICAgICAgIHRoaXMucG9zaXRpb25fZm9vdHN0ZXBzKGZvb3RzdGVwc19zcHJpdGUpO1xuXG4gICAgICAgIGFuaW1hdGlvbl9vYmoub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMua2lsbF9zdGVwKGZvb3RzdGVwc19zcHJpdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRfZXhwaXJlX3RpbWVyKGZvb3RzdGVwc19zcHJpdGUsIGFuaW1hdGlvbl9uYW1lKTtcblxuICAgICAgICB0aGlzLnNldF9uZXdfc3RlcF90aW1lcigpO1xuICAgIH1cblxuICAgIC8qVXBkYXRlcyB0aGUgXCJmb290X2ZvcndhcmRcIiBwcm9wZXJ0eSovXG4gICAgdXBkYXRlX2Zvb3QoKXtcbiAgICAgICAgdGhpcy5mb290c3RlcHNfdGltZV9pbnRlcnZhbCA9IHRoaXMuY3VycmVudF9hY3Rpb24gPT09IGJhc2VfYWN0aW9ucy5XQUxLID8gV0FMS0lOR19USU1FX0lOVEVSVkFMIDogUlVOTklOR19USU1FX0lOVEVSVkFMO1xuICAgICAgICBpZih0aGlzLmN1cnJlbnRfYWN0aW9uID09PSBiYXNlX2FjdGlvbnMuSURMRSl7XG4gICAgICAgICAgICB0aGlzLmZvb3RfZm9yd2FyZCA9IGZvb3RfZm9yd2FyZF90eXBlcy5OT05FO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLmZvb3RfZm9yd2FyZCA9IHRoaXMuZm9vdF9mb3J3YXJkID09PSBmb290X2ZvcndhcmRfdHlwZXMuTEVGVCA/IGZvb3RfZm9yd2FyZF90eXBlcy5SSUdIVCA6IGZvb3RfZm9yd2FyZF90eXBlcy5MRUZUO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypLaWxscyBhbGwgc3ByaXRlcyBhbmQgcmVzZXRzIHRoZSB0aW1lcnNcblxuICAgIElucHV0OiBmb3JjZV9kZXN0cm95IFtib29sZWFuXSAtIElmIHRydWUsIGRlc3Ryb3lzIHN0ZXBzIGluc3RlYWQqL1xuICAgIGNsZWFuX2FsbChmb3JjZV9kZXN0cm95ID0gZmFsc2Upe1xuICAgICAgICB0aGlzLm5ld19zdGVwX3RpbWVyLnN0b3AodHJ1ZSk7XG4gICAgICAgIHRoaXMuZXhwaXJlX3RpbWVyLnN0b3AodHJ1ZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuY2hpbGRyZW4uZm9yRWFjaCgoc3ByaXRlOiBQaGFzZXIuU3ByaXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZm9yY2VfZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIHNwcml0ZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnN0b3AodHJ1ZSk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0ub25Db21wbGV0ZS5yZW1vdmVBbGwoKTtcbiAgICAgICAgICAgICAgICBzcHJpdGUua2lsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWFkX3N0ZXBzID0gdGhpcy5ncm91cC5jaGlsZHJlbi5zbGljZSgpIGFzIFBoYXNlci5TcHJpdGVbXTtcbiAgICAgICAgdGhpcy5kZWFkX2luZGV4ID0gdGhpcy5ncm91cC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfVxuXG4gICAgLypEZXN0cm95cyB0aGlzIG9iamVjdCBhbmQgaXRzIGNoaWxkcmVuKi9cbiAgICBkZXN0cm95KCl7XG4gICAgICAgIHRoaXMuY2xlYW5fYWxsKHRydWUpO1xuICAgICAgICB0aGlzLm5ld19zdGVwX3RpbWVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5leHBpcmVfdGltZXIuZGVzdHJveSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDb2xsaXNpb24gfSBmcm9tICcuLi9Db2xsaXNpb24nO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IEhlcm8gfSBmcm9tICcuLi9IZXJvJztcbmltcG9ydCB7IGJhc2VfYWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGV2ZW50X3R5cGVzLCBUaWxlRXZlbnQgfSBmcm9tICcuL1RpbGVFdmVudCc7XG5cbmNvbnN0IEVWRU5UX0lOSVRfREVMQVkgPSAzNTA7XG5cbmNsYXNzIEV2ZW50UXVldWUge1xuICAgIHB1YmxpYyBjbGltYl9ldmVudDogYm9vbGVhbjtcbiAgICBwdWJsaWMgcXVldWU6IHtcbiAgICAgICAgZXZlbnQ6IFRpbGVFdmVudCxcbiAgICAgICAgZmlyZV9mdW5jdGlvbjogRnVuY3Rpb25cbiAgICB9W107XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2xpbWJfZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIH1cblxuICAgIGFkZChldmVudCwgdGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbiwgZmlyZV9mdW5jdGlvbiwgZmlyZSA9IGZhbHNlKSB7XG4gICAgICAgIHN3aXRjaChldmVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGV2ZW50X3R5cGVzLkNMSU1COlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5hY3RpdmUgJiYgZXZlbnQuaXNfc2V0ICYmIGV2ZW50LmFjdGl2YXRpb25fZGlyZWN0aW9ucy5pbmNsdWRlcyh0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaW1iX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmUpIHtcbiAgICAgICAgICAgIGZpcmVfZnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIGZpcmVfZnVuY3Rpb246IGZpcmVfZnVuY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvY2Vzc19xdWV1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpbWJfZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihpdGVtID0+IGl0ZW0uZXZlbnQudHlwZSAhPT0gZXZlbnRfdHlwZXMuSlVNUCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5maXJlX2Z1bmN0aW9uKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbGVFdmVudE1hbmFnZXIge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBoZXJvOiBIZXJvO1xuICAgIHB1YmxpYyBjb2xsaXNpb246IENvbGxpc2lvbjtcbiAgICBwdWJsaWMgZXZlbnRfdGltZXJzOiB7W2V2ZW50X2lkOiBudW1iZXJdOiBQaGFzZXIuVGltZXJFdmVudH07XG4gICAgcHVibGljIG9uX2V2ZW50OiBib29sZWFuO1xuICAgIHB1YmxpYyB3YWxraW5nX29uX3BpbGxhcnNfdGlsZXM6IFNldDxzdHJpbmc+O1xuICAgIHB1YmxpYyB0cmlnZ2VyZWRfZXZlbnRzOiB7W2V2ZW50X2lkOiBudW1iZXJdOiBUaWxlRXZlbnR9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgaGVybywgY29sbGlzaW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuaGVybyA9IGhlcm87XG4gICAgICAgIHRoaXMuY29sbGlzaW9uID0gY29sbGlzaW9uO1xuICAgICAgICB0aGlzLmV2ZW50X3RpbWVycyA9IHt9O1xuICAgICAgICB0aGlzLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2Fsa2luZ19vbl9waWxsYXJzX3RpbGVzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLnRyaWdnZXJlZF9ldmVudHMgPSB7fTtcbiAgICB9XG5cbiAgICBzZXRfdHJpZ2dlcmVkX2V2ZW50KGV2ZW50KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcmVkX2V2ZW50c1tldmVudC5pZF0gPSBldmVudDtcbiAgICB9XG5cbiAgICB1bnNldF90cmlnZ2VyZWRfZXZlbnQoZXZlbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudHJpZ2dlcmVkX2V2ZW50c1tldmVudC5pZF07XG4gICAgfVxuXG4gICAgZXZlbnRfdHJpZ2dlcmVkKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudC5pZCBpbiB0aGlzLnRyaWdnZXJlZF9ldmVudHM7XG4gICAgfVxuXG4gICAgZmlyZV90cmlnZ2VyZWRfZXZlbnRzKCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnRyaWdnZXJlZF9ldmVudHMpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGhpc19ldmVudCA9IHRoaXMudHJpZ2dlcmVkX2V2ZW50c1tpZF07XG4gICAgICAgICAgICBpZiAodGhpc19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5TUEVFRCkge1xuICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQudW5zZXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc19ldmVudC5maXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZpcmVfZXZlbnQoY3VycmVudF9ldmVudCwgdGhpc19hY3RpdmF0aW9uX2RpcmVjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uICE9PSB0aGlzX2FjdGl2YXRpb25fZGlyZWN0aW9uKSByZXR1cm47XG4gICAgICAgIGlmIChjdXJyZW50X2V2ZW50LnR5cGUgPT09IGV2ZW50X3R5cGVzLkNMSU1CICYmICF0aGlzLmhlcm8uaWRsZV9jbGltYmluZykge1xuICAgICAgICAgICAgY3VycmVudF9ldmVudC5maXJlKHRoaXNfYWN0aXZhdGlvbl9kaXJlY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKFtldmVudF90eXBlcy5URUxFUE9SVCwgZXZlbnRfdHlwZXMuSlVNUCwgZXZlbnRfdHlwZXMuU0xJREVSXS5pbmNsdWRlcyhjdXJyZW50X2V2ZW50LnR5cGUpKSB7XG4gICAgICAgICAgICBjdXJyZW50X2V2ZW50LmZpcmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrX3RpbGVfZXZlbnRzKGV2ZW50X2tleSwgbWFwKSB7XG4gICAgICAgIGxldCBldmVudF9xdWV1ZSA9IG5ldyBFdmVudFF1ZXVlKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwLmV2ZW50c1tldmVudF9rZXldLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2V2ZW50ID0gbWFwLmV2ZW50c1tldmVudF9rZXldW2ldO1xuICAgICAgICAgICAgaWYgKCF0aGlzX2V2ZW50LmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycy5pbmNsdWRlcyhtYXAuY29sbGlzaW9uX2xheWVyKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAodGhpc19ldmVudC50eXBlID09PSBldmVudF90eXBlcy5KVU1QKSB7XG4gICAgICAgICAgICAgICAgdGhpc19ldmVudC5qdW1wX25lYXJfY29sbGlzaW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXNfZXZlbnQuaXNfYWN0aXZlKHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHRoaXNfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuU1BFRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oZXJvLmV4dHJhX3NwZWVkICE9PSB0aGlzX2V2ZW50LnNwZWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50X3F1ZXVlLmFkZChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LmZpcmUuYmluZCh0aGlzX2V2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXNfZXZlbnQudHlwZSA9PT0gZXZlbnRfdHlwZXMuVEVMRVBPUlQgJiYgIXRoaXNfZXZlbnQuYWR2YW5jZV9lZmZlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfcXVldWUuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9ldmVudC5iaW5kKHRoaXMsIHRoaXNfZXZlbnQsIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW2V2ZW50X3R5cGVzLlNURVAsIGV2ZW50X3R5cGVzLkNPTExJU0lPTl0uaW5jbHVkZXModGhpc19ldmVudC50eXBlKSAmJiAhdGhpcy5ldmVudF90cmlnZ2VyZWQodGhpc19ldmVudCkpIHtcbiAgICAgICAgICAgICAgICBldmVudF9xdWV1ZS5hZGQoXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGhpc19ldmVudC5zZXQuYmluZCh0aGlzX2V2ZW50KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0X2RpcmVjdGlvbiA9IHRoaXNfZXZlbnQuYWN0aXZhdGlvbl9kaXJlY3Rpb25zLmluY2x1ZGVzKHRoaXMuaGVyby5jdXJyZW50X2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0X2RpcmVjdGlvbiAmJiBbYmFzZV9hY3Rpb25zLldBTEssIGJhc2VfYWN0aW9ucy5EQVNILCBiYXNlX2FjdGlvbnMuQ0xJTUJdLmluY2x1ZGVzKHRoaXMuaGVyby5jdXJyZW50X2FjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRfdGltZXJzW3RoaXNfZXZlbnQuaWRdICYmICF0aGlzLmV2ZW50X3RpbWVyc1t0aGlzX2V2ZW50LmlkXS50aW1lci5leHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBldmVudF9xdWV1ZS5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2V2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRfdGltZXJzW3RoaXNfZXZlbnQuaWRdID0gdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChFVkVOVF9JTklUX0RFTEFZLCB0aGlzLmZpcmVfZXZlbnQuYmluZCh0aGlzLCB0aGlzX2V2ZW50LCB0aGlzLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRfcXVldWUucHJvY2Vzc19xdWV1ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGJhc2VfYWN0aW9ucywgZGlyZWN0aW9ucywgaXNfY2xvc2UsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgRGlhbG9nTWFuYWdlciB9IGZyb20gXCIuLi91dGlscy9EaWFsb2dNYW5hZ2VyXCI7XG5pbXBvcnQgeyBucGNfdHlwZXMgfSBmcm9tIFwiLi4vTlBDXCI7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5cbmV4cG9ydCBjb25zdCBpbnRlcmFjdGlvbl9wYXR0ZXJucyA9IHtcbiAgICBUSUtfVEFLX1RPRTogXCJ0aWtfdGFrX3RvZVwiLFxuICAgIENST1NTOiBcImNyb3NzXCJcbn07XG5cbmV4cG9ydCBjbGFzcyBHYW1lRXZlbnRNYW5hZ2VyIHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgb25fZXZlbnQ6IGJvb2xlYW47XG4gICAgcHVibGljIGNvbnRyb2xfZW5hYmxlOiBib29sZWFuO1xuICAgIHB1YmxpYyBmaXJlX25leHRfc3RlcDogRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZmlyZV9uZXh0X3N0ZXAgPSAoKSA9PiB7fTtcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbHMoKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbHMoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpIHx8IHRoaXMuZGF0YS5pbl9iYXR0bGUgfHwgIXRoaXMuY29udHJvbF9lbmFibGUpIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uX2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9uZXh0X3N0ZXAoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfZm9yX25wYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWFyY2hfZm9yX25wYygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubWFwLm5wY3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5wYyA9IHRoaXMuZGF0YS5tYXAubnBjc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGlzX2Nsb3NlX2NoZWNrID0gaXNfY2xvc2UoXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLngsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnksXG4gICAgICAgICAgICAgICAgbnBjLnNwcml0ZS54LFxuICAgICAgICAgICAgICAgIG5wYy5zcHJpdGUueSxcbiAgICAgICAgICAgICAgICBucGMudGFsa19yYW5nZV9mYWN0b3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoaXNfY2xvc2VfY2hlY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIoKVxuICAgICAgICAgICAgICAgIHRoaXMub25fZXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5mb3JjZV9zdG9wX21vdmVtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfZW5hYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfbnBjX2V2ZW50KG5wYyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfbnBjX2V2ZW50KG5wYykge1xuICAgICAgICBpZiAobnBjLm5wY190eXBlID09PSBucGNfdHlwZXMuTk9STUFMKSB7XG4gICAgICAgICAgICBpZiAobnBjLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmFnZV9ucGNfZGlhbG9nKG5wYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZV9ucGNfZXZlbnRzKG5wYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobnBjLm5wY190eXBlID09PSBucGNfdHlwZXMuU0hPUCkge1xuICAgICAgICAgICAgaWYoIXRoaXMuZGF0YS5zaG9wX29wZW4pe1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X25wY19hbmRfaGVyb19kaXJlY3Rpb25zKG5wYyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNob3BfbWVudS5vcGVuX21lbnUobnBjLnNob3Bfa2V5LCAoKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRfbnBjX2RpcmVjdGlvbihucGMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZm9yY2Vfc3RvcF9tb3ZlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9ucGNfYW5kX2hlcm9fZGlyZWN0aW9ucyhucGMpIHtcbiAgICAgICAgY29uc3QgbnBjX3ggPSBucGMuc3ByaXRlLng7XG4gICAgICAgIGNvbnN0IG5wY195ID0gbnBjLnNwcml0ZS55O1xuICAgICAgICBjb25zdCBpbnRlcmFjdGlvbl9wYXR0ZXJuID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbbnBjLmtleV9uYW1lXS5pbnRlcmFjdGlvbl9wYXR0ZXJuO1xuICAgICAgICBjb25zdCBpbnRlcmFjdGlvbl9kaXJlY3Rpb25zID0gR2FtZUV2ZW50TWFuYWdlci5nZXRfaW50ZXJhY3Rpb25fZGlyZWN0aW9ucyhcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNwcml0ZS54LCB0aGlzLmRhdGEuaGVyby5zcHJpdGUueSwgbnBjX3gsIG5wY195LCBpbnRlcmFjdGlvbl9wYXR0ZXJuLCBucGMuYm9keV9yYWRpdXMpO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZGlyZWN0aW9uKGludGVyYWN0aW9uX2RpcmVjdGlvbnMuaGVyb19kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5wbGF5KGJhc2VfYWN0aW9ucy5JRExFLCByZXZlcnNlX2RpcmVjdGlvbnNbaW50ZXJhY3Rpb25fZGlyZWN0aW9ucy5oZXJvX2RpcmVjdGlvbl0pO1xuICAgICAgICBucGMucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2ludGVyYWN0aW9uX2RpcmVjdGlvbnMudGFyZ2V0X2RpcmVjdGlvbl0pO1xuICAgIH1cblxuICAgIHJlc2V0X25wY19kaXJlY3Rpb24obnBjKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxfYWN0aW9uID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbbnBjLmtleV9uYW1lXS5pbml0aWFsX2FjdGlvbjtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9kaXJlY3Rpb24gPSB0aGlzLmRhdGEuZGJzLm5wY19kYltucGMua2V5X25hbWVdLmFjdGlvbnNbaW5pdGlhbF9hY3Rpb25dLmluaXRpYWxfZGlyZWN0aW9uO1xuICAgICAgICBucGMucGxheShpbml0aWFsX2FjdGlvbiwgaW5pdGlhbF9kaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIG1hbmFnZV9ucGNfZGlhbG9nKG5wYykge1xuICAgICAgICBjb25zdCBkaWFsb2dfbWFuYWdlciA9IG5ldyBEaWFsb2dNYW5hZ2VyKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgZGlhbG9nX21hbmFnZXIuc2V0X2RpYWxvZyhucGMubWVzc2FnZSwgbnBjLmF2YXRhciwgdGhpcy5kYXRhLmhlcm8uY3VycmVudF9kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLnNldF9ucGNfYW5kX2hlcm9fZGlyZWN0aW9ucyhucGMpO1xuICAgICAgICB0aGlzLmZpcmVfbmV4dF9zdGVwID0gZGlhbG9nX21hbmFnZXIubmV4dC5iaW5kKGRpYWxvZ19tYW5hZ2VyLCBmaW5pc2hlZCA9PiB7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmZvcmNlX3N0b3BfbW92ZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0X25wY19kaXJlY3Rpb24obnBjKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVfbnBjX2V2ZW50cyhucGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb250cm9sX2VuYWJsZSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpcmVfbmV4dF9zdGVwKCk7XG4gICAgfVxuXG4gICAgZmlyZV9ucGNfZXZlbnRzKG5wYykge1xuICAgICAgICBucGMuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgZXZlbnQuZmlyZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0X2ludGVyYWN0aW9uX2RpcmVjdGlvbnMoaGVyb194LCBoZXJvX3ksIHRhcmdldF94LCB0YXJnZXRfeSwgaW50ZXJhY3Rpb25fcGF0dGVybiwgdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XG4gICAgICAgIGxldCB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICBpZiAoaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuQ1JPU1MpIHtcbiAgICAgICAgICAgIGxldCBwb3NpdGl2ZV9saW1pdCA9IGhlcm9feCArICgtdGFyZ2V0X3kgLSB0YXJnZXRfeCk7XG4gICAgICAgICAgICBsZXQgbmVnYXRpdmVfbGltaXQgPSAtaGVyb194ICsgKC10YXJnZXRfeSArIHRhcmdldF94KTtcbiAgICAgICAgICAgIGlmICgtaGVyb195ID49IHBvc2l0aXZlX2xpbWl0ICYmIC1oZXJvX3kgPj0gbmVnYXRpdmVfbGltaXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLWhlcm9feSA8PSBwb3NpdGl2ZV9saW1pdCAmJiAtaGVyb195ID49IG5lZ2F0aXZlX2xpbWl0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMucmlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC1oZXJvX3kgPD0gcG9zaXRpdmVfbGltaXQgJiYgLWhlcm9feSA8PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd247XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC1oZXJvX3kgPj0gcG9zaXRpdmVfbGltaXQgJiYgLWhlcm9feSA8PSBuZWdhdGl2ZV9saW1pdCkge1xuICAgICAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVyb19kaXJlY3Rpb247XG4gICAgICAgIGlmIChoZXJvX3ggPD0gdGFyZ2V0X3ggLSB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195ID49IHRhcmdldF95ICsgdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMudXBfcmlnaHQ7XG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLmRvd25fbGVmdCA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194IDw9IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA+PSB0YXJnZXRfeSAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPD0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5yaWdodDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMubGVmdCA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194IDw9IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA8PSB0YXJnZXRfeSAtIHRhcmdldF9ib2R5X3JhZGl1cykge1xuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd25fcmlnaHQ7XG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnVwX2xlZnQgOiB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKGhlcm9feCA+PSB0YXJnZXRfeCAtIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3ggPD0gdGFyZ2V0X3ggKyB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195IDw9IHRhcmdldF95IC0gdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMuZG93bjtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMudXAgOiB0YXJnZXRfZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKGhlcm9feCA+PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPD0gdGFyZ2V0X3kgLSB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy5kb3duX2xlZnQ7XG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnVwX3JpZ2h0IDogdGFyZ2V0X2RpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPj0gdGFyZ2V0X3ggKyB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195ID49IHRhcmdldF95IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feSA8PSB0YXJnZXRfeSArIHRhcmdldF9ib2R5X3JhZGl1cykge1xuICAgICAgICAgICAgaGVyb19kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XG4gICAgICAgICAgICB0YXJnZXRfZGlyZWN0aW9uID0gaW50ZXJhY3Rpb25fcGF0dGVybiA9PT0gaW50ZXJhY3Rpb25fcGF0dGVybnMuVElLX1RBS19UT0UgPyBkaXJlY3Rpb25zLnJpZ2h0IDogdGFyZ2V0X2RpcmVjdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvX3ggPj0gdGFyZ2V0X3ggKyB0YXJnZXRfYm9keV9yYWRpdXMgJiYgaGVyb195ID49IHRhcmdldF95ICsgdGFyZ2V0X2JvZHlfcmFkaXVzKSB7XG4gICAgICAgICAgICBoZXJvX2RpcmVjdGlvbiA9IGRpcmVjdGlvbnMudXBfbGVmdDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMuZG93bl9yaWdodCA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH0gZWxzZSBpZiAoaGVyb194ID49IHRhcmdldF94IC0gdGFyZ2V0X2JvZHlfcmFkaXVzICYmIGhlcm9feCA8PSB0YXJnZXRfeCArIHRhcmdldF9ib2R5X3JhZGl1cyAmJiBoZXJvX3kgPj0gdGFyZ2V0X3kgKyB0YXJnZXRfYm9keV9yYWRpdXMpIHtcbiAgICAgICAgICAgIGhlcm9fZGlyZWN0aW9uID0gZGlyZWN0aW9ucy51cDtcbiAgICAgICAgICAgIHRhcmdldF9kaXJlY3Rpb24gPSBpbnRlcmFjdGlvbl9wYXR0ZXJuID09PSBpbnRlcmFjdGlvbl9wYXR0ZXJucy5USUtfVEFLX1RPRSA/IGRpcmVjdGlvbnMuZG93biA6IHRhcmdldF9kaXJlY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge2hlcm9fZGlyZWN0aW9uOiBoZXJvX2RpcmVjdGlvbiwgdGFyZ2V0X2RpcmVjdGlvbjogdGFyZ2V0X2RpcmVjdGlvbn07XG4gICAgfVxufSIsImltcG9ydCB7IEJhdHRsZSB9IGZyb20gXCIuLi9iYXR0bGUvQmF0dGxlXCI7XG5pbXBvcnQgeyBHYW1lRXZlbnQsIGV2ZW50X3R5cGVzIH0gZnJvbSBcIi4vR2FtZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVFdmVudCBleHRlbmRzIEdhbWVFdmVudCB7XG4gICAgcHVibGljIGJhY2tncm91bmRfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGVuZW15X3BhcnR5X2tleTogc3RyaW5nO1xuICAgIHB1YmxpYyBiYXR0bGU6IEJhdHRsZTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGJhY2tncm91bmRfa2V5LCBlbmVteV9wYXJ0eV9rZXkpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuQkFUVExFKTtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2tleSA9IGJhY2tncm91bmRfa2V5O1xuICAgICAgICB0aGlzLmVuZW15X3BhcnR5X2tleSA9IGVuZW15X3BhcnR5X2tleTtcbiAgICB9XG5cbiAgICBmaXJlKCkge1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIodHJ1ZSk7XG4gICAgICAgIHRoaXMuYmF0dGxlID0gbmV3IEJhdHRsZSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5iYWNrZ3JvdW5kX2tleSwgdGhpcy5lbmVteV9wYXJ0eV9rZXkpO1xuICAgICAgICB0aGlzLmJhdHRsZS5zdGFydF9iYXR0bGUoKTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IGFiaWxpdHlfbXNnX3R5cGVzIH0gZnJvbSAnLi4vQWJpbGl0eSc7XG5pbXBvcnQgeyBlZmZlY3RfbmFtZXMsIGVmZmVjdF90eXBlcyB9IGZyb20gJy4uL0VmZmVjdCc7XG5pbXBvcnQgeyBlbGVtZW50X25hbWVzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgb25fcmVtb3ZlX3N0YXR1c19tc2cgfSBmcm9tICcuLi9QbGF5ZXInO1xuXG5jb25zdCBMT0dfWCA9IDM7XG5jb25zdCBMT0dfT1VUX1kgPSAxMjc7XG5jb25zdCBMT0dfMV9ZID0gMTM5O1xuY29uc3QgTE9HXzJfWSA9IDE1MTtcbmNvbnN0IEFOSU1fRFVSQVRJT04gPSA1MDtcblxuZXhwb3J0IGNsYXNzIEJhdHRsZUxvZyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgcHVibGljIHk6IG51bWJlcjtcbiAgICBwdWJsaWMgbG9nczogUGhhc2VyLkJpdG1hcFRleHRbXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy54ID0gZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy55ID0gZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy5sb2dzID0gW107XG4gICAgICAgIHRoaXMubG9ncy5wdXNoKHRoaXMuY3JlYXRlKHRoaXMueSArIExPR18xX1kpKTtcbiAgICAgICAgdGhpcy5sb2dzLnB1c2godGhpcy5jcmVhdGUodGhpcy55ICsgTE9HXzJfWSkpO1xuICAgIH1cblxuICAgIGNyZWF0ZSh5X3Bvcykge1xuICAgICAgICBjb25zdCBsb2dfdGV4dCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dCh0aGlzLnggKyBMT0dfWCwgeV9wb3MsICdncy1ibXAtZm9udCcsIFwiXCIsIG51bWJlcnMuRk9OVF9TSVpFKTtcbiAgICAgICAgbG9nX3RleHQudGludCA9IG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SO1xuICAgICAgICBsb2dfdGV4dC5zbW9vdGhlZCA9IGZhbHNlO1xuICAgICAgICBsb2dfdGV4dC5hdXRvUm91bmQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbG9nX3RleHRcbiAgICB9XG5cbiAgICBhZGQodGV4dCkge1xuICAgICAgICBsZXQgcmVzb2x2ZV9hbmltO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfYW5pbSA9IHJlc29sdmU7IH0pXG4gICAgICAgIGlmICh0aGlzLmxvZ3NbMF0udGV4dCA9PT0gXCJcIikge1xuICAgICAgICAgICAgdGhpcy5sb2dzWzBdLnNldFRleHQodGV4dCk7XG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dChcIlwiKTtcbiAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9nc1sxXS50ZXh0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ3NbMV0uc2V0VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvZ3NbMF0pLnRvKHtcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnkgKyBMT0dfT1VUX1lcbiAgICAgICAgICAgIH0sIEFOSU1fRFVSQVRJT04sIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmxvZ3NbMV0pLnRvKHtcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnkgKyBMT0dfMV9ZXG4gICAgICAgICAgICB9LCBBTklNX0RVUkFUSU9OLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nc1swXS55ID0gdGhpcy55ICsgTE9HXzJfWTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ3NbMF0uc2V0VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmVfYW5pbSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgYXN5bmMgYWRkX2FiaWxpdHkoY2FzdGVyLCBhYmlsaXR5LCBpdGVtX25hbWUsIGRqaW5uX25hbWUpIHtcbiAgICAgICAgc3dpdGNoIChhYmlsaXR5Lm1zZ190eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGFiaWxpdHlfbXNnX3R5cGVzLkFUVEFDSzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gYXR0YWNrcyFgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuQ0FTVDpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtjYXN0ZXIubmFtZX0gY2FzdHMgJHthYmlsaXR5Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5VTkxFQVNIOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSB1bmxlYXNoZXMgJHthYmlsaXR5Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5TVU1NT046XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IHN1bW1vbnMgJHthYmlsaXR5Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5VU0U6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IHVzZXMgJHthYmlsaXR5Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhYmlsaXR5X21zZ190eXBlcy5ERUZFTkQ6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGQoYCR7Y2FzdGVyLm5hbWV9IGlzIGRlZmVuZGluZyFgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuSVRFTV9VTkxFQVNIOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2Nhc3Rlci5uYW1lfSdzICR7aXRlbV9uYW1lfWApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGBsZXRzIG91dCBhIGhvd2whICR7YWJpbGl0eS5uYW1lfSFgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYWJpbGl0eV9tc2dfdHlwZXMuU0VUX0RKSU5OOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke2RqaW5uX25hbWV9IGlzIHNldCB0byAke2Nhc3Rlci5uYW1lfSFgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGFkZF9yZWNvdmVyX2VmZmVjdChlZmZlY3QpIHtcbiAgICAgICAgY29uc3QgcGxheWVyID0gZWZmZWN0LmNoYXI7XG4gICAgICAgIHN3aXRjaChlZmZlY3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX0hQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuTUFYX1BQOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuREVGRU5TRTpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkFHSUxJVFk6XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5MVUNLOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke3BsYXllci5uYW1lfSdzICR7ZWZmZWN0X25hbWVzW2VmZmVjdC50eXBlXX0gcmV0dXJucyB0byBub3JtYWwhYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5QT1dFUjpcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLlJFU0lTVDpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHtwbGF5ZXIubmFtZX0ncyAke2VsZW1lbnRfbmFtZXNbZWZmZWN0LmF0dHJpYnV0ZV19ICR7ZWZmZWN0X25hbWVzW2VmZmVjdC50eXBlXX0gcmV0dXJucyB0byBub3JtYWwhYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGVmZmVjdF90eXBlcy5URU1QT1JBUllfU1RBVFVTOlxuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuUEVSTUFORU5UX1NUQVRVUzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChvbl9yZW1vdmVfc3RhdHVzX21zZ1tlZmZlY3Quc3RhdHVzX2tleV9uYW1lXShwbGF5ZXIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGFkZF9kYW1hZ2UoZGFtYWdlLCB0YXJnZXQsIHBwX2RhbWFnZSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHN0YXRfc3RyID0gcHBfZGFtYWdlID8gXCJQUFwiIDogXCJIUFwiO1xuICAgICAgICBjb25zdCBjdXJyZW50X3Byb3BlcnR5ID0gcHBfZGFtYWdlID8gXCJjdXJyZW50X3BwXCIgOiBcImN1cnJlbnRfaHBcIjtcbiAgICAgICAgY29uc3QgbWF4X3Byb3BlcnR5ID0gcHBfZGFtYWdlID8gXCJtYXhfcHBcIiA6IFwibWF4X2hwXCI7XG4gICAgICAgIGlmIChkYW1hZ2UgPj0gMCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldFtjdXJyZW50X3Byb3BlcnR5XSAtIGRhbWFnZSA8IDApIHtcbiAgICAgICAgICAgICAgICBkYW1hZ2UgPSB0YXJnZXRbY3VycmVudF9wcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZChgJHt0YXJnZXQubmFtZX0gdGFrZXMgJHtkYW1hZ2UudG9TdHJpbmcoKX0gZGFtYWdlIWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRhcmdldFtjdXJyZW50X3Byb3BlcnR5XSA+PSB0YXJnZXRbbWF4X3Byb3BlcnR5XSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke3RhcmdldC5uYW1lfSdzICR7c3RhdF9zdHJ9IGlzIGZ1bGx5IHJlc3RvcmVkYCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkKGAke3RhcmdldC5uYW1lfSByZWNvdmVycyAke01hdGguYWJzKGRhbWFnZSkudG9TdHJpbmcoKX0gJHtzdGF0X3N0cn0hYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5sb2dzWzBdLnNldFRleHQoXCJcIik7XG4gICAgICAgIHRoaXMubG9nc1sxXS5zZXRUZXh0KFwiXCIpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubG9nc1swXS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubG9nc1sxXS5kZXN0cm95KCk7XG4gICAgfVxufSIsImltcG9ydCB7IENoYXJzU3RhdHVzV2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvQ2hhcnNTdGF0dXNXaW5kb3dcIjtcbmltcG9ydCB7IEhvcml6b250YWxNZW51IH0gZnJvbSBcIi4uL3N1cHBvcnRfbWVudXMvSG9yaXpvbnRhbE1lbnVcIjtcbmltcG9ydCB7IGNhcGl0YWxpemUsIG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7IERqaW5uLCBkamlubl9zdGF0dXMgfSBmcm9tIFwiLi4vRGppbm5cIjtcbmltcG9ydCB7IERlc2NyaXB0aW9uV2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0Rlc2NyaXB0aW9uV2luZG93XCJcbmltcG9ydCB7IFBzeW5lcmd5V2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL1BzeW5lcmd5V2luZG93XCJcbmltcG9ydCB7IERqaW5uV2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0RqaW5uV2luZG93XCI7XG5pbXBvcnQgeyBJdGVtV2luZG93IH0gZnJvbSBcIi4uL3dpbmRvd3MvYmF0dGxlL0l0ZW1XaW5kb3dcIjtcbmltcG9ydCB7IFN1bW1vbldpbmRvdyB9IGZyb20gXCIuLi93aW5kb3dzL2JhdHRsZS9TdW1tb25XaW5kb3dcIjtcbmltcG9ydCB7IE1BWF9DSEFSU19JTl9CQVRUTEUgfSBmcm9tIFwiLi4vYmF0dGxlL0JhdHRsZVwiO1xuaW1wb3J0IHsgcGVybWFuZW50X3N0YXR1cyB9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSBcIi4uL01haW5DaGFyXCI7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IEVuZW15IH0gZnJvbSBcIi4uL0VuZW15XCI7XG5cbmNvbnN0IFNUQVJUX1RJVExFX1dJTkRPV19XSURUSCA9IDc2O1xuY29uc3QgSU5ORVJfVElUTEVfV0lORE9XX1dJRFRIID0gNjA7XG5jb25zdCBGT1JXQVJEID0gMTtcbmNvbnN0IEJBQ0tXQVJEID0gLTE7XG5cbmV4cG9ydCB0eXBlIFBsYXllckFiaWxpdHkgPSB7XG4gICAga2V5X25hbWU6IHN0cmluZyxcbiAgICB0YXJnZXRzOiBhbnlbXSxcbiAgICB0eXBlPzogc3RyaW5nLFxuICAgIGRqaW5uX2tleV9uYW1lPzogc3RyaW5nLFxuICAgIHNwZWVkPzogbnVtYmVyLFxuICAgIGNhc3Rlcj86IEVuZW15fE1haW5DaGFyLFxuICAgIGJhdHRsZV9hbmltYXRpb25fa2V5Pzogc3RyaW5nXG59O1xuXG5leHBvcnQgdHlwZSBQbGF5ZXJBYmlsaXRpZXMgPSB7W2NoYXJfa2V5X25hbWU6IHN0cmluZ106IFBsYXllckFiaWxpdHlbXX07XG5cbmV4cG9ydCBjbGFzcyBNYWluQmF0dGxlTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIG9uX2FiaWxpdGllc19jaG9vc2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjaG9vc2VfdGFyZ2V0czogRnVuY3Rpb247XG4gICAgcHVibGljIGNoYXJzX3N0YXR1c193aW5kb3c6IENoYXJzU3RhdHVzV2luZG93O1xuICAgIHB1YmxpYyBzdGFydF9idXR0b25zX2tleXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgc3RhcnRfaG9yaXpvbnRhbF9tZW51OiBIb3Jpem9udGFsTWVudTtcbiAgICBwdWJsaWMgaW5uZXJfYnV0dG9uc19rZXlzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgY3VycmVudF9idXR0b25zOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgZGVzY3JpcHRpb25fd2luZG93OiBEZXNjcmlwdGlvbldpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fd2luZG93OiBEamlubldpbmRvdztcbiAgICBwdWJsaWMgcHN5bmVyZ3lfd2luZG93OiBQc3luZXJneVdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV93aW5kb3c6IEl0ZW1XaW5kb3c7XG4gICAgcHVibGljIHN1bW1vbl93aW5kb3c6IFN1bW1vbldpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYXZhdGFyX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgaW5uZXJfaG9yaXpvbnRhbF9tZW51OiBIb3Jpem9udGFsTWVudTtcbiAgICBwdWJsaWMgYWJpbGl0aWVzOiBQbGF5ZXJBYmlsaXRpZXM7XG4gICAgcHVibGljIGN1cnJlbnRfY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBkamlubmlfYWxyZWFkeV91c2VkOiB7W2VsZW1lbnQ6IHN0cmluZ106IG51bWJlcn07XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBvbl9hYmlsaXRpZXNfY2hvb3NlLCBjaG9vc2VfdGFyZ2V0cykge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm9uX2FiaWxpdGllc19jaG9vc2UgPSBvbl9hYmlsaXRpZXNfY2hvb3NlO1xuICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzID0gY2hvb3NlX3RhcmdldHM7XG4gICAgICAgIHRoaXMuY2hhcnNfc3RhdHVzX3dpbmRvdyA9IG5ldyBDaGFyc1N0YXR1c1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuc3RhcnRfYnV0dG9uc19rZXlzID0gW1wiZmlnaHRcIiwgXCJmbGVlXCIsIFwic3RhdHVzXCJdO1xuICAgICAgICB0aGlzLnNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gMDtcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUgPSBuZXcgSG9yaXpvbnRhbE1lbnUoXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICB0aGlzLnN0YXJ0X2J1dHRvbnNfa2V5cyxcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfYnV0dG9uc19rZXlzLm1hcChiID0+IGNhcGl0YWxpemUoYikpLFxuICAgICAgICAgICAgdGhpcy5zdGFydF9idXR0b25fcHJlc3MuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBTVEFSVF9USVRMRV9XSU5ET1dfV0lEVEgsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzID0gW1wiYXR0YWNrXCIsIFwicHN5bmVyZ3lcIiwgXCJkamlubmlcIiwgXCJzdW1tb25cIiwgXCJpdGVtXCIsIFwiZGVmZW5kXCJdO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdyA9IG5ldyBEZXNjcmlwdGlvbldpbmRvdyh0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmRqaW5uX3dpbmRvdyA9IG5ldyBEamlubldpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSwgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgICAgIHRoaXMucHN5bmVyZ3lfd2luZG93ID0gbmV3IFBzeW5lcmd5V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxKTtcbiAgICAgICAgdGhpcy5pdGVtX3dpbmRvdyA9IG5ldyBJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDEsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxKTtcbiAgICAgICAgdGhpcy5zdW1tb25fd2luZG93ID0gbmV3IFN1bW1vbldpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX3Nwcml0ZSA9IHRoaXMuZ3JvdXAuY3JlYXRlKDAsIG51bWJlcnMuR0FNRV9IRUlHSFQgLSBudW1iZXJzLkFWQVRBUl9TSVpFKTtcbiAgICAgICAgdGhpcy5hdmF0YXJfc3ByaXRlLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUgPSBuZXcgSG9yaXpvbnRhbE1lbnUoXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICB0aGlzLmlubmVyX2J1dHRvbnNfa2V5cyxcbiAgICAgICAgICAgIHRoaXMuaW5uZXJfYnV0dG9uc19rZXlzLm1hcChiID0+IGNhcGl0YWxpemUoYikpLFxuICAgICAgICAgICAgdGhpcy5pbm5lcl9idXR0b25fcHJlc3MuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksXG4gICAgICAgICAgICB0aGlzLmlubmVyX21lbnVfY2FuY2VsLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSxcbiAgICAgICAgICAgIElOTkVSX1RJVExFX1dJTkRPV19XSURUSCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGFydF9idXR0b25fcHJlc3MoaW5kZXgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXJ0X2J1dHRvbnNfa2V5c1tpbmRleF0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJmaWdodFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkX2J1dHRvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoIURqaW5uLmhhc19zdGFuZGJ5X2RqaW5uKHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0LCBNYWluQ2hhci5nZXRfYWN0aXZlX3BsYXllcnModGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YSwgTUFYX0NIQVJTX0lOX0JBVFRMRSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkX2J1dHRvbnMucHVzaChcInN1bW1vblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50X2J1dHRvbnMgPSB0aGlzLmlubmVyX2J1dHRvbnNfa2V5cy5maWx0ZXIoa2V5ID0+ICFmaWx0ZXJlZF9idXR0b25zLmluY2x1ZGVzKGtleSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51Lm1vdW50X2J1dHRvbnMoZmlsdGVyZWRfYnV0dG9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuc2xpY2UoMCwgTUFYX0NIQVJTX0lOX0JBVFRMRSkuZm9yRWFjaChjaGFyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hYmlsaXRpZXNbY2hhci5rZXlfbmFtZV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQgPSBvcmRlcmVkX2VsZW1lbnRzLnJlZHVjZSgoYSxiKSA9PiAoYVtiXSA9IDAsIGEpLCB7fSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUub3BlbigpO1xuICAgICAgICAgICAgICAgIGxldCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzX2NoYXIuaXNfcGFyYWx5emVkKCkgfHwgdGhpc19jaGFyLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdGllc1t0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdLmtleV9uYW1lXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogW11cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICsrdGhpcy5jdXJyZW50X2NoYXJfaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSBNQVhfQ0hBUlNfSU5fQkFUVExFIHx8IHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID49IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0aWVzX2Nob29zZSh0aGlzLmFiaWxpdGllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hdmF0YXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlubmVyX2J1dHRvbl9wcmVzcyhpbmRleCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY3VycmVudF9idXR0b25zW2luZGV4XSkge1xuICAgICAgICAgICAgY2FzZSBcImF0dGFja1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGFyZ2V0cyhcImF0dGFja1wiLCBcImF0dGFja1wiLCB0YXJnZXRzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBcImF0dGFja1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRhY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VfY2hhcihGT1JXQVJEKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5wc3luZXJneV93aW5kb3csIGZhbHNlLCBcInBzeW5lcmd5XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRqaW5uaVwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5kamlubl93aW5kb3csIHRydWUsIFwiZGppbm5pXCIsIHRoaXMucHN5bmVyZ3lfd2luZG93KTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcInN1bW1vblwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5zdW1tb25fd2luZG93LCB0cnVlLCBcInN1bW1vblwiLCB0aGlzLmRqaW5uaV9hbHJlYWR5X3VzZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFwiaXRlbVwiOlxuICAgICAgICAgICAgICAgIHRoaXMub25fYWJpbGl0eV9jaG9vc2UodGhpcy5pdGVtX3dpbmRvdywgZmFsc2UsIFwiaXRlbVwiKTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBcImRlZmVuZFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGFyZ2V0cyhcImRlZmVuZFwiLCBcImRlZmVuZFwiLCB0YXJnZXRzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBcImRlZmVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkZWZlbmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VfY2hhcihGT1JXQVJEKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5jdXJyZW50X2NoYXJfaW5kZXhdKTtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fYWJpbGl0eV9jaG9vc2Uod2luZG93LCBkZXNjcmlwdGlvbl9vbl90b3AsIGFjdGlvbl90eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93Lm9wZW4oZGVzY3JpcHRpb25fb25fdG9wKTtcbiAgICAgICAgd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XSwgKGFiaWxpdHksIGl0ZW1fb2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGxldCBkamlubl9rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uX3R5cGUgPT09IFwiZGppbm5pXCIgJiYgdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbYWJpbGl0eV0uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSkge1xuICAgICAgICAgICAgICAgICAgICBkamlubl9rZXlfbmFtZSA9IGFiaWxpdHk7XG4gICAgICAgICAgICAgICAgICAgIGFiaWxpdHkgPSBcInNldF9kamlublwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uX3R5cGUgPT09IFwic3VtbW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWlyZW1lbnRzID0gdGhpcy5kYXRhLmRicy5zdW1tb25zX2RiW2FiaWxpdHldLnJlcXVpcmVtZW50cztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubmlfYWxyZWFkeV91c2VkID0gXy5tYXBWYWx1ZXModGhpcy5kamlubmlfYWxyZWFkeV91c2VkLCAodmFsdWUsIGVsZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSArIHJlcXVpcmVtZW50c1tlbGVtXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZV90YXJnZXRzKGFiaWxpdHksIGFjdGlvbl90eXBlLCB0YXJnZXRzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0aWVzW3RoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleV9uYW1lOiBhYmlsaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IHRhcmdldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYWN0aW9uX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGppbm5fa2V5X25hbWU6IGRqaW5uX2tleV9uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9jaGFyKEZPUldBUkQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0sIGl0ZW1fb2JqKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pc19vcGVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3cuc2V0X2Rlc2NyaXB0aW9uLmJpbmQodGhpcy5kZXNjcmlwdGlvbl93aW5kb3cpLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfY2hhcihzdGVwLCBwb3BfYWJpbGl0eSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZV9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XTtcbiAgICAgICAgY29uc3QgYWJpbGl0aWVzX2NvdW50ID0gdGhpcy5hYmlsaXRpZXNbYmVmb3JlX2NoYXIua2V5X25hbWVdLmxlbmd0aDtcbiAgICAgICAgaWYgKGJlZm9yZV9jaGFyLnR1cm5zID09PSBhYmlsaXRpZXNfY291bnQgfHwgIWFiaWxpdGllc19jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2NoYXJfaW5kZXggKz0gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2NoYXJfaW5kZXggPj0gTUFYX0NIQVJTX0lOX0JBVFRMRSB8fCB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA+PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLm9uX2FiaWxpdGllc19jaG9vc2UodGhpcy5hYmlsaXRpZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF07XG4gICAgICAgICAgICBpZiAocG9wX2FiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhYmlsaXR5X2luZm8gPSB0aGlzLmFiaWxpdGllc1tuZXh0X2NoYXIua2V5X25hbWVdLnBvcCgpO1xuICAgICAgICAgICAgICAgIGlmIChhYmlsaXR5X2luZm8udHlwZSA9PT0gXCJzdW1tb25cIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlbWVudHMgPSB0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbYWJpbGl0eV9pbmZvLmtleV9uYW1lXS5yZXF1aXJlbWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IF8ubWFwVmFsdWVzKHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCwgKHZhbHVlLCBlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLSByZXF1aXJlbWVudHNbZWxlbV07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0X2NoYXIuaXNfcGFyYWx5emVkKCkgfHwgbmV4dF9jaGFyLmhhc19wZXJtYW5lbnRfc3RhdHVzKHBlcm1hbmVudF9zdGF0dXMuRE9XTkVEKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoc3RlcCwgcG9wX2FiaWxpdHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9hdmF0YXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLmlubmVyX21lbnVfY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfYXZhdGFyKCkge1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUubG9hZFRleHR1cmUoXCJhdmF0YXJzXCIsIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfY2hhcl9pbmRleF0ua2V5X25hbWUpO1xuICAgIH1cblxuICAgIGhpZGVfYXZhdGFyKCkge1xuICAgICAgICB0aGlzLmF2YXRhcl9zcHJpdGUuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIGlubmVyX21lbnVfY2FuY2VsKCkge1xuICAgICAgICBjb25zdCBjaGFyX2tleV9uYW1lID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuY3VycmVudF9jaGFyX2luZGV4XS5rZXlfbmFtZTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID4gMCB8fCB0aGlzLmFiaWxpdGllc1tjaGFyX2tleV9uYW1lXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlX2NoYXIoQkFDS1dBUkQsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZV9hdmF0YXIoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfaG9yaXpvbnRhbF9tZW51Lm9wZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih0cnVlKTtcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuaW5uZXJfaG9yaXpvbnRhbF9tZW51LnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICB9XG5cbiAgICBpc19hY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5tZW51X2FjdGl2ZSB8fCB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5tZW51X2FjdGl2ZTtcbiAgICB9XG5cbiAgICBvcGVuX21lbnUoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zdGFydF9ob3Jpem9udGFsX21lbnUub3BlbigpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnNob3coKTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNfYWN0aXZlKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5oaWRlX2F2YXRhcigpO1xuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xuICAgICAgICB0aGlzLmlubmVyX2hvcml6b250YWxfbWVudS5jbG9zZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lfbWVudSgpIHtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pbm5lcl9ob3Jpem9udGFsX21lbnUuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnN0YXJ0X2hvcml6b250YWxfbWVudS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kamlubl93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaXRlbV93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnN1bW1vbl93aW5kb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMjM2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMjg7XG5jb25zdCBCQVNFX1dJTl9YID0gMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSA0MDtcbmNvbnN0IEJBU0VfV0lOX1RPUF9ZID0gMzI7XG5jb25zdCBERVNDUklQVElPTl9YID0gODtcbmNvbnN0IERFU0NSSVBUSU9OX1kgPSAxMjtcblxuZXhwb3J0IGNsYXNzIERlc2NyaXB0aW9uV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBERVNDUklQVElPTl9YLCBERVNDUklQVElPTl9ZKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24ob25fdG9wKSB7XG4gICAgICAgIGlmIChvbl90b3ApIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt5OiBCQVNFX1dJTl9UT1BfWX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3k6IEJBU0VfV0lOX1l9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9kZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KGRlc2NyaXB0aW9uLCB0aGlzLmRlc2NyaXB0aW9uKTtcbiAgICB9XG5cbiAgICBvcGVuKG9uX3RvcCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKG9uX3RvcCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbCc7XG5pbXBvcnQgeyB0ZW1wb3Jhcnlfc3RhdHVzIH0gZnJvbSAnLi4vLi4vUGxheWVyJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uLy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gJy4uLy4uL01haW5DaGFyJztcbmltcG9ydCB7IERqaW5uIH0gZnJvbSAnLi4vLi4vRGppbm4nO1xuXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDE2NDtcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDg0O1xuY29uc3QgQkFTRV9XSU5fRVhQQU5ERURfSEVJR0hUID0gMTA4O1xuY29uc3QgQkFTRV9XSU5fWCA9IDcyO1xuY29uc3QgQkFTRV9XSU5fWSA9IDcyO1xuY29uc3QgQkFTRV9XSU5fRVhQQU5ERURfWCA9IDA7XG5jb25zdCBCQVNFX1dJTl9FWFBBTkRFRF9ZID0gNDA7XG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcbmNvbnN0IEVMRU1fUEFERElOR19UT1AgPSA1O1xuY29uc3QgRUxFTV9QQURESU5HX0xFRlQgPSAxMDtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSAyO1xuY29uc3QgUFBfWCA9IDk2O1xuY29uc3QgUFNZX1BQX1ggPSAxMjY7IC8vcmlnaHQgYWxpZ25cbmNvbnN0IEVMRU1fTkFNRV9JQ09OX1NISUZUID0gNDtcbmNvbnN0IFBTWV9HQUlOX0NPTE9SID0gbnVtYmVycy5ZRUxMT1dfRk9OVF9DT0xPUjtcbmNvbnN0IFBTWV9MT1NUX0NPTE9SID0gbnVtYmVycy5SRURfRk9OVF9DT0xPUjtcbmNvbnN0IFBTWV9JTkZPXzFfWSA9IDg5O1xuY29uc3QgUFNZX0lORk9fWCA9IDQwO1xuY29uc3QgUFNZX0lORk9fMl9ZID0gUFNZX0lORk9fMV9ZICsgMSArIG51bWJlcnMuRk9OVF9TSVpFO1xuY29uc3QgQlVUVE9OX1ggPSA0ODtcbmNvbnN0IEJVVFRPTl9ZID0gMTM2O1xuY29uc3QgQ1VSU09SX1ggPSA2NjtcbmNvbnN0IENVUlNPUl9ZID0gODM7XG5jb25zdCBDVVJTT1JfRVhQQU5ERURfWCA9IDY2O1xuY29uc3QgQ1VSU09SX0VYUEFOREVEX1kgPSA4MztcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xuY29uc3QgU1RBUlRfWCA9IDEyOTtcbmNvbnN0IFJBTkdFX1ggPSAxMzc7XG5jb25zdCBISUdITElHSFRfQkFSX1dJRFRIID0gMTUyO1xuY29uc3QgSElHSExJR0hUX0JBUl9IRUlHSFQgPSA4O1xuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcblxuZXhwb3J0IGNsYXNzIFBzeW5lcmd5V2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHRleHRfc3ByaXRlc19pbl93aW5kb3c6IFRleHRPYmpbXTtcbiAgICBwdWJsaWMgaWNvbl9zcHJpdGVzX2luX3dpbmRvdzogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBtaXNjX3Nwcml0ZXNfaW5fd2luZG93OiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBidXR0b246IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGN1cnNvcl9jb250cm9sOiBDdXJzb3JDb250cm9sO1xuICAgIHB1YmxpYyBzaWduYWxfYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW107XG4gICAgcHVibGljIGhpZ2hsaWdodF9iYXI6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgZXhwYW5kZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGFiaWxpdHlfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX251bWJlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBhYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBhbGxfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBzZXRfZGVzY3JpcHRpb246IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjaG9vc2VuX2FiaWxpdHk6IHN0cmluZztcbiAgICBwdWJsaWMgcHN5X3NlYWxlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGdhaW5lZF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBsb3N0X2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGludGVyc2VjdGlvbl9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBjdXJyZW50X2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIG5leHRfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgcHN5X2luZm9fMV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBwc3lfaW5mb18yX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uaTogRGppbm5bXTtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdyA9IFtdO1xuICAgICAgICB0aGlzLm1pc2Nfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xuICAgICAgICB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmluaXRfcGFnZV9pbmRpY2F0b3JfYmFyKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5ncm91cC5jcmVhdGUoQlVUVE9OX1gsIEJVVFRPTl9ZLCBcImJ1dHRvbnNcIiwgXCJwc3luZXJneVwiKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wgPSBuZXcgQ3Vyc29yQ29udHJvbCh0aGlzLmdhbWUsIHRydWUsIHRydWUsIHRoaXMuZ2V0X21heF9wYWdlcy5iaW5kKHRoaXMpLCB0aGlzLmdldF9tYXhfZWxlbV9vbl9wYWdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2FiaWxpdHkuYmluZCh0aGlzKSwgdGhpcy5nZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9wYWdlX2luZGV4LmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9hYmlsaXR5X2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X2FiaWxpdHlfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kZWQgPyBDVVJTT1JfRVhQQU5ERURfWCA6IENVUlNPUl9YO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeSgpIHtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZXhwYW5kZWQgPyBDVVJTT1JfRVhQQU5ERURfWSA6IENVUlNPUl9ZO1xuICAgICAgICByZXR1cm4geSArICh0aGlzLmFiaWxpdHlfaW5kZXggKiBDVVJTT1JfU0hJRlQpO1xuICAgIH1cblxuICAgIGlzX29wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19vcGVuO1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcbiAgICB9XG5cbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfcGFnZV9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBnZXRfYWJpbGl0eV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWJpbGl0eV9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfYWJpbGl0eV9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLmFiaWxpdHlfaW5kZXggPSBpbmRleDtcbiAgICB9IFxuXG4gICAgZ2V0X21heF9lbGVtX29uX3BhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFiaWxpdGllcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0X21heF9wYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9udW1iZXI7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSB8fCB0aGlzLmV4cGFuZGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSB8fCB0aGlzLmV4cGFuZGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IHRoaXMuYWJpbGl0aWVzW3RoaXMuYWJpbGl0eV9pbmRleF07XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RfbGVuZ3RoID0gdGhpcy5hbGxfYWJpbGl0aWVzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlciA9ICgoKGxpc3RfbGVuZ3RoIC0gMSkvRUxFTV9QRVJfUEFHRSkgfCAwKSArIDE7XG4gICAgICAgIGlmICh0aGlzLnBhZ2VfaW5kZXggPj0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gdGhpcy5wYWdlX251bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZShiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllc19saXN0KCk7XG4gICAgICAgIGlmICh0aGlzLmFiaWxpdHlfaW5kZXggPj0gdGhpcy5hYmlsaXRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmFiaWxpdHlfaW5kZXggPSB0aGlzLmFiaWxpdGllcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLmFiaWxpdGllc1t0aGlzLmFiaWxpdHlfaW5kZXhdXS5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfYWJpbGl0eShiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICB9XG5cbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLnkgPSBFTEVNX1BBRERJTkdfVE9QICsgdGhpcy5hYmlsaXR5X2luZGV4ICogKG51bWJlcnMuSUNPTl9IRUlHSFQgKyBTUEFDRV9CRVRXRUVOX0lURU1TKSArIDQ7XG4gICAgfVxuXG4gICAgc2V0X2FiaWxpdGllc19saXN0KCkge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoZmFsc2UpO1xuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHRoaXMuYWxsX2FiaWxpdGllcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFiaWxpdGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qga2V5X25hbWUgPSB0aGlzLmFiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBFTEVNX1BBRERJTkdfTEVGVDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBFTEVNX1BBRERJTkdfVE9QICsgaSAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUyk7XG4gICAgICAgICAgICBjb25zdCBpY29uX3ggPSB4ICsgKG51bWJlcnMuSUNPTl9XSURUSCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IGljb25feSA9IHkgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IHhfZWxlbV9uYW1lID0gRUxFTV9QQURESU5HX0xFRlQgKyBudW1iZXJzLklDT05fV0lEVEggKyAyO1xuICAgICAgICAgICAgbGV0IGZvbnRfY29sb3IgPSBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIGlmICh0aGlzLnBzeV9zZWFsZWQpIHtcbiAgICAgICAgICAgICAgICBmb250X2NvbG9yID0gbnVtYmVycy5QVVJQTEVfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jaGFyLmN1cnJlbnRfcHAgPCB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucHBfY29zdCkge1xuICAgICAgICAgICAgICAgIGZvbnRfY29sb3IgPSBudW1iZXJzLlJFRF9GT05UX0NPTE9SO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHN5bmVyZ3lfbmFtZV9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5uYW1lLCB4X2VsZW1fbmFtZSwgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZULCBmYWxzZSwgZmFsc2UsIGZvbnRfY29sb3IpO1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93LnB1c2gocHN5bmVyZ3lfbmFtZV9zcHJpdGUpO1xuICAgICAgICAgICAgY29uc3QgcHBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIFBQX1gsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCwgZmFsc2UsIGZhbHNlLCBmb250X2NvbG9yKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBwX3Nwcml0ZSk7XG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3cucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChpY29uX3gsIGljb25feSwgXCJhYmlsaXRpZXNfaWNvbnNcIiwgdW5kZWZpbmVkLCBrZXlfbmFtZSkpO1xuICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93W2ldLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICB0aGlzLm1pc2Nfc3ByaXRlc19pbl93aW5kb3cucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSVF9YLCB5ICsgNSwgdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcbiAgICAgICAgICAgIHRoaXMubWlzY19zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFJBTkdFX1gsIHkgKyA0LCBcInJhbmdlc1wiLCB1bmRlZmluZWQsIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5yYW5nZS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICBjb25zdCBwc3luZXJneV9jb3N0X3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLnBwX2Nvc3QsIFBTWV9QUF9YLCB5ICsgRUxFTV9OQU1FX0lDT05fU0hJRlQsIHRydWUsIGZhbHNlLCBmb250X2NvbG9yKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5pbmNsdWRlcyhrZXlfbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgcHN5bmVyZ3lfbmFtZV9zcHJpdGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9jb3N0X3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHBwX3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxvc3RfYWJpbGl0aWVzLmluY2x1ZGVzKGtleV9uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCBwc3luZXJneV9uYW1lX3Nwcml0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgcHBfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfYWJpbGl0aWVzKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRfYWJpbGl0aWVzID0gdGhpcy5jaGFyLmFiaWxpdGllcy5maWx0ZXIoa2V5X25hbWUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0ICYmIHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5pc19iYXR0bGVfYWJpbGl0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuY3VycmVudF9hYmlsaXRpZXM7XG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlcyA9IHRoaXMuY2hhci5wcmV2aWV3X2RqaW5uX2NoYW5nZShbXSwgdGhpcy5kamlubmkubWFwKGQgPT4gZC5rZXlfbmFtZSksIHRoaXMubmV4dF9kamlubmlfc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMubmV4dF9hYmlsaXRpZXMgPSBwcmV2aWV3X3ZhbHVlcy5hYmlsaXRpZXMuZmlsdGVyKGtleV9uYW1lID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3QgJiYgdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Rba2V5X25hbWVdLmlzX2JhdHRsZV9hYmlsaXR5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgY3VycmVudF9zZXQgPSBuZXcgU2V0KHRoaXMuY3VycmVudF9hYmlsaXRpZXMpO1xuICAgICAgICAgICAgbGV0IG5leHRfc2V0ID0gbmV3IFNldCh0aGlzLm5leHRfYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIHRoaXMuZ2FpbmVkX2FiaWxpdGllcyA9IFsuLi5uZXh0X3NldF0uZmlsdGVyKHggPT4gIWN1cnJlbnRfc2V0Lmhhcyh4KSk7XG4gICAgICAgICAgICB0aGlzLmxvc3RfYWJpbGl0aWVzID0gWy4uLmN1cnJlbnRfc2V0XS5maWx0ZXIoeCA9PiAhbmV4dF9zZXQuaGFzKHgpKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0aW9uX2FiaWxpdGllcyA9IFsuLi5jdXJyZW50X3NldF0uZmlsdGVyKHggPT4gbmV4dF9zZXQuaGFzKHgpKTtcbiAgICAgICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5jb25jYXQodGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzLCB0aGlzLmxvc3RfYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIHRoaXMucHN5X2luZm9fMV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBQU1lfSU5GT19YLCBQU1lfSU5GT18xX1kpO1xuICAgICAgICAgICAgdGhpcy5wc3lfaW5mb18yX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFBTWV9JTkZPX1gsIFBTWV9JTkZPXzJfWSk7XG4gICAgICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIE5vIGNoYW5nZVwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5wc3lfaW5mb18yX3RleHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgR2FpbmVkXCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggPT09IDAgJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBMb3N0XCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllcygpO1xuICAgICAgICB0aGlzLnNldF9hYmlsaXRpZXNfbGlzdCgpO1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuICAgICAgICBpZiAodGhpcy5leHBhbmRlZCkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiBCQVNFX1dJTl9FWFBBTkRFRF9IRUlHSFR9KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiBCQVNFX1dJTl9FWFBBTkRFRF9YLCB5OiBCQVNFX1dJTl9FWFBBTkRFRF9ZfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9zaXplKHtoZWlnaHQ6IEJBU0VfV0lOX0hFSUdIVH0pO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfcG9zaXRpb24oe3g6IEJBU0VfV0lOX1gsIHk6IEJBU0VfV0lOX1l9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcih0aGlzLnBhZ2VfbnVtYmVyLCB0aGlzLnBhZ2VfaW5kZXgpO1xuICAgIH1cblxuICAgIGNsZWFyX3Nwcml0ZXMoY2xlYXJfcHN5X2dhaW4gPSB0cnVlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMubWlzY19zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taXNjX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFyX3BzeV9nYWluKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wc3lfaW5mb18xX3RleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMucHN5X2luZm9fMV90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnBzeV9pbmZvXzFfdGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wc3lfaW5mb18yX3RleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnBzeV9pbmZvXzJfdGV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgfVxuXG4gICAgb3BlbihjaGFyLCBjbG9zZV9jYWxsYmFjaywgc2V0X2Rlc2NyaXB0aW9uLCBleHBhbmRlZCA9IGZhbHNlLCBkamlubiA9IG51bGwsIG5leHRfZGppbm5fc3RhdHVzID0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLnBzeV9zZWFsZWQgPSB0aGlzLmNoYXIuaGFzX3RlbXBvcmFyeV9zdGF0dXModGVtcG9yYXJ5X3N0YXR1cy5TRUFMKTtcbiAgICAgICAgdGhpcy5kamlubmkgPSBbZGppbm5dO1xuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IFtuZXh0X2RqaW5uX3N0YXR1c107XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLmFscGhhID0gMTtcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbi5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5hYmlsaXRpZXNbdGhpcy5hYmlsaXR5X2luZGV4XV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVuc2V0X3BhZ2VfaW5kaWNhdG9yKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MuZm9yRWFjaChzaWduYWxfYmluZGluZyA9PiB7XG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlc3Ryb3koKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0IHsgQ3Vyc29yQ29udHJvbCB9IGZyb20gJy4uLy4uL3V0aWxzL0N1cnNvckNvbnRyb2wnO1xuaW1wb3J0IHsgZGppbm5fc3RhdHVzLCBkamlubl9mb250X2NvbG9ycyB9IGZyb20gXCIuLi8uLi9EamlublwiO1xuaW1wb3J0IHsgRGppbm5TdGF0c1dpbmRvdyB9IGZyb20gXCIuL0RqaW5uU3RhdHNXaW5kb3dcIjtcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQgeyBQc3luZXJneVdpbmRvdyB9IGZyb20gXCIuL1BzeW5lcmd5V2luZG93XCI7XG5cbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxNjA7XG5jb25zdCBCQVNFX1dJTkRPV19ZID0gNzI7XG5jb25zdCBCQVNFX1dJTkRPV19XSURUSCA9IDc2O1xuY29uc3QgQkFTRV9XSU5ET1dfSEVJR0hUID0gODQ7XG5jb25zdCBFTEVNX1BFUl9QQUdFID0gNTtcbmNvbnN0IFRPUF9QQURESU5HID0gODtcbmNvbnN0IFNQQUNFX0JFVFdFRU5fSVRFTVMgPSA4O1xuY29uc3QgSElHSExJR0hUX0JBUl9XSURUSCA9IDY0O1xuY29uc3QgSElHSExJR0hUX0JBUl9IRUlHSFQgPSA4O1xuY29uc3QgSElHSExJR0hUX0JBUl9YID0gODtcbmNvbnN0IEJVVFRPTl9YID0gMTQwO1xuY29uc3QgQlVUVE9OX1kgPSAxMzY7XG5jb25zdCBTVEFSX1ggPSA5O1xuY29uc3QgREpJTk5fTkFNRV9YID0gMTc7XG5jb25zdCBDVVJTT1JfWCA9IDE1NDtcbmNvbnN0IENVUlNPUl9ZID0gODQ7XG5jb25zdCBDVVJTT1JfU0hJRlQgPSAxNjtcbmNvbnN0IFJFQ09WRVJZX05VTUJFUl9YID0gNjc7XG5cbmV4cG9ydCBjbGFzcyBEamlubldpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBzdGF0c193aW5kb3c6IERqaW5uU3RhdHNXaW5kb3c7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGJ1dHRvbjogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgaGlnaGxpZ2h0X2JhcjogUGhhc2VyLkdyYXBoaWNzO1xuICAgIHB1YmxpYyBzaWduYWxfYmluZGluZ3M6IFBoYXNlci5TaWduYWxCaW5kaW5nW107XG4gICAgcHVibGljIGRqaW5uX25hbWVzOiBUZXh0T2JqW107XG4gICAgcHVibGljIHN0YXJzX3Nwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgY3Vyc29yX2NvbnRyb2w6IEN1cnNvckNvbnRyb2w7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3dfYWN0aXZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBwc3luZXJneV93aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc2V0X2Rlc2NyaXB0aW9uOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgcHN5bmVyZ3lfd2luZG93OiBQc3luZXJneVdpbmRvdztcbiAgICBwdWJsaWMgY2hvb3Nlbl9hYmlsaXR5OiBzdHJpbmc7XG4gICAgcHVibGljIGRqaW5uX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGRqaW5uaTogc3RyaW5nW107XG4gICAgcHVibGljIGFsbF9kamlubmk6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBwYWdlX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5ET1dfWCwgQkFTRV9XSU5ET1dfWSwgQkFTRV9XSU5ET1dfV0lEVEgsIEJBU0VfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuaW5pdF9wYWdlX2luZGljYXRvcl9iYXIoKTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cgPSBuZXcgRGppbm5TdGF0c1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gdGhpcy5ncm91cC5jcmVhdGUoQlVUVE9OX1gsIEJVVFRPTl9ZLCBcImJ1dHRvbnNcIiwgXCJkamlubmlcIik7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaGlnaGxpZ2h0X2Jhcik7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5iZWdpbkZpbGwodGhpcy5iYXNlX3dpbmRvdy5jb2xvciwgMSk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5kcmF3UmVjdChISUdITElHSFRfQkFSX1gsIDAsIEhJR0hMSUdIVF9CQVJfV0lEVEgsIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmVuZEZpbGwoKTtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGFyc19zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wgPSBuZXcgQ3Vyc29yQ29udHJvbCh0aGlzLmdhbWUsIHRydWUsIHRydWUsIHRoaXMuZ2V0X21heF9wYWdlcy5iaW5kKHRoaXMpLCB0aGlzLmdldF9tYXhfZWxlbV9vbl9wYWdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX2RqaW5uLmJpbmQodGhpcyksIHRoaXMuZ2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfZGppbm5faW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfZGppbm5faW5kZXguYmluZCh0aGlzKSwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSB8fCB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSksXG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSB8fCB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbdGhpcy5kamlubl9pbmRleF1dO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzX2RqaW5uLnN0YXR1cyAhPT0gZGppbm5fc3RhdHVzLlJFQ09WRVJZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpc19kamlubi5hYmlsaXR5X2tleV9uYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSksXG4gICAgICAgICAgICB0aGlzLmRhdGEuc2hpZnRfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSB8fCB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNoaWZ0X2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdy5vcGVuKHRoaXMuY2hhciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUsIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW3RoaXMuZGppbm5faW5kZXhdXSwgdGhpcy5nZXRfbmV4dF9zdGF0dXMoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB9LCB0aGlzLCB0aGlzLnNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNISUZUKS5vblVwLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUgfHwgIXRoaXMucHN5bmVyZ3lfd2luZG93X29wZW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeCgpIHtcbiAgICAgICAgcmV0dXJuIENVUlNPUl9YO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeSgpIHtcbiAgICAgICAgcmV0dXJuIENVUlNPUl9ZICsgKHRoaXMuZGppbm5faW5kZXggKiBDVVJTT1JfU0hJRlQpO1xuICAgIH1cblxuICAgIGlzX29wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19vcGVuO1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZSAmJiAhdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbjtcbiAgICB9XG5cbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfcGFnZV9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBnZXRfZGppbm5faW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRqaW5uX2luZGV4O1xuICAgIH1cblxuICAgIHNldF9kamlubl9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLmRqaW5uX2luZGV4ID0gaW5kZXg7XG4gICAgfSBcblxuICAgIGdldF9tYXhfZWxlbV9vbl9wYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kamlubmkubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldF9tYXhfcGFnZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VfbnVtYmVyO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgfVxuXG4gICAgY2FsbF9zZXRfZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzLmRqaW5uaVt0aGlzLmRqaW5uX2luZGV4XV07XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpc19kamlubi5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKFwiUmVhZHkgdG8gc3VtbW9uLiBDaG9vc2UgdG8gc2V0IGl0IGFnYWluLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKFwiVGhpcyBEamlubiBpcyBzdGlsbCByZWNvdmVyaW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfcGFnZShiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XG4gICAgICAgIHRoaXMuY29uZmlnX3BhZ2UoKTtcbiAgICAgICAgaWYgKHRoaXMuZGppbm5faW5kZXggPj0gdGhpcy5kamlubmkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX2luZGV4ID0gdGhpcy5kamlubmkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbF9zZXRfZGVzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy51cGRhdGVfc3RhdHMoKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfZGppbm4oYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xuICAgICAgICB0aGlzLmNhbGxfc2V0X2Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfc3RhdHMoKTtcbiAgICB9XG5cbiAgICBzZXRfaGlnaGxpZ2h0X2JhcigpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLnkgPSBUT1BfUEFERElORyArIHRoaXMuZGppbm5faW5kZXggKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcbiAgICB9XG5cbiAgICBjb25maWdfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuZGppbm5pID0gdGhpcy5hbGxfZGppbm5pLnNsaWNlKHRoaXMucGFnZV9pbmRleCAqIEVMRU1fUEVSX1BBR0UsICh0aGlzLnBhZ2VfaW5kZXggKyAxKSAqIEVMRU1fUEVSX1BBR0UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBkamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW2ldXTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhciA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfWCwgYmFzZV95ICsgMSwgZGppbm4uZWxlbWVudCArIFwiX3N0YXJcIik7XG4gICAgICAgICAgICB0aGlzLnN0YXJzX3Nwcml0ZXMucHVzaChzdGFyKTtcbiAgICAgICAgICAgIGxldCBjb2xvcjtcbiAgICAgICAgICAgIHN3aXRjaCAoZGppbm4uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TRVRdOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TVEFOREJZXTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6IGNvbG9yID0gZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlJFQ09WRVJZXTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihkamlubi5uYW1lLCBESklOTl9OQU1FX1gsIGJhc2VfeSwgZmFsc2UsIGZhbHNlLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICBpZiAoZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuUkVDT1ZFUlkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNfbnVtYmVyID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgKGRqaW5uLnJlY292ZXJ5X3R1cm4gKyAxKS50b1N0cmluZygpLCBSRUNPVkVSWV9OVU1CRVJfWCwgYmFzZV95LCB0cnVlLCBmYWxzZSwgZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlJFQ09WRVJZXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKHJlY19udW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2RqaW5uaS5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0X25leHRfc3RhdHVzKCkge1xuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpcy5kamlubmlbdGhpcy5kamlubl9pbmRleF1dO1xuICAgICAgICBsZXQgbmV4dF9zdGF0dXM7XG4gICAgICAgIHN3aXRjaCAodGhpc19kamlubi5zdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU1RBTkRCWTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiBuZXh0X3N0YXR1cyA9IGRqaW5uX3N0YXR1cy5TRVQ7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6IG5leHRfc3RhdHVzID0gZGppbm5fc3RhdHVzLlJFQ09WRVJZOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dF9zdGF0dXM7XG4gICAgfVxuICAgIFxuICAgIHVwZGF0ZV9zdGF0cygpIHtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXMuZGppbm5pW3RoaXMuZGppbm5faW5kZXhdXTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuc2V0X2RqaW5uKHRoaXNfZGppbm4sIHRoaXMuZ2V0X25leHRfc3RhdHVzKCkpO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgdGhpcy5hbGxfZGppbm5pID0gdGhpcy5jaGFyLmRqaW5uaTtcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3IodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xuICAgIH1cblxuICAgIGNsZWFyX3Nwcml0ZXMoKSB7XG4gICAgICAgIHRoaXMuc3RhcnNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRqaW5uX25hbWVzLmZvckVhY2godGV4dCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRleHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvcGVuKGNoYXIsIGNsb3NlX2NhbGxiYWNrLCBzZXRfZGVzY3JpcHRpb24sIHBzeW5lcmd5X3dpbmRvdykge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X3dpbmRvdyA9IHBzeW5lcmd5X3dpbmRvdztcbiAgICAgICAgdGhpcy5wc3luZXJneV93aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5kamlubl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cub3Blbih0aGlzLmNoYXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5jYWxsX3NldF9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cub3Blbih0aGlzLmNoYXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9zdGF0cygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xuICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlc3Ryb3koKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0IHsgTWFpbkNoYXIgfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7IERqaW5uIH0gZnJvbSBcIi4uLy4uL0RqaW5uXCI7XG5cbmNvbnN0IEJBU0VfV0lOX1ggPSAwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDY0O1xuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxNTY7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSA4NDtcbmNvbnN0IEhQX0xBQkVMX1ggPSA4O1xuY29uc3QgSFBfTEFCRUxfWSA9IDE2O1xuY29uc3QgQ0xBU1NfTkFNRV9ZID0gODtcbmNvbnN0IEFGVEVSX0NMQVNTX1ggPSA4ODtcbmNvbnN0IEJFRk9SRV9TVEFUX1ggPSA3ODtcbmNvbnN0IEFGVEVSX1NUQVRfWCA9IDEyNjtcbmNvbnN0IENMQVNTX0FSUk9XX1ggPSA4MDtcbmNvbnN0IENMQVNTX0FSUk9XX1kgPSAxNjtcbmNvbnN0IHN0YXRzX2tleXMgPSBbXCJtYXhfaHBcIiwgXCJtYXhfcHBcIiwgXCJhdGtcIiwgXCJkZWZcIiwgXCJhZ2lcIiwgXCJsdWtcIl07XG5jb25zdCBTVEFUX0FSUk9XX1ggPSA4MDtcbmNvbnN0IFNUQVRfQVJST1dfWSA9IDE1O1xuY29uc3QgU0hJRlRfQlVUVE9OX1ggPSAzMjtcbmNvbnN0IFNISUZUX0JVVFRPTl9ZID0gNzI7XG5jb25zdCBTSElGVF9ERVNDUklQVElPTl9YID0gNTU7XG5jb25zdCBTSElGVF9ERVNDUklQVElPTl9ZID0gNzI7XG5cbmV4cG9ydCBjbGFzcyBEamlublN0YXRzV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgYmVmb3JlX3N0YXRzOiB7W3N0YXQ6IHN0cmluZ106IFRleHRPYmp9O1xuICAgIHB1YmxpYyBhZnRlcl9zdGF0czoge1tzdGF0OiBzdHJpbmddOiBUZXh0T2JqfTtcbiAgICBwdWJsaWMgdXBfYXJyb3dzOiB7W3N0YXQ6IHN0cmluZ106IFBoYXNlci5TcHJpdGV9O1xuICAgIHB1YmxpYyBkb3duX2Fycm93czoge1tzdGF0OiBzdHJpbmddOiBQaGFzZXIuU3ByaXRlfTtcbiAgICBwdWJsaWMgYmVmb3JlX2NsYXNzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFmdGVyX2NsYXNzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBzdHJpbmc7XG4gICAgcHVibGljIGRqaW5uOiBEamlubjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gW1wiSFBcIiwgXCJQUFwiLCBcIkF0dGFja1wiLCBcIkRlZmVuc2VcIiwgXCJBZ2lsaXR5XCIsIFwiTHVja1wiXTtcbiAgICAgICAgdGhpcy5iZWZvcmVfc3RhdHMgPSB7fTtcbiAgICAgICAgdGhpcy5hZnRlcl9zdGF0cyA9IHt9O1xuICAgICAgICB0aGlzLnVwX2Fycm93cyA9IHt9O1xuICAgICAgICB0aGlzLmRvd25fYXJyb3dzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdHNfa2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihsYWJlbHNbaV0sIEhQX0xBQkVMX1gsIEhQX0xBQkVMX1kgKyBpICogbnVtYmVycy5GT05UX1NJWkUpO1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVfc3RhdHNbc3RhdHNfa2V5c1tpXV0gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIEJFRk9SRV9TVEFUX1gsIEhQX0xBQkVMX1kgKyBpICogbnVtYmVycy5GT05UX1NJWkUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5hZnRlcl9zdGF0c1tzdGF0c19rZXlzW2ldXSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQUZURVJfU1RBVF9YLCBIUF9MQUJFTF9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW3N0YXRzX2tleXNbaV1dID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBVF9BUlJPV19YLCBTVEFUX0FSUk9XX1kgKyBpICogbnVtYmVycy5GT05UX1NJWkUsIFwic3RhdF91cFwiKTtcbiAgICAgICAgICAgIHRoaXMuZG93bl9hcnJvd3Nbc3RhdHNfa2V5c1tpXV0gPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFUX0FSUk9XX1gsIFNUQVRfQVJST1dfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSwgXCJzdGF0X2Rvd25cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlX2Fycm93cygpO1xuICAgICAgICB0aGlzLmJlZm9yZV9jbGFzc190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBIUF9MQUJFTF9YLCBDTEFTU19OQU1FX1kpO1xuICAgICAgICB0aGlzLmFmdGVyX2NsYXNzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIEFGVEVSX0NMQVNTX1gsIENMQVNTX05BTUVfWSk7XG4gICAgICAgIGxldCBhcnJvd19jaGFuZ2UgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChDTEFTU19BUlJPV19YLCBDTEFTU19BUlJPV19ZLCBcImFycm93X2NoYW5nZVwiKTtcbiAgICAgICAgYXJyb3dfY2hhbmdlLnJvdGF0aW9uID0gLW51bWJlcnMuZGVncmVlOTA7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNISUZUX0JVVFRPTl9YICsgMSwgU0hJRlRfQlVUVE9OX1kgKyAxLCBcInNoaWZ0X2tleWJvYXJkXCIsIDB4MCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNISUZUX0JVVFRPTl9YLCBTSElGVF9CVVRUT05fWSwgXCJzaGlmdF9rZXlib2FyZFwiKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjogUHN5LiBHYWluZWRcIiwgU0hJRlRfREVTQ1JJUFRJT05fWCwgU0hJRlRfREVTQ1JJUFRJT05fWSk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBoaWRlX2Fycm93cygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0c19rZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW3N0YXRzX2tleXNbaV1dLmFscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW3N0YXRzX2tleXNbaV1dLmFscGhhID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9zdGF0cygpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY2xhc3MubmFtZSwgdGhpcy5iZWZvcmVfY2xhc3NfdGV4dCk7XG4gICAgICAgIGNvbnN0IHByZXZpZXdfdmFsdWVzID0gdGhpcy5jaGFyLnByZXZpZXdfZGppbm5fY2hhbmdlKHN0YXRzX2tleXMsIFt0aGlzLmRqaW5uLmtleV9uYW1lXSwgW3RoaXMubmV4dF9kamlubmlfc3RhdHVzXSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQocHJldmlld192YWx1ZXMuY2xhc3NfbmFtZSwgdGhpcy5hZnRlcl9jbGFzc190ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0c19rZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0X2tleSA9IHN0YXRzX2tleXNbaV07XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3N0YXQgPSB0aGlzLmNoYXJbc3RhdF9rZXldO1xuICAgICAgICAgICAgY29uc3QgbmV4dF9zdGF0ID0gcHJldmlld192YWx1ZXNbc3RhdF9rZXldO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChjdXJyZW50X3N0YXQudG9TdHJpbmcoKSwgdGhpcy5iZWZvcmVfc3RhdHNbc3RhdF9rZXldKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQobmV4dF9zdGF0LnRvU3RyaW5nKCksIHRoaXMuYWZ0ZXJfc3RhdHNbc3RhdF9rZXldKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50X3N0YXQgPiBuZXh0X3N0YXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW3N0YXRfa2V5XS5hbHBoYSA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRfc3RhdCA8IG5leHRfc3RhdCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW3N0YXRfa2V5XS5hbHBoYSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfZGppbm4oZGppbm4sIG5leHRfZGppbm5pX3N0YXR1cykge1xuICAgICAgICB0aGlzLmRqaW5uID0gZGppbm47XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuc2V0X3N0YXRzKCk7XG4gICAgfVxuXG4gICAgb3BlbihjaGFyKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuZGppbm4gPSBudWxsO1xuICAgICAgICB0aGlzLm5leHRfZGppbm5pX3N0YXR1cyA9IG51bGw7XG4gICAgICAgIHRoaXMuaGlkZV9hcnJvd3MoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5kZXN0cm95KGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0IHsgQ3Vyc29yQ29udHJvbCB9IGZyb20gJy4uLy4uL3V0aWxzL0N1cnNvckNvbnRyb2wnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHsgdXNlX3R5cGVzIH0gZnJvbSBcIi4uLy4uL0l0ZW1cIjtcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IEl0ZW1TbG90LCBNYWluQ2hhciB9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxMjA7XG5jb25zdCBCQVNFX1dJTkRPV19ZID0gNzI7XG5jb25zdCBCQVNFX1dJTkRPV19XSURUSCA9IDExNjtcbmNvbnN0IEJBU0VfV0lORE9XX0hFSUdIVCA9IDg0O1xuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XG5jb25zdCBUT1BfUEFERElORyA9IDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gODtcbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxMDQ7XG5jb25zdCBISUdITElHSFRfQkFSX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfQkFSX1ggPSA4O1xuY29uc3QgQlVUVE9OX1ggPSA5NjtcbmNvbnN0IEJVVFRPTl9ZID0gMTM2O1xuY29uc3QgSVRFTV9OQU1FX1ggPSAyNjtcbmNvbnN0IENVUlNPUl9YID0gMTE2O1xuY29uc3QgQ1VSU09SX1kgPSA4NDtcbmNvbnN0IENVUlNPUl9TSElGVCA9IDE2O1xuY29uc3QgSVRFTV9JQ09OX1ggPSA4O1xuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcblxuZXhwb3J0IGNsYXNzIEl0ZW1XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYnV0dG9uOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBoaWdobGlnaHRfYmFyOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIHNpZ25hbF9iaW5kaW5nczogUGhhc2VyLlNpZ25hbEJpbmRpbmdbXTtcbiAgICBwdWJsaWMgaXRlbV9uYW1lczogVGV4dE9ialtdO1xuICAgIHB1YmxpYyBvdGhlcl9zcHJpdGVzOiAoUGhhc2VyLlNwcml0ZXxQaGFzZXIuR3JvdXB8UGhhc2VyLkJpdG1hcFRleHQpW107XG4gICAgcHVibGljIGN1cnNvcl9jb250cm9sOiBDdXJzb3JDb250cm9sO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgaXRlbV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyOiBudW1iZXI7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc2V0X2Rlc2NyaXB0aW9uOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgY2hvb3Nlbl9hYmlsaXR5OiBzdHJpbmc7XG4gICAgcHVibGljIGl0ZW1fb2JqOiBJdGVtU2xvdDtcbiAgICBwdWJsaWMgaXRlbXM6IEl0ZW1TbG90W107XG4gICAgcHVibGljIGFsbF9pdGVtczogSXRlbVNsb3RbXTtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTkRPV19YLCBCQVNFX1dJTkRPV19ZLCBCQVNFX1dJTkRPV19XSURUSCwgQkFTRV9XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5pbml0X3BhZ2VfaW5kaWNhdG9yX2JhcigpO1xuICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKEJVVFRPTl9YLCBCVVRUT05fWSwgXCJidXR0b25zXCIsIFwiaXRlbVwiKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICAgICAgdGhpcy5pdGVtX25hbWVzID0gW107XG4gICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfcGFnZXMuYmluZCh0aGlzKSwgdGhpcy5nZXRfbWF4X2VsZW1fb25fcGFnZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5ncm91cCwgdGhpcy5jaGFuZ2VfcGFnZS5iaW5kKHRoaXMpLCB0aGlzLmNoYW5nZV9pdGVtLmJpbmQodGhpcyksIHRoaXMuZ2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5zZXRfcGFnZV9pbmRleC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfaXRlbV9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9pdGVtX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfaXRlbS51c2VfdHlwZSAhPT0gdXNlX3R5cGVzLk5PX1VTRSAmJiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzX2l0ZW0udXNlX2FiaWxpdHldLmlzX2JhdHRsZV9hYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gdGhpc19pdGVtLnVzZV9hYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb2JqID0gdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBnZXRfY3Vyc29yX3goKSB7XG4gICAgICAgIHJldHVybiBDVVJTT1JfWDtcbiAgICB9XG5cbiAgICBnZXRfY3Vyc29yX3koKSB7XG4gICAgICAgIHJldHVybiBDVVJTT1JfWSArICh0aGlzLml0ZW1faW5kZXggKiBDVVJTT1JfU0hJRlQpO1xuICAgIH1cblxuICAgIGlzX29wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19vcGVuO1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcbiAgICB9XG5cbiAgICBnZXRfcGFnZV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZV9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfcGFnZV9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBnZXRfaXRlbV9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbV9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfaXRlbV9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLml0ZW1faW5kZXggPSBpbmRleDtcbiAgICB9IFxuXG4gICAgZ2V0X21heF9lbGVtX29uX3BhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXRfbWF4X3BhZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX251bWJlcjtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIGNoYW5nZV9wYWdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgICAgICBpZiAodGhpcy5pdGVtX2luZGV4ID49IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1faW5kZXggPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLnNldF9jdXJzb3JfcG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtc1t0aGlzLml0ZW1faW5kZXhdLmtleV9uYW1lXS5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICB9XG5cbiAgICBjaGFuZ2VfaXRlbShiZWZvcmVfaW5kZXgsIGFmdGVyX2luZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLml0ZW1zW3RoaXMuaXRlbV9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgfVxuXG4gICAgc2V0X2hpZ2hsaWdodF9iYXIoKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci55ID0gVE9QX1BBRERJTkcgKyB0aGlzLml0ZW1faW5kZXggKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcbiAgICB9XG5cbiAgICBjb25maWdfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmFsbF9pdGVtcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLml0ZW1zW2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgY29uc3QgaXRlbV95ID0gYmFzZV95IC0gNDtcbiAgICAgICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElURU1fSUNPTl9YLCBpdGVtX3ksIFwiaXRlbXNfaWNvbnNcIiwgdW5kZWZpbmVkLCB0aGlzLml0ZW1zW2ldLmtleV9uYW1lKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgaXRlbV95ICsgU1VCX0lDT05fWSwgXCJlcXVpcHBlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tpXS5xdWFudGl0eSA+IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsIGl0ZW1feSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtc1tpXS5xdWFudGl0eS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAoaXRlbV9jb3VudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLnB1c2goaXRlbV9jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY29sb3IgPSBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIGlmIChpdGVtLnVzZV90eXBlID09PSB1c2VfdHlwZXMuTk9fVVNFIHx8ICF0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtpdGVtLnVzZV9hYmlsaXR5XS5pc19iYXR0bGVfYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gbnVtYmVycy5ZRUxMT1dfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGl0ZW0ubmFtZSwgSVRFTV9OQU1FX1gsIGJhc2VfeSwgZmFsc2UsIGZhbHNlLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLml0ZW1fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9wYWdlX251bWJlcigpIHtcbiAgICAgICAgY29uc3QgbGlzdF9sZW5ndGggPSB0aGlzLmFsbF9pdGVtcy5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW91bnRfd2luZG93KCkge1xuICAgICAgICB0aGlzLmFsbF9pdGVtcyA9IHRoaXMuY2hhci5pdGVtcztcbiAgICAgICAgdGhpcy5hbGxfaXRlbXMgPSBfLnNvcnRCeSh0aGlzLmFsbF9pdGVtcywgW2l0ZW1fb2JqID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2l0ZW1fb2JqLmtleV9uYW1lXS51c2VfdHlwZSA9PT0gdXNlX3R5cGVzLk5PX1VTRSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2l0ZW1fb2JqLmtleV9uYW1lXS51c2VfYWJpbGl0eV0uaXNfYmF0dGxlX2FiaWxpdHk7XG4gICAgICAgIH1dKTtcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3IodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgIH1cblxuICAgIGNsZWFyX3Nwcml0ZXMoKSB7XG4gICAgICAgIHRoaXMuaXRlbV9uYW1lcy5mb3JFYWNoKHRleHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub3RoZXJfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW4oY2hhciwgY2xvc2VfY2FsbGJhY2ssIHNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uID0gc2V0X2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5pdGVtX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5jaG9vc2VuX2FiaWxpdHkgPSBudWxsO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuaXRlbXNbdGhpcy5pdGVtX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBcbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSwgdGhpcy5pdGVtX29iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuY2hvb3Nlbl9hYmlsaXR5LCB0aGlzLml0ZW1fb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xuICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICB0aGlzLmdyb3VwLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZXN0cm95KCk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sJztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uLy4uL21hZ2ljX251bWJlcnNcIlxuaW1wb3J0IHsgRGppbm4gfSBmcm9tIFwiLi4vLi4vRGppbm5cIjtcbmltcG9ydCB7IFN1bW1vbkRqaW5uU3RhbmRieVdpbmRvdyB9IGZyb20gXCIuL1N1bW1vbkRqaW5uU3RhbmRieVdpbmRvd1wiO1xuaW1wb3J0IHsgTUFYX0NIQVJTX0lOX0JBVFRMRSB9IGZyb20gXCIuLi8uLi9iYXR0bGUvQmF0dGxlXCI7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gXCIuLi8uLi9NYWluQ2hhclwiO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSBcIi4uLy4uL0dvbGRlblN1blwiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IEJBU0VfV0lORE9XX1ggPSAxMDQ7XG5jb25zdCBCQVNFX1dJTkRPV19ZID0gODg7XG5jb25zdCBCQVNFX1dJTkRPV19XSURUSCA9IDEzMjtcbmNvbnN0IEJBU0VfV0lORE9XX0hFSUdIVCA9IDY4O1xuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDQ7XG5jb25zdCBUT1BfUEFERElORyA9IDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gODtcbmNvbnN0IEhJR0hMSUdIVF9CQVJfV0lEVEggPSAxMjA7XG5jb25zdCBISUdITElHSFRfQkFSX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfQkFSX1ggPSA4O1xuY29uc3QgQlVUVE9OX1ggPSA4MDtcbmNvbnN0IEJVVFRPTl9ZID0gMTM2O1xuY29uc3QgU1VNTU9OX05BTUVfWCA9IDI4O1xuY29uc3QgQ1VSU09SX1ggPSA5ODtcbmNvbnN0IENVUlNPUl9ZID0gMTAwO1xuY29uc3QgQ1VSU09SX1NISUZUID0gMTY7XG5jb25zdCBTVU1NT05fSUNPTl9YID0gMTA7XG5cbmV4cG9ydCBjbGFzcyBTdW1tb25XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYnV0dG9uOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBoaWdobGlnaHRfYmFyOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIHNpZ25hbF9iaW5kaW5nczogUGhhc2VyLlNpZ25hbEJpbmRpbmdbXTtcbiAgICBwdWJsaWMgc3VtbW9uX25hbWVzOiBUZXh0T2JqW107XG4gICAgcHVibGljIG90aGVyX3Nwcml0ZXM6IChQaGFzZXIuU3ByaXRlfFBoYXNlci5Hcm91cHxQaGFzZXIuQml0bWFwVGV4dClbXTtcbiAgICBwdWJsaWMgY3Vyc29yX2NvbnRyb2w6IEN1cnNvckNvbnRyb2w7XG4gICAgcHVibGljIGRqaW5uX251bWJlcnNfd2luZG93OiBTdW1tb25EamlublN0YW5kYnlXaW5kb3c7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3dfYWN0aXZlOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIHNldF9kZXNjcmlwdGlvbjogRnVuY3Rpb247XG4gICAgcHVibGljIHN1bW1vbl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBwYWdlX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyOiBudW1iZXI7XG4gICAgcHVibGljIGNob29zZW5fYWJpbGl0eTogc3RyaW5nO1xuICAgIHB1YmxpYyBzdW1tb25zOiBhbnlbXTtcbiAgICBwdWJsaWMgYWxsX3N1bW1vbnM6IGFueVtdO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgZGppbm5pX2FscmVhZHlfdXNlZDoge1tlbGVtZW50OiBzdHJpbmddOiBudW1iZXJ9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9XSU5ET1dfWCwgQkFTRV9XSU5ET1dfWSwgQkFTRV9XSU5ET1dfV0lEVEgsIEJBU0VfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuaW5pdF9wYWdlX2luZGljYXRvcl9iYXIoKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmdyb3VwLmNyZWF0ZShCVVRUT05fWCwgQlVUVE9OX1ksIFwiYnV0dG9uc1wiLCBcInN1bW1vblwiKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2JhciA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X2Jhci5ibGVuZE1vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmFkZF9zcHJpdGVfdG9fZ3JvdXAodGhpcy5oaWdobGlnaHRfYmFyKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmRyYXdSZWN0KEhJR0hMSUdIVF9CQVJfWCwgMCwgSElHSExJR0hUX0JBUl9XSURUSCwgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuZW5kRmlsbCgpO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICAgICAgdGhpcy5zdW1tb25fbmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wgPSBuZXcgQ3Vyc29yQ29udHJvbCh0aGlzLmdhbWUsIHRydWUsIHRydWUsIHRoaXMuZ2V0X21heF9wYWdlcy5iaW5kKHRoaXMpLCB0aGlzLmdldF9tYXhfZWxlbV9vbl9wYWdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB0aGlzLmNoYW5nZV9wYWdlLmJpbmQodGhpcyksIHRoaXMuY2hhbmdlX3N1bW1vbi5iaW5kKHRoaXMpLCB0aGlzLmdldF9wYWdlX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X3BhZ2VfaW5kZXguYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0X3N1bW1vbl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLnNldF9zdW1tb25faW5kZXguYmluZCh0aGlzKSwgdGhpcy5pc19vcGVuLmJpbmQodGhpcyksIHRoaXMuaXNfYWN0aXZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9jdXJzb3JfeC5iaW5kKHRoaXMpLCB0aGlzLmdldF9jdXJzb3JfeS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdyA9IG5ldyBTdW1tb25EamlublN0YW5kYnlXaW5kb3coZ2FtZSk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSxcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNob29zZW5fYWJpbGl0eSA9IHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBnZXRfY3Vyc29yX3goKSB7XG4gICAgICAgIHJldHVybiBDVVJTT1JfWDtcbiAgICB9XG5cbiAgICBnZXRfY3Vyc29yX3koKSB7XG4gICAgICAgIHJldHVybiBDVVJTT1JfWSArICh0aGlzLnN1bW1vbl9pbmRleCAqIENVUlNPUl9TSElGVCk7XG4gICAgfVxuXG4gICAgaXNfb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XG4gICAgfVxuXG4gICAgaXNfYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfYWN0aXZlO1xuICAgIH1cblxuICAgIGdldF9wYWdlX2luZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX2luZGV4O1xuICAgIH1cblxuICAgIHNldF9wYWdlX2luZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIGdldF9zdW1tb25faW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN1bW1vbl9pbmRleDtcbiAgICB9XG5cbiAgICBzZXRfc3VtbW9uX2luZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMuc3VtbW9uX2luZGV4ID0gaW5kZXg7XG4gICAgfSBcblxuICAgIGdldF9tYXhfZWxlbV9vbl9wYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdW1tb25zLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXRfbWF4X3BhZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlX251bWJlcjtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIGNoYW5nZV9wYWdlKGJlZm9yZV9pbmRleCwgYWZ0ZXJfaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgICAgICBpZiAodGhpcy5zdW1tb25faW5kZXggPj0gdGhpcy5zdW1tb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zdW1tb25faW5kZXggPSB0aGlzLnN1bW1vbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuc2V0X2N1cnNvcl9wb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNldF9kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24odGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5rZXlfbmFtZV0uZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3JfaGlnaGxpZ2h0KHRoaXMucGFnZV9udW1iZXIsIHRoaXMucGFnZV9pbmRleCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuc2V0X251bWJlcnModGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5yZXF1aXJlbWVudHMpO1xuICAgIH1cblxuICAgIGNoYW5nZV9zdW1tb24oYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xuICAgICAgICBpZiAodGhpcy5zZXRfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W3RoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ua2V5X25hbWVdLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuc2V0X251bWJlcnModGhpcy5zdW1tb25zW3RoaXMuc3VtbW9uX2luZGV4XS5yZXF1aXJlbWVudHMpO1xuICAgIH1cblxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIueSA9IFRPUF9QQURESU5HICsgdGhpcy5zdW1tb25faW5kZXggKiAoU1BBQ0VfQkVUV0VFTl9JVEVNUyArIEhJR0hMSUdIVF9CQVJfSEVJR0hUKTtcbiAgICB9XG5cbiAgICBjb25maWdfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuc3VtbW9ucyA9IHRoaXMuYWxsX3N1bW1vbnMuc2xpY2UodGhpcy5wYWdlX2luZGV4ICogRUxFTV9QRVJfUEFHRSwgKHRoaXMucGFnZV9pbmRleCArIDEpICogRUxFTV9QRVJfUEFHRSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdW1tb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBhYmlsaXR5ID0gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3RbdGhpcy5zdW1tb25zW2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VfeSA9IFRPUF9QQURESU5HICsgaSAqIChTUEFDRV9CRVRXRUVOX0lURU1TICsgSElHSExJR0hUX0JBUl9IRUlHSFQpO1xuICAgICAgICAgICAgY29uc3Qgc3VtbW9uX3kgPSBiYXNlX3kgLSAzO1xuICAgICAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLnB1c2godGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1VNTU9OX0lDT05fWCwgc3VtbW9uX3ksIFwiYWJpbGl0aWVzX2ljb25zXCIsIHVuZGVmaW5lZCwgdGhpcy5zdW1tb25zW2ldLmtleV9uYW1lKSk7XG4gICAgICAgICAgICBsZXQgY29sb3IgPSBudW1iZXJzLkRFRkFVTFRfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdW1tb25zW2ldLmF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gbnVtYmVycy5SRURfRk9OVF9DT0xPUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKGFiaWxpdHkubmFtZSwgU1VNTU9OX05BTUVfWCwgYmFzZV95LCBmYWxzZSwgZmFsc2UsIGNvbG9yKTtcbiAgICAgICAgICAgIHRoaXMuc3VtbW9uX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfcGFnZV9udW1iZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RfbGVuZ3RoID0gdGhpcy5hbGxfc3VtbW9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW91bnRfd2luZG93KCkge1xuICAgICAgICBjb25zdCBzdGFuZGJ5X2RqaW5uaSA9IERqaW5uLmdldF9zdGFuZGJ5X2RqaW5uaSh0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdCwgTWFpbkNoYXIuZ2V0X2FjdGl2ZV9wbGF5ZXJzKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEsIE1BWF9DSEFSU19JTl9CQVRUTEUpKTtcbiAgICAgICAgZm9yIChsZXQgZWxlbSBpbiBzdGFuZGJ5X2RqaW5uaSkge1xuICAgICAgICAgICAgc3RhbmRieV9kamlubmlbZWxlbV0gLT0gdGhpcy5kamlubmlfYWxyZWFkeV91c2VkW2VsZW1dO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWxsX3N1bW1vbnMgPSBfLm1hcCh0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGIsIHN1bW1vbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGUgPSBfLmV2ZXJ5KHN1bW1vbi5yZXF1aXJlbWVudHMsICh2YWx1ZSwgZWxlbSkgPT4gdmFsdWUgPD0gc3RhbmRieV9kamlubmlbZWxlbV0pO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN1bW1vbiwge1xuICAgICAgICAgICAgICAgIGF2YWlsYWJsZTogYXZhaWxhYmxlLFxuICAgICAgICAgICAgICAgIGluZGV4OiBhdmFpbGFibGUgPyAtc3VtbW9uLmluZGV4IDogc3VtbW9uLmluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWxsX3N1bW1vbnMgPSBfLnNvcnRCeSh0aGlzLmFsbF9zdW1tb25zLCBbc3VtbW9uID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzdW1tb24uaW5kZXg7XG4gICAgICAgIH1dKTtcbiAgICAgICAgdGhpcy5zZXRfcGFnZV9udW1iZXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfcGFnZV9pbmRpY2F0b3IodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICAgICAgdGhpcy5jb25maWdfcGFnZSgpO1xuICAgIH1cblxuICAgIGNsZWFyX3Nwcml0ZXMoKSB7XG4gICAgICAgIHRoaXMuc3VtbW9uX25hbWVzLmZvckVhY2godGV4dCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vdGhlcl9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3BlbihjaGFyLCBjbG9zZV9jYWxsYmFjaywgc2V0X2Rlc2NyaXB0aW9uLCBkamlubmlfYWxyZWFkeV91c2VkKSB7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5zZXRfZGVzY3JpcHRpb24gPSBzZXRfZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZGppbm5pX2FscmVhZHlfdXNlZCA9IGRqaW5uaV9hbHJlYWR5X3VzZWQ7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnN1bW1vbl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9hYmlsaXR5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5vcGVuKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5zZXRfbnVtYmVycyh0aGlzLnN1bW1vbnNbdGhpcy5zdW1tb25faW5kZXhdLnJlcXVpcmVtZW50cyk7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuc2V0X2Rlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFt0aGlzLnN1bW1vbnNbdGhpcy5zdW1tb25faW5kZXhdLmtleV9uYW1lXS5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cub3BlbigpO1xuICAgICAgICB0aGlzLmRqaW5uX251bWJlcnNfd2luZG93LnNldF9udW1iZXJzKHRoaXMuc3VtbW9uc1t0aGlzLnN1bW1vbl9pbmRleF0ucmVxdWlyZW1lbnRzKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBoaWRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9iYXIuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLmNob29zZW5fYWJpbGl0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsZWFyX3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51bnNldF9wYWdlX2luZGljYXRvcigpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfYmFyLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuZGppbm5fbnVtYmVyc193aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX2FiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MuZm9yRWFjaChzaWduYWxfYmluZGluZyA9PiB7XG4gICAgICAgICAgICBzaWduYWxfYmluZGluZy5kZXRhY2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJzX3dpbmRvdy5kZXN0cm95KCk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gXCIuLi8uLi9XaW5kb3dcIjtcbmltcG9ydCB7IG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuY29uc3QgQkFTRV9XSU5fWCA9IDE2MDtcbmNvbnN0IEJBU0VfV0lOX1kgPSA2NDtcbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gNzY7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAyMDtcbmNvbnN0IFNUQVJfTEVGVF9QQURESU5HID0gOTtcbmNvbnN0IFNUQVJfVE9QX1BBRERJTkcgPSA5O1xuY29uc3QgVEVYVF9MRUZUX1BBRERJTkcgPSAyMjtcbmNvbnN0IFRFWFRfVE9QX1BBRERJTkcgPSA4O1xuY29uc3QgU1BBQ0VfQkVUV0VFTl9TVEFSUyA9IDE2O1xuY29uc3QgU1BBQ0VfQkVUV0VFTl9URVhUUyA9IDE2O1xuY29uc3QgSElHSExJR0hUX1dJRFRIID0gMTY7XG5jb25zdCBISUdITElHSFRfSEVJR0hUID0gODtcbmNvbnN0IEhJR0hMSUdIVF9MRUZUX1BBRERJTkcgPSA4O1xuY29uc3QgSElHSExJR0hUX1RPUF9QQURESU5HID0gODtcblxuZXhwb3J0IGNsYXNzIFN1bW1vbkRqaW5uU3RhbmRieVdpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyB0ZXh0czoge1tlbGVtZW50OiBzdHJpbmddOiBUZXh0T2JqfTtcbiAgICBwdWJsaWMgZ3JhcGhpY3M6IHtbZWxlbWVudDogc3RyaW5nXTogUGhhc2VyLkdyYXBoaWNzfTtcbiAgICBwdWJsaWMgdGltZXJzOiB7W2VsZW1lbnQ6IHN0cmluZ106IFBoYXNlci5UaW1lcn07XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLnRleHRzID0ge307XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MgPSB7fTtcbiAgICAgICAgdGhpcy50aW1lcnMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfTEVGVF9QQURESU5HICsgaSAqIFNQQUNFX0JFVFdFRU5fU1RBUlMsIFNUQVJfVE9QX1BBRERJTkcsIGVsZW1lbnQgKyBcIl9zdGFyXCIpO1xuICAgICAgICAgICAgdGhpcy50ZXh0c1tlbGVtZW50XSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgVEVYVF9MRUZUX1BBRERJTkcgKyBpICogU1BBQ0VfQkVUV0VFTl9URVhUUywgVEVYVF9UT1BfUEFERElORywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3NbZWxlbWVudF0uYmVnaW5GaWxsKHRoaXMuYmFzZV93aW5kb3cuY29sb3IsIDEpO1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5kcmF3UmVjdChISUdITElHSFRfTEVGVF9QQURESU5HICsgaSAqIEhJR0hMSUdIVF9XSURUSCwgSElHSExJR0hUX1RPUF9QQURESU5HLCBISUdITElHSFRfV0lEVEgsIEhJR0hMSUdIVF9IRUlHSFQpO1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5lbmRGaWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIGJsaW5rKGVsZW1lbnQsIHNwcml0ZSkge1xuICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdLmxvb3AoMTUwLCAoKSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuYWxwaGEgPSArKCFzcHJpdGUuYWxwaGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aW1lcnNbZWxlbWVudF0uc3RhcnQoKTtcbiAgICB9XG5cbiAgICBzZXRfbnVtYmVycyhyZXF1aXJlbWVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgZWxlbWVudCBpbiByZXF1aXJlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX251bWJlciA9IHJlcXVpcmVtZW50c1tlbGVtZW50XTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGppbm5fbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibGluayhlbGVtZW50LCB0aGlzLmdyYXBoaWNzW2VsZW1lbnRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1tlbGVtZW50XS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KGRqaW5uX251bWJlci50b1N0cmluZygpLCB0aGlzLnRleHRzW2VsZW1lbnRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkX2VsZW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3JkZXJlZF9lbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyc1tlbGVtZW50XSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGltZXJzW2VsZW1lbnRdLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmRlc3Ryb3koZmFsc2UpO1xuICAgICAgICBmb3IgKGxldCBlbGVtZW50IGluIHRoaXMudGltZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lcnNbZWxlbWVudF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyc1tlbGVtZW50XS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSBcIi4uLy4uL1dpbmRvd1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tIFwiLi4vLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHsgZWxlbWVudHMsIG9yZGVyZWRfZWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi8uLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IEl0ZW1TbG90IH0gZnJvbSBcIi4uLy4uL01haW5DaGFyXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMjA7XG5jb25zdCBCQVNFX1dJTl9ZID0gMTM2O1xuY29uc3QgQUJJTElUWV9OQU1FX1kgPSA4O1xuY29uc3QgSUNPTl9YID0gOTtcbmNvbnN0IElDT05fWSA9IDU7XG5cbmNvbnN0IEFCSUxJVFlfTkFNRV9YID0gMjQ7XG5jb25zdCBBQklMSVRZX05BTUVfSVRFTV9YID0gMzI7XG5cbmNvbnN0IEJBU0VfV0lOX1hfQVRLID0gODg7XG5jb25zdCBCQVNFX1dJTl9XSURUSF9BVEsgPSA4NDtcbmNvbnN0IEJBU0VfV0lOX1hfUFNZID0gNjQ7XG5jb25zdCBCQVNFX1dJTl9XSURUSF9QU1kgPSAxNDA7XG5jb25zdCBCQVNFX1dJTl9YX0RKSU5OID0gODg7XG5jb25zdCBCQVNFX1dJTl9XSURUSF9ESklOTiA9IDc2O1xuY29uc3QgQkFTRV9XSU5fWF9TVU1NT04gPSA4MDtcbmNvbnN0IEJBU0VfV0lOX1dJRFRIX1NVTU1PTiA9IDEzMjtcbmNvbnN0IEJBU0VfV0lOX1hfSVRFTSA9IDcyO1xuY29uc3QgQkFTRV9XSU5fV0lEVEhfSVRFTSA9IDEyNDtcbmNvbnN0IEJVVFRPTl9XSURUSCA9IDI0O1xuXG5jb25zdCBTVEFSX1dJRFRIID0gNjtcbmNvbnN0IFNUQVJfWSA9IDk7XG5jb25zdCBTVEFSX1hfUFNZID0gMTI5O1xuY29uc3QgU1RBUl9YX0RKSU5OID0gOTtcbmNvbnN0IFNUQVJfWF9TVU1PT05fMSA9IDk3O1xuY29uc3QgU1RBUl9YX1NVTU9PTl8yID0gMTEzO1xuXG5jb25zdCBQUF9YID0gMTIzO1xuY29uc3QgUFBfWSA9IDg7XG5jb25zdCBQUF9URVhUX1ggPSA5NjtcblxuY29uc3QgU1VCX0lDT05fWCA9IDA7XG5jb25zdCBTVUJfSUNPTl9ZID0gMDtcblxuZXhwb3J0IGNsYXNzIENob29zaW5nVGFyZ2V0V2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHNwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgYWN0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHRleHRzOiBUZXh0T2JqW107XG4gICAgcHVibGljIGVsZW1lbnQ6IHN0cmluZztcbiAgICBwdWJsaWMgYWJpbGl0eV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGFiaWxpdHlfbmFtZV94OiBudW1iZXI7XG4gICAgcHVibGljIHdpbmRvd19zcHJpdGVzOiAoUGhhc2VyLlNwcml0ZXxQaGFzZXIuR3JvdXApW107XG4gICAgcHVibGljIHN0YXJfeDogbnVtYmVyO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZV9zaGVldDogc3RyaW5nO1xuICAgIHB1YmxpYyBhYmlsaXR5X2tleV9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGljb25fZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBxdWFudGl0aWVzOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIDAsIEJBU0VfV0lOX1ksIDAsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIHNldF9idXR0b24oKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuZ3JvdXAuY3JlYXRlKHRoaXMueCAtIEJVVFRPTl9XSURUSCwgQkFTRV9XSU5fWSwgXCJidXR0b25zXCIsIHRoaXMuYWN0aW9uKTtcbiAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goYnV0dG9uKTtcbiAgICB9XG5cbiAgICBzZXRfaW5mbygpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5hYmlsaXR5X25hbWUsIHRoaXMuYWJpbGl0eV9uYW1lX3gsIEFCSUxJVFlfTkFNRV9ZKTtcbiAgICAgICAgdGhpcy50ZXh0cy5wdXNoKG5hbWUpO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudCAhPT0gZWxlbWVudHMuTk9fRUxFTUVOVCAmJiB0aGlzLmFjdGlvbiAhPT0gXCJzdW1tb25cIikge1xuICAgICAgICAgICAgY29uc3Qgc3RhciA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHRoaXMuc3Rhcl94LCBTVEFSX1ksIHRoaXMuZWxlbWVudCArIFwiX3N0YXJcIik7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19zcHJpdGVzLnB1c2goc3Rhcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQgJiYgdGhpcy5hY3Rpb24gIT09IFwiaXRlbVwiKSB7XG4gICAgICAgICAgICBjb25zdCBpY29uID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSUNPTl9YLCBJQ09OX1ksIHRoaXMuaWNvbl9zcHJpdGVfc2hlZXQsIHVuZGVmaW5lZCwgdGhpcy5hYmlsaXR5X2tleV9uYW1lKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMucHVzaChpY29uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09IFwicHN5bmVyZ3lcIikge1xuICAgICAgICAgICAgY29uc3QgcHBfdmFsdWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMucXVhbnRpdGllc1swXS50b1N0cmluZygpLCBQUF9YLCBQUF9ZLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHMucHVzaChwcF92YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBwcF90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlBQXCIsIFBQX1RFWFRfWCwgUFBfWSk7XG4gICAgICAgICAgICB0aGlzLnRleHRzLnB1c2gocHBfdGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3Rpb24gPT09IFwic3VtbW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXMgPSBfLnBpY2tCeSh0aGlzLmRhdGEuZGJzLnN1bW1vbnNfZGJbdGhpcy5hYmlsaXR5X2tleV9uYW1lXS5yZXF1aXJlbWVudHMsIHJlcSA9PiByZXEpO1xuICAgICAgICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgb3JkZXJlZF9lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghKGVsZW1lbnQgaW4gcmVxcykpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFyX3ggPSBjb3VudGVyID09PSAwID8gU1RBUl9YX1NVTU9PTl8xIDogU1RBUl9YX1NVTU9PTl8yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXIgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChzdGFyX3gsIFNUQVJfWSwgZWxlbWVudCArIFwiX3N0YXJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKHN0YXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihyZXFzW2VsZW1lbnRdLnRvU3RyaW5nKCksIHN0YXJfeCArIFNUQVJfV0lEVEggKyAxLCBBQklMSVRZX05BTUVfWSk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0cy5wdXNoKHJlcV90ZXh0KTtcbiAgICAgICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PT0gXCJpdGVtXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgICAgIGxldCBpY29uX3Nwcml0ZSA9IHRoaXMuaWNvbl9ncm91cC5jcmVhdGUoMCwgMCwgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCwgdGhpcy5hYmlsaXR5X2tleV9uYW1lKTtcbiAgICAgICAgICAgIGljb25fc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWNvbl9ncm91cC5jcmVhdGUoU1VCX0lDT05fWCwgU1VCX0lDT05fWSwgXCJlcXVpcHBlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KFNVQl9JQ09OX1gsIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29iai5xdWFudGl0eS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAuYWRkKGl0ZW1fY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaWNvbl9ncm91cCk7XG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAueCA9IElDT05fWCArIChudW1iZXJzLklDT05fV0lEVEggPj4gMSk7XG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAueSA9IElDT05fWSArIChudW1iZXJzLklDT05fSEVJR0hUID4+IDEpO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5wdXNoKHRoaXMuaWNvbl9ncm91cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuKGFjdGlvbiwgYWJpbGl0eV9uYW1lLCBlbGVtZW50LCBhYmlsaXR5X2tleV9uYW1lLCBxdWFudGl0aWVzLCBpdGVtX29iaikge1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy5hYmlsaXR5X25hbWUgPSBhYmlsaXR5X25hbWU7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYWJpbGl0eV9rZXlfbmFtZSA9IGFiaWxpdHlfa2V5X25hbWU7XG4gICAgICAgIHRoaXMucXVhbnRpdGllcyA9IHF1YW50aXRpZXM7XG4gICAgICAgIHN3aXRjaCAodGhpcy5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgXCJhdHRhY2tcIjpcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gQkFTRV9XSU5fV0lEVEhfQVRLO1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1hfQVRLO1xuICAgICAgICAgICAgICAgIHRoaXMuYWJpbGl0eV9uYW1lX3ggPSBBQklMSVRZX05BTUVfWDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9QU1k7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWF9QU1k7XG4gICAgICAgICAgICAgICAgdGhpcy5hYmlsaXR5X25hbWVfeCA9IEFCSUxJVFlfTkFNRV9YO1xuICAgICAgICAgICAgICAgIHRoaXMuc3Rhcl94ID0gU1RBUl9YX1BTWTtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlX3NoZWV0ID0gXCJhYmlsaXRpZXNfaWNvbnNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkamlubmlcIjpcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gQkFTRV9XSU5fV0lEVEhfREpJTk47XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWF9ESklOTjtcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX1g7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyX3ggPSBTVEFSX1hfREpJTk47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3VtbW9uXCI6XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IEJBU0VfV0lOX1dJRFRIX1NVTU1PTjtcbiAgICAgICAgICAgICAgICB0aGlzLnggPSBCQVNFX1dJTl9YX1NVTU1PTjtcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX1g7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uX3Nwcml0ZV9zaGVldCA9IFwiYWJpbGl0aWVzX2ljb25zXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaXRlbVwiOlxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBCQVNFX1dJTl9XSURUSF9JVEVNO1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1hfSVRFTTtcbiAgICAgICAgICAgICAgICB0aGlzLmFiaWxpdHlfbmFtZV94ID0gQUJJTElUWV9OQU1FX0lURU1fWDtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlX3NoZWV0ID0gXCJpdGVtc19pY29uc1wiO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vYmogPSBpdGVtX29iajtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9zaXplKHt3aWR0aDogdGhpcy53aWR0aH0pO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogdGhpcy54fSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMud2luZG93X3Nwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy50ZXh0cyA9IFtdO1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9idXR0b24oKTtcbiAgICAgICAgdGhpcy5zZXRfaW5mbygpO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHNwcml0ZS5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRleHRzLmZvckVhY2godGV4dCA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy53aW5kb3dfc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLnRleHRzID0gW107XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmljb25fZ3JvdXApIHtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9ncm91cC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmljb25fc3ByaXRlX3NoZWV0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuZGVzdHJveShmYWxzZSk7XG4gICAgICAgIHRoaXMuZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5pY29uX2dyb3VwKSB7XG4gICAgICAgICAgICB0aGlzLmljb25fZ3JvdXAuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vIEVuZW15IHRhcmdldCByb2xsaW5nOiBodHRwOi8vZm9ydW0uZ29sZGVuc3VuaGFja2luZy5uZXQvaW5kZXgucGhwP3RvcGljPTI3OTMuMFxuXG5pbXBvcnQgeyBwZXJtYW5lbnRfc3RhdHVzIH0gZnJvbSBcIi4uL1BsYXllclwiO1xuXG5leHBvcnQgY2xhc3MgRW5lbXlBSSB7XG4gICAgc3RhdGljIHJvbGxfYWN0aW9uKGNhc3RlciwgYWxsaWVzLCBlbmVtaWVzKSB7IC8vaGFyZCBjb2RlZCB0byBhdHRhY2sgb25seSB0aGUgZmlyc3QgY2hhciBhbHdheXMuIFdJUFxuICAgICAgICBsZXQgY2hhcl9jaG9zZW4gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleV9uYW1lOiBcImF0dGFja1wiLFxuICAgICAgICAgICAgdGFyZ2V0czogYWxsaWVzLm1hcCgoYWxseSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYXZhaWxhYmxlX3RhcmdldCA9IGFsbHkuaGFzX3Blcm1hbmVudF9zdGF0dXMocGVybWFuZW50X3N0YXR1cy5ET1dORUQpID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1hZ25pdHVkZTogYXZhaWxhYmxlX3RhcmdldCAmJiAhY2hhcl9jaG9zZW4gPyAxIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogYXZhaWxhYmxlX3RhcmdldCAmJiAhY2hhcl9jaG9zZW4gPyBhbGx5IDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImF0dGFja1wiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlX3RhcmdldCAmJiAhY2hhcl9jaG9zZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcl9jaG9zZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0cztcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfVxufSIsIi8vcGxlYXNlIGNoZWNrIGh0dHA6Ly9mb3J1bS5nb2xkZW5zdW5oYWNraW5nLm5ldC9pbmRleC5waHA/dG9waWM9MjQ2MFxuXG5pbXBvcnQgeyBlbGVtZW50cyB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgcGVybWFuZW50X3N0YXR1cyB9IGZyb20gXCIuLi9QbGF5ZXJcIjtcbmltcG9ydCB7IEVMRU1fQVRUUl9NQVgsIEVMRU1fQVRUUl9NSU4gfSBmcm9tIFwiLi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmV4cG9ydCBjb25zdCBDUklUSUNBTF9DSEFOQ0UgPSAxLzMyO1xuXG4vLyAxLzMyIGNoYW5jZSB0byBtaXNzIHdpdGggYSBzdGFuZGFyZCBhdHRhY2ssIG9yIGEgcm91Z2hseSA2NiUgY2hhbmNlIHRvIG1pc3Mgd2l0aCBEZWx1c2lvbi5cbmV4cG9ydCBjb25zdCBFVkFTSU9OX0NIQU5DRSA9IDEvMzI7XG5leHBvcnQgY29uc3QgREVMVVNJT05fTUlTU19DSEFOQ0UgPSA2Ni8xMDA7XG5cbmV4cG9ydCBjbGFzcyBCYXR0bGVGb3JtdWxhcyB7XG4gICAgc3RhdGljIHBsYXllcl90dXJuX3NwZWVkKGFnaWxpdHksIHByaW9yaXR5X21vdmUgPSBmYWxzZSwgbXVsdGlfdHVybiA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAoYWdpbGl0eSArICgoYWdpbGl0eSAqIF8ucmFuZG9tKDAsIDY1NTM1KSkgPj4gMjApKSAqIChtdWx0aV90dXJuID8gMC41IDogMSkgKyAocHJpb3JpdHlfbW92ZSA/IDFlNCA6IDApO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbmVteV90dXJuX3NwZWVkKGFnaWxpdHksIHR1cm5fbnVtYmVyLCB0dXJuX3F1YW50aXR5LCBwcmlvcml0eV9tb3ZlID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgcHJpb3JpdHkgPSBwcmlvcml0eV9tb3ZlID8gMWU0IDogMDtcbiAgICAgICAgaWYgKHR1cm5fbnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYWdpbGl0eSArIHByaW9yaXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0dXJuX3F1YW50aXR5ID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gKGFnaWxpdHkgPj4gMSkgKyBwcmlvcml0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHVybl9xdWFudGl0eSA9PT0gMykge1xuICAgICAgICAgICAgc3dpdGNoICh0dXJuX251bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIGFnaWxpdHkgKiAzLzQgKyBwcmlvcml0eTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0dXJuX3F1YW50aXR5ID09PSA0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR1cm5fbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOiBhZ2lsaXR5ICogNS82ICsgcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiBhZ2lsaXR5ICogNC82ICsgcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYWdpbGl0eSA+PiAxKSArIHByaW9yaXR5O1xuICAgIH1cblxuICAgIHN0YXRpYyBiYXNlX2RhbWFnZShjYXN0ZXIsIHRhcmdldCkge1xuICAgICAgICBjb25zdCByZWxhdGl2ZV9hdGsgPSBjYXN0ZXIuY3VycmVudF9hdGsgLSB0YXJnZXQuY3VycmVudF9kZWY7XG4gICAgICAgIHJldHVybiAocmVsYXRpdmVfYXRrIDwgMCA/IDAgOiByZWxhdGl2ZV9hdGspLzIuMDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3BlY2lhbF9waHlzaWNhbF9hdHRhY2soY2FzdGVyLCB0YXJnZXQsIG11bHRfbW9kLCBhZGRfbW9kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VfZGFtYWdlKGNhc3RlciwgdGFyZ2V0KSAqIG11bHRfbW9kICsgYWRkX21vZDtcbiAgICB9XG5cbiAgICBzdGF0aWMgcG93ZXJfbXVsdGlwbGllcihjYXN0ZXIsIHRhcmdldCwgZWxlbWVudCwgaXNfcHN5bmVyZ3kgPSB0cnVlKSB7XG4gICAgICAgIGxldCBjYXN0ZXJfcG93ZXIgPSAxMDAuMCwgdGFyZ2V0X3Jlc2lzdCA9IDEwMC4wO1xuICAgICAgICBpZiAoZWxlbWVudCAhPT0gZWxlbWVudHMuTk9fRUxFTUVOVCkge1xuICAgICAgICAgICAgY29uc3QgcmVzaXN0X2tleSA9IGVsZW1lbnQgKyBcIl9yZXNpc3RfY3VycmVudFwiO1xuICAgICAgICAgICAgdGFyZ2V0X3Jlc2lzdCA9IHRhcmdldFtyZXNpc3Rfa2V5XTtcbiAgICAgICAgICAgIGlmIChjYXN0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvd2VyX2tleSA9IGVsZW1lbnQgKyBcIl9wb3dlcl9jdXJyZW50XCI7XG4gICAgICAgICAgICAgICAgY2FzdGVyX3Bvd2VyID0gY2FzdGVyW3Bvd2VyX2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVsYXRpdmVfcG93ZXIgPSBfLmNsYW1wKGNhc3Rlcl9wb3dlciAtIHRhcmdldF9yZXNpc3QsIEVMRU1fQVRUUl9NSU4sIEVMRU1fQVRUUl9NQVgpO1xuICAgICAgICByZXR1cm4gMSArIChyZWxhdGl2ZV9wb3dlcikvKGlzX3BzeW5lcmd5ID8gMjAwLjAgOiA0MDAuMCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHBoeXNpY2FsX2F0dGFjayhjYXN0ZXIsIHRhcmdldCwgbXVsdF9tb2QsIGFkZF9tb2QsIGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlY2lhbF9waHlzaWNhbF9hdHRhY2soY2FzdGVyLCB0YXJnZXQsIG11bHRfbW9kLCBhZGRfbW9kKSAqIHRoaXMucG93ZXJfbXVsdGlwbGllcihjYXN0ZXIsIHRhcmdldCwgZWxlbWVudCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwc3luZXJneV9kYW1hZ2UoY2FzdGVyLCB0YXJnZXQsIHBvd2VyLCBlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBwb3dlciArIHRoaXMucG93ZXJfbXVsdGlwbGllcihjYXN0ZXIsIHRhcmdldCwgZWxlbWVudCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGl0ZW1fZGFtYWdlKHRhcmdldCwgcG93ZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvd2VyICsgdGhpcy5wb3dlcl9tdWx0aXBsaWVyKHVuZGVmaW5lZCwgdGFyZ2V0LCBlbGVtZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGVhbF9hYmlsaXR5KGNhc3RlciwgcG93ZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgbGV0IGNhc3Rlcl9wb3dlciA9IDEwMC4wO1xuICAgICAgICBpZiAoZWxlbWVudCAhPT0gZWxlbWVudHMuTk9fRUxFTUVOVCkge1xuICAgICAgICAgICAgY29uc3QgcG93ZXJfa2V5ID0gZWxlbWVudCArIFwiX3Bvd2VyX2N1cnJlbnRcIjtcbiAgICAgICAgICAgIGNhc3Rlcl9wb3dlciA9IGNhc3Rlcltwb3dlcl9rZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3dlciAqIGNhc3Rlcl9wb3dlci8xMDAuMDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3VtbW9uX2RhbWFnZSh0YXJnZXQsIHBvd2VyLCBkamlubmlfdXNlZCkge1xuICAgICAgICByZXR1cm4gcG93ZXIgKyB0YXJnZXQubWF4X2hwICogZGppbm5pX3VzZWQgKiAwLjAzO1xuICAgIH1cblxuICAgIHN0YXRpYyBhaWxtZW50X3N1Y2Nlc3MoY2FzdGVyLCB0YXJnZXQsIGJhc2VfY2hhbmNlLCBtYWduaXR1ZGUsIGVsZW1lbnQsIHZ1bG5lcmFiaXR5KSB7XG4gICAgICAgIGNvbnN0IGxldmVsX2tleSA9IGVsZW1lbnQgKyBcIl9sZXZlbF9jdXJyZW50XCI7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlX2xldmVsID0gY2FzdGVyW2xldmVsX2tleV0gLSB0YXJnZXRbbGV2ZWxfa2V5XTtcbiAgICAgICAgY29uc3QgbHVja19mYWN0b3IgPSB0YXJnZXQuY3VycmVudF9sdWsgPj4gMTtcbiAgICAgICAgdnVsbmVyYWJpdHkgPSB2dWxuZXJhYml0eSA9PT0gdW5kZWZpbmVkID8gMCA6IHZ1bG5lcmFiaXR5O1xuICAgICAgICBjb25zdCBjaGFuY2UgPSAoKHJlbGF0aXZlX2xldmVsIC0gbHVja19mYWN0b3IpICogMykvMTAwICsgYmFzZV9jaGFuY2UgKyB2dWxuZXJhYml0eSAqIG1hZ25pdHVkZTtcbiAgICAgICAgcmV0dXJuIGNoYW5jZSA+PSBNYXRoLnJhbmRvbSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhaWxtZW50X3JlY292ZXJ5KHBsYXllciwgdHVybl9udW1iZXIsIGJhc2VfY2hhbmNlKSB7XG4gICAgICAgIHJldHVybiAoKChwbGF5ZXIuY3VycmVudF9sdWsgKiAzKSAtICh0dXJuX251bWJlciAqIDUpICsgYmFzZV9jaGFuY2UgKiAxMDApICogNjU1KSA+PSBfLnJhbmRvbSgwLCAweEZGRkYpO1xuICAgIH1cblxuICAgIHN0YXRpYyBiYXR0bGVfcG9pc29uX2RhbWFnZShwbGF5ZXIsIHBvaXNvbl90eXBlKSB7XG4gICAgICAgIGxldCBwb2lzb25fZmFjdG9yID0gMDtcbiAgICAgICAgc3dpdGNoIChwb2lzb25fdHlwZSkge1xuICAgICAgICAgICAgY2FzZSBwZXJtYW5lbnRfc3RhdHVzLlBPSVNPTjogcG9pc29uX2ZhY3RvciA9IDE7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBwZXJtYW5lbnRfc3RhdHVzLlZFTk9NOiBwb2lzb25fZmFjdG9yID0gMjsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgocG9pc29uX2ZhY3RvciAqIHBsYXllci5tYXhfaHApLzEwKSB8IDA7XG4gICAgfVxuXG4gICAgc3RhdGljIHN1bW1vbl9wb3dlcihkamlubl9udW1iZXIpIHtcbiAgICAgICAgZGppbm5fbnVtYmVyID0gXy5jbGFtcChkamlubl9udW1iZXIsIDAsIDQpO1xuICAgICAgICByZXR1cm4gKChkamlubl9udW1iZXIgKiBkamlubl9udW1iZXIpICsgZGppbm5fbnVtYmVyKSAqIDU7XG4gICAgfVxufSIsImltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gXCIuLi9Hb2xkZW5TdW5cIjtcbmltcG9ydCB7IEJhdHRsZUFuaW1hdGlvbiB9IGZyb20gXCIuL0JhdHRsZUFuaW1hdGlvblwiO1xuXG5jb25zdCBBTklNQVRJT05TX0JBU0VfUEFUSCA9IFwiYXNzZXRzL2ltYWdlcy9hYmlsaXRpZXNfYW5pbWF0aW9ucy9cIjtcbmNvbnN0IEFOSU1BVElPTlNfREJfUEFUSCA9IFwiYXNzZXRzL2Ricy9hYmlsaXRpZXNfYW5pbWF0aW9ucy9cIjtcbmNvbnN0IEFOSU1BVElPTl9TVUZGSVggPSBcIl9iYXR0bGVfYW5pbWF0aW9uXCI7XG5jb25zdCBSRUNJUEVfU1VGRklYID0gXCJfYmF0dGxlX3JlY2lwZVwiO1xuXG5leHBvcnQgY2xhc3MgQmF0dGxlQW5pbWF0aW9uTWFuYWdlciB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGFuaW1hdGlvbnM6IHtbYmF0dGxlX2FuaW1fa2V5OiBzdHJpbmddOiBCYXR0bGVBbmltYXRpb259O1xuICAgIHB1YmxpYyBub3RfYXZhaWxhYmxlOiBTZXQ8c3RyaW5nPjtcbiAgICBwdWJsaWMgcmVuZGVyX2Z1bmN0aW9uOiBGdW5jdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0ge307XG4gICAgICAgIHRoaXMubm90X2F2YWlsYWJsZSA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJfZnVuY3Rpb24gPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRfYW5pbWF0aW9uKGJhdHRsZV9hbmltX2tleSkge1xuICAgICAgICBpZiAoYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucyB8fCB0aGlzLm5vdF9hdmFpbGFibGUuaGFzKGJhdHRsZV9hbmltX2tleSkgfHwgYmF0dGxlX2FuaW1fa2V5ID09PSBcIm5vX2FuaW1hdGlvblwiKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHNwcml0ZV9rZXkgPSBiYXR0bGVfYW5pbV9rZXkgKyBBTklNQVRJT05fU1VGRklYO1xuICAgICAgICBjb25zdCByZWNpcGVfa2V5ID0gYmF0dGxlX2FuaW1fa2V5ICsgUkVDSVBFX1NVRkZJWDtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2xvYWRlciA9IHRoaXMuZ2FtZS5sb2FkLmF0bGFzSlNPTkhhc2goc3ByaXRlX2tleSwgYCR7QU5JTUFUSU9OU19CQVNFX1BBVEh9JHtiYXR0bGVfYW5pbV9rZXl9LnBuZ2AsIGAke0FOSU1BVElPTlNfQkFTRV9QQVRIfSR7YmF0dGxlX2FuaW1fa2V5fS5qc29uYCk7XG4gICAgICAgIGNvbnN0IHJlY2lwZV9sb2FkZXIgPSB0aGlzLmdhbWUubG9hZC5qc29uKHJlY2lwZV9rZXksIGAke0FOSU1BVElPTlNfREJfUEFUSH0ke2JhdHRsZV9hbmltX2tleX1fZGIuanNvbmApO1xuXG4gICAgICAgIGxldCBhbGxfc3VjY2VlZCA9IHRydWU7XG4gICAgICAgIGxldCBzcHJpdGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2xvYWRlcl9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHNwcml0ZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSB9KTtcbiAgICAgICAgc3ByaXRlX2xvYWRlci5vbkZpbGVDb21wbGV0ZS5hZGRPbmNlKChwcm9ncmVzcywgZmlsZWtleSwgc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgYWxsX3N1Y2NlZWQgPSBhbGxfc3VjY2VlZCAmJiBzdWNjZXNzO1xuICAgICAgICAgICAgc3ByaXRlX2xvYWRlcl9wcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCByZWNpcGVfbG9hZGVyX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgcmVjaXBlX2xvYWRlcl9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlY2lwZV9sb2FkZXJfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSB9KTtcbiAgICAgICAgcmVjaXBlX2xvYWRlci5vbkZpbGVDb21wbGV0ZS5hZGRPbmNlKChwcm9ncmVzcywgZmlsZWtleSwgc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgYWxsX3N1Y2NlZWQgPSBhbGxfc3VjY2VlZCAmJiBzdWNjZXNzO1xuICAgICAgICAgICAgcmVjaXBlX2xvYWRlcl9wcm9taXNlX3Jlc29sdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGxvYWRfY29tcGxldGVfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX2NvbXBsZXRlX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGxvYWRfY29tcGxldGVfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZSk7XG4gICAgICAgIHRoaXMuZ2FtZS5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UobG9hZF9jb21wbGV0ZV9wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICB0aGlzLmdhbWUubG9hZC5zdGFydCgpO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbc3ByaXRlX2xvYWRlcl9wcm9taXNlLCByZWNpcGVfbG9hZGVyX3Byb21pc2UsIGxvYWRfY29tcGxldGVfcHJvbWlzZV0pO1xuICAgICAgICBpZiAoYWxsX3N1Y2NlZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbl9yZWNpcGUgPSB0aGlzLmdhbWUuY2FjaGUuZ2V0SlNPTihiYXR0bGVfYW5pbV9rZXkgKyBSRUNJUEVfU1VGRklYKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldID0gbmV3IEJhdHRsZUFuaW1hdGlvbihcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5rZXlfbmFtZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnNwcml0ZXMsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS54X3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnlfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnhfc2NhbGVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS55X3NjYWxlX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUueF9hbmNob3Jfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS55X2FuY2hvcl9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmFscGhhX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUucm90YXRpb25fc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5zdGFnZV9hbmdsZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmh1ZV9hbmdsZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLnRpbnRfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5ncmF5c2NhbGVfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5jb2xvcml6ZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmN1c3RvbV9maWx0ZXJfc2VxdWVuY2UsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX3JlY2lwZS5wbGF5X3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuc2V0X2ZyYW1lX3NlcXVlbmNlLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9yZWNpcGUuYmxlbmRfbW9kZV9zZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fcmVjaXBlLmlzX3BhcnR5X2FuaW1hdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm90X2F2YWlsYWJsZS5hZGQoYmF0dGxlX2FuaW1fa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFuaW1hdGlvbl9hdmFpbGFibGUoYmF0dGxlX2FuaW1fa2V5KSB7XG4gICAgICAgIHJldHVybiBiYXR0bGVfYW5pbV9rZXkgaW4gdGhpcy5hbmltYXRpb25zO1xuICAgIH1cblxuICAgIGFzeW5jIHBsYXkoYmF0dGxlX2FuaW1fa2V5LCBjYXN0ZXJfc3ByaXRlLCB0YXJnZXRzX3Nwcml0ZXMsIGdyb3VwX2Nhc3RlciwgZ3JvdXBfdGFrZXIsIGJhdHRsZV9zdGFnZSkge1xuICAgICAgICBpZiAoIShiYXR0bGVfYW5pbV9rZXkgaW4gdGhpcy5hbmltYXRpb25zKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzcHJpdGVfa2V5ID0gYmF0dGxlX2FuaW1fa2V5ICsgQU5JTUFUSU9OX1NVRkZJWDtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2JhdHRsZV9hbmltX2tleV0uaW5pdGlhbGl6ZShcbiAgICAgICAgICAgIHNwcml0ZV9rZXksXG4gICAgICAgICAgICBjYXN0ZXJfc3ByaXRlLFxuICAgICAgICAgICAgdGFyZ2V0c19zcHJpdGVzLFxuICAgICAgICAgICAgZ3JvdXBfY2FzdGVyLFxuICAgICAgICAgICAgZ3JvdXBfdGFrZXIsXG4gICAgICAgICAgICBiYXR0bGVfc3RhZ2UuYmF0dGxlX2dyb3VwLFxuICAgICAgICAgICAgYmF0dGxlX3N0YWdlLmNhbWVyYV9hbmdsZSxcbiAgICAgICAgICAgIFtiYXR0bGVfc3RhZ2UuYmF0dGxlX2JnLCBiYXR0bGVfc3RhZ2UuYmF0dGxlX2JnMl1cbiAgICAgICAgKTtcbiAgICAgICAgbGV0IHBsYXlfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBwbGF5X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcGxheV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlIH0pO1xuICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbiA9IHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldLnJlbmRlci5iaW5kKHRoaXMuYW5pbWF0aW9uc1tiYXR0bGVfYW5pbV9rZXldKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zW2JhdHRsZV9hbmltX2tleV0ucGxheShwbGF5X3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IHBsYXlfcHJvbWlzZTtcbiAgICAgICAgdGhpcy5yZW5kZXJfZnVuY3Rpb24gPSBudWxsO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyX2Z1bmN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcl9mdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yIChsZXQgYmF0dGxlX2FuaW1fa2V5IGluIHRoaXMuYW5pbWF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhY2hlLnJlbW92ZVRleHR1cmVBdGxhcyhiYXR0bGVfYW5pbV9rZXkgKyBBTklNQVRJT05fU1VGRklYKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYWNoZS5yZW1vdmVKU09OKGJhdHRsZV9hbmltX2tleSArIFJFQ0lQRV9TVUZGSVgpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCB7IHJhbmdlXzM2MCB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgQ2FtZXJhQW5nbGUsIERFRkFVTFRfUE9TX0FOR0xFIH0gZnJvbSBcIi4vQmF0dGxlU3RhZ2VcIjtcblxudHlwZSBEZWZhdWx0QXR0ciA9IHtcbiAgICBzdGFydF9kZWxheTogbnVtYmVyfG51bWJlcltdLFxuICAgIHRvOiBzdHJpbmd8bnVtYmVyfG51bWJlcltdLFxuICAgIGlzX2Fic29sdXRlOiBib29sZWFuLFxuICAgIHR3ZWVuOiBzdHJpbmcsXG4gICAgZHVyYXRpb246IG51bWJlcixcbiAgICBzcHJpdGVfaW5kZXg/OiBzdHJpbmd8bnVtYmVyfG51bWJlcltdLFxuICAgIHlveW8/OiBib29sZWFuLFxuICAgIHNoaWZ0PzogbnVtYmVyfG51bWJlcltdLFxuICAgIGZvcmNlX3N0YWdlX3VwZGF0ZT86IGJvb2xlYW4sXG4gICAgZGlyZWN0aW9uPzogYm9vbGVhblxufTtcblxuZXhwb3J0IGNsYXNzIEJhdHRsZUFuaW1hdGlvbiB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBzcHJpdGVzX2tleXM6IHtcbiAgICAgICAga2V5X25hbWU6IHN0cmluZyxcbiAgICAgICAgcGVyX3RhcmdldDogYm9vbGVhbixcbiAgICAgICAgcG9zaXRpb246IHN0cmluZyxcbiAgICAgICAgY291bnQ6IG51bWJlcixcbiAgICAgICAgdHJhaWxzOiBib29sZWFuLFxuICAgICAgICB0cmFpbHNfbW9kZTogc3RyaW5nLFxuICAgICAgICB0cmFpbF9mcmFtZV9kaWZmOiBudW1iZXJcbiAgICB9W107XG4gICAgcHVibGljIHhfc2VxdWVuY2U6IERlZmF1bHRBdHRyW107XG4gICAgcHVibGljIHlfc2VxdWVuY2U6IERlZmF1bHRBdHRyW107XG4gICAgcHVibGljIHhfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXTtcbiAgICBwdWJsaWMgeV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdO1xuICAgIHB1YmxpYyB4X3NjYWxlX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdO1xuICAgIHB1YmxpYyB5X3NjYWxlX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdO1xuICAgIHB1YmxpYyB4X2FuY2hvcl9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXTtcbiAgICBwdWJsaWMgeV9hbmNob3Jfc2VxdWVuY2U6IERlZmF1bHRBdHRyW107XG4gICAgcHVibGljIGFscGhhX3NlcXVlbmNlOiBEZWZhdWx0QXR0cltdO1xuICAgIHB1YmxpYyByb3RhdGlvbl9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXTtcbiAgICBwdWJsaWMgc3RhZ2VfYW5nbGVfc2VxdWVuY2U6IERlZmF1bHRBdHRyW107XG4gICAgcHVibGljIGh1ZV9hbmdsZV9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXTtcbiAgICBwdWJsaWMgdGludF9zZXF1ZW5jZToge1xuICAgICAgICBzdGFydF9kZWxheTogbnVtYmVyfG51bWJlcltdLFxuICAgICAgICBzcHJpdGVfaW5kZXg6IHN0cmluZ3xudW1iZXJ8bnVtYmVyW10sXG4gICAgICAgIHZhbHVlOiBbcjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlcl1cbiAgICB9W107XG4gICAgcHVibGljIGdyYXlzY2FsZV9zZXF1ZW5jZTogRGVmYXVsdEF0dHJbXTtcbiAgICBwdWJsaWMgY29sb3JpemVfc2VxdWVuY2U6IHtcbiAgICAgICAgc3RhcnRfZGVsYXk6IG51bWJlcnxudW1iZXJbXSxcbiAgICAgICAgc3ByaXRlX2luZGV4OiBzdHJpbmd8bnVtYmVyfG51bWJlcltdLFxuICAgICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgICBjb2xvcml6ZV9pbnRlbnNpdHk6IG51bWJlcixcbiAgICB9W107XG4gICAgcHVibGljIGN1c3RvbV9maWx0ZXJfc2VxdWVuY2U6IHtcbiAgICAgICAgc3RhcnRfZGVsYXk6IG51bWJlcnxudW1iZXJbXSwgXG4gICAgICAgIHNwcml0ZV9pbmRleDogc3RyaW5nfG51bWJlcnxudW1iZXJbXSxcbiAgICAgICAgZmlsdGVyOiBzdHJpbmcsIFxuICAgICAgICB2YWx1ZTogYW55XG4gICAgfVtdO1xuICAgIHB1YmxpYyBwbGF5X3NlcXVlbmNlOiB7XG4gICAgICAgIHN0YXJ0X2RlbGF5OiBudW1iZXJ8bnVtYmVyW10sXG4gICAgICAgIHNwcml0ZV9pbmRleDogc3RyaW5nfG51bWJlcnxudW1iZXJbXSxcbiAgICAgICAgcmV2ZXJzZTogYm9vbGVhbixcbiAgICAgICAgZnJhbWVfcmF0ZTogbnVtYmVyLFxuICAgICAgICByZXBlYXQ6IGJvb2xlYW4sXG4gICAgICAgIGFuaW1hdGlvbl9rZXk6IHN0cmluZyxcbiAgICAgICAgd2FpdDogYm9vbGVhbixcbiAgICAgICAgaGlkZV9vbl9jb21wbGV0ZTogYm9vbGVhblxuICAgIH1bXTtcbiAgICBwdWJsaWMgc2V0X2ZyYW1lX3NlcXVlbmNlOiBhbnk7XG4gICAgcHVibGljIGJsZW5kX21vZGVfc2VxdWVuY2U6IHtcbiAgICAgICAgc3RhcnRfZGVsYXk6IG51bWJlcnxudW1iZXJbXSxcbiAgICAgICAgc3ByaXRlX2luZGV4OiBzdHJpbmd8bnVtYmVyfG51bWJlcltdLFxuICAgICAgICBtb2RlOiBzdHJpbmdcbiAgICB9W107XG4gICAgcHVibGljIGlzX3BhcnR5X2FuaW1hdGlvbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgcnVubmluZzogYm9vbGVhbjtcbiAgICBwdWJsaWMgc3ByaXRlczogUGhhc2VyLlNwcml0ZVtdO1xuICAgIHB1YmxpYyBzcHJpdGVzX3ByZXZfcHJvcGVydGllczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiB7XG4gICAgICAgICAgICBbcHJvcGVydHk6IHN0cmluZ106IGFueVxuICAgICAgICB9XG4gICAgfTtcbiAgICBwdWJsaWMgc3RhZ2VfcHJldl92YWx1ZTogbnVtYmVyO1xuICAgIHB1YmxpYyB4MDogbnVtYmVyO1xuICAgIHB1YmxpYyB5MDogbnVtYmVyO1xuICAgIHB1YmxpYyBjYXN0ZXJfc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyB0YXJnZXRzX3Nwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgYmFja2dyb3VuZF9zcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGdyb3VwX2Nhc3RlcjogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBncm91cF9lbmVteTogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzdXBlcl9ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBzdGFnZV9jYW1lcmE6IENhbWVyYUFuZ2xlO1xuICAgIHB1YmxpYyB0cmFpbHNfb2JqczogKFBoYXNlci5SZW5kZXJUZXh0dXJlfFBoYXNlci5TcHJpdGUpW107XG4gICAgcHVibGljIGNhc3Rlcl9maWx0ZXI6IGFueTtcbiAgICBwdWJsaWMgdGFyZ2V0c19maWx0ZXI6IGFueTtcbiAgICBwdWJsaWMgYmFja2dyb3VuZF9maWx0ZXI6IGFueTtcbiAgICBwdWJsaWMgc3ByaXRlc19maWx0ZXJzOiBhbnlbXTtcbiAgICBwdWJsaWMgcHJvbWlzZXM6IFByb21pc2U8YW55PltdO1xuXG4gICAgLy90d2VlbiB0eXBlIGNhbiBiZSAnaW5pdGlhbCcgZm9yIGZpcnN0IHBvc2l0aW9uXG4gICAgLy9zcHJpdGVfaW5kZXg6IFwidGFyZ2V0c1wiIGlzIHRoZSB0YXJnZXQsIFwiY2FzdGVyXCIgaXMgdGhlIGNhc3RlciwgXCJiYWNrZ3JvdW5kXCIgaXMgdGhlIGJhY2tncm91bmQgc3ByaXRlLCAwLi4ubiBpcyB0aGUgc3ByaXRlc19rZXlfbmFtZXMgaW5kZXhcbiAgICAvL3Byb3BlcnR5IFwidG9cIiB2YWx1ZSBjYW4gYmUgXCJ0YXJnZXRcIiBvciBhbiBhY3R1YWwgdmFsdWUuIEluIHRoZSBjYXNlIG9mIFwidGFyZ2V0XCIgaXMgdGhlIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlLiBJbiB0aGUgY2FzZSBvZiB1c2luZyBcInRhcmdldFwiLCBhIFwic2hpZnRcIiBwcm9wZXJ0eSBpcyBhdmFpbGFibGUgdG8gYmUgYWRkZWQgdG8gdGhlIHJlc3VsdGluZyB2YWx1ZVxuICAgIC8vdmFsdWVzIGluIHJhZCBjYW4gaGF2ZSBcImRpcmVjdGlvblwiIHNldCB0byBcImNsb2Nrd2lzZVwiLCBcImNvdW50ZXJfY2xvY2t3aXNlXCIgb3IgXCJjbG9zZXN0XCIgaWYgXCJhYnNvbHV0ZVwiIGlzIHRydWVcbiAgICAvL2luIHNwcml0ZV9rZXlzLCBwb3NpdGlvbiBjYW4gYmU6IFwiYmV0d2VlblwiLCBcIm92ZXJcIiBvciBcImJlaGluZFwiXG4gICAgLy9cImR1cmF0aW9uXCIgc2V0IHRvIFwiaW5zdGFudGx5XCIgbXVzdCBoYXZlIHRoZSBcInN0YXJ0X2RlbGF5XCIgdmFsdWUgc2V0IGFzIGFic29sdXRlXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGdhbWUsXG4gICAgICAgIGtleV9uYW1lLFxuICAgICAgICBzcHJpdGVzX2tleXMsIC8ve2tleV9uYW1lOiBzdHJpbmcsIHBlcl90YXJnZXQ6IGJvb2wsIHBvc2l0aW9uOiB2YWx1ZX1cbiAgICAgICAgeF9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHlfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxuICAgICAgICB4X2VsbGlwc2VfYXhpc19mYWN0b3Jfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgZm9yY2Vfc3RhZ2VfdXBkYXRlOiBib29sLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHlfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBmb3JjZV9zdGFnZV91cGRhdGU6IGJvb2wsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgeF9zY2FsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHlfc2NhbGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxuICAgICAgICB4X2FuY2hvcl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHlfYW5jaG9yX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCB5b3lvOiBib29sLCBkdXJhdGlvbjogdmFsdWUsIHNoaWZ0OiB2YWx1ZX1cbiAgICAgICAgYWxwaGFfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdG86IHZhbHVlLCBpc19hYnNvbHV0ZTogYm9vbCwgdHdlZW46IHR5cGUsIHlveW86IGJvb2wsIGR1cmF0aW9uOiB2YWx1ZSwgc2hpZnQ6IHZhbHVlfVxuICAgICAgICByb3RhdGlvbl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBkaXJlY3Rpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHN0YWdlX2FuZ2xlX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHRvOiB2YWx1ZSwgaXNfYWJzb2x1dGU6IGJvb2wsIHR3ZWVuOiB0eXBlLCBkdXJhdGlvbjogdmFsdWUsIGRpcmVjdGlvbjogdmFsdWV9XG4gICAgICAgIGh1ZV9hbmdsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBkaXJlY3Rpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIHRpbnRfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgc3ByaXRlX2luZGV4OiBpbmRleCwgdmFsdWU6ICVyZ2IgYXJyYXl9XG4gICAgICAgIGdyYXlzY2FsZV9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCB0bzogdmFsdWUsIGlzX2Fic29sdXRlOiBib29sLCB0d2VlbjogdHlwZSwgeW95bzogYm9vbCwgZHVyYXRpb246IHZhbHVlLCBzaGlmdDogdmFsdWV9XG4gICAgICAgIGNvbG9yaXplX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHZhbHVlOiB2YWx1ZSwgY29sb3JpemVfaW50ZW5zaXR5OiB2YWx1ZX1cbiAgICAgICAgY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZSwgLy97c3RhcnRfZGVsYXk6IHZhbHVlLCBzcHJpdGVfaW5kZXg6IGluZGV4LCBmaWx0ZXI6IGtleSwgdmFsdWU6IHZhbHVlfVxuICAgICAgICBwbGF5X3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIHNwcml0ZV9pbmRleDogaW5kZXgsIHJldmVyc2U6IGJvb2wsIGZyYW1lX3JhdGU6IHZhbHVlLCByZXBlYXQ6IGJvb2wsIGFuaW1hdGlvbl9rZXk6IGtleSwgd2FpdDogYm9vbCwgaGlkZV9vbl9jb21wbGV0ZTogYm9vbH1cbiAgICAgICAgc2V0X2ZyYW1lX3NlcXVlbmNlLCAvL3tzdGFydF9kZWxheTogdmFsdWUsIGZyYW1lOiBzdHJpbmcsIHNwcml0ZV9pbmRleDogaW5kZXh9XG4gICAgICAgIGJsZW5kX21vZGVfc2VxdWVuY2UsIC8ve3N0YXJ0X2RlbGF5OiB2YWx1ZSwgbW9kZTogdHlwZSwgc3ByaXRlX2luZGV4OiBpbmRleH1cbiAgICAgICAgaXNfcGFydHlfYW5pbWF0aW9uXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMua2V5X25hbWUgPSBrZXlfbmFtZTtcbiAgICAgICAgdGhpcy5zcHJpdGVzX2tleXMgPSBzcHJpdGVzX2tleXM7XG4gICAgICAgIHRoaXMueF9zZXF1ZW5jZSA9IHhfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMueV9zZXF1ZW5jZSA9IHlfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMueF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlID0geF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnlfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZSA9IHlfZWxsaXBzZV9heGlzX2ZhY3Rvcl9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy54X3NjYWxlX3NlcXVlbmNlID0geF9zY2FsZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy55X3NjYWxlX3NlcXVlbmNlID0geV9zY2FsZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy54X2FuY2hvcl9zZXF1ZW5jZSA9IHhfYW5jaG9yX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnlfYW5jaG9yX3NlcXVlbmNlID0geV9hbmNob3Jfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMuYWxwaGFfc2VxdWVuY2UgPSBhbHBoYV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbl9zZXF1ZW5jZSA9IHJvdGF0aW9uX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnN0YWdlX2FuZ2xlX3NlcXVlbmNlID0gc3RhZ2VfYW5nbGVfc2VxdWVuY2U7XG4gICAgICAgIHRoaXMuaHVlX2FuZ2xlX3NlcXVlbmNlID0gaHVlX2FuZ2xlX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnRpbnRfc2VxdWVuY2UgPSB0aW50X3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmdyYXlzY2FsZV9zZXF1ZW5jZSA9IGdyYXlzY2FsZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5jb2xvcml6ZV9zZXF1ZW5jZSA9IGNvbG9yaXplX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLmN1c3RvbV9maWx0ZXJfc2VxdWVuY2UgPSBjdXN0b21fZmlsdGVyX3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnBsYXlfc2VxdWVuY2UgPSBwbGF5X3NlcXVlbmNlO1xuICAgICAgICB0aGlzLnNldF9mcmFtZV9zZXF1ZW5jZSA9IHNldF9mcmFtZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5ibGVuZF9tb2RlX3NlcXVlbmNlID0gYmxlbmRfbW9kZV9zZXF1ZW5jZTtcbiAgICAgICAgdGhpcy5pc19wYXJ0eV9hbmltYXRpb24gPSBpc19wYXJ0eV9hbmltYXRpb247XG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGluaXRpYWxpemUoc3ByaXRlX2tleSwgY2FzdGVyX3Nwcml0ZSwgdGFyZ2V0c19zcHJpdGVzLCBncm91cF9jYXN0ZXIsIGdyb3VwX2VuZW15LCBzdXBlcl9ncm91cCwgc3RhZ2VfY2FtZXJhLCBiYWNrZ3JvdW5kX3Nwcml0ZXMpIHtcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5zdGFnZV9wcmV2X3ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLngwID0gdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLnkwID0gdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUgPSBjYXN0ZXJfc3ByaXRlO1xuICAgICAgICB0aGlzLnRhcmdldHNfc3ByaXRlcyA9IHRhcmdldHNfc3ByaXRlcztcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX3Nwcml0ZXMgPSBiYWNrZ3JvdW5kX3Nwcml0ZXM7XG4gICAgICAgIHRoaXMuZ3JvdXBfY2FzdGVyID0gZ3JvdXBfY2FzdGVyO1xuICAgICAgICB0aGlzLmdyb3VwX2VuZW15ID0gZ3JvdXBfZW5lbXk7XG4gICAgICAgIHRoaXMuc3VwZXJfZ3JvdXAgPSBzdXBlcl9ncm91cDtcbiAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEgPSBzdGFnZV9jYW1lcmE7XG4gICAgICAgIHRoaXMudHJhaWxzX29ianMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNwcml0ZXNfa2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc3ByaXRlX2luZm8gPSB0aGlzLnNwcml0ZXNfa2V5c1tpXTtcbiAgICAgICAgICAgIGxldCB0cmFpbHNfaW5mbztcbiAgICAgICAgICAgIGlmIChzcHJpdGVfaW5mby50cmFpbHMpIHtcbiAgICAgICAgICAgICAgICB0cmFpbHNfaW5mbyA9IHRoaXMuaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyhzcHJpdGVfaW5mby50cmFpbF9mcmFtZV9kaWZmLCBzcHJpdGVfaW5mby50cmFpbHNfbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNwcml0ZV9pbmZvLnBlcl90YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IHNwcml0ZV9pbmZvLmNvdW50ID8gc3ByaXRlX2luZm8uY291bnQgOiAxO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY291bnQ7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwc3lfc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy54MCwgdGhpcy55MCwgc3ByaXRlX2tleSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYWNrX2dyb3VwLCBmcm9udF9ncm91cDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1cGVyX2dyb3VwLmdldENoaWxkSW5kZXgoZ3JvdXBfY2FzdGVyKSA8IHN1cGVyX2dyb3VwLmdldENoaWxkSW5kZXgoZ3JvdXBfZW5lbXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrX2dyb3VwID0gZ3JvdXBfY2FzdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRfZ3JvdXAgPSBncm91cF9lbmVteTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tfZ3JvdXAgPSBncm91cF9lbmVteTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb250X2dyb3VwID0gZ3JvdXBfY2FzdGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcHJpdGVfaW5mby5wb3NpdGlvbiA9PT0gXCJvdmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkKHBzeV9zcHJpdGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwcml0ZV9pbmZvLnBvc2l0aW9uID09PSBcImJldHdlZW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJfZ3JvdXAuYWRkQ2hpbGRBdChwc3lfc3ByaXRlLCBzdXBlcl9ncm91cC5nZXRDaGlsZEluZGV4KGZyb250X2dyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ByaXRlX2luZm8ucG9zaXRpb24gPT09IFwiYmVoaW5kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyX2dyb3VwLmFkZENoaWxkQXQocHN5X3Nwcml0ZSwgc3VwZXJfZ3JvdXAuZ2V0Q2hpbGRJbmRleChiYWNrX2dyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVzID0gUGhhc2VyLkFuaW1hdGlvbi5nZW5lcmF0ZUZyYW1lTmFtZXMoc3ByaXRlX2luZm8ua2V5X25hbWUgKyAnLycsIDEsIHBzeV9zcHJpdGUuYW5pbWF0aW9ucy5mcmFtZVRvdGFsLCAnJywgMyk7XG4gICAgICAgICAgICAgICAgICAgIHBzeV9zcHJpdGUuYW5pbWF0aW9ucy5hZGQoc3ByaXRlX2luZm8ua2V5X25hbWUsIGZyYW1lcyk7XG4gICAgICAgICAgICAgICAgICAgIHBzeV9zcHJpdGUuYW5pbWF0aW9ucy5mcmFtZU5hbWUgPSBmcmFtZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHBzeV9zcHJpdGUuZGF0YS5iYXR0bGVfaW5kZXggPSB0aGlzLnNwcml0ZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmRhdGEudHJhaWxzID0gc3ByaXRlX2luZm8udHJhaWxzO1xuICAgICAgICAgICAgICAgICAgICBwc3lfc3ByaXRlLmRhdGEudHJhaWxzX2luZm8gPSB0cmFpbHNfaW5mbztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwcml0ZV9pbmZvLnRyYWlscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5kYXRhLnhfaGlzdG9yeSA9IG5ldyBBcnJheSh0cmFpbHNfaW5mby5mcmFtZV9kaWZmICsgMSkuZmlsbChwc3lfc3ByaXRlLnggLSB0aGlzLmdhbWUuY2FtZXJhLngpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHN5X3Nwcml0ZS5kYXRhLnlfaGlzdG9yeSA9IG5ldyBBcnJheSh0cmFpbHNfaW5mby5mcmFtZV9kaWZmICsgMSkuZmlsbChwc3lfc3ByaXRlLnkgLSB0aGlzLmdhbWUuY2FtZXJhLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHBzeV9zcHJpdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9maWx0ZXJzKCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZV90cmFpbF90ZXh0dXJlcyhmcmFtZV9kaWZmLCBibGVuZF9tb2RlKSB7XG4gICAgICAgIHN3aXRjaCAoYmxlbmRfbW9kZSkge1xuICAgICAgICAgICAgY2FzZSBcInNjcmVlblwiOlxuICAgICAgICAgICAgICAgIGJsZW5kX21vZGUgPSBQSVhJLmJsZW5kTW9kZXMuU0NSRUVOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm5vcm1hbFwiOlxuICAgICAgICAgICAgICAgIGJsZW5kX21vZGUgPSBQSVhJLmJsZW5kTW9kZXMuTk9STUFMO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWlsX3RleHR1cmUgPSB0aGlzLmdhbWUuYWRkLnJlbmRlclRleHR1cmUobnVtYmVycy5HQU1FX1dJRFRILCBudW1iZXJzLkdBTUVfSEVJR0hUKTtcbiAgICAgICAgbGV0IHRyYWlsX3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMuZ2FtZS5jYW1lcmEueCwgdGhpcy5nYW1lLmNhbWVyYS55LCB0cmFpbF90ZXh0dXJlKTtcbiAgICAgICAgdHJhaWxfc3ByaXRlLmJsZW5kTW9kZSA9IGJsZW5kX21vZGU7XG4gICAgICAgIHRyYWlsX3Nwcml0ZS5hbHBoYSA9IDAuNjtcbiAgICAgICAgY29uc3QgdHJhaWxfdGV4dHVyZV8yID0gdGhpcy5nYW1lLmFkZC5yZW5kZXJUZXh0dXJlKG51bWJlcnMuR0FNRV9XSURUSCwgbnVtYmVycy5HQU1FX0hFSUdIVCk7XG4gICAgICAgIGxldCB0cmFpbF9zcHJpdGVfMiA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMuZ2FtZS5jYW1lcmEueCwgdGhpcy5nYW1lLmNhbWVyYS55LCB0cmFpbF90ZXh0dXJlXzIpO1xuICAgICAgICB0cmFpbF9zcHJpdGVfMi5ibGVuZE1vZGUgPSBibGVuZF9tb2RlO1xuICAgICAgICB0cmFpbF9zcHJpdGVfMi5hbHBoYSA9IDAuNDtcbiAgICAgICAgdGhpcy50cmFpbHNfb2JqcyA9IHRoaXMudHJhaWxzX29ianMuY29uY2F0KHRyYWlsX3RleHR1cmUsIHRyYWlsX3RleHR1cmVfMiwgdHJhaWxfc3ByaXRlLCB0cmFpbF9zcHJpdGVfMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0dXJlXzE6IHRyYWlsX3RleHR1cmUsXG4gICAgICAgICAgICB0ZXh0dXJlXzI6IHRyYWlsX3RleHR1cmVfMixcbiAgICAgICAgICAgIGZyYW1lX2RpZmY6IGZyYW1lX2RpZmZcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRfZmlsdGVycygpIHtcbiAgICAgICAgdGhpcy5jYXN0ZXJfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpO1xuICAgICAgICB0aGlzLnRhcmdldHNfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRfZmlsdGVyID0gdGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpO1xuICAgICAgICB0aGlzLnNwcml0ZXNfZmlsdGVycyA9IFtdO1xuICAgICAgICB0aGlzLmNhc3Rlcl9zcHJpdGUuZmlsdGVycyA9IFt0aGlzLmNhc3Rlcl9maWx0ZXJdO1xuICAgICAgICB0aGlzLnRhcmdldHNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICBzcHJpdGUuZmlsdGVycyA9IFt0aGlzLnRhcmdldHNfZmlsdGVyXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzID0gW3RoaXMuYmFja2dyb3VuZF9maWx0ZXJdO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goKHNwcml0ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlc19maWx0ZXJzLnB1c2godGhpcy5nYW1lLmFkZC5maWx0ZXIoJ0NvbG9yRmlsdGVycycpKTtcbiAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzID0gW3RoaXMuc3ByaXRlc19maWx0ZXJzW2luZGV4XV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHBsYXkoZmluaXNoX2NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMucHJvbWlzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLnhfc2VxdWVuY2UsICd4Jyk7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy55X3NlcXVlbmNlLCAneScpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCAnZWxsaXBzZXNfc2VtaV9tYWpvcicpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueV9lbGxpcHNlX2F4aXNfZmFjdG9yX3NlcXVlbmNlLCAnZWxsaXBzZXNfc2VtaV9taW5vcicpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMuYWxwaGFfc2VxdWVuY2UsICdhbHBoYScpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMucm90YXRpb25fc2VxdWVuY2UsICdyb3RhdGlvbicpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMueF9zY2FsZV9zZXF1ZW5jZSwgJ3gnLCAnc2NhbGUnKTtcbiAgICAgICAgdGhpcy5wbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZSh0aGlzLnlfc2NhbGVfc2VxdWVuY2UsICd5JywgJ3NjYWxlJyk7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy54X2FuY2hvcl9zZXF1ZW5jZSwgJ3gnLCAnYW5jaG9yJyk7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy55X2FuY2hvcl9zZXF1ZW5jZSwgJ3knLCAnYW5jaG9yJyk7XG4gICAgICAgIHRoaXMucGxheV9udW1iZXJfcHJvcGVydHlfc2VxdWVuY2UodGhpcy5odWVfYW5nbGVfc2VxdWVuY2UsICdodWVfYWRqdXN0JywgJ2ZpbHRlcicpO1xuICAgICAgICB0aGlzLnBsYXlfbnVtYmVyX3Byb3BlcnR5X3NlcXVlbmNlKHRoaXMuZ3JheXNjYWxlX3NlcXVlbmNlLCAnZ3JheScsICdmaWx0ZXInKTtcbiAgICAgICAgdGhpcy5wbGF5X3Nwcml0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICB0aGlzLnBsYXlfYmxlbmRfbW9kZXMoKTtcbiAgICAgICAgdGhpcy5wbGF5X2ZpbHRlcl9wcm9wZXJ0eSh0aGlzLnRpbnRfc2VxdWVuY2UsICd0aW50Jyk7XG4gICAgICAgIHRoaXMucGxheV9maWx0ZXJfcHJvcGVydHkodGhpcy5jb2xvcml6ZV9zZXF1ZW5jZSwgJ2NvbG9yaXplJywgJ2NvbG9yaXplX2ludGVuc2l0eScpO1xuICAgICAgICB0aGlzLnBsYXlfZmlsdGVyX3Byb3BlcnR5KHRoaXMuY3VzdG9tX2ZpbHRlcl9zZXF1ZW5jZSk7XG4gICAgICAgIHRoaXMucGxheV9zdGFnZV9hbmdsZV9zZXF1ZW5jZSgpO1xuICAgICAgICB0aGlzLnVubW91bnRfYW5pbWF0aW9uKGZpbmlzaF9jYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdW5tb3VudF9hbmltYXRpb24oZmluaXNoX2NhbGxiYWNrKSB7XG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMucHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYXN0ZXJfZmlsdGVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0c19maWx0ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kX2ZpbHRlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZXNfZmlsdGVycyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jYXN0ZXJfc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnRhcmdldHNfc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZF9zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnRyYWlsc19vYmpzLmZvckVhY2gob2JqID0+IHtcbiAgICAgICAgICAgICAgICBvYmouZGVzdHJveSh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZmluaXNoX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmaW5pc2hfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0X3Nwcml0ZXMoc2VxLCBpbm5lcl9wcm9wZXJ0eT8pIHtcbiAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5KSB7XG4gICAgICAgICAgICBpZiAoc2VxLnNwcml0ZV9pbmRleCA9PT0gXCJiYWNrZ3JvdW5kXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXJfcHJvcGVydHkgPT09IFwiZmlsdGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmJhY2tncm91bmRfZmlsdGVyXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYWNrZ3JvdW5kX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4gc3ByaXRlW2lubmVyX3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXEuc3ByaXRlX2luZGV4ID09PSBcImNhc3RlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyX3Byb3BlcnR5ID09PSBcImZpbHRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5jYXN0ZXJfZmlsdGVyXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuY2FzdGVyX3Nwcml0ZVtpbm5lcl9wcm9wZXJ0eV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VxLnNwcml0ZV9pbmRleCA9PT0gXCJ0YXJnZXRzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXJfcHJvcGVydHkgPT09IFwiZmlsdGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnRhcmdldHNfZmlsdGVyXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRzX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4gc3ByaXRlW2lubmVyX3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXJfcHJvcGVydHkgPT09IFwiZmlsdGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VxLnNwcml0ZV9pbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXEuc3ByaXRlX2luZGV4Lm1hcChpbmRleCA9PiB0aGlzLnNwcml0ZXNfZmlsdGVyc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnNwcml0ZXNfZmlsdGVyc1tzZXEuc3ByaXRlX2luZGV4XV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXEuc3ByaXRlX2luZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcS5zcHJpdGVfaW5kZXgubWFwKGluZGV4ID0+IHRoaXMuc3ByaXRlc1tpbmRleF1baW5uZXJfcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdGhpcy5zcHJpdGVzW3NlcS5zcHJpdGVfaW5kZXhdW2lubmVyX3Byb3BlcnR5XV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VxLnNwcml0ZV9pbmRleCA9PT0gXCJiYWNrZ3JvdW5kXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYWNrZ3JvdW5kX3Nwcml0ZXM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwiY2FzdGVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuY2FzdGVyX3Nwcml0ZV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcS5zcHJpdGVfaW5kZXggPT09IFwidGFyZ2V0c1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0c19zcHJpdGVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlcS5zcHJpdGVfaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcS5zcHJpdGVfaW5kZXgubWFwKGluZGV4ID0+IHRoaXMuc3ByaXRlc1tpbmRleF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuc3ByaXRlc1tzZXEuc3ByaXRlX2luZGV4XV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGF5X251bWJlcl9wcm9wZXJ0eV9zZXF1ZW5jZShzZXF1ZW5jZSwgdGFyZ2V0X3Byb3BlcnR5LCBpbm5lcl9wcm9wZXJ0eT8pIHtcbiAgICAgICAgbGV0IGNoYWluZWRfdHdlZW5zID0ge307XG4gICAgICAgIGxldCBhdXRvX3N0YXJ0X3R3ZWVuID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VxdWVuY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcSA9IHNlcXVlbmNlW2ldO1xuICAgICAgICAgICAgaWYgKCEoc2VxLnNwcml0ZV9pbmRleCBpbiBhdXRvX3N0YXJ0X3R3ZWVuKSkgYXV0b19zdGFydF90d2VlbltzZXEuc3ByaXRlX2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc2VxLnNwcml0ZV9pbmRleCBpbiBjaGFpbmVkX3R3ZWVucykge1xuICAgICAgICAgICAgICAgIGF1dG9fc3RhcnRfdHdlZW5bc2VxLnNwcml0ZV9pbmRleF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzcHJpdGVzID0gdGhpcy5nZXRfc3ByaXRlcyhzZXEsIGlubmVyX3Byb3BlcnR5KTtcbiAgICAgICAgICAgIGxldCBwcm9taXNlc19zZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNwcml0ZXMuZm9yRWFjaCgodGhpc19zcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHVuaXFfa2V5O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzX3Nwcml0ZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXFfa2V5ID0gdGhpc19zcHJpdGUua2V5ICsgXCJfXCIgKyB0aGlzX3Nwcml0ZS5kYXRhLmJhdHRsZV9pbmRleDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bmlxX2tleSA9IGluZGV4OyAvL3BvdGVudGlhbCBidWdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV0gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldID0gdGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VxX3RvID0gQXJyYXkuaXNBcnJheShzZXEudG8pID8gc2VxLnRvW2luZGV4XSA6IHNlcS50bztcbiAgICAgICAgICAgICAgICBsZXQgdG9fdmFsdWUgPSBzZXFfdG87XG4gICAgICAgICAgICAgICAgaWYgKHNlcV90byA9PT0gXCJ0YXJnZXRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGlmdCA9IEFycmF5LmlzQXJyYXkoc2VxLnNoaWZ0KSA/IHNlcS5zaGlmdFtpbmRleF0gOiBzZXEuc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gdGhpcy50YXJnZXRzX3Nwcml0ZXNbdGhpcy50YXJnZXRzX3Nwcml0ZXMubGVuZ3RoID4+IDFdW3RhcmdldF9wcm9wZXJ0eV0gKyAoc2hpZnQgPT09IHVuZGVmaW5lZCA/IDAgOiBzaGlmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChbXCJyb3RhdGlvblwiLCBcImh1ZV9hZGp1c3RcIl0uaW5jbHVkZXModGFyZ2V0X3Byb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldID0gcmFuZ2VfMzYwKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgdG9fdmFsdWUgPSBCYXR0bGVBbmltYXRpb24uZ2V0X2FuZ2xlX2J5X2RpcmVjdGlvbih0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldLCBzZXFfdG8sIHNlcS5kaXJlY3Rpb24sIHRhcmdldF9wcm9wZXJ0eSA9PT0gXCJyb3RhdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3ByaXRlc19wcmV2X3Byb3BlcnRpZXNbdW5pcV9rZXldW3RhcmdldF9wcm9wZXJ0eV0gLSB0b192YWx1ZSkgPiBudW1iZXJzLmRlZ3JlZTM2MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9fdmFsdWUgLT0gTWF0aC5zaWduKHRvX3ZhbHVlKSAqIG51bWJlcnMuZGVncmVlMzYwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvX3ZhbHVlID0gc2VxLmlzX2Fic29sdXRlID8gdG9fdmFsdWUgOiB0aGlzLnNwcml0ZXNfcHJldl9wcm9wZXJ0aWVzW3VuaXFfa2V5XVt0YXJnZXRfcHJvcGVydHldICsgc2VxX3RvO1xuICAgICAgICAgICAgICAgIGlmICghc2VxLnlveW8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVzX3ByZXZfcHJvcGVydGllc1t1bmlxX2tleV1bdGFyZ2V0X3Byb3BlcnR5XSA9IHRvX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VxLnR3ZWVuID09PSBcImluaXRpYWxcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gdG9fdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2VxLnNwcml0ZV9pbmRleCBpbiBjaGFpbmVkX3R3ZWVucykpIGNoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdID0geyBbaW5kZXhdOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShpbmRleCBpbiBjaGFpbmVkX3R3ZWVuc1tzZXEuc3ByaXRlX2luZGV4XSkpIGNoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdW2luZGV4XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoc2VxLnN0YXJ0X2RlbGF5KSA/IHNlcS5zdGFydF9kZWxheVtpbmRleF0gOiBzZXEuc3RhcnRfZGVsYXk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXEuZHVyYXRpb24gPT09IFwiaW5zdGFudGx5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXNvbHZlX2Z1bmN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9taXNlc19zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGhpc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuY3Rpb24gPSByZXNvbHZlOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlc19zZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChzdGFydF9kZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0gPSB0b192YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmZvcmNlX3N0YWdlX3VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcS5pc19hYnNvbHV0ZSAmJiBbXCJyb3RhdGlvblwiLCBcImh1ZV9hZGp1c3RcIl0uaW5jbHVkZXModGFyZ2V0X3Byb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzX3Nwcml0ZVt0YXJnZXRfcHJvcGVydHldID0gcmFuZ2VfMzYwKHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZV9mdW5jdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzX3Nwcml0ZSkudG8oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBbdGFyZ2V0X3Byb3BlcnR5XTogdG9fdmFsdWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHNlcS5kdXJhdGlvbikgPyBzZXEuZHVyYXRpb25baW5kZXhdIDogc2VxLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS50d2Vlbi5zcGxpdCgnLicpLnJlZHVjZSgocCwgcHJvcCkgPT4gcFtwcm9wXSwgUGhhc2VyLkVhc2luZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b19zdGFydF90d2VlbltzZXEuc3ByaXRlX2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydF9kZWxheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcS55b3lvID09PSB1bmRlZmluZWQgPyBmYWxzZTogc2VxLnlveW9cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2VzX3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXNvbHZlX2Z1bmN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMucHVzaCh0aGlzX3Byb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuLm9uU3RhcnQuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXEuZm9yY2Vfc3RhZ2VfdXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5zcGluaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXEuaXNfYWJzb2x1dGUgJiYgW1wicm90YXRpb25cIiwgXCJodWVfYWRqdXN0XCJdLmluY2x1ZGVzKHRhcmdldF9wcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfc3ByaXRlW3RhcmdldF9wcm9wZXJ0eV0gPSByYW5nZV8zNjAodGhpc19zcHJpdGVbdGFyZ2V0X3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VxLmZvcmNlX3N0YWdlX3VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEuc3BpbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNfc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFpbmVkX3R3ZWVuc1tzZXEuc3ByaXRlX2luZGV4XVtpbmRleF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbc2VxLnNwcml0ZV9pbmRleF1baW5kZXhdW2NoYWluZWRfdHdlZW5zW3NlcS5zcHJpdGVfaW5kZXhdW2luZGV4XS5sZW5ndGggLSAxXS5jaGFpbih0d2Vlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFpbmVkX3R3ZWVuc1tzZXEuc3ByaXRlX2luZGV4XVtpbmRleF0ucHVzaCh0d2Vlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBsYXlfc3ByaXRlX3NlcXVlbmNlKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGxheV9zZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGxheV9zZXEgPSB0aGlzLnBsYXlfc2VxdWVuY2VbaV07XG4gICAgICAgICAgICBsZXQgc3ByaXRlcyA9IHRoaXMuZ2V0X3Nwcml0ZXMocGxheV9zZXEpO1xuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTsgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfZGVsYXkgPSBBcnJheS5pc0FycmF5KHBsYXlfc2VxLnN0YXJ0X2RlbGF5KSA/IHBsYXlfc2VxLnN0YXJ0X2RlbGF5W2luZGV4XSA6IHBsYXlfc2VxLnN0YXJ0X2RlbGF5O1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoc3RhcnRfZGVsYXksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXlfc2VxLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbmltYXRpb25zLmdldEFuaW1hdGlvbihwbGF5X3NlcS5hbmltYXRpb25fa2V5KS5yZXZlcnNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5nZXRBbmltYXRpb24ocGxheV9zZXEuYW5pbWF0aW9uX2tleSkucmV2ZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHBsYXlfc2VxLmFuaW1hdGlvbl9rZXksIHBsYXlfc2VxLmZyYW1lX3JhdGUsIHBsYXlfc2VxLnJlcGVhdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5X3NlcS53YWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5X3NlcS5oaWRlX29uX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5hbHBoYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBsYXlfYmxlbmRfbW9kZXMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ibGVuZF9tb2RlX3NlcXVlbmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBibGVuZF9tb2RlX3NlcSA9IHRoaXMuYmxlbmRfbW9kZV9zZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgIGxldCBzcHJpdGVzID0gdGhpcy5nZXRfc3ByaXRlcyhibGVuZF9tb2RlX3NlcSk7XG4gICAgICAgICAgICBzcHJpdGVzLmZvckVhY2goKHNwcml0ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZV9mdW5jdGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgdGhpc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuY3Rpb24gPSByZXNvbHZlOyB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2VzLnB1c2godGhpc19wcm9taXNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF9kZWxheSA9IEFycmF5LmlzQXJyYXkoYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXkpID8gYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXlbaW5kZXhdIDogYmxlbmRfbW9kZV9zZXEuc3RhcnRfZGVsYXk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChzdGFydF9kZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGJsZW5kX21vZGVfc2VxLm1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JlZW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLlNDUkVFTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUuYmxlbmRNb2RlID0gUElYSS5ibGVuZE1vZGVzLk5PUk1BTDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxheV9maWx0ZXJfcHJvcGVydHkoc2VxdWVuY2UsIHByb3BlcnR5PywgLi4uc2Vjb25kYXJ5X3Byb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyX3NlcSA9IHNlcXVlbmNlW2ldO1xuICAgICAgICAgICAgbGV0IHNwcml0ZXMgPSB0aGlzLmdldF9zcHJpdGVzKGZpbHRlcl9zZXEpO1xuICAgICAgICAgICAgc3ByaXRlcy5mb3JFYWNoKChzcHJpdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuY3Rpb247XG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4geyByZXNvbHZlX2Z1bmN0aW9uID0gcmVzb2x2ZTsgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlcy5wdXNoKHRoaXNfcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfZGVsYXkgPSBBcnJheS5pc0FycmF5KGZpbHRlcl9zZXEuc3RhcnRfZGVsYXkpID8gZmlsdGVyX3NlcS5zdGFydF9kZWxheVtpbmRleF0gOiBmaWx0ZXJfc2VxLnN0YXJ0X2RlbGF5O1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoc3RhcnRfZGVsYXksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpc19wcm9wZXJ0eSA9IGZpbHRlcl9zZXEuZmlsdGVyICE9PSB1bmRlZmluZWQgPyBmaWx0ZXJfc2VxLmZpbHRlciA6IHByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuZmlsdGVyc1swXVt0aGlzX3Byb3BlcnR5XSA9IGZpbHRlcl9zZXEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZGFyeV9wcm9wZXJ0aWVzLmZvckVhY2goc2Vjb25kYXJ5X3Byb3BlcnR5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5maWx0ZXJzWzBdW3NlY29uZGFyeV9wcm9wZXJ0eV0gPSBmaWx0ZXJfc2VxW3NlY29uZGFyeV9wcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc29sdmVfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxheV9zdGFnZV9hbmdsZV9zZXF1ZW5jZSgpIHtcbiAgICAgICAgbGV0IGNoYWluZWRfdHdlZW5zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFnZV9hbmdsZV9zZXF1ZW5jZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhZ2VfYW5nbGVfc2VxID0gdGhpcy5zdGFnZV9hbmdsZV9zZXF1ZW5jZVtpXTtcbiAgICAgICAgICAgIGxldCB0b192YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YWdlX3ByZXZfdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfcHJldl92YWx1ZSA9IHRoaXMuc3RhZ2VfY2FtZXJhLnJhZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFnZV9hbmdsZV9zZXEudG8gPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICAgICAgdG9fdmFsdWUgPSBERUZBVUxUX1BPU19BTkdMRTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS5pc19hYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX3ByZXZfdmFsdWUgPSByYW5nZV8zNjAodGhpcy5zdGFnZV9wcmV2X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFnZV9jYW1lcmEucmFkID0gdGhpcy5zdGFnZV9wcmV2X3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA9IEJhdHRsZUFuaW1hdGlvbi5nZXRfYW5nbGVfYnlfZGlyZWN0aW9uKHRoaXMuc3RhZ2VfcHJldl92YWx1ZSwgc3RhZ2VfYW5nbGVfc2VxLnRvLCBzdGFnZV9hbmdsZV9zZXEuZGlyZWN0aW9uLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3RhZ2VfcHJldl92YWx1ZSAtIHRvX3ZhbHVlKSA+IG51bWJlcnMuZGVncmVlMzYwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSAtPSBNYXRoLnNpZ24odG9fdmFsdWUpICogbnVtYmVycy5kZWdyZWUzNjA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA9IHRoaXMuc3RhZ2VfcHJldl92YWx1ZSArIChzdGFnZV9hbmdsZV9zZXEudG8gYXMgbnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YWdlX3ByZXZfdmFsdWUgPSB0b192YWx1ZTtcbiAgICAgICAgICAgIGlmIChzdGFnZV9hbmdsZV9zZXEudHdlZW4gPT09IFwiaW5pdGlhbFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWdlX2FuZ2xlX3NlcS5pc19hYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5yYWQgPSB0b192YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWdlX2NhbWVyYS5yYWQgKz0gdG9fdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5zdGFnZV9jYW1lcmEpLnRvKFxuICAgICAgICAgICAgICAgICAgICB7IHJhZDogdG9fdmFsdWUgfSxcbiAgICAgICAgICAgICAgICAgICAgc3RhZ2VfYW5nbGVfc2VxLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGFnZV9hbmdsZV9zZXEudHdlZW4uc3BsaXQoJy4nKS5yZWR1Y2UoKHAsIHByb3ApID0+IHBbcHJvcF0sIFBoYXNlci5FYXNpbmcpLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbmVkX3R3ZWVucy5sZW5ndGggPT09IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YWdlX2FuZ2xlX3NlcS5zdGFydF9kZWxheSBhcyBudW1iZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxldCByZXNvbHZlX2Z1bmN0aW9uO1xuICAgICAgICAgICAgICAgIGxldCB0aGlzX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcmVzb2x2ZV9mdW5jdGlvbiA9IHJlc29sdmU7IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZXMucHVzaCh0aGlzX3Byb21pc2UpO1xuICAgICAgICAgICAgICAgIHR3ZWVuLm9uU3RhcnQuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnNwaW5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFnZV9hbmdsZV9zZXEuaXNfYWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnJhZCA9IHJhbmdlXzM2MCh0aGlzLnN0YWdlX2NhbWVyYS5yYWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhZ2VfY2FtZXJhLnNwaW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZV9mdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjaGFpbmVkX3R3ZWVucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5lZF90d2VlbnNbY2hhaW5lZF90d2VlbnMubGVuZ3RoIC0gMV0uY2hhaW4odHdlZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGFpbmVkX3R3ZWVucy5wdXNoKHR3ZWVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IGNsZWFyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcHJpdGVzLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIGlmICghc3ByaXRlLmRhdGEudHJhaWxzKSByZXR1cm47XG4gICAgICAgICAgICBzcHJpdGUuZGF0YS54X2hpc3RvcnkudW5zaGlmdChzcHJpdGUueCk7XG4gICAgICAgICAgICBzcHJpdGUuZGF0YS55X2hpc3RvcnkudW5zaGlmdChzcHJpdGUueSk7XG4gICAgICAgICAgICBpZiAoY2xlYXIpIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGF0YS50cmFpbHNfaW5mby50ZXh0dXJlXzEuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBzcHJpdGUuZGF0YS50cmFpbHNfaW5mby50ZXh0dXJlXzIuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBjbGVhciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ByaXRlLmRhdGEudHJhaWxzX2luZm8udGV4dHVyZV8xLnJlbmRlclhZKHNwcml0ZSwgc3ByaXRlLmRhdGEueF9oaXN0b3J5W3Nwcml0ZS5kYXRhLnRyYWlsc19pbmZvLmZyYW1lX2RpZmYgPj4gMV0sIHNwcml0ZS5kYXRhLnlfaGlzdG9yeVtzcHJpdGUuZGF0YS50cmFpbHNfaW5mby5mcmFtZV9kaWZmID4+IDFdKTtcbiAgICAgICAgICAgIHNwcml0ZS5kYXRhLnRyYWlsc19pbmZvLnRleHR1cmVfMi5yZW5kZXJYWShzcHJpdGUsIHNwcml0ZS5kYXRhLnhfaGlzdG9yeS5wb3AoKSwgc3ByaXRlLmRhdGEueV9oaXN0b3J5LnBvcCgpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldF9hbmdsZV9ieV9kaXJlY3Rpb24oY3VycmVudF9hbmdsZSwgdGFyZ2V0X2FuZ2xlLCBkaXJlY3Rpb24sIGZvdXJ0aF9xdWFkcmFudCA9IGZhbHNlKSB7XG4gICAgICAgIGxldCB0aGlzX2RpcmVjdGlvbjtcbiAgICAgICAgaWYgKGZvdXJ0aF9xdWFkcmFudCkge1xuICAgICAgICAgICAgdGFyZ2V0X2FuZ2xlID0gbnVtYmVycy5kZWdyZWUzNjAgLSB0YXJnZXRfYW5nbGU7XG4gICAgICAgICAgICB0aGlzX2RpcmVjdGlvbiA9IHRhcmdldF9hbmdsZSA8IGN1cnJlbnRfYW5nbGUgPyBcImNvdW50ZXJfY2xvY2t3aXNlXCIgOiBcImNsb2Nrd2lzZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc19kaXJlY3Rpb24gPSB0YXJnZXRfYW5nbGUgPiBjdXJyZW50X2FuZ2xlID8gXCJjb3VudGVyX2Nsb2Nrd2lzZVwiIDogXCJjbG9ja3dpc2VcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpc19kaXJlY3Rpb24gPT09IGRpcmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldF9hbmdsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaWZmID0gdGFyZ2V0X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjAgLSBjdXJyZW50X2FuZ2xlICUgbnVtYmVycy5kZWdyZWUzNjA7XG4gICAgICAgIGNvbnN0IHNoaWZ0ID0gTWF0aC5zaWduKGRpZmYpICogbnVtYmVycy5kZWdyZWUzNjAgLSBkaWZmO1xuICAgICAgICBjb25zdCBuZXdfdGFyZ2V0ID0gY3VycmVudF9hbmdsZSAlIG51bWJlcnMuZGVncmVlMzYwIC0gc2hpZnQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY2xvc2VzdFwiKSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0X2RlbHRhLCBuZXdfdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgaWYgKG5ld190YXJnZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgbmV3X3RhcmdldF9kZWx0YSA9IG5ld190YXJnZXQgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2RlbHRhID0gbnVtYmVycy5kZWdyZWUzNjAgLSBuZXdfdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRfZGVsdGEgPSB0YXJnZXRfYW5nbGUgLSByYW5nZV8zNjAoY3VycmVudF9hbmdsZSk7XG4gICAgICAgICAgICAgICAgbmV3X3RhcmdldF9kZWx0YSA9IG51bWJlcnMuZGVncmVlMzYwIC0gdGFyZ2V0X2RlbHRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldF9kZWx0YSkgPCBNYXRoLmFicyhuZXdfdGFyZ2V0X2RlbHRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRfYW5nbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdfdGFyZ2V0O1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZF9kYXRhYmFzZXMoZ2FtZSwgZGJzKSB7XG4gICAgLy8gaW5pdGlhbGl6aW5nIGpzb24gZGF0YWJhc2UgZGF0YVxuICAgIGRicy5pbml0X2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdpbml0X2RiJyk7IFxuICAgIGRicy5ucGNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ25wY19kYicpO1xuICAgIGRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignaW50ZXJhY3RhYmxlX29iamVjdHNfZGInKTtcbiAgICBkYnMubWlzY19hbmltYXRpb25zX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdtaXNjX2FuaW1hdGlvbnNfZGInKTtcbiAgICBkYnMuY2xhc3Nlc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignY2xhc3Nlc19kYicpO1xuICAgIGRicy5hYmlsaXRpZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2FiaWxpdGllc19kYicpO1xuICAgIGRicy5pdGVtc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignaXRlbXNfZGInKTtcbiAgICBkYnMuZGppbm5pX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdkamlubmlfZGInKTtcbiAgICBkYnMuZW5lbWllc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignZW5lbWllc19kYicpO1xuICAgIGRicy5lbmVtaWVzX3BhcnRpZXNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ2VuZW1pZXNfcGFydGllc19kYicpO1xuICAgIGRicy5tYXBzX2RiID0gZ2FtZS5jYWNoZS5nZXRKU09OKCdtYXBzX2RiJyk7XG4gICAgZGJzLm1haW5fY2hhcnNfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ21haW5fY2hhcnNfZGInKTtcbiAgICBkYnMuc3VtbW9uc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignc3VtbW9uc19kYicpO1xuICAgIGRicy5zaG9wa2VlcF9kaWFsb2dfZGIgPSBnYW1lLmNhY2hlLmdldEpTT04oJ3Nob3BrZWVwX2RpYWxvZ19kYicpO1xuICAgIGRicy5zaG9wc19kYiA9IGdhbWUuY2FjaGUuZ2V0SlNPTignc2hvcHNfZGInKTtcblxuICAgIC8vZm9ybWF0IHNvbWUgZGIgc3RydWN0dXJlc1xuICAgIGRicy5zaG9wa2VlcF9kaWFsb2dfZGIgPSBfLm1hcEtleXMoZGJzLnNob3BrZWVwX2RpYWxvZ19kYiwgc2hvcGtlZXBfZGlhbG9nID0+IHNob3BrZWVwX2RpYWxvZy5rZXlfbmFtZSk7XG4gICAgZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiID0gXy5tYXBLZXlzKGRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYiwgaW50ZXJhY3RhYmxlX29iamVjdF9kYXRhID0+IGludGVyYWN0YWJsZV9vYmplY3RfZGF0YS5rZXlfbmFtZSk7XG4gICAgZGJzLmVuZW1pZXNfcGFydGllc19kYiA9IF8ubWFwS2V5cyhkYnMuZW5lbWllc19wYXJ0aWVzX2RiLCBlbmVteV9wYXJ0eV9kYXRhID0+IGVuZW15X3BhcnR5X2RhdGEua2V5X25hbWUpO1xuICAgIGRicy5ucGNfZGIgPSBfLm1hcEtleXMoZGJzLm5wY19kYiwgbnBjX2RhdGEgPT4gbnBjX2RhdGEua2V5X25hbWUpO1xuICAgIGRicy5zdW1tb25zX2RiID0gXy5tYXBLZXlzKGRicy5zdW1tb25zX2RiLCAoc3VtbW9uX2RhdGEsIGluZGV4KSA9PiB7XG4gICAgICAgIHN1bW1vbl9kYXRhLmluZGV4ID0gcGFyc2VJbnQoaW5kZXgpO1xuICAgICAgICByZXR1cm4gc3VtbW9uX2RhdGEua2V5X25hbWU7XG4gICAgfSk7XG59IiwiaW1wb3J0IHsgaW5pdGlhbGl6ZV9tYWluX2NoYXJzLCBpbml0aWFsaXplX2NsYXNzZXMgfSBmcm9tICcuL21haW5fY2hhcnMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9hYmlsaXRpZXMsIGluaXRpYWxpemVfZmllbGRfYWJpbGl0aWVzIH0gZnJvbSAnLi9hYmlsaXRpZXMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9pdGVtcyB9IGZyb20gJy4vaXRlbXMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9kamlubmksIGluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMgfSBmcm9tICcuL2RqaW5uaSc7XG5pbXBvcnQgeyBpbml0aWFsaXplX2VuZW1pZXMgfSBmcm9tICcuL2VuZW1pZXMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9tYXBzIH0gZnJvbSAnLi9tYXBzJztcbmltcG9ydCB7IGluaXRpYWxpemVfbWVudSB9IGZyb20gJy4uL21haW5fbWVudXMvTWFpbk1lbnUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9taXNjX2RhdGEgfSBmcm9tICcuL21pc2NfZGF0YSc7XG5pbXBvcnQgeyBTaG9wTWVudSB9IGZyb20gJy4uL21haW5fbWVudXMvU2hvcE1lbnUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZV9zaG9wcyB9IGZyb20gJy4vc2hvcHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZV9nYW1lX2RhdGEoZ2FtZSwgZGF0YSkge1xuICAgIGxldCBsb2FkX21hcHNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfbWFwc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGxvYWRfbWFwc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5tYXBzX2xpc3QgPSBpbml0aWFsaXplX21hcHMoZ2FtZSwgZGF0YSwgZGF0YS5kYnMubWFwc19kYiwgbG9hZF9tYXBzX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgYXdhaXQgbG9hZF9tYXBzX3Byb21pc2U7XG5cbiAgICBkYXRhLmluZm8uY2xhc3Nlc19saXN0ID0gaW5pdGlhbGl6ZV9jbGFzc2VzKGRhdGEuZGJzLmNsYXNzZXNfZGIpO1xuXG4gICAgbGV0IGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZTtcbiAgICBjb25zdCBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZGF0YS5pbmZvLmVuZW1pZXNfbGlzdCA9IGluaXRpYWxpemVfZW5lbWllcyhnYW1lLCBkYXRhLmRicy5lbmVtaWVzX2RiLCBsb2FkX2VuZW1pZXNfc3ByaXRlc19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfZW5lbWllc19zcHJpdGVzX3Byb21pc2U7XG5cbiAgICBkYXRhLmluZm8uZGppbm5pX2xpc3QgPSBpbml0aWFsaXplX2RqaW5uaShkYXRhLmRicy5kamlubmlfZGIpO1xuXG4gICAgbGV0IGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfZGppbm5pX3Nwcml0ZXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2RqaW5uaV9zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZGF0YS5pbmZvLmRqaW5uaV9zcHJpdGVzID0gaW5pdGlhbGl6ZV9kamlubmlfc3ByaXRlcyhnYW1lLCBsb2FkX2RqaW5uaV9zcHJpdGVzX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgYXdhaXQgbG9hZF9kamlubmlfc3ByaXRlc19wcm9taXNlO1xuICAgIFxuICAgIGxldCBsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmU7XG4gICAgY29uc3QgbG9hZF9hYmlsaXRpZXNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2FiaWxpdGllc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCA9IGluaXRpYWxpemVfYWJpbGl0aWVzKGdhbWUsIGRhdGEuZGJzLmFiaWxpdGllc19kYiwgbG9hZF9hYmlsaXRpZXNfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICBhd2FpdCBsb2FkX2FiaWxpdGllc19wcm9taXNlO1xuICAgIFxuICAgIGxldCBsb2FkX2l0ZW1zX3Byb21pc2VfcmVzb2x2ZTtcbiAgICBjb25zdCBsb2FkX2l0ZW1zX3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgbG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5pdGVtc19saXN0ID0gaW5pdGlhbGl6ZV9pdGVtcyhnYW1lLCBkYXRhLmRicy5pdGVtc19kYiwgbG9hZF9pdGVtc19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfaXRlbXNfcHJvbWlzZTtcblxuICAgIGRhdGEuaW5mby5wYXJ0eV9kYXRhID0ge1xuICAgICAgICBtZW1iZXJzOiBbXSxcbiAgICAgICAgY29pbnM6IGRhdGEuZGJzLmluaXRfZGIuY29pbnMsXG4gICAgICAgIGdhbWVfdGlja2V0czoge2NvaW5zX3JlbWFpbmluZzogMzAwLCB0aWNrZXRzX2JvdWdodDogMH1cbiAgICB9O1xuXG4gICAgbGV0IGxvYWRfY2hhcnNfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfY2hhcnNfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBsb2FkX2NoYXJzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZGF0YS5pbmZvLm1haW5fY2hhcl9saXN0ID0gaW5pdGlhbGl6ZV9tYWluX2NoYXJzKGdhbWUsIGRhdGEuaW5mbywgZGF0YS5kYnMubWFpbl9jaGFyc19kYiwgZGF0YS5kYnMuY2xhc3Nlc19kYiwgbG9hZF9jaGFyc19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfY2hhcnNfcHJvbWlzZTtcblxuICAgIGxldCBsb2FkX21pc2NfcHJvbWlzZV9yZXNvbHZlO1xuICAgIGNvbnN0IGxvYWRfbWlzY19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGxvYWRfbWlzY19wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3QgPSBpbml0aWFsaXplX21pc2NfZGF0YShnYW1lLCBkYXRhLmRicy5taXNjX2FuaW1hdGlvbnNfZGIsIGxvYWRfbWlzY19wcm9taXNlX3Jlc29sdmUpO1xuICAgIGF3YWl0IGxvYWRfbWlzY19wcm9taXNlO1xuXG4gICAgZGF0YS5pbmZvLnNob3BzX2xpc3QgPSBpbml0aWFsaXplX3Nob3BzKGRhdGEuZGJzLnNob3BzX2RiKTtcblxuICAgIC8vaW5pdGlhbGl6ZSBmaWVsZCBhYmlsaXRpZXNcbiAgICBkYXRhLmluZm8uZmllbGRfYWJpbGl0aWVzX2xpc3QgPSBpbml0aWFsaXplX2ZpZWxkX2FiaWxpdGllcyhnYW1lLCBkYXRhKTtcblxuICAgIC8vaW5pdGlhbGl6ZSBzY3JlZW5zXG4gICAgZGF0YS5zaG9wX21lbnUgPSBuZXcgU2hvcE1lbnUoZ2FtZSwgZGF0YSk7XG4gICAgZGF0YS5tYWluX21lbnUgPSBpbml0aWFsaXplX21lbnUoZ2FtZSwgZGF0YSk7XG59IiwiaW1wb3J0IHsgQ2xhc3NlcyB9IGZyb20gJy4uL0NsYXNzZXMnO1xuaW1wb3J0IHsgTWFpbkNoYXIsIE1haW5DaGFyQmFzZSB9IGZyb20gJy4uL01haW5DaGFyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfY2xhc3NlcyhjbGFzc2VzX2RiKSB7XG4gICAgbGV0IGNsYXNzZXNfbGlzdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlc19kYi5jbGFzc2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzX2RhdGEgPSBjbGFzc2VzX2RiLmNsYXNzZXNbaV07XG4gICAgICAgIGNsYXNzZXNfbGlzdFtjbGFzc19kYXRhLmtleV9uYW1lXSA9IG5ldyBDbGFzc2VzKFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5rZXlfbmFtZSxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEubmFtZSxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEucmVxdWlyZWRfdmVudXNfbGV2ZWwsXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX21lcmN1cnlfbGV2ZWwsXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX21hcnNfbGV2ZWwsXG4gICAgICAgICAgICBjbGFzc19kYXRhLnJlcXVpcmVkX2p1cGl0ZXJfbGV2ZWwsXG4gICAgICAgICAgICBjbGFzc19kYXRhLmhwX2Jvb3N0LFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5wcF9ib29zdCxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEuYXRrX2Jvb3N0LFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5kZWZfYm9vc3QsXG4gICAgICAgICAgICBjbGFzc19kYXRhLmFnaV9ib29zdCxcbiAgICAgICAgICAgIGNsYXNzX2RhdGEubHVrX2Jvb3N0LFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5hYmlsaXR5X2xldmVsX3BhaXJzLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS5jbGFzc190eXBlLFxuICAgICAgICAgICAgY2xhc3NfZGF0YS52dWxuZXJhYmlsaXRpZXNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXNfbGlzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfbWFpbl9jaGFycyhnYW1lLCBpbmZvLCBtYWluX2NoYXJzX2RiLCBjbGFzc2VzX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgbGV0IG1haW5fY2hhcl9saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYWluX2NoYXJzX2RiLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNoYXJfZGF0YSA9IG1haW5fY2hhcnNfZGJbaV07XG4gICAgICAgIGNvbnN0IHNwcml0ZV9iYXNlID0gbmV3IE1haW5DaGFyQmFzZShcbiAgICAgICAgICAgIGNoYXJfZGF0YS5rZXlfbmFtZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5hY3Rpb25zLm1hcChhY3Rpb24gPT4gYWN0aW9uLmtleSksXG4gICAgICAgICAgICBjaGFyX2RhdGEud2Fsa19zcGVlZCxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5kYXNoX3NwZWVkLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmNsaW1iX3NwZWVkLFxuICAgICAgICAgICAgY2hhcl9kYXRhLnB1c2hfc3BlZWQsXG4gICAgICAgICk7XG4gICAgICAgIG1haW5fY2hhcl9saXN0W2NoYXJfZGF0YS5rZXlfbmFtZV0gPSBuZXcgTWFpbkNoYXIoXG4gICAgICAgICAgICBjaGFyX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBpbmZvLFxuICAgICAgICAgICAgc3ByaXRlX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEubmFtZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5ocF9jdXJ2ZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5wcF9jdXJ2ZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5hdGtfY3VydmUsXG4gICAgICAgICAgICBjaGFyX2RhdGEuZGVmX2N1cnZlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmFnaV9jdXJ2ZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5sdWtfY3VydmUsXG4gICAgICAgICAgICBjaGFyX2RhdGEuZXhwX2N1cnZlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLnN0YXJ0aW5nX2xldmVsLFxuICAgICAgICAgICAgY2xhc3Nlc19kYi5jbGFzc190YWJsZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5iYXR0bGVfc2NhbGUsXG4gICAgICAgICAgICBjaGFyX2RhdGEudmVudXNfbGV2ZWxfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tZXJjdXJ5X2xldmVsX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEubWFyc19sZXZlbF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmp1cGl0ZXJfbGV2ZWxfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS52ZW51c19wb3dlcl9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLm1lcmN1cnlfcG93ZXJfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5tYXJzX3Bvd2VyX2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEuanVwaXRlcl9wb3dlcl9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLnZlbnVzX3Jlc2lzdF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLm1lcmN1cnlfcmVzaXN0X2Jhc2UsXG4gICAgICAgICAgICBjaGFyX2RhdGEubWFyc19yZXNpc3RfYmFzZSxcbiAgICAgICAgICAgIGNoYXJfZGF0YS5qdXBpdGVyX3Jlc2lzdF9iYXNlLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmlubmF0ZV9hYmlsaXRpZXMsXG4gICAgICAgICAgICBjaGFyX2RhdGEuaW5fcGFydHksXG4gICAgICAgICAgICBjaGFyX2RhdGEuZGppbm5pLFxuICAgICAgICAgICAgY2hhcl9kYXRhLml0ZW1zLFxuICAgICAgICAgICAgY2hhcl9kYXRhLmJhdHRsZV9hbmltYXRpb25zX3ZhcmlhdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNoYXJfZGF0YS5pbl9wYXJ0eSkge1xuICAgICAgICAgICAgaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMucHVzaChtYWluX2NoYXJfbGlzdFtjaGFyX2RhdGEua2V5X25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYXJfZGF0YS5hY3Rpb25zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBjaGFyX2RhdGEuYWN0aW9uc1tqXTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvblNwcml0ZXNoZWV0KGFjdGlvbi5rZXksIGFjdGlvbi5zcHJpdGVzaGVldF9pbWcsIGFjdGlvbi5zcHJpdGVzaGVldCk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKGFjdGlvbi5rZXksIGFjdGlvbi5kaXJlY3Rpb25zLCBhY3Rpb24uZGlyZWN0aW9uc19mcmFtZXNfbnVtYmVyKTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24ua2V5LCBhY3Rpb24uZnJhbWVfcmF0ZSk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25Mb29wKGFjdGlvbi5rZXksIGFjdGlvbi5sb29wKTtcbiAgICAgICAgfVxuICAgICAgICBzcHJpdGVfYmFzZS5nZW5lcmF0ZUFsbEZyYW1lcygpO1xuXG4gICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBsb2FkX3Byb21pc2VzLnB1c2gobG9hZF9zcHJpdGVzaGVldF9wcm9taXNlKTtcbiAgICAgICAgc3ByaXRlX2Jhc2UubG9hZFNwcml0ZXNoZWV0cyhnYW1lLCB0cnVlLCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgfVxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIHJldHVybiBtYWluX2NoYXJfbGlzdDtcbn0iLCJpbXBvcnQgeyBBYmlsaXR5IH0gZnJvbSAnLi4vQWJpbGl0eSc7XG5pbXBvcnQgeyBNb3ZlRmllbGRQc3luZXJneSB9IGZyb20gJy4uL2ZpZWxkX2FiaWxpdGllcy9Nb3ZlRmllbGRQc3luZXJneSc7XG5pbXBvcnQgeyBGcm9zdEZpZWxkUHN5bmVyZ3kgfSBmcm9tICcuLi9maWVsZF9hYmlsaXRpZXMvRnJvc3RGaWVsZFBzeW5lcmd5JztcbmltcG9ydCB7IEdyb3d0aEZpZWxkUHN5bmVyZ3kgfSBmcm9tICcuLi9maWVsZF9hYmlsaXRpZXMvR3Jvd3RoRmllbGRQc3luZXJneSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2FiaWxpdGllcyhnYW1lLCBhYmlsaXRpZXNfZGIsIGxvYWRfcHJvbWlzZV9yZXNvbHZlKSB7XG4gICAgbGV0IGFiaWxpdGllc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhYmlsaXRpZXNfZGIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgYWJpbGl0eV9kYXRhID0gYWJpbGl0aWVzX2RiW2ldO1xuICAgICAgICBhYmlsaXRpZXNfbGlzdFthYmlsaXR5X2RhdGEua2V5X25hbWVdID0gbmV3IEFiaWxpdHkoXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEubmFtZSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS50eXBlLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmVsZW1lbnQsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuYmF0dGxlX3RhcmdldCxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5yYW5nZSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5wcF9jb3N0LFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmFiaWxpdHlfcG93ZXIsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuZWZmZWN0c19vdXRzaWRlX2JhdHRsZSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5pc19iYXR0bGVfYWJpbGl0eSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5pc19maWVsZF9wc3luZXJneSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5lZmZlY3RzLFxuICAgICAgICAgICAgYWJpbGl0eV9kYXRhLmFiaWxpdHlfY2F0ZWdvcnksXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuYmF0dGxlX2FuaW1hdGlvbl9rZXksXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEucHJpb3JpdHlfbW92ZSxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5oYXNfY3JpdGljYWwsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuY3JpdF9tdWx0X2ZhY3RvcixcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5jYW5fc3dpdGNoX3RvX3VubGVhc2gsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuY2FuX2JlX2V2YWRlZCxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS51c2VfZGltaW5pc2hpbmdfcmF0aW8sXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEubXNnX3R5cGUsXG4gICAgICAgICAgICBhYmlsaXR5X2RhdGEuYWZmZWN0c19wcCxcbiAgICAgICAgICAgIGFiaWxpdHlfZGF0YS5oYXNfYW5pbWF0aW9uX3ZhcmlhdGlvblxuICAgICAgICApO1xuICAgIH1cbiAgICBjb25zdCBsb2FkZXIgPSBnYW1lLmxvYWQuYXRsYXNKU09OSGFzaCgnYWJpbGl0aWVzX2ljb25zJywgJ2Fzc2V0cy9pbWFnZXMvaWNvbnMvYWJpbGl0aWVzL2FiaWxpdGllc19pY29ucy5wbmcnLCAnYXNzZXRzL2ltYWdlcy9pY29ucy9hYmlsaXRpZXMvYWJpbGl0aWVzX2ljb25zLmpzb24nKTtcbiAgICBsb2FkZXIub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgZ2FtZS5sb2FkLnN0YXJ0KCk7XG4gICAgcmV0dXJuIGFiaWxpdGllc19saXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9maWVsZF9hYmlsaXRpZXMoZ2FtZSwgZGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1vdmU6IG5ldyBNb3ZlRmllbGRQc3luZXJneShnYW1lLCBkYXRhKSxcbiAgICAgICAgZnJvc3Q6IG5ldyBGcm9zdEZpZWxkUHN5bmVyZ3koZ2FtZSwgZGF0YSksXG4gICAgICAgIGdyb3d0aDogbmV3IEdyb3d0aEZpZWxkUHN5bmVyZ3koZ2FtZSwgZGF0YSlcbiAgICB9O1xufSIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyB0YXJnZXRfb25seV9wdXNoIH0gZnJvbSAnLi4vaW50ZXJhY3RhYmxlX29iamVjdHMvcHVzaCc7XG5pbXBvcnQgeyBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMsIGpvaW5fZGlyZWN0aW9ucyB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgRmllbGRBYmlsaXRpZXMgfSBmcm9tIFwiLi9GaWVsZEFiaWxpdGllc1wiO1xuaW1wb3J0IHsgU3ByaXRlQmFzZSB9IGZyb20gJy4uL1Nwcml0ZUJhc2UnO1xuXG5jb25zdCBBQklMSVRZX0tFWV9OQU1FID0gXCJtb3ZlXCI7XG5jb25zdCBBQ1RJT05fS0VZX05BTUUgPSBcImNhc3RcIjtcbmNvbnN0IE1BWF9IQU5EX1RSQU5TTEFURSA9IDE2O1xuY29uc3QgTU9WRV9NQVhfUkFOR0UgPSAyNjtcbmNvbnN0IE1PVkVfSEFORF9LRVlfTkFNRSA9IFwibW92ZV9oYW5kXCI7XG5cbmV4cG9ydCBjbGFzcyBNb3ZlRmllbGRQc3luZXJneSBleHRlbmRzIEZpZWxkQWJpbGl0aWVzIHtcbiAgICBwdWJsaWMgaGFuZF9zcHJpdGVfYmFzZTogU3ByaXRlQmFzZTtcbiAgICBwdWJsaWMgaGFuZF9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGVtaXR0ZXI6IFBoYXNlci5QYXJ0aWNsZXMuQXJjYWRlLkVtaXR0ZXI7XG4gICAgcHVibGljIGZpbmFsX2VtaXR0ZXI6IFBoYXNlci5QYXJ0aWNsZXMuQXJjYWRlLkVtaXR0ZXI7XG4gICAgcHVibGljIGNvbnRyb2xzX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgdGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyOiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIGZpbmFsX2VtaXR0ZXJfcGFydGljbGVzX2NvdW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIEFCSUxJVFlfS0VZX05BTUUsIE1PVkVfTUFYX1JBTkdFLCBBQ1RJT05fS0VZX05BTUUsIHRydWUpO1xuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9tb3ZlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnNldF9jYXN0X2ZpbmlzaGVyX21ldGhvZCh0aGlzLnVuc2V0X2h1ZV9zaGlmdGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbTU9WRV9IQU5EX0tFWV9OQU1FXTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2tleSA9IHRoaXMuaGFuZF9zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoTU9WRV9IQU5EX0tFWV9OQU1FKTtcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDAsIHNwcml0ZV9rZXkpO1xuICAgICAgICB0aGlzLmhhbmRfc3ByaXRlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZV9iYXNlLnNldEFuaW1hdGlvbih0aGlzLmhhbmRfc3ByaXRlLCBNT1ZFX0hBTkRfS0VZX05BTUUpO1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNldF9jb250cm9scygpO1xuICAgICAgICB0aGlzLmNvbnRyb2xzX2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldF9jb250cm9scygpIHtcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnJpZ2h0O1xuICAgICAgICAgICAgdGhpcy5maXJlX3B1c2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmxlZnQ7XG4gICAgICAgICAgICB0aGlzLmZpcmVfcHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuVVApLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLnVwO1xuICAgICAgICAgICAgdGhpcy5maXJlX3B1c2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkRPV04pLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24gPSBkaXJlY3Rpb25zLmRvd247XG4gICAgICAgICAgICB0aGlzLmZpcmVfcHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzX2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sc19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoX2hhbmQoKTtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmlyZV9wdXNoKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIgPT09IHRoaXMudGFyZ2V0X29iamVjdC5iYXNlX2NvbGxpc2lvbl9sYXllcikge1xuICAgICAgICAgICAgbGV0IGl0ZW1fcG9zaXRpb24gPSB0aGlzLnRhcmdldF9vYmplY3QuZ2V0X2N1cnJlbnRfcG9zaXRpb24odGhpcy5kYXRhLm1hcCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgICAgICAgICBpdGVtX3Bvc2l0aW9uLnkgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fcG9zaXRpb24ueSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54IC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9wb3NpdGlvbi54ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBvc2l0aW9uX2FsbG93ZWQgPSB0aGlzLnRhcmdldF9vYmplY3QucG9zaXRpb25fYWxsb3dlZChpdGVtX3Bvc2l0aW9uLngsIGl0ZW1fcG9zaXRpb24ueSk7XG4gICAgICAgICAgICBpZiAocG9zaXRpb25fYWxsb3dlZCAmJiAhKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcyA9PT0gaXRlbV9wb3NpdGlvbi54ICYmIHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcyA9PT0gaXRlbV9wb3NpdGlvbi55KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X29ubHlfcHVzaCh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy50YXJnZXRfb2JqZWN0LCAoeF9zaGlmdCwgeV9zaGlmdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB4X3RhcmdldCA9IHRoaXMuaGFuZF9zcHJpdGUueCArIHhfc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlfdGFyZ2V0ID0gdGhpcy5oYW5kX3Nwcml0ZS55ICsgeV9zaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmhhbmRfc3ByaXRlKS50byhcbiAgICAgICAgICAgICAgICAgICAgICAgIHt4OiB4X3RhcmdldCwgeTogeV90YXJnZXR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVycy5QVVNIX1RJTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKG51bWJlcnMuUFVTSF9USU1FID4+IDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZWVkX2NoYW5nZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFtkaXJlY3Rpb25zLnVwLCBkaXJlY3Rpb25zLmRvd25dLmluY2x1ZGVzKHRoaXMuY2FzdF9kaXJlY3Rpb24pICYmIFtkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdLmluY2x1ZGVzKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudHJ5aW5nX3RvX3B1c2hfZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FzdF9kaXJlY3Rpb24gPSBqb2luX2RpcmVjdGlvbnModGhpcy5jYXN0X2RpcmVjdGlvbiwgdGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRfY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoW2RpcmVjdGlvbnMudXAsIGRpcmVjdGlvbnMuZG93bl0uaW5jbHVkZXModGhpcy5jb250cm9sbGFibGVfY2hhci50cnlpbmdfdG9fcHVzaF9kaXJlY3Rpb24pICYmIFtkaXJlY3Rpb25zLmxlZnQsIGRpcmVjdGlvbnMucmlnaHRdLmluY2x1ZGVzKHRoaXMuY2FzdF9kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXN0X2RpcmVjdGlvbiA9IGpvaW5fZGlyZWN0aW9ucyh0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnRyeWluZ190b19wdXNoX2RpcmVjdGlvbiwgdGhpcy5jYXN0X2RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZF9jaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZWVkX2NoYW5nZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zZXRfZGlyZWN0aW9uKHRoaXMuY2FzdF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYW5pbWF0aW9ucy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0X2RpcmVjdGlvbiA9IHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmNhc3RfZGlyZWN0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmFuaW1hdGlvbnMucGxheShcImNhc3RfXCIgKyBkZXN0X2RpcmVjdGlvbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5hbmltYXRpb25zLmZyYW1lTmFtZSA9IGBjYXN0LyR7ZGVzdF9kaXJlY3Rpb259LzAxYDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3Nfc3FyX2Rpc3RhbmNlID0gTWF0aC5wb3codGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54IC0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5ib2R5LngsIDIpICsgTWF0aC5wb3codGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS55IC0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5ib2R5LnksIDIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRfc3FyX2Rpc3RhbmNlID0gTWF0aC5wb3cobnVtYmVycy5IRVJPX0JPRFlfUkFESVVTICsgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLnRhcmdldF9vYmplY3Qua2V5X25hbWVdLmJvZHlfcmFkaXVzLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc19zcXJfZGlzdGFuY2UgPD0gcmFkX3Nxcl9kaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54ID0gKHRoaXMuY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcyArIDAuNSkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnkgPSAodGhpcy5jb250cm9sbGFibGVfY2hhci50aWxlX3lfcG9zICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNoYWRvdy54ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuYm9keS54O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGFibGVfY2hhci5zaGFkb3cueSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmJvZHkueTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5ib2R5LnZlbG9jaXR5LnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaF9oYW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEubWFwLnNvcnRfc3ByaXRlcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2hhbmQoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5vdmVybGF5ZXJfZ3JvdXAuYWRkKHRoaXMuaGFuZF9zcHJpdGUpO1xuICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmJyaW5nVG9Ub3AodGhpcy5oYW5kX3Nwcml0ZSk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuc2NhbGUuc2V0VG8oMSwgMSk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuc2VuZF90b19mcm9udCA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmRhdGEubWFwLmNvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLnN0b3AodHJ1ZSk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuZnJhbWVOYW1lID0gdGhpcy5oYW5kX3Nwcml0ZV9iYXNlLmdldEZyYW1lTmFtZShNT1ZFX0hBTkRfS0VZX05BTUUsIHJldmVyc2VfZGlyZWN0aW9uc1t0aGlzLmNhc3RfZGlyZWN0aW9uXSwgMCk7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuYW5jaG9yLnggPSAwLjU7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclg7XG4gICAgICAgIHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWSA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclk7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlX2hhbmQoKSB7XG4gICAgICAgIGxldCB0cmFuc2xhdGVfeCA9IHRoaXMuaGFuZF9zcHJpdGUuY2VudGVyWDtcbiAgICAgICAgbGV0IHRyYW5zbGF0ZV95ID0gdGhpcy5oYW5kX3Nwcml0ZS5jZW50ZXJZO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmNlbnRlclg7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS55O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95IC09IE1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmNlbnRlclg7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV95ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS55IC0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5oZWlnaHQgKyB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3RoaXMudGFyZ2V0X29iamVjdC5rZXlfbmFtZV0uYm9keV9yYWRpdXM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3kgKz0gTUFYX0hBTkRfVFJBTlNMQVRFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLnggLSAyICogdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYlt0aGlzLnRhcmdldF9vYmplY3Qua2V5X25hbWVdLmJvZHlfcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeSA9IHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuY2VudGVyWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVfeCArPSBNQVhfSEFORF9UUkFOU0xBVEU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZV94ID0gdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS54ICsgMiAqIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbdGhpcy50YXJnZXRfb2JqZWN0LmtleV9uYW1lXS5ib2R5X3JhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3kgPSB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmNlbnRlclk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlX3ggLT0gTUFYX0hBTkRfVFJBTlNMQVRFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpLnRvKFxuICAgICAgICAgICAge2NlbnRlclg6IHRyYW5zbGF0ZV94LCBjZW50ZXJZOiB0cmFuc2xhdGVfeX0sXG4gICAgICAgICAgICAyMDAsXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhbmltX2tleSA9IHRoaXMuaGFuZF9zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoTU9WRV9IQU5EX0tFWV9OQU1FLCByZXZlcnNlX2RpcmVjdGlvbnNbdGhpcy5jYXN0X2RpcmVjdGlvbl0pO1xuICAgICAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbV9rZXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5maWx0ZXJzID0gW3RoaXMudGFyZ2V0X29iamVjdC5jb2xvcl9maWx0ZXJdO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9odWVzaGlmdF90aW1lci5sb29wKDUsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmNvbG9yX2ZpbHRlci5odWVfYWRqdXN0ID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc19hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDcwMCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmlzaF9oYW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmluaXNoX2hhbmQoKSB7XG4gICAgICAgIGxldCBmbGlwX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgbGV0IGZha2VfaGFuZF9zY2FsZSA9IHt4IDogMX07XG4gICAgICAgIGZsaXBfdGltZXIubG9vcCg0MCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kX3Nwcml0ZS5zY2FsZS54ID0gdGhpcy5oYW5kX3Nwcml0ZS5zY2FsZS54ID4gMCA/IC1mYWtlX2hhbmRfc2NhbGUueCA6IGZha2VfaGFuZF9zY2FsZS54O1xuICAgICAgICB9KTtcbiAgICAgICAgZmxpcF90aW1lci5zdGFydCgpO1xuICAgICAgICBsZXQgeV9zaGlmdCA9IHRoaXMuaGFuZF9zcHJpdGUueSAtIDEwO1xuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuaGFuZF9zcHJpdGUpLnRvKFxuICAgICAgICAgICAgeyB5OiB5X3NoaWZ0IH0sXG4gICAgICAgICAgICAzNTAsXG4gICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKGZha2VfaGFuZF9zY2FsZSkudG8oXG4gICAgICAgICAgICB7IHg6IDAgfSxcbiAgICAgICAgICAgIDM1MCxcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5oYW5kX3Nwcml0ZS5zY2FsZSkudG8oXG4gICAgICAgICAgICB7IHk6IDAgfSxcbiAgICAgICAgICAgIDM1MCxcbiAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfZmluYWxfZW1pdHRlcih0aGlzLmhhbmRfc3ByaXRlLngsIHRoaXMuaGFuZF9zcHJpdGUueSk7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICAgICAgZmxpcF90aW1lci5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLnJlbW92ZSh0aGlzLmhhbmRfc3ByaXRlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnVuc2V0X2VtaXR0ZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHNldF9lbWl0dGVyKCkge1xuICAgICAgICBsZXQgeF9zaGlmdCA9IDA7XG4gICAgICAgIGxldCB5X3NoaWZ0ID0gMDtcbiAgICAgICAgc3dpdGNoKHRoaXMuY2FzdF9kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy51cDpcbiAgICAgICAgICAgICAgICB5X3NoaWZ0ID0gLU1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5kb3duOlxuICAgICAgICAgICAgICAgIHlfc2hpZnQgPSBNQVhfSEFORF9UUkFOU0xBVEU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMubGVmdDpcbiAgICAgICAgICAgICAgICB4X3NoaWZ0ID0gLU1BWF9IQU5EX1RSQU5TTEFURTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICB4X3NoaWZ0ID0gTUFYX0hBTkRfVFJBTlNMQVRFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IHRoaXMuZ2FtZS5hZGQuZW1pdHRlcih0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYICsgeF9zaGlmdCwgdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWSArIHlfc2hpZnQsIDE1MCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfcGFydGljbGVcIik7XG4gICAgICAgIHRoaXMuZW1pdHRlci5taW5QYXJ0aWNsZVNwZWVkLnNldFRvKC0xNSwgLTE1KTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLm1heFBhcnRpY2xlU3BlZWQuc2V0VG8oMTUsIDE1KTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmdyYXZpdHkgPSAwO1xuICAgICAgICB0aGlzLmVtaXR0ZXIud2lkdGggPSAyICogTU9WRV9NQVhfUkFOR0U7XG4gICAgICAgIHRoaXMuZW1pdHRlci5oZWlnaHQgPSAyICogTU9WRV9NQVhfUkFOR0U7XG4gICAgICAgIHRoaXMuZW1pdHRlci5mb3JFYWNoKHBhcnRpY2xlID0+IHtcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMuYWRkKCd2YW5pc2gnLCBudWxsLCA0LCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXJ0X2VtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5zdGFydChmYWxzZSwgUGhhc2VyLlRpbWVyLlFVQVJURVIsIDE1LCAwKTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmZvckVhY2gocGFydGljbGUgPT4ge1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5wbGF5KCd2YW5pc2gnKTtcbiAgICAgICAgICAgIHBhcnRpY2xlLmFuaW1hdGlvbnMuY3VycmVudEFuaW0uc2V0RnJhbWUoKE1hdGgucmFuZG9tKCkgKiBwYXJ0aWNsZS5hbmltYXRpb25zLmZyYW1lVG90YWwpIHwgMCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuc2V0X2VtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgc2V0X2ZpbmFsX2VtaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlcl9wYXJ0aWNsZXNfY291bnQgPSA4O1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIgPSB0aGlzLmdhbWUuYWRkLmVtaXR0ZXIoMCwgMCwgdGhpcy5maW5hbF9lbWl0dGVyX3BhcnRpY2xlc19jb3VudCk7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5tYWtlUGFydGljbGVzKFwicHN5bmVyZ3lfcGFydGljbGVcIik7XG4gICAgICAgIHRoaXMuZmluYWxfZW1pdHRlci5ncmF2aXR5ID0gMzAwO1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLmFkZCgndmFuaXNoJywgbnVsbCwgNCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGFydF9maW5hbF9lbWl0dGVyKHgsIHkpIHtcbiAgICAgICAgdGhpcy5maW5hbF9lbWl0dGVyLnggPSB4O1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIueSA9IHk7XG4gICAgICAgIGxldCBsaWZldGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSO1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuc3RhcnQodHJ1ZSwgbGlmZXRpbWUsIG51bGwsIHRoaXMuZmluYWxfZW1pdHRlcl9wYXJ0aWNsZXNfY291bnQpO1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLnBsYXkoJ3ZhbmlzaCcpO1xuICAgICAgICAgICAgcGFydGljbGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5zZXRGcmFtZSgoTWF0aC5yYW5kb20oKSAqIHBhcnRpY2xlLmFuaW1hdGlvbnMuZnJhbWVUb3RhbCkgfCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQobGlmZXRpbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfZmluYWxfZW1pdHRlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1bnNldF9maW5hbF9lbWl0dGVyKCkge1xuICAgICAgICB0aGlzLmZpbmFsX2VtaXR0ZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHVuc2V0X2h1ZV9zaGlmdGVyKCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXRfZm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuZmlsdGVycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0X2h1ZXNoaWZ0X3RpbWVyLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRfbW92ZSgpIHtcbiAgICAgICAgdGhpcy5zZXRfZW1pdHRlcigpO1xuICAgICAgICB0aGlzLnNldF9maW5hbF9lbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc2VhcmNoX2Zvcl90YXJnZXQoKTtcbiAgICAgICAgdGhpcy5zZXRfaGFuZCgpO1xuICAgICAgICB0aGlzLmZpZWxkX3BzeW5lcmd5X3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZV9oYW5kKCk7XG4gICAgICAgIHRoaXMuc3RhcnRfZW1pdHRlcigpO1xuICAgIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gaW5pdF9jYXN0X2F1cmEoZ2FtZTogUGhhc2VyLkdhbWUsIHNwcml0ZTogUGhhc2VyLlNwcml0ZSwgZ3JvdXA6IFBoYXNlci5Hcm91cCwgZmlsdGVyLCBhZnRlcl9pbml0LCBhZnRlcl9kZXN0cm95LCBiZWZvcmVfZGVzdHJveSkge1xuICAgIGNvbnN0IHJpbmdfdXBfdGltZSA9IDc1MDtcbiAgICBjb25zdCByaW5nX3VwX3RpbWVfaGFsZiA9IHJpbmdfdXBfdGltZSA+PiAxO1xuICAgIGNvbnN0IHN0ZXBfdGltZSA9IChyaW5nX3VwX3RpbWUgLyAzKSB8IDA7XG4gICAgc3ByaXRlLmZpbHRlcnMgPSBbZmlsdGVyXTtcbiAgICBjb25zdCBhdXJhc19udW1iZXIgPSAyO1xuICAgIGxldCB0d2VlbnMgPSBbXTtcbiAgICBsZXQgc3RvcF9hc2tlZCA9IGZhbHNlO1xuICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXVyYXNfbnVtYmVyOyArK2opIHtcbiAgICAgICAgbGV0IGJhY2tfYXVyYSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBcInBzeW5lcmd5X2F1cmFcIik7XG4gICAgICAgIGxldCBmcm9udF9hdXJhID0gZ3JvdXAuY3JlYXRlKDAsIDAsIFwicHN5bmVyZ3lfYXVyYVwiKTtcbiAgICAgICAgYmFja19hdXJhLmJhc2VfY29sbGlzaW9uX2xheWVyID0gc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICBmcm9udF9hdXJhLmJhc2VfY29sbGlzaW9uX2xheWVyID0gc3ByaXRlLmJhc2VfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICBiYWNrX2F1cmEuc29ydF9mdW5jdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGdyb3VwLnNldENoaWxkSW5kZXgoYmFja19hdXJhLCBncm91cC5nZXRDaGlsZEluZGV4KHNwcml0ZSkpO1xuICAgICAgICB9O1xuICAgICAgICBiYWNrX2F1cmEuc29ydF9mdW5jdGlvbigpO1xuICAgICAgICBmcm9udF9hdXJhLnNvcnRfZnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBncm91cC5zZXRDaGlsZEluZGV4KGZyb250X2F1cmEsIGdyb3VwLmdldENoaWxkSW5kZXgoc3ByaXRlKSArIDEpO1xuICAgICAgICB9O1xuICAgICAgICBmcm9udF9hdXJhLnNvcnRfZnVuY3Rpb24oKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gc3ByaXRlLmhlaWdodCArIGZyb250X2F1cmEuaGVpZ2h0IC0gODtcbiAgICAgICAgY29uc3Qgc3RlcF9oZWlnaHQgPSAoaGVpZ2h0IC8gMykgfCAwO1xuICAgICAgICBmcm9udF9hdXJhLmFuY2hvci5zZXRUbygwLjUsIDApO1xuICAgICAgICBmcm9udF9hdXJhLmNlbnRlclggPSBzcHJpdGUuY2VudGVyWDtcbiAgICAgICAgZnJvbnRfYXVyYS5jZW50ZXJZID0gc3ByaXRlLmNlbnRlclkgKyAoc3ByaXRlLmhlaWdodCA+PiAxKSArIChmcm9udF9hdXJhLmhlaWdodCA+PiAxKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbF9mcm9udF95ID0gZnJvbnRfYXVyYS55O1xuICAgICAgICBmcm9udF9hdXJhLnNjYWxlLnNldFRvKDAsIDApO1xuICAgICAgICBiYWNrX2F1cmEuYW5jaG9yLnNldFRvKDAuNSwgMCk7XG4gICAgICAgIGJhY2tfYXVyYS5jZW50ZXJYID0gc3ByaXRlLmNlbnRlclg7XG4gICAgICAgIGJhY2tfYXVyYS5jZW50ZXJZID0gc3ByaXRlLmNlbnRlclkgKyAoc3ByaXRlLmhlaWdodCA+PiAxKSArIChiYWNrX2F1cmEuaGVpZ2h0ID4+IDEpO1xuICAgICAgICBjb25zdCBpbml0aWFsX2JhY2tfeSA9IGJhY2tfYXVyYS55O1xuICAgICAgICBiYWNrX2F1cmEuc2NhbGUuc2V0VG8oMCwgMCk7XG4gICAgICAgIGxldCBhdXJhcyA9IFtcbiAgICAgICAgICAgIHthdXJhOiBmcm9udF9hdXJhLCBpbml0aWFsX3k6IGluaXRpYWxfZnJvbnRfeSwgc2NhbGVfZmFjdG9yOiAxfSxcbiAgICAgICAgICAgIHthdXJhOiBiYWNrX2F1cmEsIGluaXRpYWxfeTogaW5pdGlhbF9iYWNrX3ksIHNjYWxlX2ZhY3RvcjogLTF9LFxuICAgICAgICBdO1xuICAgICAgICB0d2VlbnMucHVzaChbXSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXVyYXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBhdXJhID0gYXVyYXNbaV0uYXVyYTtcbiAgICAgICAgICAgIGxldCBpbml0aWFsX3kgPSBhdXJhc1tpXS5pbml0aWFsX3k7XG4gICAgICAgICAgICBsZXQgc2NhbGVfZmFjdG9yID0gYXVyYXNbaV0uc2NhbGVfZmFjdG9yO1xuICAgICAgICAgICAgbGV0IHR3ZWVuX2EgPSBnYW1lLmFkZC50d2VlbihhdXJhKS50byhcbiAgICAgICAgICAgICAgICB7IHk6IGluaXRpYWxfeSAtIHN0ZXBfaGVpZ2h0IH0sXG4gICAgICAgICAgICAgICAgc3RlcF90aW1lLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgdHdlZW5fYiA9IGdhbWUuYWRkLnR3ZWVuKGF1cmEpLnRvKFxuICAgICAgICAgICAgICAgIHsgeTogaW5pdGlhbF95IC0gMiAqIHN0ZXBfaGVpZ2h0IH0sXG4gICAgICAgICAgICAgICAgc3RlcF90aW1lLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgdHdlZW5fYyA9IGdhbWUuYWRkLnR3ZWVuKGF1cmEpLnRvKFxuICAgICAgICAgICAgICAgIHsgeTogaW5pdGlhbF95IC0gMyAqIHN0ZXBfaGVpZ2h0IH0sXG4gICAgICAgICAgICAgICAgc3RlcF90aW1lLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsgcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsgfSkpO1xuICAgICAgICAgICAgdHdlZW5fYy5vbkNvbXBsZXRlLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXVyYS55ID0gaW5pdGlhbF95O1xuICAgICAgICAgICAgICAgIGlmICghc3RvcF9hc2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0d2Vlbl9hLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuX2FhLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZV9yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgdHdlZW5fYWEgPSBnYW1lLmFkZC50d2VlbihhdXJhLnNjYWxlKS50byhcbiAgICAgICAgICAgICAgICB7IHg6IHNjYWxlX2ZhY3RvciwgeTogc2NhbGVfZmFjdG9yIH0sXG4gICAgICAgICAgICAgICAgcmluZ191cF90aW1lX2hhbGYsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuT3V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbGV0IHR3ZWVuX2NjID0gZ2FtZS5hZGQudHdlZW4oYXVyYS5zY2FsZSkudG8oXG4gICAgICAgICAgICAgICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICAgICAgcmluZ191cF90aW1lX2hhbGYsXG4gICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5RdWFkcmF0aWMuT3V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdHdlZW5zW2pdLnB1c2goe1xuICAgICAgICAgICAgICAgIGF1cmE6IGF1cmEsXG4gICAgICAgICAgICAgICAgdHdlZW5fYTogdHdlZW5fYSxcbiAgICAgICAgICAgICAgICB0d2Vlbl9hYTogdHdlZW5fYWEsXG4gICAgICAgICAgICAgICAgdHdlZW5fYjogdHdlZW5fYixcbiAgICAgICAgICAgICAgICB0d2Vlbl9jOiB0d2Vlbl9jLFxuICAgICAgICAgICAgICAgIHR3ZWVuX2NjOiB0d2Vlbl9jY1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0d2Vlbl9hLmNoYWluKHR3ZWVuX2IpO1xuICAgICAgICAgICAgdHdlZW5fYi5jaGFpbih0d2Vlbl9jKTtcbiAgICAgICAgICAgIHR3ZWVuX2FhLmNoYWluKHR3ZWVuX2NjKTtcbiAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICAgIHR3ZWVuX2FhLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuc1swXVtpXS5hdXJhLnkgPSBpbml0aWFsX3k7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuc1swXVtpXS50d2Vlbl9hLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHR3ZWVuc1swXVtpXS50d2Vlbl9hYS5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHR3ZWVuX2Euc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB0d2Vlbl9hYS5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBibGlua19jb3VudGVyID0gMTY7XG4gICAgbGV0IGJsaW5rX3RpbWVyID0gZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgbGV0IGh1ZV90aW1lciA9IGdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgIGJsaW5rX3RpbWVyLmxvb3AoNTAsICgpID0+IHtcbiAgICAgICAgaWYgKGJsaW5rX2NvdW50ZXIlMiA9PT0gMCkge1xuICAgICAgICAgICAgZmlsdGVyLnRpbnQgPSBbMSwxLDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsdGVyLnRpbnQgPSBbLTEsLTEsLTFdO1xuICAgICAgICB9XG4gICAgICAgIC0tYmxpbmtfY291bnRlcjtcbiAgICAgICAgaWYgKGJsaW5rX2NvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgIGZpbHRlci5ncmF5ID0gMC40O1xuICAgICAgICAgICAgYmxpbmtfdGltZXIuc3RvcCgpO1xuICAgICAgICAgICAgaWYgKGFmdGVyX2luaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFmdGVyX2luaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh1ZV90aW1lci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaHVlX3RpbWVyLmxvb3AoMTAwLCAoKSA9PiB7XG4gICAgICAgIGZpbHRlci5odWVfYWRqdXN0ID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgIH0pO1xuICAgIGJsaW5rX3RpbWVyLnN0YXJ0KCk7XG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGJlZm9yZV9kZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJlZm9yZV9kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RvcF9hc2tlZCA9IHRydWU7XG4gICAgICAgIGh1ZV90aW1lci5zdG9wKCk7XG4gICAgICAgIGJsaW5rX3RpbWVyLnN0b3AoKTtcbiAgICAgICAgZmlsdGVyLnRpbnQgPSBbLTEsLTEsLTFdO1xuICAgICAgICBmaWx0ZXIuZ3JheSA9IDA7XG4gICAgICAgIGZpbHRlci5odWVfYWRqdXN0ID0gMDtcbiAgICAgICAgc3ByaXRlLmZpbHRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0d2VlbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdHdlZW5zW2ldLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2Euc3RvcCgpO1xuICAgICAgICAgICAgICAgIHR3ZWVuc1tpXVtqXS50d2Vlbl9hYS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdHdlZW5zW2ldW2pdLnR3ZWVuX2Iuc3RvcCgpO1xuICAgICAgICAgICAgICAgIHR3ZWVuc1tpXVtqXS50d2Vlbl9jLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV1bal0udHdlZW5fY2Muc3RvcCgpO1xuICAgICAgICAgICAgICAgIGdyb3VwLnJlbW92ZSh0d2VlbnNbaV1bal0uYXVyYSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFmdGVyX2Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWZ0ZXJfZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbnRfbWFwX2xheWVycyhnYW1lLCBtYXAsIGZpbHRlciwgYWZ0ZXJfZGVzdHJveT8pIHtcbiAgICBmaWx0ZXIuY29sb3JpemVfaW50ZW5zaXR5ID0gMDtcbiAgICBmaWx0ZXIuZ3JheSA9IDA7XG4gICAgZmlsdGVyLmNvbG9yaXplID0gTWF0aC5yYW5kb20oKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcC5sYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbWFwLmxheWVyc1tpXS5zcHJpdGUuZmlsdGVycyA9IFtmaWx0ZXJdO1xuICAgIH1cbiAgICBnYW1lLmFkZC50d2VlbihmaWx0ZXIpLnRvKFxuICAgICAgICB7IGNvbG9yaXplX2ludGVuc2l0eTogMC40LCBncmF5OiAxIH0sXG4gICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSLFxuICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBnYW1lLmFkZC50d2VlbihmaWx0ZXIpLnRvKFxuICAgICAgICAgICAgeyBjb2xvcml6ZV9pbnRlbnNpdHk6IDAsIGdyYXk6IDAgfSxcbiAgICAgICAgICAgIFBoYXNlci5UaW1lci5RVUFSVEVSLFxuICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgZmlsdGVyLmNvbG9yaXplID0gLTE7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcC5sYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtYXAubGF5ZXJzW2ldLnNwcml0ZS5maWx0ZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyX2Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFmdGVyX2Rlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uL1dpbmRvdyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplLCBnZXRfdGV4dF93aWR0aCB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5cbmNvbnN0IEJBU0VfV0lEVEggPSAxMDtcbmNvbnN0IEJBU0VfSEVJR0hUID0gMjA7XG5jb25zdCBQT1NfWCA9IChudW1iZXJzLkdBTUVfV0lEVEggPj4gMSkgLSAoQkFTRV9XSURUSCA+PiAxKTtcbmNvbnN0IFBPU19ZID0gKG51bWJlcnMuR0FNRV9IRUlHSFQgPj4gMSkgKyBudW1iZXJzLkhFUk9fQk9EWV9SQURJVVMgKyA2O1xuY29uc3QgRElGRl9USFJFU0hPTEQgPSA5MDtcbmNvbnN0IERJRkZfQ09SUkVDVElPTiA9IDU2O1xuXG4vKlRoZSB3aW5kb3cgc2hvd2luZyBjYXN0IHBzeW5lcmd5J3MgbmFtZSBvbiB0aGUgZmllbGRcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2UqL1xuZXhwb3J0IGNsYXNzIEZpZWxkUHN5bmVyZ3lXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgdGV4dDogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgUE9TX1gsIFBPU19ZLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMud2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKkNhbGN1bGF0ZXMgYSB2ZXJ0aWNhbCBvZmZzZXQgc28gdGhlIHdpbmRvdyBkb2Vzbid0IGNvdmVyIHRoZSBoZXJvXG5cbiAgICBPdXRwdXQ6IFtudW1iZXJdIC0gVGhlIHZlcnRpY2FsIG9mZnNldCB0byBhcHBseSovXG4gICAgdmVydGljYWxfYWRqdXN0KCl7XG4gICAgICAgIGxldCBkaWZmID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHJldHVybiBkaWZmID4gRElGRl9USFJFU0hPTEQgPyAtRElGRl9DT1JSRUNUSU9OKyhkaWZmLURJRkZfVEhSRVNIT0xEKSA6IDA7XG4gICAgfVxuXG4gICAgLypPcGVucyB0aGUgd2luZG93IHdpdGggdGhlIHBzeW5lcmd5IG5hbWVcblxuICAgIElucHV0OiB0ZXh0IFtzdHJpbmddIC0gVGhlIHBzeW5lcmd5IG5hbWUgdG8gc2hvd1xuICAgICAgICAgICBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgb3Blbih0ZXh0LCBjYWxsYmFjaz8pIHtcbiAgICAgICAgY29uc3QgbmV3X3RleHQgPSBjYXBpdGFsaXplKHRleHQpO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChuZXdfdGV4dCwgdGhpcy50ZXh0KTtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3NpemUoe3dpZHRoOiBCQVNFX1dJRFRIK3RoaXMudGV4dC50ZXh0LndpZHRoLCBoZWlnaHQ6IEJBU0VfSEVJR0hUfSk7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogKFBPU19YIC0gKHRoaXMudGV4dC50ZXh0LndpZHRoID4+IDEpKSB8IDAsIHk6IChQT1NfWSArIHRoaXMudmVydGljYWxfYWRqdXN0KCkpIHwgMH0pO1xuICAgICAgICBcblxuICAgICAgICB0aGlzLndpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qQ2xvc2VzIHRoZSB3aW5kb3dcblxuICAgIElucHV0OiBjYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgY2xvc2UoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMud2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBnZXRfc3Vycm91bmRpbmdzLCBkaXJlY3Rpb25zfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IEp1bXBFdmVudCB9IGZyb20gXCIuLi90aWxlX2V2ZW50cy9KdW1wRXZlbnRcIjtcbmltcG9ydCB7IEZpZWxkQWJpbGl0aWVzIH0gZnJvbSBcIi4vRmllbGRBYmlsaXRpZXNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBBQklMSVRZX0tFWV9OQU1FID0gXCJmcm9zdFwiO1xuY29uc3QgQUNUSU9OX0tFWV9OQU1FID0gXCJjYXN0XCI7XG5jb25zdCBGUk9TVF9NQVhfUkFOR0UgPSAxMjtcbmNvbnN0IFNOT1dGTEFLRVNfQ09VTlQgPSAxNjtcbmNvbnN0IFRPVEFMX1RVUk5TX1NOT1dGTEFLRVMgPSBNYXRoLlBJICogNztcbmNvbnN0IFBPTEFSX1NMT1BFID0gMC4xNTtcbmNvbnN0IFNQSVJBTF9JTlRFTlNJVFkgPSA4O1xuY29uc3QgU05PV0ZMQUtFX0RVUkFUSU9OID0gMTY1MDtcblxuLypIYW5kbGVzIHRoZSBcIkZyb3N0XCIgZmllbGQgcHN5bmVyZ3lcbkRvZXMgbm90IGhhbmRsZSB0aGUgaW4tYmF0dGxlIGNvbW1hbmRcblxuSW5wdXQ6Z2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZSovXG5leHBvcnQgY2xhc3MgRnJvc3RGaWVsZFBzeW5lcmd5IGV4dGVuZHMgRmllbGRBYmlsaXRpZXMge1xuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgQUJJTElUWV9LRVlfTkFNRSwgRlJPU1RfTUFYX1JBTkdFLCBBQ1RJT05fS0VZX05BTUUsIHRydWUpO1xuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9zbm93Zmxha2VzLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qQmVnaW5zIHRoZSBzbm93Zmxha2UgZWZmZWN0c1xuICAgIFVwb24gZmluaXNoaW5nLCB0cmlnZ2VycyB0aGUgcGlsbGFyJ3MgZ3Jvd3RoKi9cbiAgICBpbml0X3Nub3dmbGFrZXMoKSB7XG4gICAgICAgIHRoaXMuZmllbGRfcHN5bmVyZ3lfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU05PV0ZMQUtFU19DT1VOVDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc25vd2ZsYWtlX3Nwcml0ZSA9IHRoaXMuZGF0YS5vdmVybGF5ZXJfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiZnJvc3Rfc25vd2ZsYWtlXCIpO1xuICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVfZmFjdG9yID0gXy5yYW5kb20oNSwgOCkvMTAuMDtcbiAgICAgICAgICAgIGNvbnN0IHJvdGF0aW9uX2ZhY3RvciA9IE1hdGgucmFuZG9tKCkgKiBudW1iZXJzLmRlZ3JlZTM2MDtcbiAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuc2NhbGUuc2V0VG8oc2NhbGVfZmFjdG9yLCBzY2FsZV9mYWN0b3IpO1xuICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5yb3RhdGlvbiA9IHJvdGF0aW9uX2ZhY3RvcjtcbiAgICAgICAgICAgIGxldCB4X2Rlc3QgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYO1xuICAgICAgICAgICAgbGV0IHlfZGVzdCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyAxMjtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jYXN0X2RpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OiB4X2Rlc3QgLT0gMTY7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDogeF9kZXN0ICs9IDE2OyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMudXA6IHlfZGVzdCAtPSAxNDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246IHlfZGVzdCArPSAxMjsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3BpcmFsX2FuZ2xlID0ge3JhZDogVE9UQUxfVFVSTlNfU05PV0ZMQUtFU307XG4gICAgICAgICAgICBjb25zdCBzaWduX3ggPSBNYXRoLnNpZ24oTWF0aC5yYW5kb20oKSAtIDAuNSk7XG4gICAgICAgICAgICBjb25zdCBzaWduX3kgPSBNYXRoLnNpZ24oTWF0aC5yYW5kb20oKSAtIDAuNSk7XG4gICAgICAgICAgICBjb25zdCB0d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4oc3BpcmFsX2FuZ2xlKS50byhcbiAgICAgICAgICAgICAgICB7cmFkOiAtTWF0aC5QSX0sXG4gICAgICAgICAgICAgICAgU05PV0ZMQUtFX0RVUkFUSU9OLFxuICAgICAgICAgICAgICAgIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICBpKihQaGFzZXIuVGltZXIuUVVBUlRFUi81KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHR3ZWVuLm9uVXBkYXRlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNub3dmbGFrZV9zcHJpdGUuY2VudGVyWCA9IHNpZ25feCAqIFNQSVJBTF9JTlRFTlNJVFkgKiBNYXRoLmV4cChQT0xBUl9TTE9QRSAqIHNwaXJhbF9hbmdsZS5yYWQpICogTWF0aC5jb3Moc3BpcmFsX2FuZ2xlLnJhZCkgKyB4X2Rlc3Q7XG4gICAgICAgICAgICAgICAgc25vd2ZsYWtlX3Nwcml0ZS5jZW50ZXJZID0gc2lnbl95ICogU1BJUkFMX0lOVEVOU0lUWSAqIE1hdGguZXhwKFBPTEFSX1NMT1BFICogc3BpcmFsX2FuZ2xlLnJhZCkgKiBNYXRoLnNpbihzcGlyYWxfYW5nbGUucmFkKSArIHlfZGVzdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHdlZW4ub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzbm93Zmxha2Vfc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gU05PV0ZMQUtFU19DT1VOVCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0X2ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRfcGlsbGFyKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkNoYW5nZXMgdGhlIHBvb2wgaW50byBhIHBpbGxhclxuICAgIFdpbGwgY2hhbmdlIGl0cyBwcm9wZXJ0aWVzIGFuZCBhbmltYXRpb24qL1xuICAgIGluaXRfcGlsbGFyKCkge1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuZ2V0X2V2ZW50cygpLmZvckVhY2goKGV2ZW50OiBKdW1wRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5pc19zZXQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuaXNfc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuaXNfc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBKdW1wRXZlbnQuYWN0aXZlX2p1bXBfc3Vycm91bmRpbmdzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGdldF9zdXJyb3VuZGluZ3MoZXZlbnQueCwgZXZlbnQueSwgZmFsc2UsIDIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY29sbGlkZXJfbGF5ZXJfc2hpZnQgKyB0aGlzLnRhcmdldF9vYmplY3QuYmFzZV9jb2xsaXNpb25fbGF5ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5zZW5kX3RvX2JhY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kYXRhLm1hcC5zb3J0X3Nwcml0ZXMoKTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnMgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcignQ29sb3JGaWx0ZXJzJyk7XG4gICAgICAgIHRoaXMudGFyZ2V0X29iamVjdC5zcHJpdGUuZmlsdGVycyA9IFt0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVyc107XG4gICAgICAgIGxldCBibGlua19jb3VudGVyID0gMTY7XG4gICAgICAgIGxldCBibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIGJsaW5rX3RpbWVyLmxvb3AoNTAsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChibGlua19jb3VudGVyJTIgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldF9vYmplY3QuY3VzdG9tX2RhdGEuY29sb3JfZmlsdGVycy50aW50ID0gWzEsMSwxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmN1c3RvbV9kYXRhLmNvbG9yX2ZpbHRlcnMudGludCA9IFstMSwtMSwtMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAtLWJsaW5rX2NvdW50ZXI7XG4gICAgICAgICAgICBpZiAoYmxpbmtfY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGJsaW5rX3RpbWVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3dfcGlsbGFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibGlua190aW1lci5zdGFydCgpO1xuICAgIH1cblxuICAgIC8qUGxheXMgdGhlIHBpbGxhcidzIGdyb3dpbmcgYW5pbWF0aW9uKi9cbiAgICBncm93X3BpbGxhcigpIHtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5hbmltYXRpb25zLnBsYXkoXCJmcm9zdF9wb29sX3BpbGxhclwiKTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldF9wZXJtYW5lbnRfYmxpbmsoKTtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qRW5hYmxlcyB0aGUgcGlsbGFyJ3MgYmxpbmtpbmcgc3RhdGUqL1xuICAgIHNldF9wZXJtYW5lbnRfYmxpbmsoKSB7XG4gICAgICAgIGxldCBibGlua190aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIGxldCB0YXJnZXRfb2JqZWN0ID0gdGhpcy50YXJnZXRfb2JqZWN0O1xuICAgICAgICBibGlua190aW1lci5sb29wKDE1MCwgKCkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YS5jb2xvcl9maWx0ZXJzLmh1ZV9hZGp1c3QgPSA1LjM7XG4gICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDIwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X29iamVjdC5jdXN0b21fZGF0YS5jb2xvcl9maWx0ZXJzLmh1ZV9hZGp1c3QgPSAwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBibGlua190aW1lci5zdGFydCgpO1xuICAgICAgICB0YXJnZXRfb2JqZWN0LnNwcml0ZS5ldmVudHMub25EZXN0cm95LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBibGlua190aW1lci5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBkaXJlY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBGaWVsZEFiaWxpdGllcyB9IGZyb20gXCIuL0ZpZWxkQWJpbGl0aWVzXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcblxuY29uc3QgQUJJTElUWV9LRVlfTkFNRSA9IFwiZ3Jvd3RoXCI7XG5jb25zdCBBQ1RJT05fS0VZX05BTUUgPSBcImNhc3RcIjtcbmNvbnN0IEdST1dUSF9NQVhfUkFOR0UgPSAxMjtcbmNvbnN0IE1BWF9QQVJUSUNMRV9TUEVFRCA9IDYwO1xuY29uc3QgTUlOX1BBUlRJQ0xFX1NQRUVEID0gNTU7XG5jb25zdCBYX1BBUlRJQ0xFX1NQRUVEID0gMzU7XG5jb25zdCBZX1BBUlRJQ0xFX1NQRUVEID0gMzU7XG5jb25zdCBOT19UQVJHRVRfU1BST1VUX0NPVU5UID0gNTtcblxuZXhwb3J0IGNsYXNzIEdyb3d0aEZpZWxkUHN5bmVyZ3kgZXh0ZW5kcyBGaWVsZEFiaWxpdGllcyB7XG4gICAgcHVibGljIGluY3JlYXNlX2R1cmF0aW9uOiBudW1iZXI7XG4gICAgcHVibGljIGVtaXR0ZXI6IFBoYXNlci5QYXJ0aWNsZXMuQXJjYWRlLkVtaXR0ZXI7XG4gICAgcHVibGljIHBhcnRpY2xlX2ZpbHRlcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBBQklMSVRZX0tFWV9OQU1FLCBHUk9XVEhfTUFYX1JBTkdFLCBBQ1RJT05fS0VZX05BTUUsIHRydWUpO1xuICAgICAgICB0aGlzLnNldF9ib290c3RyYXBfbWV0aG9kKHRoaXMuaW5pdF9idWJibGVzLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHNldF9lbWl0dGVyKCkge1xuICAgICAgICBsZXQgbWF4X3hfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWF4X3lfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWluX3hfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgbWluX3lfc3BlZWQgPSAwO1xuICAgICAgICBsZXQgeF9kZXN0ID0gdGhpcy5jb250cm9sbGFibGVfY2hhci5zcHJpdGUuY2VudGVyWDtcbiAgICAgICAgbGV0IHlfZGVzdCA9IHRoaXMuY29udHJvbGxhYmxlX2NoYXIuc3ByaXRlLmNlbnRlclkgKyA1O1xuICAgICAgICBsZXQgZW1pdHRlcl93aWR0aCA9IDA7XG4gICAgICAgIGxldCBlbWl0dGVyX2hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24gPSAwO1xuICAgICAgICBzd2l0Y2godGhpcy5jYXN0X2RpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgICAgIG1heF95X3NwZWVkID0gLU1BWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtaW5feV9zcGVlZCA9IC1NSU5fUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgbWF4X3hfc3BlZWQgPSBtaW5feF9zcGVlZCA9IFhfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgeV9kZXN0IC09IDc7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl93aWR0aCA9IEdST1dUSF9NQVhfUkFOR0UgPj4gMTtcbiAgICAgICAgICAgICAgICBlbWl0dGVyX2hlaWdodCA9IDEuNSAqIEdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNyZWFzZV9kdXJhdGlvbiA9IDgwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmRvd246XG4gICAgICAgICAgICAgICAgbWF4X3lfc3BlZWQgPSBNQVhfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgbWluX3lfc3BlZWQgPSBNSU5fUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgbWF4X3hfc3BlZWQgPSBtaW5feF9zcGVlZCA9IFhfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgeV9kZXN0ICs9IDEyO1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSBHUk9XVEhfTUFYX1JBTkdFID4+IDE7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSAxLjUgKiBHUk9XVEhfTUFYX1JBTkdFO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24gPSA4MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5sZWZ0OlxuICAgICAgICAgICAgICAgIG1heF94X3NwZWVkID0gLU1BWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtaW5feF9zcGVlZCA9IC1NSU5fUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgbWF4X3lfc3BlZWQgPSBtaW5feV9zcGVlZCA9IFlfUEFSVElDTEVfU1BFRUQ7XG4gICAgICAgICAgICAgICAgeF9kZXN0IC09IDE2O1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfd2lkdGggPSAxLjUgKiBHUk9XVEhfTUFYX1JBTkdFO1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJfaGVpZ2h0ID0gR1JPV1RIX01BWF9SQU5HRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICBtYXhfeF9zcGVlZCA9IE1BWF9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtaW5feF9zcGVlZCA9IE1JTl9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICBtYXhfeV9zcGVlZCA9IG1pbl95X3NwZWVkID0gWV9QQVJUSUNMRV9TUEVFRDtcbiAgICAgICAgICAgICAgICB4X2Rlc3QgKz0gMTY7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl93aWR0aCA9IDEuNSAqIEdST1dUSF9NQVhfUkFOR0U7XG4gICAgICAgICAgICAgICAgZW1pdHRlcl9oZWlnaHQgPSBHUk9XVEhfTUFYX1JBTkdFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IHRoaXMuZ2FtZS5hZGQuZW1pdHRlcih4X2Rlc3QsIHlfZGVzdCwgMjApO1xuICAgICAgICB0aGlzLmVtaXR0ZXIubWFrZVBhcnRpY2xlcyhcInBzeW5lcmd5X2JhbGxcIik7XG4gICAgICAgIHRoaXMuZW1pdHRlci5taW5QYXJ0aWNsZVNwZWVkLnNldFRvKG1pbl94X3NwZWVkLCBtaW5feV9zcGVlZCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5tYXhQYXJ0aWNsZVNwZWVkLnNldFRvKG1heF94X3NwZWVkLCBtYXhfeV9zcGVlZCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5ncmF2aXR5ID0gMDtcbiAgICAgICAgdGhpcy5lbWl0dGVyLndpZHRoID0gZW1pdHRlcl93aWR0aDtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmhlaWdodCA9IGVtaXR0ZXJfaGVpZ2h0O1xuICAgICAgICB0aGlzLnBhcnRpY2xlX2ZpbHRlciA9IHRoaXMuZ2FtZS5hZGQuZmlsdGVyKCdDb2xvckZpbHRlcnMnKTtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZV9maWx0ZXIuaHVlX2FkanVzdCA9IDM7XG4gICAgICAgIHRoaXMuZW1pdHRlci5tYXhQYXJ0aWNsZVNjYWxlID0gMC41O1xuICAgICAgICB0aGlzLmVtaXR0ZXIubWluUGFydGljbGVTY2FsZSA9IDAuNDtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmZvckVhY2gocGFydGljbGUgPT4ge1xuICAgICAgICAgICAgcGFydGljbGUuZmlsdGVycyA9IFt0aGlzLnBhcnRpY2xlX2ZpbHRlcl07XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLmFkZCgnc2hpbmUnLCBbXCJiYWxsLzAxXCIsIFwiYmFsbC8wMlwiLCBcImJhbGwvMDNcIl0sIDQsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGluaXRfYnViYmxlcygpIHtcbiAgICAgICAgdGhpcy5maWVsZF9wc3luZXJneV93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zZXRfZW1pdHRlcigpO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuc3RhcnQoZmFsc2UsIDEwMCArIHRoaXMuaW5jcmVhc2VfZHVyYXRpb24sIDgsIDApO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG4gICAgICAgICAgICBwYXJ0aWNsZS5hbmltYXRpb25zLnBsYXkoJ3NoaW5lJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldF9mb3VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3Jvd19zcHJvdXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taXNzX3RhcmdldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBncm93X3Nwcm91dCgpIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LmdldF9ldmVudHMoKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGV2ZW50LmFjdGl2YXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRhcmdldF9vYmplY3Quc3ByaXRlLmFuaW1hdGlvbnMucGxheShcImdyb3d0aF9ncm93aW5nXCIsIDgsIGZhbHNlKTtcbiAgICAgICAgdGhpcy50YXJnZXRfb2JqZWN0LnNwcml0ZS5hbmltYXRpb25zLmN1cnJlbnRBbmltLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVuc2V0X2hlcm9fY2FzdF9hbmltKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BfY2FzdGluZygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtaXNzX3RhcmdldCgpIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmRlc3Ryb3koKTtcbiAgICAgICAgbGV0IGdyb3dfY2VudGVyX3ggPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJYOyBcbiAgICAgICAgbGV0IGdyb3dfY2VudGVyX3kgPSB0aGlzLmNvbnRyb2xsYWJsZV9jaGFyLnNwcml0ZS5jZW50ZXJZICsgMTc7IFxuICAgICAgICBzd2l0Y2godGhpcy5jYXN0X2RpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLnVwOlxuICAgICAgICAgICAgICAgIGdyb3dfY2VudGVyX3kgLT0gMTY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRpcmVjdGlvbnMuZG93bjpcbiAgICAgICAgICAgICAgICBncm93X2NlbnRlcl95ICs9IDE2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBkaXJlY3Rpb25zLmxlZnQ6XG4gICAgICAgICAgICAgICAgZ3Jvd19jZW50ZXJfeCAtPSAxNjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGlyZWN0aW9ucy5yaWdodDpcbiAgICAgICAgICAgICAgICBncm93X2NlbnRlcl94ICs9IDE2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyYW1lcyA9IFBoYXNlci5BbmltYXRpb24uZ2VuZXJhdGVGcmFtZU5hbWVzKCdncm93dGgvbm9fdGFyZ2V0LycsIDAsIDYsICcnLCAyKTtcbiAgICAgICAgbGV0IHByb21pc2VzID0gbmV3IEFycmF5KE5PX1RBUkdFVF9TUFJPVVRfQ09VTlQpO1xuICAgICAgICBjb25zdCB2YXJpYXRpb24gPSAxMztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOT19UQVJHRVRfU1BST1VUX0NPVU5UOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBtaXNzX3RhcmdldF9zcHJpdGUgPSB0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLmNyZWF0ZShncm93X2NlbnRlcl94ICsgXy5yYW5kb20oLXZhcmlhdGlvbiwgdmFyaWF0aW9uKSwgZ3Jvd19jZW50ZXJfeSArIF8ucmFuZG9tKC12YXJpYXRpb24sIHZhcmlhdGlvbiksIFwiZ3Jvd3RoX2dyb3d0aFwiKTtcbiAgICAgICAgICAgIG1pc3NfdGFyZ2V0X3Nwcml0ZS5hbmNob3Iuc2V0VG8oMC41LCAxKTtcbiAgICAgICAgICAgIG1pc3NfdGFyZ2V0X3Nwcml0ZS5hbmltYXRpb25zLmFkZChcIm5vX3RhcmdldFwiLCBmcmFtZXMsIDEwLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgbGV0IHJlc29sdmVfZnVuYztcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHJlc29sdmVfZnVuYyA9IHJlc29sdmU7IH0pKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoaSAqIDQwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbWlzc190YXJnZXRfc3ByaXRlLmFuaW1hdGlvbnMucGxheShcIm5vX3RhcmdldFwiKTtcbiAgICAgICAgICAgICAgICBtaXNzX3RhcmdldF9zcHJpdGUuYW5pbWF0aW9ucy5jdXJyZW50QW5pbS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtaXNzX3RhcmdldF9zcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlX2Z1bmMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudW5zZXRfaGVyb19jYXN0X2FuaW0oKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcF9jYXN0aW5nKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vSXRlbSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX2l0ZW1zKGdhbWUsIGl0ZW1zX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBpdGVtc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtX2RhdGEgPSBpdGVtc19kYltpXTtcbiAgICAgICAgaXRlbXNfbGlzdFtpdGVtX2RhdGEua2V5X25hbWVdID0gbmV3IEl0ZW0oXG4gICAgICAgICAgICBpdGVtX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBpdGVtX2RhdGEubmFtZSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS50eXBlLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaXRlbV9kYXRhLnVzZV90eXBlLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmN1cnNlc193aGVuX2VxdWlwcGVkLFxuICAgICAgICAgICAgaXRlbV9kYXRhLmNhbnRfYmVfcmVtb3ZlZCxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5yYXJlX2l0ZW0sXG4gICAgICAgICAgICBpdGVtX2RhdGEuaW1wb3J0YW50X2l0ZW0sXG4gICAgICAgICAgICBpdGVtX2RhdGEuY2FycnlfdXBfdG9fMzAsXG4gICAgICAgICAgICBpdGVtX2RhdGEuZWZmZWN0cyxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5hdHRyaWJ1dGUsXG4gICAgICAgICAgICBpdGVtX2RhdGEudW5sZWFzaF9hYmlsaXR5LFxuICAgICAgICAgICAgaXRlbV9kYXRhLnVubGVhc2hfcmF0ZSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS51c2VfYWJpbGl0eSxcbiAgICAgICAgICAgIGl0ZW1fZGF0YS5lcXVpcGFibGVfY2hhcnMsXG4gICAgICAgICAgICBpdGVtX2RhdGEucHJpY2UsXG4gICAgICAgICAgICBpdGVtX2RhdGEuZ3JhbnRlZF9hYmlsaXR5XG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGxvYWRlciA9IGdhbWUubG9hZC5hdGxhc0pTT05IYXNoKCdpdGVtc19pY29ucycsICdhc3NldHMvaW1hZ2VzL2ljb25zL2l0ZW1zL2l0ZW1zX2ljb25zLnBuZycsICdhc3NldHMvaW1hZ2VzL2ljb25zL2l0ZW1zL2l0ZW1zX2ljb25zLmpzb24nKTtcbiAgICBsb2FkZXIub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgZ2FtZS5sb2FkLnN0YXJ0KCk7XG4gICAgcmV0dXJuIGl0ZW1zX2xpc3Q7XG59XG4iLCJpbXBvcnQgeyBEamlubiB9IGZyb20gJy4uL0RqaW5uJztcbmltcG9ydCB7IFNwcml0ZUJhc2UgfSBmcm9tICcuLi9TcHJpdGVCYXNlJztcbmltcG9ydCB7IGVsZW1lbnRzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9kamlubmkoZGppbm5pX2RiKSB7XG4gICAgbGV0IGRqaW5uaV9saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkamlubmlfZGIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZGppbm5fZGF0YSA9IGRqaW5uaV9kYltpXTtcbiAgICAgICAgZGppbm5pX2xpc3RbZGppbm5fZGF0YS5rZXlfbmFtZV0gPSBuZXcgRGppbm4oXG4gICAgICAgICAgICBkamlubl9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgZGppbm5fZGF0YS5uYW1lLFxuICAgICAgICAgICAgZGppbm5fZGF0YS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuZWxlbWVudCxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuYWJpbGl0eV9rZXlfbmFtZSxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuaHBfYm9vc3QsXG4gICAgICAgICAgICBkamlubl9kYXRhLnBwX2Jvb3N0LFxuICAgICAgICAgICAgZGppbm5fZGF0YS5hdGtfYm9vc3QsXG4gICAgICAgICAgICBkamlubl9kYXRhLmRlZl9ib29zdCxcbiAgICAgICAgICAgIGRqaW5uX2RhdGEuYWdpX2Jvb3N0LFxuICAgICAgICAgICAgZGppbm5fZGF0YS5sdWtfYm9vc3QsXG4gICAgICAgICAgICBpXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkamlubmlfbGlzdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfZGppbm5pX3Nwcml0ZXMoZ2FtZSwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBjb25zdCBhY3Rpb25zID0gW1wic2V0XCIsIFwic3RhbmRieVwiXTtcbiAgICBjb25zdCBkaXJlY3Rpb25zID0ge1xuICAgICAgICBzZXQ6IFtcImRvd25cIl0sXG4gICAgICAgIHN0YW5kYnk6IFtcImxlZnRcIiwgXCJkb3duXCJdXG4gICAgfTtcbiAgICBjb25zdCBmcmFtZXNfbnVtYmVyID0gNDtcbiAgICBjb25zdCBmcmFtZXNfcmF0ZSA9IHtcbiAgICAgICAgc2V0OiA2LFxuICAgICAgICBzdGFuZGJ5OiAyXG4gICAgfTtcbiAgICBjb25zdCBiYXNlX3BhdGggPSBcImFzc2V0cy9pbWFnZXMvc3ByaXRlc2hlZXRzL2RqaW5uL1wiO1xuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgbGV0IGRqaW5uaV9zcHJpdGVzID0ge307XG4gICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1trZXldO1xuICAgICAgICBpZiAoZWxlbWVudCA9PT0gZWxlbWVudHMuTk9fRUxFTUVOVCkgY29udGludWU7XG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdID0gbmV3IFNwcml0ZUJhc2UoZWxlbWVudCArIFwiX2RqaW5uXCIsIGFjdGlvbnMpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGFjdGlvbnNbal07XG4gICAgICAgICAgICBkamlubmlfc3ByaXRlc1tlbGVtZW50XS5zZXRBY3Rpb25TcHJpdGVzaGVldChhY3Rpb24sIGAke2Jhc2VfcGF0aH0ke2VsZW1lbnR9X2RqaW5uLnBuZ2AsIGAke2Jhc2VfcGF0aH0ke2VsZW1lbnR9X2RqaW5uLmpzb25gKTtcbiAgICAgICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLnNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLCBkaXJlY3Rpb25zW2FjdGlvbl0sIG5ldyBBcnJheShkaXJlY3Rpb25zW2FjdGlvbl0ubGVuZ3RoKS5maWxsKGZyYW1lc19udW1iZXIpKTtcbiAgICAgICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLnNldEFjdGlvbkZyYW1lUmF0ZShhY3Rpb24sIGZyYW1lc19yYXRlW2FjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICAgIGRqaW5uaV9zcHJpdGVzW2VsZW1lbnRdLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG5cbiAgICAgICAgbGV0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvYWRfcHJvbWlzZXMucHVzaChsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2UpO1xuICAgICAgICBkamlubmlfc3ByaXRlc1tlbGVtZW50XS5sb2FkU3ByaXRlc2hlZXRzKGdhbWUsIHRydWUsIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgcmV0dXJuIGRqaW5uaV9zcHJpdGVzO1xufSIsImltcG9ydCB7IEVuZW15QmFzZSB9IGZyb20gJy4uL0VuZW15JztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVfZW5lbWllcyhnYW1lLCBlbmVtaWVzX2RiLCBsb2FkX3Byb21pc2VfcmVzb2x2ZSkge1xuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgbGV0IGVuZW1pZXNfbGlzdCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5lbWllc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIGRhdGE6IGVuZW1pZXNfZGJbaV0sXG4gICAgICAgICAgICBzcHJpdGVfYmFzZTogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBpbmZvLnNwcml0ZV9iYXNlID0gbmV3IEVuZW15QmFzZShpbmZvLmRhdGEua2V5X25hbWUpO1xuXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGluZm8uZGF0YS5iYXR0bGVfc3ByaXRlc2hlZXQ7XG4gICAgICAgIGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5mby5zcHJpdGVfYmFzZS5zZXRBY3Rpb25TcHJpdGVzaGVldChcImJhdHRsZVwiLCBhY3Rpb24uc3ByaXRlc2hlZXRfaW1nLCBhY3Rpb24uc3ByaXRlc2hlZXQpO1xuICAgICAgICAgICAgaW5mby5zcHJpdGVfYmFzZS5zZXRBY3Rpb25EaXJlY3Rpb25zKFwiYmF0dGxlXCIsIGFjdGlvbi5wb3NpdGlvbnMsIGFjdGlvbi5mcmFtZXNfbnVtYmVyKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uRnJhbWVSYXRlKFwiYmF0dGxlXCIsIGFjdGlvbi5mcmFtZV9yYXRlKTtcbiAgICAgICAgICAgIGluZm8uc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uTG9vcChcImJhdHRsZVwiLCBhY3Rpb24ubG9vcCk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG5cbiAgICAgICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfc3ByaXRlc2hlZXRfcHJvbWlzZSk7XG4gICAgICAgICAgICBpbmZvLnNwcml0ZV9iYXNlLmxvYWRTcHJpdGVzaGVldHMoZ2FtZSwgdHJ1ZSwgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlX3Jlc29sdmUpO1xuICAgICAgICB9XG4gICAgICAgIGVuZW1pZXNfbGlzdFtpbmZvLmRhdGEua2V5X25hbWVdID0gaW5mbztcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwobG9hZF9wcm9taXNlcykudGhlbihsb2FkX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgcmV0dXJuIGVuZW1pZXNfbGlzdDtcbn0iLCJpbXBvcnQgeyBNYXAgfSBmcm9tIFwiLi4vTWFwXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21hcHMoZ2FtZSwgZGF0YSwgbWFwc19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgbWFwcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBtYXBfZGF0YSA9IG1hcHNfZGJbaV07XG4gICAgICAgIG1hcHNbbWFwX2RhdGEua2V5X25hbWVdID0gbmV3IE1hcChcbiAgICAgICAgICAgIGdhbWUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgbWFwX2RhdGEubmFtZSxcbiAgICAgICAgICAgIG1hcF9kYXRhLmtleV9uYW1lLFxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9rZXlfbmFtZSxcbiAgICAgICAgICAgIG1hcF9kYXRhLmNvbGxpc2lvbl9rZXlfbmFtZXMsXG4gICAgICAgICAgICBtYXBfZGF0YS50aWxlc2V0X2ZpbGVzLmltYWdlLFxuICAgICAgICAgICAgbWFwX2RhdGEudGlsZXNldF9maWxlcy5qc29uLFxuICAgICAgICAgICAgbWFwX2RhdGEuY29sbGlzaW9uX2ZpbGVzLFxuICAgICAgICAgICAgbWFwX2RhdGEubGF6eV9sb2FkXG4gICAgICAgICk7XG4gICAgfVxuICAgIGxldCBsb2FkX3Byb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgbWFwIGluIG1hcHMpIHtcbiAgICAgICAgaWYgKG1hcHNbbWFwXS5sYXp5X2xvYWQpIGNvbnRpbnVlO1xuICAgICAgICBsZXQgbG9hZF9tYXBfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICBjb25zdCBsb2FkX21hcF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX21hcF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgbG9hZF9wcm9taXNlcy5wdXNoKGxvYWRfbWFwX3Byb21pc2UpO1xuICAgICAgICBtYXBzW21hcF0ubG9hZF9tYXBfYXNzZXRzKHRydWUsIGxvYWRfbWFwX3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgfVxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIHJldHVybiBtYXBzO1xufSIsImltcG9ydCB7IGJhc2VfYWN0aW9ucywgZGlyZWN0aW9ucywgbWFwX2RpcmVjdGlvbnMgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgTlBDX1Nwcml0ZSwgTlBDLCBucGNfbW92ZW1lbnRfdHlwZXMgfSBmcm9tICcuL05QQyc7XG5pbXBvcnQgeyBJbnRlcmFjdGFibGVPYmplY3RzLCBJbnRlcmFjdGFibGVPYmplY3RzX1Nwcml0ZSwgaW50ZXJhY3RhYmxlX29iamVjdF9pbnRlcmFjdGlvbl90eXBlcyB9IGZyb20gXCIuL0ludGVyYWN0YWJsZU9iamVjdHNcIjtcbmltcG9ydCB7IFRpbGVFdmVudCwgZXZlbnRfdHlwZXMgYXMgdGlsZV9ldmVudF90eXBlcyB9IGZyb20gJy4vdGlsZV9ldmVudHMvVGlsZUV2ZW50JztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4vbWFnaWNfbnVtYmVyc1wiO1xuaW1wb3J0IHsgSnVtcEV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvSnVtcEV2ZW50XCI7XG5pbXBvcnQgeyBUZWxlcG9ydEV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvVGVsZXBvcnRFdmVudFwiO1xuaW1wb3J0IHsgQ2xpbWJFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL0NsaW1iRXZlbnRcIjtcbmltcG9ydCB7IFN0ZXBFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1N0ZXBFdmVudFwiO1xuaW1wb3J0IHsgQ29sbGlzaW9uRXZlbnQgfSBmcm9tIFwiLi90aWxlX2V2ZW50cy9Db2xsaXNpb25FdmVudFwiO1xuaW1wb3J0IHsgU3BlZWRFdmVudCB9IGZyb20gXCIuL3RpbGVfZXZlbnRzL1NwZWVkRXZlbnRcIjtcbmltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gXCIuL2dhbWVfZXZlbnRzL0dhbWVFdmVudFwiO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSBcIi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IFNsaWRlckV2ZW50IH0gZnJvbSBcIi4vdGlsZV9ldmVudHMvU2xpZGVyRXZlbnRcIjtcblxuZXhwb3J0IGNsYXNzIE1hcCB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMga2V5X25hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgdGlsZXNldF9uYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHBoeXNpY3NfbmFtZXM6IHN0cmluZztcbiAgICBwdWJsaWMgdGlsZXNldF9pbWFnZV91cmw6IHN0cmluZztcbiAgICBwdWJsaWMgdGlsZXNldF9qc29uX3VybDogc3RyaW5nO1xuICAgIHB1YmxpYyBwaHlzaWNzX2pzb25zX3VybDogc3RyaW5nO1xuICAgIHB1YmxpYyBzcHJpdGU6IFBoYXNlci5UaWxlbWFwO1xuICAgIHB1YmxpYyBldmVudHM6IHtbbG9jYXRpb25fa2V5OiBzdHJpbmddOiBUaWxlRXZlbnRbXX07XG4gICAgcHVibGljIG5wY3M6IE5QQ1tdO1xuICAgIHB1YmxpYyBpbnRlcmFjdGFibGVfb2JqZWN0czogSW50ZXJhY3RhYmxlT2JqZWN0c1tdO1xuICAgIHB1YmxpYyBjb2xsaXNpb25fbGF5ZXJzX251bWJlcjogbnVtYmVyO1xuICAgIHB1YmxpYyBjb2xsaXNpb25fc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBjb2xvcl9maWx0ZXI6IFBoYXNlci5GaWx0ZXI7XG4gICAgcHVibGljIGNvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBzaG93X2Zvb3RzdGVwczogYm9vbGVhbjtcbiAgICBwdWJsaWMgYXNzZXRzX2xvYWRlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgbGF6eV9sb2FkOiBib29sZWFuO1xuICAgIHB1YmxpYyBsYXllcnM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgZ2FtZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAga2V5X25hbWUsXG4gICAgICAgIHRpbGVzZXRfbmFtZSxcbiAgICAgICAgcGh5c2ljc19uYW1lcyxcbiAgICAgICAgdGlsZXNldF9pbWFnZV91cmwsXG4gICAgICAgIHRpbGVzZXRfanNvbl91cmwsXG4gICAgICAgIHBoeXNpY3NfanNvbnNfdXJsLFxuICAgICAgICBsYXp5X2xvYWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLnRpbGVzZXRfbmFtZSA9IHRpbGVzZXRfbmFtZTtcbiAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzID0gcGh5c2ljc19uYW1lcztcbiAgICAgICAgdGhpcy50aWxlc2V0X2ltYWdlX3VybCA9IHRpbGVzZXRfaW1hZ2VfdXJsO1xuICAgICAgICB0aGlzLnRpbGVzZXRfanNvbl91cmwgPSB0aWxlc2V0X2pzb25fdXJsO1xuICAgICAgICB0aGlzLnBoeXNpY3NfanNvbnNfdXJsID0gcGh5c2ljc19qc29uc191cmw7XG4gICAgICAgIHRoaXMuc3ByaXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5ucGNzID0gW107XG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fbGF5ZXJzX251bWJlciA9IHRoaXMucGh5c2ljc19uYW1lcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKDAsIDApO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUud2lkdGggPSB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuaGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5jb2xvcl9maWx0ZXIgPSB0aGlzLmdhbWUuYWRkLmZpbHRlcignQ29sb3JGaWx0ZXJzJyk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX2xheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaG93X2Zvb3RzdGVwcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFzc2V0c19sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXp5X2xvYWQgPSBsYXp5X2xvYWQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbGF6eV9sb2FkO1xuICAgICAgICB0aGlzLmxheWVycyA9IFtdO1xuICAgIH1cblxuICAgIHNvcnRfc3ByaXRlcygpIHtcbiAgICAgICAgbGV0IHNlbmRfdG9fYmFja19saXN0ID0gbmV3IEFycmF5KHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgbGV0IHNlbmRfdG9fZnJvbnRfbGlzdCA9IG5ldyBBcnJheSh0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIGxldCBoYXNfc29ydF9mdW5jdGlvbiA9IG5ldyBBcnJheSh0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuY2hpbGRyZW4uZm9yRWFjaCgoc3ByaXRlOiBQaGFzZXIuU3ByaXRlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLnlfc29ydCA9IHBhcnNlSW50KHNwcml0ZS5iYXNlX2NvbGxpc2lvbl9sYXllci50b1N0cmluZygpICsgc3ByaXRlLnkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAoc3ByaXRlLnNvcnRfZnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBoYXNfc29ydF9mdW5jdGlvbltpbmRleF0gPSBzcHJpdGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcHJpdGUuc2VuZF90b19iYWNrKSB7XG4gICAgICAgICAgICAgICAgc2VuZF90b19iYWNrX2xpc3RbaW5kZXhdID0gc3ByaXRlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ByaXRlLnNlbmRfdG9fZnJvbnQpIHtcbiAgICAgICAgICAgICAgICBzZW5kX3RvX2Zyb250X2xpc3RbaW5kZXhdID0gc3ByaXRlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuc29ydCgneV9zb3J0JywgUGhhc2VyLkdyb3VwLlNPUlRfQVNDRU5ESU5HKTtcbiAgICAgICAgbGV0IHNoYWRvd19pbmRleCA9IHRoaXMuZGF0YS5ucGNfZ3JvdXAuZ2V0Q2hpbGRJbmRleCh0aGlzLmRhdGEuaGVyby5zcHJpdGUpIC0gMTtcbiAgICAgICAgaWYgKHNoYWRvd19pbmRleCA+PSAtMSAmJiBzaGFkb3dfaW5kZXggPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHNoYWRvd19pbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzaGFkb3dfaW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5zZXRDaGlsZEluZGV4KHRoaXMuZGF0YS5oZXJvLnNoYWRvdywgc2hhZG93X2luZGV4KTsgLy9tYWtpbmcgc3VyZSB0aGF0IHNoYWRvdyBpcyBhbHdheXMgYmVoaW5kIHRoZSBoZXJvXG4gICAgICAgIH1cbiAgICAgICAgc2VuZF90b19iYWNrX2xpc3QuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgaWYgKHNwcml0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuc2VuZFRvQmFjayhzcHJpdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2VuZF90b19mcm9udF9saXN0LmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEubnBjX2dyb3VwLmJyaW5nVG9Ub3Aoc3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGhhc19zb3J0X2Z1bmN0aW9uLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuc29ydF9mdW5jdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmcmVlemVfYm9keSgpIHtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkudmVsb2NpdHkueSA9IHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LnZlbG9jaXR5LnggPSAwOyAvL2ZpeGVzIG1hcCBib2R5XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgICB0aGlzLmZyZWV6ZV9ib2R5KCk7XG4gICAgICAgIHRoaXMubnBjcy5mb3JFYWNoKG5wYyA9PiBucGMudXBkYXRlKCkpO1xuICAgICAgICB0aGlzLnNvcnRfc3ByaXRlcygpO1xuICAgIH1cblxuICAgIGxvYWRfbWFwX2Fzc2V0cyhmb3JjZV9sb2FkLCBvbl9jb21wbGV0ZSkge1xuICAgICAgICBsZXQgbG9hZF90aWxlbWFwX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgbGV0IGxvYWRfdGlsZW1hcF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX3RpbGVtYXBfcHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5sb2FkLnRpbGVtYXAodGhpcy5rZXlfbmFtZSwgdGhpcy50aWxlc2V0X2pzb25fdXJsLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKS5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKGxvYWRfdGlsZW1hcF9wcm9taXNlX3Jlc29sdmUpO1xuXG4gICAgICAgIGxldCBsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgbGV0IGxvYWRfaW1hZ2VfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbG9hZF9pbWFnZV9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nYW1lLmxvYWQuaW1hZ2UodGhpcy5rZXlfbmFtZSwgdGhpcy50aWxlc2V0X2ltYWdlX3VybCkub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX2ltYWdlX3Byb21pc2VfcmVzb2x2ZSk7XG5cbiAgICAgICAgbGV0IHBoeXNpY3NfcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBoeXNpY3NfbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBsb2FkX3BoeXNpY3NfcHJvbWlzZV9yZXNvbHZlO1xuICAgICAgICAgICAgbGV0IGxvYWRfcGh5c2ljc19wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgbG9hZF9waHlzaWNzX3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBoeXNpY3NfcHJvbWlzZXMucHVzaChsb2FkX3BoeXNpY3NfcHJvbWlzZSk7XG4gICAgICAgICAgICB0aGlzLmdhbWUubG9hZC5waHlzaWNzKHRoaXMucGh5c2ljc19uYW1lc1tpXSwgdGhpcy5waHlzaWNzX2pzb25zX3VybFtpXSkub25Mb2FkQ29tcGxldGUuYWRkT25jZShsb2FkX3BoeXNpY3NfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9yY2VfbG9hZCkge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoW2xvYWRfdGlsZW1hcF9wcm9taXNlLCBsb2FkX2ltYWdlX3Byb21pc2UsIC4uLnBoeXNpY3NfcHJvbWlzZXNdKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0c19sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9uX2NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5sb2FkLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25maWdfYm9keShjb2xsaXNpb25fb2JqLCBjb2xsaXNpb25fbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIuZW5hYmxlKHRoaXMuY29sbGlzaW9uX3Nwcml0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5jbGVhclNoYXBlcygpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbl9zcHJpdGUuYm9keS5sb2FkUG9seWdvbiggLy9sb2FkIG1hcCBwaHlzaWNzIGRhdGEganNvbiBmaWxlc1xuICAgICAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzW2NvbGxpc2lvbl9sYXllcl0sIFxuICAgICAgICAgICAgdGhpcy5waHlzaWNzX25hbWVzW2NvbGxpc2lvbl9sYXllcl1cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0Q29sbGlzaW9uR3JvdXAoY29sbGlzaW9uX29iai5tYXBfY29sbGlzaW9uX2dyb3VwKTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuZGFtcGluZyA9IG51bWJlcnMuTUFQX0RBTVBJTkc7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmFuZ3VsYXJEYW1waW5nID0gbnVtYmVycy5NQVBfREFNUElORztcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc2V0WmVyb1JvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uX3Nwcml0ZS5ib2R5LmR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuc3RhdGljID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25maWdfYWxsX2JvZGllcyhjb2xsaXNpb25fb2JqLCBjb2xsaXNpb25fbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5ucGNzLmZvckVhY2gobnBjID0+IG5wYy5jb25maWdfYm9keShjb2xsaXNpb25fb2JqKSk7XG4gICAgICAgIHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdHMuZm9yRWFjaChpbnRlcmFjdGFibGVfb2JqID0+IGludGVyYWN0YWJsZV9vYmouY29uZmlnX2JvZHkoY29sbGlzaW9uX29iaikpO1xuICAgICAgICB0aGlzLmNvbmZpZ19ib2R5KGNvbGxpc2lvbl9vYmosIGNvbGxpc2lvbl9sYXllcik7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnJlbnRfdGlsZShjb250cm9sbGFibGVfY2hhciwgbGF5ZXI/KSB7XG4gICAgICAgIGlmIChsYXllciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGUuZ2V0VGlsZShjb250cm9sbGFibGVfY2hhci50aWxlX3hfcG9zLCBjb250cm9sbGFibGVfY2hhci50aWxlX3lfcG9zLCBsYXllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXllcnMubWFwKGxheWVyID0+IHRoaXMuc3ByaXRlLmdldFRpbGUoY29udHJvbGxhYmxlX2NoYXIudGlsZV94X3BvcywgY29udHJvbGxhYmxlX2NoYXIudGlsZV95X3BvcywgbGF5ZXIubmFtZSkpLmZpbHRlcih0aWxlID0+IHRpbGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0X2xheWVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLmxheWVycywge25hbWU6IG5hbWV9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVfdGlsZV9ldmVudHMocmF3X3Byb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2luZm8gPSBKU09OLnBhcnNlKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IHRoaXNfZXZlbnRfbG9jYXRpb25fa2V5ID0gVGlsZUV2ZW50LmdldF9sb2NhdGlvbl9rZXkocHJvcGVydHlfaW5mby54LCBwcm9wZXJ0eV9pbmZvLnkpO1xuICAgICAgICBpZiAoISh0aGlzX2V2ZW50X2xvY2F0aW9uX2tleSBpbiB0aGlzLmV2ZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuQ0xJTUIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBDbGltYkV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHByb3BlcnR5X2luZm8uY2hhbmdlX3RvX2NvbGxpc2lvbl9sYXllclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLlNQRUVEKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgU3BlZWRFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICAgICAgbWFwX2RpcmVjdGlvbnMocHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2RpcmVjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzID8gcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgOiBbMF0sXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnNwZWVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbdGhpc19ldmVudF9sb2NhdGlvbl9rZXldLnB1c2gobmV3X2V2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eV9pbmZvLnR5cGUgPT09IHRpbGVfZXZlbnRfdHlwZXMuVEVMRVBPUlQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBUZWxlcG9ydEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8udGFyZ2V0LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueF90YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby55X3RhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFkdmFuY2VfZWZmZWN0LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uZGVzdF9jb2xsaXNpb25fbGF5ZXIgPyBwcm9wZXJ0eV9pbmZvLmRlc3RfY29sbGlzaW9uX2xheWVyIDogMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLlNMSURFUikge1xuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IFNsaWRlckV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueF90YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby55X3RhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmRlc3RfY29sbGlzaW9uX2xheWVyID8gcHJvcGVydHlfaW5mby5kZXN0X2NvbGxpc2lvbl9sYXllciA6IDAsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5zaG93X2R1c3RcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5X2luZm8udHlwZSA9PT0gdGlsZV9ldmVudF90eXBlcy5KVU1QKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdfZXZlbnQgPSBuZXcgSnVtcEV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmluaXRpYWxseV9hY3RpdmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmluaXRpYWxseV9hY3RpdmUsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5pc19zZXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wZXJ0eV9pbmZvLmlzX3NldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLlNURVApIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19ldmVudCA9IG5ldyBTdGVwRXZlbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby55LFxuICAgICAgICAgICAgICAgIG1hcF9kaXJlY3Rpb25zKHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9kaXJlY3Rpb25zKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA/IHByb3BlcnR5X2luZm8uYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzIDogWzBdLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uYWN0aXZlID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJvcGVydHlfaW5mby5hY3RpdmUsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uc1twcm9wZXJ0eV9pbmZvLnN0ZXBfZGlyZWN0aW9uXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW3RoaXNfZXZlbnRfbG9jYXRpb25fa2V5XS5wdXNoKG5ld19ldmVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlfaW5mby50eXBlID09PSB0aWxlX2V2ZW50X3R5cGVzLkNPTExJU0lPTikge1xuICAgICAgICAgICAgY29uc3QgbmV3X2V2ZW50ID0gbmV3IENvbGxpc2lvbkV2ZW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby54LFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8ueSxcbiAgICAgICAgICAgICAgICBtYXBfZGlyZWN0aW9ucyhwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fZGlyZWN0aW9ucyksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlfaW5mby5hY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMgPyBwcm9wZXJ0eV9pbmZvLmFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycyA6IFswXSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFjdGl2ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BlcnR5X2luZm8uYWN0aXZlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5X2luZm8uZGVzdF9jb2xsaXNpb25fbGF5ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1t0aGlzX2V2ZW50X2xvY2F0aW9uX2tleV0ucHVzaChuZXdfZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlX25wY3MocmF3X3Byb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2luZm8gPSBKU09OLnBhcnNlKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxfYWN0aW9uID0gdGhpcy5kYXRhLmRicy5ucGNfZGJbcHJvcGVydHlfaW5mby5rZXlfbmFtZV0uaW5pdGlhbF9hY3Rpb247XG4gICAgICAgIHRoaXMubnBjcy5wdXNoKG5ldyBOUEMoXG4gICAgICAgICAgICB0aGlzLmdhbWUsXG4gICAgICAgICAgICB0aGlzLmRhdGEsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmtleV9uYW1lLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5pbml0aWFsX3gsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmluaXRpYWxfeSxcbiAgICAgICAgICAgIGluaXRpYWxfYWN0aW9uLFxuICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5ucGNfZGJbcHJvcGVydHlfaW5mby5rZXlfbmFtZV0uYWN0aW9uc1tpbml0aWFsX2FjdGlvbl0uaW5pdGlhbF9kaXJlY3Rpb24sXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmVuYWJsZV9mb290c3RlcHMsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLm5wY190eXBlLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5tb3ZlbWVudF90eXBlLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5tZXNzYWdlLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby50aG91Z2h0X21lc3NhZ2UsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmF2YXRhciA/IHByb3BlcnR5X2luZm8uYXZhdGFyIDogbnVsbCxcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8uc2hvcF9rZXksXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmJhc2VfY29sbGlzaW9uX2xheWVyID09PSB1bmRlZmluZWQgPyAwIDogcHJvcGVydHlfaW5mby5iYXNlX2NvbGxpc2lvbl9sYXllcixcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8udGFsa19yYW5nZV9mYWN0b3IsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmV2ZW50cyA9PT0gdW5kZWZpbmVkID8gW10gOiBwcm9wZXJ0eV9pbmZvLmV2ZW50c1xuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBjcmVhdGVfaW50ZXJhY3RhYmxlX29iamVjdHMocmF3X3Byb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2luZm8gPSBKU09OLnBhcnNlKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSBuZXcgSW50ZXJhY3RhYmxlT2JqZWN0cyhcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ua2V5X25hbWUsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLngsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLnksXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmFsbG93ZWRfdGlsZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogcHJvcGVydHlfaW5mby5hbGxvd2VkX3RpbGVzLFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5iYXNlX2NvbGxpc2lvbl9sYXllciA9PT0gdW5kZWZpbmVkID8gMCA6IHByb3BlcnR5X2luZm8uYmFzZV9jb2xsaXNpb25fbGF5ZXIsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmNvbGxpZGVyX2xheWVyX3NoaWZ0LFxuICAgICAgICAgICAgcHJvcGVydHlfaW5mby5ub3RfYWxsb3dlZF90aWxlcyxcbiAgICAgICAgICAgIHByb3BlcnR5X2luZm8ub2JqZWN0X2Ryb3BfdGlsZXMsXG4gICAgICAgICAgICBwcm9wZXJ0eV9pbmZvLmludGVybWVkaWF0ZV9jb2xsaWRlcl9sYXllcl9zaGlmdFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzLnB1c2goaW50ZXJhY3RhYmxlX29iamVjdCk7XG4gICAgICAgIGZvciAobGV0IHBzeW5lcmd5X2tleSBpbiB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3Byb3BlcnR5X2luZm8ua2V5X25hbWVdLnBzeW5lcmd5X2tleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X3Byb3BlcnRpZXMgPSB0aGlzLmRhdGEuZGJzLmludGVyYWN0YWJsZV9vYmplY3RzX2RiW3Byb3BlcnR5X2luZm8ua2V5X25hbWVdLnBzeW5lcmd5X2tleXNbcHN5bmVyZ3lfa2V5XTtcbiAgICAgICAgICAgIGlmIChwc3luZXJneV9wcm9wZXJ0aWVzLmludGVyYWN0aW9uX3R5cGUgPT09IGludGVyYWN0YWJsZV9vYmplY3RfaW50ZXJhY3Rpb25fdHlwZXMuT05DRSkge1xuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGFbcHN5bmVyZ3lfa2V5ICsgXCJfY2FzdGVkXCJdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbcHJvcGVydHlfaW5mby5rZXlfbmFtZV0ucHVzaGFibGUgJiYgcHJvcGVydHlfaW5mby5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmN1c3RvbV9kYXRhLmJsb2NrX3N0YWlyX2NvbGxpZGVyX2xheWVyX3NoaWZ0ID0gcHJvcGVydHlfaW5mby5ibG9ja19zdGFpcl9jb2xsaWRlcl9sYXllcl9zaGlmdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNvbmZpZ19pbnRlcmFjdGFibGVfb2JqZWN0KCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW50ZXJhY3RhYmxlX29iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGludGVyYWN0YWJsZV9vYmplY3QgPSB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzW2ldO1xuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gaW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZTtcbiAgICAgICAgICAgIGxldCBpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvID0gbmV3IEludGVyYWN0YWJsZU9iamVjdHNfU3ByaXRlKFxuICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3Qua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgW2FjdGlvbl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LnNwcml0ZV9pbmZvID0gaW50ZXJhY3RhYmxlX29ial9zcHJpdGVfaW5mbztcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8uc2V0QWN0aW9uU3ByaXRlc2hlZXQoXG4gICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5kYnMuaW50ZXJhY3RhYmxlX29iamVjdHNfZGJbaW50ZXJhY3RhYmxlX29iamVjdC5rZXlfbmFtZV0uc3ByaXRlc2hlZXQuaW1hZ2UsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5zcHJpdGVzaGVldC5qc29uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29ial9zcHJpdGVfaW5mby5zZXRBY3Rpb25EaXJlY3Rpb25zKFxuICAgICAgICAgICAgICAgIGFjdGlvbiwgXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5hY3Rpb25zLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5hY3Rpb25zLmZyYW1lc19jb3VudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmpfc3ByaXRlX2luZm8uc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbiwgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5hY3Rpb25zLmZyYW1lX3JhdGUpO1xuICAgICAgICAgICAgaW50ZXJhY3RhYmxlX29ial9zcHJpdGVfaW5mby5zZXRBY3Rpb25Mb29wKGFjdGlvbiwgdGhpcy5kYXRhLmRicy5pbnRlcmFjdGFibGVfb2JqZWN0c19kYltpbnRlcmFjdGFibGVfb2JqZWN0LmtleV9uYW1lXS5hY3Rpb25zLmxvb3ApXG4gICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqX3Nwcml0ZV9pbmZvLmxvYWRTcHJpdGVzaGVldHModGhpcy5nYW1lLCB0cnVlLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0YWJsZV9vYmplY3QuaW5pdGlhbF9jb25maWcodGhpcy5zcHJpdGUpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGFibGVfb2JqZWN0LmluaXRpYWxpemVfcmVsYXRlZF9ldmVudHModGhpcy5ldmVudHMsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNvbmZpZ19ucGMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ucGNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBucGMgPSB0aGlzLm5wY3NbaV07XG4gICAgICAgICAgICBjb25zdCBucGNfZGIgPSB0aGlzLmRhdGEuZGJzLm5wY19kYltucGMua2V5X25hbWVdO1xuICAgICAgICAgICAgbGV0IGFjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChucGMubW92ZW1lbnRfdHlwZSA9PT0gbnBjX21vdmVtZW50X3R5cGVzLklETEUpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zID0gW2Jhc2VfYWN0aW9ucy5JRExFXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5wY19zcHJpdGVfaW5mbyA9IG5ldyBOUENfU3ByaXRlKG5wYy5rZXlfbmFtZSwgYWN0aW9ucyk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zW2pdO1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5zZXRBY3Rpb25TcHJpdGVzaGVldChcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBgYXNzZXRzL2ltYWdlcy9zcHJpdGVzaGVldHMvbnBjLyR7bnBjLmtleV9uYW1lfV8ke2FjdGlvbn0ucG5nYCxcbiAgICAgICAgICAgICAgICAgICAgYGFzc2V0cy9pbWFnZXMvc3ByaXRlc2hlZXRzL25wYy8ke25wYy5rZXlfbmFtZX1fJHthY3Rpb259Lmpzb25gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uc2V0QWN0aW9uRGlyZWN0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBucGNfZGIuYWN0aW9uc1thY3Rpb25dLmRpcmVjdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0uZnJhbWVzX2NvdW50XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uc2V0QWN0aW9uRnJhbWVSYXRlKGFjdGlvbiwgbnBjX2RiLmFjdGlvbnNbYWN0aW9uXS5mcmFtZV9yYXRlKTtcbiAgICAgICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uc2V0QWN0aW9uTG9vcChhY3Rpb24sIG5wY19kYi5hY3Rpb25zW2FjdGlvbl0ubG9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBucGNfc3ByaXRlX2luZm8uZ2VuZXJhdGVBbGxGcmFtZXMoKTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIG5wY19zcHJpdGVfaW5mby5sb2FkU3ByaXRlc2hlZXRzKHRoaXMuZ2FtZSwgdHJ1ZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBucGMuc2V0X3NoYWRvdyhucGNfZGIuc2hhZG93X2tleSwgdGhpcy5kYXRhLm5wY19ncm91cCwgbnBjLmJhc2VfY29sbGlzaW9uX2xheWVyLCBucGNfZGIuc2hhZG93X2FuY2hvcl94LCBucGNfZGIuc2hhZG93X2FuY2hvcl95KTtcbiAgICAgICAgICAgICAgICAgICAgbnBjLnNldF9zcHJpdGUodGhpcy5kYXRhLm5wY19ncm91cCwgbnBjX3Nwcml0ZV9pbmZvLCB0aGlzLnNwcml0ZSwgbnBjLmJhc2VfY29sbGlzaW9uX2xheWVyLCBucGNfZGIuYW5jaG9yX3gsIG5wY19kYi5hbmNob3JfeSk7XG4gICAgICAgICAgICAgICAgICAgIG5wYy5zZXRfc3ByaXRlX2FzX25wYygpO1xuICAgICAgICAgICAgICAgICAgICBucGMucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbmZpZ19sYXllcnMob3ZlcmxheWVyX2dyb3VwLCB1bmRlcmxheWVyX2dyb3VwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBsYXllciA9IHRoaXMuc3ByaXRlLmNyZWF0ZUxheWVyKHRoaXMubGF5ZXJzW2ldLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5sYXllcnNbaV0uc3ByaXRlID0gbGF5ZXI7XG4gICAgICAgICAgICB0aGlzLmxheWVyc1tpXS5zcHJpdGUubGF5ZXJfeiA9IHRoaXMubGF5ZXJzW2ldLnByb3BlcnRpZXMuejtcbiAgICAgICAgICAgIGxheWVyLnJlc2l6ZVdvcmxkKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXllcnNbaV0ucHJvcGVydGllcy5ibGVuZE1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxheWVyLmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlc1t0aGlzLmxheWVyc1tpXS5wcm9wZXJ0aWVzLmJsZW5kTW9kZV0gYXMgdW5rbm93biBhcyBQSVhJLmJsZW5kTW9kZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5sYXllcnNbaV0uYWxwaGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxheWVyLmFscGhhID0gdGhpcy5sYXllcnNbaV0uYWxwaGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpc19vdmVyID0gdGhpcy5sYXllcnNbaV0ucHJvcGVydGllcy5vdmVyLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgaXNfb3ZlciA9IGlzX292ZXIubGVuZ3RoID4gdGhpcy5jb2xsaXNpb25fbGF5ZXIgPyBpc19vdmVyW3RoaXMuY29sbGlzaW9uX2xheWVyXSB8IDAgOiBpc19vdmVyWzBdIHwgMDtcbiAgICAgICAgICAgIGlmIChpc19vdmVyICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxheWVyX2dyb3VwLmFkZChsYXllcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuZGVybGF5ZXJfZ3JvdXAuYWRkKGxheWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIG1vdW50X21hcChjb2xsaXNpb25fbGF5ZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFzc2V0c19sb2FkZWQpIHtcbiAgICAgICAgICAgIGxldCBsb2FkX3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgICAgIGNvbnN0IGxvYWRfcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gbG9hZF9wcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlKTtcbiAgICAgICAgICAgIHRoaXMubG9hZF9tYXBfYXNzZXRzKHRydWUsIGxvYWRfcHJvbWlzZV9yZXNvbHZlKTtcbiAgICAgICAgICAgIGF3YWl0IGxvYWRfcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbGxpc2lvbl9sYXllciA9IGNvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcbiAgICAgICAgVGlsZUV2ZW50LnJlc2V0KCk7XG4gICAgICAgIEdhbWVFdmVudC5yZXNldCgpO1xuICAgICAgICB0aGlzLnNwcml0ZSA9IHRoaXMuZ2FtZS5hZGQudGlsZW1hcCh0aGlzLmtleV9uYW1lKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuYWRkVGlsZXNldEltYWdlKHRoaXMudGlsZXNldF9uYW1lLCB0aGlzLmtleV9uYW1lKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3ByaXRlLnRpbGVzZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlc2V0ID0gdGhpcy5zcHJpdGUudGlsZXNldHNbaV07XG4gICAgICAgICAgICBmb3IgKGxldCB0aWxlX2luZGV4IGluIHRpbGVzZXQudGlsZVByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0aWxlc2V0LnRpbGVQcm9wZXJ0aWVzW3RpbGVfaW5kZXhdLmluZGV4ID0gdGlsZV9pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHByb3BlcnR5IGluIHRoaXMuc3ByaXRlLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhd19wcm9wZXJ0eSA9IHRoaXMuc3ByaXRlLnByb3BlcnRpZXNbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5LnN0YXJ0c1dpdGgoXCJldmVudFwiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX3RpbGVfZXZlbnRzKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYocHJvcGVydHkuc3RhcnRzV2l0aChcIm5wY1wiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX25wY3MocmF3X3Byb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihwcm9wZXJ0eS5zdGFydHNXaXRoKFwiaW50ZXJhY3RhYmxlX29iamVjdFwiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlX2ludGVyYWN0YWJsZV9vYmplY3RzKHJhd19wcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxheWVycyA9IHRoaXMuc3ByaXRlLmxheWVycy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5wcm9wZXJ0aWVzLm92ZXIgIT09IGIucHJvcGVydGllcy5vdmVyKSByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICBpZiAoYS5wcm9wZXJ0aWVzLnogIT09IGIucHJvcGVydGllcy56KSByZXR1cm4gYSAtIGI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY29uZmlnX2xheWVycyh0aGlzLmRhdGEub3ZlcmxheWVyX2dyb3VwLCB0aGlzLmRhdGEudW5kZXJsYXllcl9ncm91cCk7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnX2ludGVyYWN0YWJsZV9vYmplY3QoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jb25maWdfbnBjKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3ByaXRlLnByb3BlcnRpZXMuZm9vdHByaW50KSB7XG4gICAgICAgICAgICB0aGlzLnNob3dfZm9vdHN0ZXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuc2V0X21hcCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLnVuZGVybGF5ZXJfZ3JvdXAucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuZGF0YS5vdmVybGF5ZXJfZ3JvdXAucmVtb3ZlQWxsKCk7XG5cbiAgICAgICAgdGhpcy5jb2xsaXNpb25fc3ByaXRlLmJvZHkuY2xlYXJTaGFwZXMoKTtcblxuICAgICAgICBpZiAodGhpcy5zaG93X2Zvb3RzdGVwcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uZm9vdHN0ZXBzLmNsZWFuX2FsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNwcml0ZXNfdG9fcmVtb3ZlID0gW11cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubnBjX2dyb3VwLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsZXQgc3ByaXRlID0gdGhpcy5kYXRhLm5wY19ncm91cC5jaGlsZHJlbltpXSBhcyBQaGFzZXIuU3ByaXRlO1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUuaXNfbnBjICYmICFzcHJpdGUuaXNfaW50ZXJhY3RhYmxlX29iamVjdCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoc3ByaXRlLmlzX2ludGVyYWN0YWJsZV9vYmplY3QgJiYgc3ByaXRlLmludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2spIHtcbiAgICAgICAgICAgICAgICBzcHJpdGUuaW50ZXJhY3RhYmxlX29iamVjdC5jdXN0b21fZGF0YS5ibG9ja2luZ19zdGFpcl9ibG9jay5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc3ByaXRlLmludGVyYWN0YWJsZV9vYmplY3QuY3VzdG9tX2RhdGEuYmxvY2tpbmdfc3RhaXJfYmxvY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcHJpdGVzX3RvX3JlbW92ZS5wdXNoKHNwcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHJpdGVzX3RvX3JlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbGV0IHNwcml0ZSA9IHNwcml0ZXNfdG9fcmVtb3ZlW2ldO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5yZW1vdmUoc3ByaXRlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubnBjcyA9IFtdO1xuICAgICAgICB0aGlzLmludGVyYWN0YWJsZV9vYmplY3RzID0gW107XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAucmVtb3ZlQWxsKCk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYWRkKHRoaXMuZGF0YS5oZXJvLnNoYWRvdyk7XG4gICAgICAgIHRoaXMuZGF0YS5ucGNfZ3JvdXAuYWRkKHRoaXMuZGF0YS5oZXJvLnNwcml0ZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IGV2ZW50X3R5cGVzLCBUaWxlRXZlbnQgfSBmcm9tIFwiLi9UaWxlRXZlbnRcIjtcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSBcIi4uL21hZ2ljX251bWJlcnNcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5leHBvcnQgY2xhc3MgVGVsZXBvcnRFdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XG4gICAgcHVibGljIHRhcmdldDogc3RyaW5nO1xuICAgIHB1YmxpYyB4X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyB5X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyBhZHZhbmNlX2VmZmVjdDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZGVzdF9jb2xsaXNpb25fbGF5ZXI6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIHRhcmdldCwgeF90YXJnZXQsIHlfdGFyZ2V0LCBhZHZhbmNlX2VmZmVjdCwgZGVzdF9jb2xsaXNpb25fbGF5ZXIpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgZGF0YSwgZXZlbnRfdHlwZXMuVEVMRVBPUlQsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIG51bGwpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy54X3RhcmdldCA9IHhfdGFyZ2V0O1xuICAgICAgICB0aGlzLnlfdGFyZ2V0ID0geV90YXJnZXQ7XG4gICAgICAgIHRoaXMuYWR2YW5jZV9lZmZlY3QgPSBhZHZhbmNlX2VmZmVjdDtcbiAgICAgICAgdGhpcy5kZXN0X2NvbGxpc2lvbl9sYXllciA9IGRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgIH1cblxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja19wb3NpdGlvbigpIHx8ICF0aGlzLmRhdGEuaGVyb19tb3ZlbWVudF9hbGxvd2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8udGVsZXBvcnRpbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5hZHZhbmNlX2VmZmVjdCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGVyby5zdG9wX2J5X2NvbGxpZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby50ZWxlcG9ydGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnBsYXkoYmFzZV9hY3Rpb25zLldBTEssIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXSk7XG4gICAgICAgICAgICB0aGlzLm9wZW5fZG9vcigpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucGF1c2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSA0MDA7XG4gICAgICAgICAgICBjb25zdCB0d2Vlbl94ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XG4gICAgICAgICAgICBjb25zdCB0d2Vlbl95ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLnkgLSAxNTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc2hhZG93KS50byh7XG4gICAgICAgICAgICAgICAgeDogdHdlZW5feCxcbiAgICAgICAgICAgICAgICB5OiB0d2Vlbl95XG4gICAgICAgICAgICB9LCB0aW1lLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKHtcbiAgICAgICAgICAgICAgICB4OiB0d2Vlbl94LFxuICAgICAgICAgICAgICAgIHk6IHR3ZWVuX3lcbiAgICAgICAgICAgIH0sIHRpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWUpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmFfZmFkZV9pbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYV9mYWRlX2luKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW1lcmFfZmFkZV9pbigpIHtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3RvcF9jaGFyKHRydWUpO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zZXRfZGlyZWN0aW9uKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW3RoaXMuZGF0YS5oZXJvLmN1cnJlbnRfZGlyZWN0aW9uXSk7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuZmFkZSgpO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLm9uRmFkZUNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5sZXJwLnNldFRvKDEsIDEpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfbWFwKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGNoYW5nZV9tYXAoKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAudW5zZXRfbWFwKCk7XG4gICAgICAgIGNvbnN0IG5leHRfbWFwX2tleV9uYW1lID0gdGhpcy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHRhcmdldF9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zaGFkb3cuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0YXJnZXRfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0YXJnZXRfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICB0aGlzLmRhdGEubWFwID0gYXdhaXQgdGhpcy5kYXRhLmluZm8ubWFwc19saXN0W25leHRfbWFwX2tleV9uYW1lXS5tb3VudF9tYXAodGFyZ2V0X2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuc2V0Qm91bmRzVG9Xb3JsZCgpO1xuICAgICAgICBpZiAodGhpcy5nYW1lLmNhbWVyYS5ib3VuZHMud2lkdGggPCBudW1iZXJzLkdBTUVfV0lEVEgpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEuYm91bmRzLndpZHRoID0gbnVtYmVycy5HQU1FX1dJRFRIO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdhbWUuY2FtZXJhLmJvdW5kcy5oZWlnaHQgPCBudW1iZXJzLkdBTUVfSEVJR0hUKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLmJvdW5kcy5oZWlnaHQgPSBudW1iZXJzLkdBTUVfSEVJR0hUO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY29uZmlnX2NvbGxpc2lvbl9ncm91cHModGhpcy5kYXRhLm1hcCk7XG4gICAgICAgIHRoaXMuZGF0YS5tYXAuY29uZmlnX2FsbF9ib2RpZXModGhpcy5kYXRhLmNvbGxpc2lvbiwgdGhpcy5kYXRhLm1hcC5jb2xsaXNpb25fbGF5ZXIpO1xuICAgICAgICB0aGlzLmRhdGEuY29sbGlzaW9uLmNvbmZpZ19jb2xsaXNpb25zKHRoaXMuZGF0YS5tYXAsIHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyLCB0aGlzLmRhdGEubnBjX2dyb3VwKTtcbiAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIudXBkYXRlQm91bmRzQ29sbGlzaW9uR3JvdXAoKTtcbiAgICAgICAgdGhpcy5kYXRhLmRlYnVnLnVwZGF0ZV9kZWJ1Z19waHlzaWNzKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LmRlYnVnKTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueCA9ICh0aGlzLnhfdGFyZ2V0ICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aDtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueSA9ICh0aGlzLnlfdGFyZ2V0ICsgMC41KSAqIHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQ7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnJlc3VtZSgpO1xuICAgICAgICB0aGlzLmNhbWVyYV9mYWRlX291dCgpO1xuICAgIH1cblxuICAgIGNhbWVyYV9mYWRlX291dCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8udXBkYXRlX3NoYWRvdygpO1xuICAgICAgICB0aGlzLmRhdGEubWFwLm5wY3MuZm9yRWFjaChucGMgPT4gbnBjLnVwZGF0ZSgpKTtcbiAgICAgICAgdGhpcy5nYW1lLmNhbWVyYS5mbGFzaCgweDApO1xuICAgICAgICB0aGlzLmdhbWUuY2FtZXJhLm9uRmxhc2hDb21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5jYW1lcmEubGVycC5zZXRUbyhudW1iZXJzLkNBTUVSQV9MRVJQLCBudW1iZXJzLkNBTUVSQV9MRVJQKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIub25fZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnRlbGVwb3J0aW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW5fZG9vcigpIHtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBfLmZpbmQodGhpcy5kYXRhLm1hcC5zcHJpdGUubGF5ZXJzLCB7XG4gICAgICAgICAgICBuYW1lIDogdGhpcy5kYXRhLm1hcC5zcHJpdGUucHJvcGVydGllcy5kb29yX2xheWVyXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzYW1wbGVfdGlsZSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLmdldFRpbGUodGhpcy54LCB0aGlzLnkgLSAxLCBsYXllci5uYW1lKTtcbiAgICAgICAgY29uc3QgZG9vcl90eXBlX2luZGV4ID0gc2FtcGxlX3RpbGUucHJvcGVydGllcy5kb29yX3R5cGU7XG4gICAgICAgIGNvbnN0IHRpbGVzID0gXy5maWx0ZXIodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZXNldHNbMF0udGlsZVByb3BlcnRpZXMsIGtleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LmRvb3JfdHlwZSA9PT0gZG9vcl90eXBlX2luZGV4ICYmIFwiY2xvc2VfZG9vclwiIGluIGtleSAmJiBrZXkuaWQgPT09IHNhbXBsZV90aWxlLnByb3BlcnRpZXMuaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlsZSwgc291cmNlX2luZGV4LCBjbG9zZV9kb29yX2luZGV4LCBvZmZzZXRzLCBiYXNlX3gsIGJhc2VfeSwgdGFyZ2V0X2luZGV4O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aWxlID0gdGlsZXNbaV07XG4gICAgICAgICAgICBzb3VyY2VfaW5kZXggPSAodGlsZS5pbmRleCB8IDApICsgMTtcbiAgICAgICAgICAgIGNsb3NlX2Rvb3JfaW5kZXggPSB0aWxlLmNsb3NlX2Rvb3I7XG4gICAgICAgICAgICBvZmZzZXRzID0gdGlsZS5iYXNlX29mZnNldC5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBiYXNlX3ggPSB0aGlzLnggKyAob2Zmc2V0c1swXSB8IDApO1xuICAgICAgICAgICAgYmFzZV95ID0gdGhpcy55ICsgKG9mZnNldHNbMV0gfCAwKSAtIDE7XG4gICAgICAgICAgICB0YXJnZXRfaW5kZXggPSBwYXJzZUludChfLmZpbmRLZXkodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZXNldHNbMF0udGlsZVByb3BlcnRpZXMsIHtcbiAgICAgICAgICAgICAgICBvcGVuX2Rvb3IgOiBjbG9zZV9kb29yX2luZGV4XG4gICAgICAgICAgICB9KSkgKyAxO1xuICAgICAgICAgICAgdGhpcy5kYXRhLm1hcC5zcHJpdGUucmVwbGFjZShzb3VyY2VfaW5kZXgsIHRhcmdldF9pbmRleCwgYmFzZV94LCBiYXNlX3ksIDEsIDEsIGxheWVyLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IGRpcmVjdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IFRpbGVFdmVudCwgZXZlbnRfdHlwZXMgfSBmcm9tIFwiLi9UaWxlRXZlbnRcIjtcblxuY29uc3QgU1RFUF9TSElGVF9GQUNUT1IgPSA0O1xuXG5leHBvcnQgY2xhc3MgU3RlcEV2ZW50IGV4dGVuZHMgVGlsZUV2ZW50IHtcbiAgICBwdWJsaWMgc3RlcF9kaXJlY3Rpb246IG51bWJlcjtcbiAgICBwdWJsaWMgbmV4dF94OiBudW1iZXI7XG4gICAgcHVibGljIG5leHRfeTogbnVtYmVyO1xuICAgIHB1YmxpYyBzaGlmdF95OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBzdGVwX2RpcmVjdGlvbikge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBldmVudF90eXBlcy5TVEVQLCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBudWxsKTtcbiAgICAgICAgdGhpcy5zdGVwX2RpcmVjdGlvbiA9IHN0ZXBfZGlyZWN0aW9uO1xuICAgICAgICB0aGlzLm5leHRfeCA9IDA7XG4gICAgICAgIHRoaXMubmV4dF95ID0gMDtcbiAgICAgICAgdGhpcy5zaGlmdF95ID0gMDtcbiAgICB9XG5cbiAgICBzZXQoKSB7XG4gICAgICAgIGxldCBuZXh0X3gsIG5leHRfeSA9IHRoaXMueSwgc2hpZnRfeTtcbiAgICAgICAgaWYgKHRoaXMuc3RlcF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMudXApIHtcbiAgICAgICAgICAgIHNoaWZ0X3kgPSAtKCh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0L1NURVBfU0hJRlRfRkFDVE9SKSB8IDApO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RlcF9kaXJlY3Rpb24gPT09IGRpcmVjdGlvbnMuZG93bikge1xuICAgICAgICAgICAgc2hpZnRfeSA9ICh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0L1NURVBfU0hJRlRfRkFDVE9SKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLmxlZnQpIHtcbiAgICAgICAgICAgIG5leHRfeCA9IHRoaXMueCAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hY3RpdmF0aW9uX2RpcmVjdGlvbnNbMF0gPT09IGRpcmVjdGlvbnMucmlnaHQpIHtcbiAgICAgICAgICAgIG5leHRfeCA9IHRoaXMueCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0X3ggPSBuZXh0X3g7XG4gICAgICAgIHRoaXMubmV4dF95ID0gbmV4dF95O1xuICAgICAgICB0aGlzLnNoaWZ0X3kgPSBzaGlmdF95O1xuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgfVxuICAgIFxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGVyby50aWxlX3hfcG9zID09PSB0aGlzLm5leHRfeCAmJiB0aGlzLmRhdGEuaGVyby50aWxlX3lfcG9zID09PSB0aGlzLm5leHRfeSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci51bnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zcHJpdGUuYm9keS55ICs9IHRoaXMuc2hpZnRfeTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5jaGVja19wb3NpdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnVuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBkaXJlY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBUaWxlRXZlbnQsIGV2ZW50X3R5cGVzIH0gZnJvbSBcIi4vVGlsZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBDb2xsaXNpb25FdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XG4gICAgcHVibGljIGRlc3RfY29sbGlzaW9uX2xheWVyOiBudW1iZXI7XG4gICAgcHVibGljIG5leHRfeDogbnVtYmVyO1xuICAgIHB1YmxpYyBuZXh0X3k6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHgsIHksIGFjdGl2YXRpb25fZGlyZWN0aW9ucywgYWN0aXZhdGlvbl9jb2xsaXNpb25fbGF5ZXJzLCBkeW5hbWljLCBhY3RpdmUsIGRlc3RfY29sbGlzaW9uX2xheWVyKSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGV2ZW50X3R5cGVzLkNPTExJU0lPTiwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMuZGVzdF9jb2xsaXNpb25fbGF5ZXIgPSBkZXN0X2NvbGxpc2lvbl9sYXllcjtcbiAgICAgICAgdGhpcy5uZXh0X3ggPSAwO1xuICAgICAgICB0aGlzLm5leHRfeSA9IDA7XG4gICAgfVxuXG4gICAgc2V0KCkge1xuICAgICAgICBsZXQgbmV4dF94ID0gdGhpcy54LCBuZXh0X3kgPSB0aGlzLnk7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2YXRpb25fZGlyZWN0aW9uc1swXSA9PT0gZGlyZWN0aW9ucy5sZWZ0KSB7XG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggLSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLnJpZ2h0KSB7XG4gICAgICAgICAgICBuZXh0X3ggPSB0aGlzLnggKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLnVwKSB7XG4gICAgICAgICAgICBuZXh0X3kgPSB0aGlzLnkgLSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aXZhdGlvbl9kaXJlY3Rpb25zWzBdID09PSBkaXJlY3Rpb25zLmRvd24pIHtcbiAgICAgICAgICAgIG5leHRfeSA9IHRoaXMueSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0X3ggPSBuZXh0X3g7XG4gICAgICAgIHRoaXMubmV4dF95ID0gbmV4dF95O1xuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZmlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5oZXJvLnRpbGVfeF9wb3MgPT09IHRoaXMubmV4dF94ICYmIHRoaXMuZGF0YS5oZXJvLnRpbGVfeV9wb3MgPT09IHRoaXMubmV4dF95KSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLnVuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb2xsaXNpb24uY2hhbmdlX21hcF9ib2R5KHRoaXMuZGF0YSwgdGhpcy5kZXN0X2NvbGxpc2lvbl9sYXllcik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY2hlY2tfcG9zaXRpb24oKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci51bnNldF90cmlnZ2VyZWRfZXZlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgVGlsZUV2ZW50LCBldmVudF90eXBlcyB9IGZyb20gXCIuL1RpbGVFdmVudFwiO1xuXG5leHBvcnQgY2xhc3MgU3BlZWRFdmVudCBleHRlbmRzIFRpbGVFdmVudCB7XG4gICAgcHVibGljIHNwZWVkOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCB4LCB5LCBhY3RpdmF0aW9uX2RpcmVjdGlvbnMsIGFjdGl2YXRpb25fY29sbGlzaW9uX2xheWVycywgZHluYW1pYywgYWN0aXZlLCBzcGVlZCkge1xuICAgICAgICBzdXBlcihnYW1lLCBkYXRhLCBldmVudF90eXBlcy5TUEVFRCwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcbiAgICB9XG5cbiAgICB1bnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIuZXZlbnRfdHJpZ2dlcmVkKHRoaXMpICYmICF0aGlzLmNoZWNrX3Bvc2l0aW9uKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIudW5zZXRfdHJpZ2dlcmVkX2V2ZW50KHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uZXh0cmFfc3BlZWQgLT0gdGhpcy5zcGVlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5ldmVudF90cmlnZ2VyZWQodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aWxlX2V2ZW50X21hbmFnZXIuc2V0X3RyaWdnZXJlZF9ldmVudCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLmV4dHJhX3NwZWVkICs9IHRoaXMuc3BlZWQ7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBkaXJlY3Rpb25zLCByZXZlcnNlX2RpcmVjdGlvbnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IGV2ZW50X3R5cGVzLCBUaWxlRXZlbnQgfSBmcm9tIFwiLi9UaWxlRXZlbnRcIjtcblxuY29uc3QgVElNRV9QRVJfVElMRSA9IDYwO1xuY29uc3QgRFVTVF9DT1VOVCA9IDY7XG5jb25zdCBEVVNUX0tFWSA9IFwiZHVzdFwiO1xuXG5leHBvcnQgY2xhc3MgU2xpZGVyRXZlbnQgZXh0ZW5kcyBUaWxlRXZlbnQge1xuICAgIHB1YmxpYyB4X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyB5X3RhcmdldDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZXN0X2NvbGxpc2lvbl9sYXllcjogbnVtYmVyO1xuICAgIHB1YmxpYyBzaG93X2R1c3Q6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgeF90YXJnZXQsIHlfdGFyZ2V0LCBkZXN0X2NvbGxpc2lvbl9sYXllciwgc2hvd19kdXN0KSB7XG4gICAgICAgIHN1cGVyKGdhbWUsIGRhdGEsIGV2ZW50X3R5cGVzLlNMSURFUiwgeCwgeSwgYWN0aXZhdGlvbl9kaXJlY3Rpb25zLCBhY3RpdmF0aW9uX2NvbGxpc2lvbl9sYXllcnMsIGR5bmFtaWMsIGFjdGl2ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMueF90YXJnZXQgPSB4X3RhcmdldDtcbiAgICAgICAgdGhpcy55X3RhcmdldCA9IHlfdGFyZ2V0O1xuICAgICAgICB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyID0gZGVzdF9jb2xsaXNpb25fbGF5ZXI7XG4gICAgICAgIHRoaXMuc2hvd19kdXN0ID0gc2hvd19kdXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogc2hvd19kdXN0O1xuICAgIH1cblxuICAgIGZpcmUoKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmhlcm8uc3RvcF9ieV9jb2xsaWRpbmcgfHwgIXRoaXMuY2hlY2tfcG9zaXRpb24oKSB8fCAhdGhpcy5kYXRhLmhlcm9fbW92ZW1lbnRfYWxsb3dlZChmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEudGlsZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2xpZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLnAyLnBhdXNlKCk7XG5cbiAgICAgICAgY29uc3QgaW5pdGlhbF94ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueCArIDAuNSk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxfeSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiAodGhpcy55ICsgMC42KTtcbiAgICAgICAgY29uc3QganVtcF95ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCAqIHRoaXMueTtcbiAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSlVNUCwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0sIGZhbHNlKTtcbiAgICAgICAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZCgyMDAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNoYWRvdy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5jdXJyZW50X2FjdGlvbiA9IGJhc2VfYWN0aW9ucy5JRExFO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0sIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKFxuICAgICAgICAgICAgICAgIHt4OiBpbml0aWFsX3gsIHk6IFtqdW1wX3ksIGluaXRpYWxfeV19LCAxNTAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWVcbiAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93X2R1c3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXN0X2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsaXR0bGVfc3RlcCA9IGluaXRpYWxfeSArICh0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICogMS4yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5KS50byhcbiAgICAgICAgICAgICAgICAgICAge3k6IGxpdHRsZV9zdGVwfSwgNzAsIFBoYXNlci5FYXNpbmcuUXVhZHJhdGljLk91dCwgdHJ1ZVxuICAgICAgICAgICAgICAgICkub25Db21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2ZyYW1lKGRpcmVjdGlvbnMuZG93bl9yaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoNDAsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnNldF9mcmFtZShkaXJlY3Rpb25zLmRvd25fbGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKDQwLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2V0X2ZyYW1lKGRpcmVjdGlvbnMuZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldF94ID0gdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICogKHRoaXMueF90YXJnZXQgKyAwLjUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRfeSA9IHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgKiAodGhpcy55X3RhcmdldCArIDAuNSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlX3RpbWUgPSBNYXRoLmFicyh0aGlzLnlfdGFyZ2V0IC0gdGhpcy55KSAqIFRJTUVfUEVSX1RJTEU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkpLnRvKFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IHRhcmdldF94LCB5OiB0YXJnZXRfeX0sIHNsaWRlX3RpbWUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUsIHRydWVcbiAgICAgICAgICAgICAgICAgICAgKS5vbkNvbXBsZXRlLmFkZE9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8ucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8udXBkYXRlX3NoYWRvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8uc2hhZG93LnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdF9jb2xsaXNpb25fbGF5ZXIgIT09IHRoaXMuZGF0YS5tYXAuY29sbGlzaW9uX2xheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmNvbGxpc2lvbi5jaGFuZ2VfbWFwX2JvZHkodGhpcy5kYXRhLCB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoODAsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLnBoeXNpY3MucDIucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnRpbGVfZXZlbnRfbWFuYWdlci5vbl9ldmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHVzdF9hbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGR1c3Rfc3ByaXRlX2Jhc2UgPSB0aGlzLmRhdGEuaW5mby5taXNjX3Nwcml0ZV9iYXNlX2xpc3RbRFVTVF9LRVldO1xuICAgICAgICBjb25zdCBpbml0aWFsX3ggPSB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlV2lkdGggKiAodGhpcy54ICsgMC41KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBEVVNUX0NPVU5UOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoNDAgKiBpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRfeCA9IHRoaXMuZGF0YS5oZXJvLnNwcml0ZS5ib2R5LnggLSBNYXRoLnJhbmRvbSgpICogdGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZVdpZHRoICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVXaWR0aCA+PiAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydF95ID0gdGhpcy5kYXRhLmhlcm8uc3ByaXRlLmJvZHkueSAtIE1hdGgucmFuZG9tKCkgKiB0aGlzLmRhdGEubWFwLnNwcml0ZS50aWxlSGVpZ2h0ICsgKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQgPj4gMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZHVzdF9zcHJpdGU6IFBoYXNlci5TcHJpdGUgPSB0aGlzLmRhdGEubnBjX2dyb3VwLmNyZWF0ZShzdGFydF94LCBzdGFydF95LCBEVVNUX0tFWSk7XG4gICAgICAgICAgICAgICAgZHVzdF9zcHJpdGUuYmFzZV9jb2xsaXNpb25fbGF5ZXIgPSB0aGlzLmRlc3RfY29sbGlzaW9uX2xheWVyO1xuICAgICAgICAgICAgICAgIGR1c3Rfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC50d2VlbihkdXN0X3Nwcml0ZSkudG8oe1xuICAgICAgICAgICAgICAgICAgICB4OiBzdGFydF94ICsgKHN0YXJ0X3ggPCBpbml0aWFsX3ggPyAtMSA6IDEpICogKHRoaXMuZGF0YS5tYXAuc3ByaXRlLnRpbGVIZWlnaHQvMyksXG4gICAgICAgICAgICAgICAgICAgIHk6IHN0YXJ0X3kgLSAodGhpcy5kYXRhLm1hcC5zcHJpdGUudGlsZUhlaWdodCA+PiAxKVxuICAgICAgICAgICAgICAgIH0sIDQwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLm5wY19ncm91cC5zZXRDaGlsZEluZGV4KGR1c3Rfc3ByaXRlLCB0aGlzLmRhdGEubnBjX2dyb3VwLmdldENoaWxkSW5kZXgodGhpcy5kYXRhLmhlcm8uc3ByaXRlKSk7XG4gICAgICAgICAgICAgICAgZHVzdF9zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24oZHVzdF9zcHJpdGUsIERVU1RfS0VZKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gZHVzdF9zcHJpdGVfYmFzZS5nZXRBbmltYXRpb25LZXkoRFVTVF9LRVksIFwic3ByZWFkXCIpO1xuICAgICAgICAgICAgICAgIGR1c3Rfc3ByaXRlLmFuaW1hdGlvbnMuZ2V0QW5pbWF0aW9uKGFuaW1hdGlvbl9rZXkpLm9uQ29tcGxldGUuYWRkT25jZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGR1c3Rfc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkdXN0X3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYW5pbWF0aW9uX2tleSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn07IiwiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEhvcml6b250YWxNZW51IH0gZnJvbSAnLi4vc3VwcG9ydF9tZW51cy9Ib3Jpem9udGFsTWVudSc7XG5pbXBvcnQgeyBNYWluUHN5bmVyZ3lNZW51IH0gZnJvbSAnLi9NYWluUHN5bmVyZ3lNZW51JztcbmltcG9ydCB7IE1haW5JdGVtTWVudSB9IGZyb20gJy4vTWFpbkl0ZW1NZW51JztcbmltcG9ydCB7IE1haW5Eamlubk1lbnUgfSBmcm9tICcuL01haW5Eamlubk1lbnUnO1xuaW1wb3J0IHsgQ2hhcnNTdGF0dXNXaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL0NoYXJzU3RhdHVzV2luZG93JztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5cbmV4cG9ydCBjbGFzcyBNYWluTWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGNoYXJzX3N0YXR1c193aW5kb3c6IENoYXJzU3RhdHVzV2luZG93O1xuICAgIHB1YmxpYyBidXR0b25zX2tleXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBob3Jpem9udGFsX21lbnU6IEhvcml6b250YWxNZW51O1xuICAgIHB1YmxpYyBwc3luZXJneV9tZW51OiBNYWluUHN5bmVyZ3lNZW51O1xuICAgIHB1YmxpYyBpdGVtX21lbnU6IE1haW5JdGVtTWVudTtcbiAgICBwdWJsaWMgZGppbm5fbWVudTogTWFpbkRqaW5uTWVudTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93ID0gbmV3IENoYXJzU3RhdHVzV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5idXR0b25zX2tleXMgPSBbXCJwc3luZXJneVwiLCBcImRqaW5uaVwiLCBcIml0ZW1cIiwgXCJzdGF0dXNcIl07XG4gICAgICAgIGxldCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xuICAgICAgICBsZXQgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xuICAgICAgICBsZXQgc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xuICAgICAgICBsZXQgc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSAwO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudSA9IG5ldyBIb3Jpem9udGFsTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbl9wcmVzcy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksXG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eVxuICAgICAgICApO1xuICAgICAgICArK2VzY19wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgKytlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5wc3luZXJneV9tZW51ID0gbmV3IE1haW5Qc3luZXJneU1lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLml0ZW1fbWVudSA9IG5ldyBNYWluSXRlbU1lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmRqaW5uX21lbnUgPSBuZXcgTWFpbkRqaW5uTWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICB9XG5cbiAgICBidXR0b25fcHJlc3MoaW5kZXgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmJ1dHRvbnNfa2V5c1tpbmRleF0pIHtcbiAgICAgICAgICAgIGNhc2UgXCJwc3luZXJneVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLnBzeW5lcmd5X21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRqaW5uaVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uX3ByZXNzX2FjdGlvbih0aGlzLmRqaW5uX21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIml0ZW1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbl9wcmVzc19hY3Rpb24odGhpcy5pdGVtX21lbnUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYnV0dG9uX3ByZXNzX2FjdGlvbihtZW51KSB7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUoKTtcbiAgICAgICAgbWVudS5vcGVuX21lbnUoY2xvc2VfdGhpc19tZW51ID0+IHtcbiAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgICAgIGlmIChjbG9zZV90aGlzX21lbnUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHRydWUpO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS51cGRhdGVfcG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBpc19hY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvcml6b250YWxfbWVudS5tZW51X2FjdGl2ZTtcbiAgICB9XG5cbiAgICBvcGVuX21lbnUoKSB7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51Lm9wZW4oKTtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cudXBkYXRlX2NoYXJzX2luZm8oKTtcbiAgICAgICAgdGhpcy5jaGFyc19zdGF0dXNfd2luZG93LnNob3coKTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNfYWN0aXZlKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5kYXRhLm1lbnVfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS5jbG9zZSgpO1xuICAgICAgICB0aGlzLmNoYXJzX3N0YXR1c193aW5kb3cuY2xvc2UoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX21lbnUoZ2FtZSwgZGF0YSkge1xuICAgIGRhdGEuc3BhY2ViYXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgaWYgKGRhdGEuaGVyby5pbl9hY3Rpb24oKSB8fCBkYXRhLmluX2JhdHRsZSB8fCAhZGF0YS5jcmVhdGVkIHx8IGRhdGEuZ2FtZV9ldmVudF9tYW5hZ2VyLm9uX2V2ZW50KSByZXR1cm47XG4gICAgICAgIGlmICghZGF0YS5tZW51X29wZW4pIHtcbiAgICAgICAgICAgIGRhdGEubWVudV9vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgIGRhdGEuaGVyby51cGRhdGVfc2hhZG93KCk7XG4gICAgICAgICAgICBkYXRhLm1haW5fbWVudS5vcGVuX21lbnUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLm1haW5fbWVudS5pc19hY3RpdmUoKSkge1xuICAgICAgICAgICAgZGF0YS5tYWluX21lbnUuY2xvc2VfbWVudSgpO1xuICAgICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgcmV0dXJuIG5ldyBNYWluTWVudShnYW1lLCBkYXRhKTtcbn1cbiIsImltcG9ydCB7IENoYXJzTWVudSB9IGZyb20gJy4uL3N1cHBvcnRfbWVudXMvQ2hhcnNNZW51JztcbmltcG9ydCB7IEJhc2ljSW5mb1dpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvQmFzaWNJbmZvV2luZG93JztcbmltcG9ydCB7IEl0ZW1Qc3luZXJneUNob29zZVdpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93JztcbmltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uL1dpbmRvdyc7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcblxuY29uc3QgR1VJREVfV0lORE9XX1ggPSAxMDQ7XG5jb25zdCBHVUlERV9XSU5ET1dfWSA9IDA7XG5jb25zdCBHVUlERV9XSU5ET1dfV0lEVEggPSAxMzI7XG5jb25zdCBHVUlERV9XSU5ET1dfSEVJR0hUID0gMjA7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWCA9IDA7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWSA9IDEzNjtcbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCA9IDIzNjtcbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19IRUlHSFQgPSAyMDtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fWCA9IDEwNDtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fWSA9IDI0O1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fSEVJR0hUID0gNzY7XG5jb25zdCBTSE9SVENVVFNfV0lORE9XX1ggPSAxMDQ7XG5jb25zdCBTSE9SVENVVFNfV0lORE9XX1kgPSAxMDQ7XG5jb25zdCBTSE9SVENVVFNfV0lORE9XX1dJRFRIID0gMTMyO1xuY29uc3QgU0hPUlRDVVRTX1dJTkRPV19IRUlHSFQgPSAyODtcblxuY29uc3QgVE9UQUxfQk9SREVSID0gbnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgbnVtYmVycy5PVVRTSURFX0JPUkRFUl9XSURUSDtcbmNvbnN0IFBTWV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCA9IDE7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX1YgPSA1O1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSA9IDg7XG5jb25zdCBQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0xJTkUgPSAzO1xuY29uc3QgUFNZX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9JQ08gPSAoKFBTWV9PVkVSVklFV19XSU5fV0lEVEggLSAyKihudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggKyBQU1lfT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX0gpKSAtXG4gICAgKFBTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgKiBudW1iZXJzLklDT05fV0lEVEgpKS8oUFNZX09WRVJWSUVXX1dJTl9JQ09OU19QRVJfTElORSAtIDEpO1xuXG5leHBvcnQgY2xhc3MgTWFpblBzeW5lcmd5TWVudSB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBjaGFyc19tZW51OiBDaGFyc01lbnU7XG4gICAgcHVibGljIGJhc2ljX2luZm9fd2luZG93OiBCYXNpY0luZm9XaW5kb3c7XG4gICAgcHVibGljIHNlbGVjdGVkX2NoYXJfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgaXNfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBndWlkZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3VpZGVfd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGNob29zaW5nX3BzeW5lcmd5OiBib29sZWFuO1xuICAgIHB1YmxpYyBndWlkZV93aW5kb3dfbXNnczoge1xuICAgICAgICBjaG9vc2luZ19jaGFyXG4gICAgICAgIGNob29zaW5nX3BzeW5lcmd5XG4gICAgfTtcbiAgICBwdWJsaWMgZGVzY3JpcHRpb25fd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uX3dpbmRvd190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBwc3luZXJneV9vdmVydmlld193aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgc2hvcnRjdXRzX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBwc3luZXJneV9jaG9vc2Vfd2luZG93OiBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3c7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51ID0gbmV3IENoYXJzTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaG9vc2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSxcbiAgICAgICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYmFzaWNfaW5mb193aW5kb3cgPSBuZXcgQmFzaWNJbmZvV2luZG93KHRoaXMuZ2FtZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbCgpO1xuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBHVUlERV9XSU5ET1dfWCwgR1VJREVfV0lORE9XX1ksIEdVSURFX1dJTkRPV19XSURUSCwgR1VJREVfV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93X3RleHQgPSB0aGlzLmd1aWRlX3dpbmRvdy5zZXRfc2luZ2xlX2xpbmVfdGV4dChcIlwiKTtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19wc3luZXJneSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvd19tc2dzID0ge1xuICAgICAgICAgICAgY2hvb3NpbmdfY2hhcjogXCJXaG9zZSBQc3luZXJneT9cIixcbiAgICAgICAgICAgIGNob29zaW5nX3BzeW5lcmd5OiBcIldoaWNoIFBzeW5lcmd5P1wiLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIERFU0NSSVBUSU9OX1dJTkRPV19YLCBERVNDUklQVElPTl9XSU5ET1dfWSwgREVTQ1JJUFRJT05fV0lORE9XX1dJRFRILCBERVNDUklQVElPTl9XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCA9IHRoaXMuZGVzY3JpcHRpb25fd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBQU1lfT1ZFUlZJRVdfV0lOX1gsIFBTWV9PVkVSVklFV19XSU5fWSwgUFNZX09WRVJWSUVXX1dJTl9XSURUSCwgUFNZX09WRVJWSUVXX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLnNob3J0Y3V0c193aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgU0hPUlRDVVRTX1dJTkRPV19YLCBTSE9SVENVVFNfV0lORE9XX1ksIFNIT1JUQ1VUU19XSU5ET1dfV0lEVEgsIFNIT1JUQ1VUU19XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93LnNldF90ZXh0KFtcIlVzZSBhIGtleWJvYXJkIG51bWJlclwiLCBcInRvIHNldCBhIHNob3JjdXQuXCJdLCB1bmRlZmluZWQsIDcsIDMpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X2Nob29zZV93aW5kb3cgPSBuZXcgSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIHRoaXMucHN5bmVyZ3lfY2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLnBzeW5lcmd5X2Nob29zZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzX29wZW4pIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZV9tZW51KCk7XG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICB9XG5cbiAgICBjaGFyX2NoYW5nZShwYXJ0eV9pbmRleCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNfb3BlbikgcmV0dXJuO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSBwYXJ0eV9pbmRleDtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5zZXRfY2hhcih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbcGFydHlfaW5kZXhdKTtcbiAgICAgICAgdGhpcy5zZXRfcHN5bmVyZ3lfaWNvbnMoKTtcbiAgICB9XG5cbiAgICBjaGFyX2Nob29zZShwYXJ0eV9pbmRleCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNfb3BlbikgcmV0dXJuO1xuICAgICAgICB0aGlzLmNoYXJzX21lbnUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmNob29zaW5nX3BzeW5lcmd5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcbiAgICAgICAgdGhpcy5wc3luZXJneV9jaG9vc2Vfd2luZG93Lm9wZW4ocGFydHlfaW5kZXgsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfcHN5bmVyZ3kgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHBzeW5lcmd5X2NoYW5nZShhYmlsaXR5KSB7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGFiaWxpdHkuZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIHBzeW5lcmd5X2Nob29zZShhYmlsaXR5KSB7XG4gICAgICAgIGlmIChhYmlsaXR5LmtleV9uYW1lIGluIHRoaXMuZGF0YS5pbmZvLmZpZWxkX2FiaWxpdGllc19saXN0KSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5maWVsZF9hYmlsaXRpZXNfbGlzdFthYmlsaXR5LmtleV9uYW1lXS5jYXN0KHRoaXMuZGF0YS5oZXJvLCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5rZXlfbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfZ3VpZGVfd2luZG93X3RleHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX3BzeW5lcmd5KSB7XG4gICAgICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmd1aWRlX3dpbmRvd19tc2dzLmNob29zaW5nX3BzeW5lcmd5LCB0aGlzLmd1aWRlX3dpbmRvd190ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZ3VpZGVfd2luZG93X21zZ3MuY2hvb3NpbmdfY2hhciwgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfZGVzY3JpcHRpb25fd2luZG93X3RleHQoZGVzY3JpcHRpb24/KSB7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX3BzeW5lcmd5KSB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy51cGRhdGVfdGV4dChkZXNjcmlwdGlvbiwgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zICsgXCIgICAgQ29pbnNcIiwgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfcHN5bmVyZ3lfaWNvbnMoKSB7XG4gICAgICAgIHRoaXMucHN5bmVyZ3lfb3ZlcnZpZXdfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKCk7XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5hYmlsaXRpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGFiaWxpdHlfa2V5X25hbWUgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5hYmlsaXRpZXNbaV07XG4gICAgICAgICAgICBpZiAoYWJpbGl0eV9rZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFiaWxpdHkgPSB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFthYmlsaXR5X2tleV9uYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoYWJpbGl0eS5pc19maWVsZF9wc3luZXJneSB8fCBhYmlsaXR5LmVmZmVjdHNfb3V0c2lkZV9iYXR0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IFRPVEFMX0JPUkRFUiArIFBTWV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCArIE1hdGguY2VpbCgoY291bnRlciVQU1lfT1ZFUlZJRVdfV0lOX0lDT05TX1BFUl9MSU5FKSAqIChQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyArIG51bWJlcnMuSUNPTl9XSURUSCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gVE9UQUxfQk9SREVSICsgUFNZX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19WICsgKChjb3VudGVyL1BTWV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpIHwwKSAqIChQU1lfT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0xJTkUgKyBudW1iZXJzLklDT05fSEVJR0hUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wc3luZXJneV9vdmVydmlld193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHgsIHksIFwiYWJpbGl0aWVzX2ljb25zXCIsIHVuZGVmaW5lZCwgYWJpbGl0eV9rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICsrY291bnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuX21lbnUoY2xvc2VfY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLmNoYXJzX21lbnUub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICB0aGlzLmJhc2ljX2luZm9fd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0pO1xuICAgICAgICB0aGlzLnNldF9wc3luZXJneV9pY29ucygpO1xuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCgpO1xuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNob3J0Y3V0c193aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3cgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNoYXJzX21lbnUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLnBzeW5lcmd5X292ZXJ2aWV3X3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zaG9ydGN1dHNfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBDaGFyc01lbnUgfSBmcm9tICcuLi9zdXBwb3J0X21lbnVzL0NoYXJzTWVudSc7XG5pbXBvcnQgeyBCYXNpY0luZm9XaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL0Jhc2ljSW5mb1dpbmRvdyc7XG5pbXBvcnQgeyBJdGVtUHN5bmVyZ3lDaG9vc2VXaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL0l0ZW1Qc3luZXJneUNob29zZVdpbmRvdyc7XG5pbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi9XaW5kb3cnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IEl0ZW1PcHRpb25zV2luZG93IH0gZnJvbSAnLi4vd2luZG93cy9pdGVtL0l0ZW1PcHRpb25zV2luZG93JztcbmltcG9ydCB7IFN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdyB9IGZyb20gJy4uL3dpbmRvd3MvaXRlbS9TdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cnO1xuaW1wb3J0IHsgaXRlbV90eXBlcyB9IGZyb20gJy4uL0l0ZW0nO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcblxuY29uc3QgR1VJREVfV0lORE9XX1ggPSAxMDQ7XG5jb25zdCBHVUlERV9XSU5ET1dfWSA9IDA7XG5jb25zdCBHVUlERV9XSU5ET1dfV0lEVEggPSAxMzI7XG5jb25zdCBHVUlERV9XSU5ET1dfSEVJR0hUID0gMjA7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWCA9IDA7XG5jb25zdCBERVNDUklQVElPTl9XSU5ET1dfWSA9IDEzNjtcbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCA9IDIzNjtcbmNvbnN0IERFU0NSSVBUSU9OX1dJTkRPV19IRUlHSFQgPSAyMDtcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX1ggPSAxMDQ7XG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9ZID0gMjQ7XG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9XSURUSCA9IDEzMjtcbmNvbnN0IElURU1fT1ZFUlZJRVdfV0lOX0hFSUdIVCA9IDc2O1xuY29uc3QgQVJSQU5HRV9XSU5ET1dfWCA9IDEwNDtcbmNvbnN0IEFSUkFOR0VfV0lORE9XX1kgPSAxMDQ7XG5jb25zdCBBUlJBTkdFX1dJTkRPV19XSURUSCA9IDEzMjtcbmNvbnN0IEFSUkFOR0VfV0lORE9XX0hFSUdIVCA9IDI4O1xuXG5jb25zdCBUT1RBTF9CT1JERVIgPSBudW1iZXJzLklOU0lERV9CT1JERVJfV0lEVEggKyBudW1iZXJzLk9VVFNJREVfQk9SREVSX1dJRFRIO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCA9IDExO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfViA9IDEyO1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgPSA1O1xuY29uc3QgSVRFTV9PVkVSVklFV19XSU5fU1BBQ0VfQkVUV05fTElORSA9IDM7XG5jb25zdCBJVEVNX09WRVJWSUVXX1dJTl9TUEFDRV9CRVRXTl9JQ08gPSAoKElURU1fT1ZFUlZJRVdfV0lOX1dJRFRIIC0gMioobnVtYmVycy5JTlNJREVfQk9SREVSX1dJRFRIICsgSVRFTV9PVkVSVklFV19XSU5fSU5TSURFX1BBRERJTkdfSCkpIC1cbiAgICAoSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgKiBudW1iZXJzLklDT05fV0lEVEgpKS8oSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUgLSAxKTtcbmNvbnN0IFNVQl9JQ09OX1ggPSA3O1xuY29uc3QgU1VCX0lDT05fWSA9IDg7XG5jb25zdCBJVEVNX09WRVJWSUVXX1lfU0hJRlQgPSAxNjtcbmNvbnN0IElURU1fT1ZFUlZJRVdfSEVJR0hUX1NISUZUID0gMTY7XG5cbmV4cG9ydCBjbGFzcyBNYWluSXRlbU1lbnUge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgY2hhcnNfbWVudTogQ2hhcnNNZW51O1xuICAgIHB1YmxpYyBiYXNpY19pbmZvX3dpbmRvdzogQmFzaWNJbmZvV2luZG93O1xuICAgIHB1YmxpYyBpdGVtX2NoYW5nZV9zdGF0c193aW5kb3c6IFN0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdztcbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBpc19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIGd1aWRlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBndWlkZV93aW5kb3dfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY2hvb3NpbmdfaXRlbTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZ3VpZGVfd2luZG93X21zZ3M6IHtcbiAgICAgICAgY2hvb3NpbmdfY2hhcjogc3RyaW5nLFxuICAgICAgICBjaG9vc2luZ19pdGVtOiBzdHJpbmdcbiAgICB9O1xuICAgIHB1YmxpYyBkZXNjcmlwdGlvbl93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZGVzY3JpcHRpb25fd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFycmFuZ2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGFycmFuZ2Vfd2luZG93X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fb3ZlcnZpZXdfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fY2hvb3NlX3dpbmRvdzogSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93O1xuICAgIHB1YmxpYyBpdGVtX29wdGlvbnNfd2luZG93OiBJdGVtT3B0aW9uc1dpbmRvdztcbiAgICBwdWJsaWMgY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZTogRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51ID0gbmV3IENoYXJzTWVudShcbiAgICAgICAgICAgIHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaG9vc2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuY2hhcl9jaG9vc2VfY2FuY2VsLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSxcbiAgICAgICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdyA9IG5ldyBCYXNpY0luZm9XaW5kb3codGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cgPSBuZXcgU3RhdHNDaGVja1dpdGhJdGVtV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuZ3VpZGVfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEdVSURFX1dJTkRPV19YLCBHVUlERV9XSU5ET1dfWSwgR1VJREVfV0lORE9XX1dJRFRILCBHVUlERV9XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCA9IHRoaXMuZ3VpZGVfd2luZG93LnNldF9zaW5nbGVfbGluZV90ZXh0KFwiXCIpO1xuICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3dfbXNncyA9IHtcbiAgICAgICAgICAgIGNob29zaW5nX2NoYXI6IFwiV2hvc2UgaXRlbT9cIixcbiAgICAgICAgICAgIGNob29zaW5nX2l0ZW06IFwiV2hpY2ggaXRlbT9cIixcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBERVNDUklQVElPTl9XSU5ET1dfWCwgREVTQ1JJUFRJT05fV0lORE9XX1ksIERFU0NSSVBUSU9OX1dJTkRPV19XSURUSCwgREVTQ1JJUFRJT05fV0lORE9XX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93X3RleHQgPSB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zZXRfc2luZ2xlX2xpbmVfdGV4dChcIlwiKTtcbiAgICAgICAgdGhpcy5hcnJhbmdlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBBUlJBTkdFX1dJTkRPV19YLCBBUlJBTkdFX1dJTkRPV19ZLCBBUlJBTkdFX1dJTkRPV19XSURUSCwgQVJSQU5HRV9XSU5ET1dfSEVJR0hUKTtcbiAgICAgICAgdGhpcy5hcnJhbmdlX3dpbmRvd190ZXh0ID0gdGhpcy5hcnJhbmdlX3dpbmRvdy5zZXRfdGV4dChbXCJBcnJhbmdlIGluZm8gaGVyZS4uLlwiXSwgdW5kZWZpbmVkLCA3LCAzKTtcbiAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBJVEVNX09WRVJWSUVXX1dJTl9YLCBJVEVNX09WRVJWSUVXX1dJTl9ZLCBJVEVNX09WRVJWSUVXX1dJTl9XSURUSCwgSVRFTV9PVkVSVklFV19XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cgPSBuZXcgSXRlbVBzeW5lcmd5Q2hvb3NlV2luZG93KFxuICAgICAgICAgICAgdGhpcy5nYW1lLFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hvb3NlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eVxuICAgICAgICApO1xuICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cgPSBuZXcgSXRlbU9wdGlvbnNXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICAgICAgdGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudSgpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgc2hpZnRfaXRlbV9vdmVydmlldyhkb3duKSB7XG4gICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93Lmdyb3VwLnkgKz0gSVRFTV9PVkVSVklFV19ZX1NISUZUO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5ncm91cC55IC09IElURU1fT1ZFUlZJRVdfWV9TSElGVDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYXJfY2hhbmdlKHBhcnR5X2luZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IHBhcnR5X2luZGV4O1xuICAgICAgICB0aGlzLmJhc2ljX2luZm9fd2luZG93LnNldF9jaGFyKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1twYXJ0eV9pbmRleF0pO1xuICAgICAgICB0aGlzLnNldF9pdGVtX2ljb25zKCk7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2dpdmVfZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5pdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlld19vYmogPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbV9vYmosIHtlcXVpcHBlZCA6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cub3BlbihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3BhcnR5X2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHByZXZpZXdfb2JqXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFyX2Nob29zZShwYXJ0eV9pbmRleCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNfb3BlbikgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3BhcnR5X2luZGV4XS5rZXlfbmFtZSA9PT0gdGhpcy5pdGVtX29wdGlvbnNfd2luZG93LmNoYXIua2V5X25hbWUpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyX2NoYXJfY2hvb3NlX29uX2dpdmUodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3BhcnR5X2luZGV4XSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hvb3NpbmdfZ2l2ZV9kZXN0aW5hdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hpZnRfaXRlbV9vdmVydmlldyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5zaG93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmhlaWdodCAtIElURU1fT1ZFUlZJRVdfSEVJR0hUX1NISUZUfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfbWVudS5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZXRfZ3VpZGVfd2luZG93X3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93Lm9wZW4ocGFydHlfaW5kZXgsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2l0ZW1fY2hvb3NlX2Nsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2l0ZW1fY2hvb3NlX2Nsb3NlKCkge1xuICAgICAgICB0aGlzLmNob29zaW5nX2l0ZW0gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuc2V0X2d1aWRlX3dpbmRvd190ZXh0KCk7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KCk7XG4gICAgICAgIHRoaXMuc2V0X2l0ZW1faWNvbnMoKTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LndpbmRvd19vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hhcl9jaG9vc2VfY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0X2l0ZW1fb3ZlcnZpZXcoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuc2hvdygpO1xuICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93LnNob3coKTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cudXBkYXRlX3NpemUoe2hlaWdodDogdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5oZWlnaHQgLSBJVEVNX09WRVJWSUVXX0hFSUdIVF9TSElGVH0pO1xuICAgICAgICAgICAgdGhpcy5hZnRlcl9jaGFyX2Nob29zZV9vbl9naXZlKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5jaGFyX2NoYW5nZSh0aGlzLml0ZW1fY2hvb3NlX3dpbmRvdy5jaGFyX2luZGV4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5pdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cub3BlbihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuaXRlbV9jaG9vc2Vfd2luZG93LmNoYXJfaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX29wdGlvbnNfd2luZG93Lml0ZW1fb2JqXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNoYXJzX21lbnUuc2V0X2NoYXJfYnlfaW5kZXgodGhpcy5pdGVtX2Nob29zZV93aW5kb3cuY2hhcl9pbmRleCk7XG4gICAgICAgICAgICB0aGlzLml0ZW1fb3B0aW9uc193aW5kb3cuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXModHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGl0ZW1fY2hhbmdlKGl0ZW0sIGl0ZW1fb2JqKSB7XG4gICAgICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGl0ZW0uZGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cud2luZG93X29wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gaXRlbV90eXBlcy5BQklMSVRZX0dSQU5UT1IpIHtcblxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSAhPT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93Lm9wZW4odGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0sIGl0ZW0sIGl0ZW1fb2JqKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGl0ZW1fY2hvb3NlKGl0ZW0sIGl0ZW1fb2JqKSB7XG4gICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuKGl0ZW1fb2JqLCBpdGVtLCB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSxcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LFxuICAgICAgICAgICAgYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaG9vc2luZ19naXZlX2Rlc3RpbmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoaWZ0X2l0ZW1fb3ZlcnZpZXcodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmhlaWdodCArIElURU1fT1ZFUlZJRVdfSEVJR0hUX1NISUZUfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vcHRpb25zX3dpbmRvdy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyc19tZW51LmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyX2NoYW5nZSh0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWZ0ZXJfY2hhcl9jaG9vc2Vfb25fZ2l2ZSA9IGFmdGVyX2NoYXJfY2hvb3NlX29uX2dpdmU7XG4gICAgICAgICAgICB9LCBjbG9zZV9pdGVtX2Nob29zZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtX2Nob29zZV93aW5kb3cuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSBpdGVtX3R5cGVzLkFCSUxJVFlfR1JBTlRPUikge1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgIT09IGl0ZW1fdHlwZXMuR0VORVJBTF9JVEVNKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaGFuZ2Vfc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNsb3NlX2l0ZW1fY2hvb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9jaG9vc2Vfd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09IGl0ZW1fdHlwZXMuQUJJTElUWV9HUkFOVE9SKSB7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSAhPT0gaXRlbV90eXBlcy5HRU5FUkFMX0lURU0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX2NoYW5nZV9zdGF0c193aW5kb3cudXBkYXRlX2luZm8oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1fY2hhbmdlX3N0YXRzX3dpbmRvdy5oaWRlX2Fycm93cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRfZ3VpZGVfd2luZG93X3RleHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2l0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpZGVfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZ3VpZGVfd2luZG93X21zZ3MuY2hvb3NpbmdfaXRlbSwgdGhpcy5ndWlkZV93aW5kb3dfdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmd1aWRlX3dpbmRvd19tc2dzLmNob29zaW5nX2NoYXIsIHRoaXMuZ3VpZGVfd2luZG93X3RleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2Rlc2NyaXB0aW9uX3dpbmRvd190ZXh0KGRlc2NyaXB0aW9uPykge1xuICAgICAgICBpZiAodGhpcy5jaG9vc2luZ19pdGVtKSB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy51cGRhdGVfdGV4dChkZXNjcmlwdGlvbiwgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zICsgXCIgICAgQ29pbnNcIiwgdGhpcy5kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfaXRlbV9pY29ucygpIHtcbiAgICAgICAgdGhpcy5pdGVtX292ZXJ2aWV3X3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCgpO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1fb2JqID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF0uaXRlbXNbaV07XG4gICAgICAgICAgICBjb25zdCBpdGVtX2tleV9uYW1lID0gaXRlbV9vYmoua2V5X25hbWU7XG4gICAgICAgICAgICBpZiAoaXRlbV9rZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IFRPVEFMX0JPUkRFUiArIElURU1fT1ZFUlZJRVdfV0lOX0lOU0lERV9QQURESU5HX0ggKyBNYXRoLmNlaWwoKGNvdW50ZXIlSVRFTV9PVkVSVklFV19XSU5fSUNPTlNfUEVSX0xJTkUpICogKElURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0lDTyArIG51bWJlcnMuSUNPTl9XSURUSCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBUT1RBTF9CT1JERVIgKyBJVEVNX09WRVJWSUVXX1dJTl9JTlNJREVfUEFERElOR19WICsgKChjb3VudGVyL0lURU1fT1ZFUlZJRVdfV0lOX0lDT05TX1BFUl9MSU5FKSB8IDApICogKElURU1fT1ZFUlZJRVdfV0lOX1NQQUNFX0JFVFdOX0xJTkUgKyBudW1iZXJzLklDT05fSEVJR0hUKTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCB5LCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgaXRlbV9rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHggKyBTVUJfSUNPTl9YLCB5ICsgU1VCX0lDT05fWSwgXCJlcXVpcHBlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbV9jb3VudCA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dCh4ICsgU1VCX0lDT05fWCwgeSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgaXRlbV9vYmoucXVhbnRpdHkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9vdmVydmlld193aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cChpdGVtX2NvdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKytjb3VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KGNsb3NlX2NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5jaGFyc19tZW51Lm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5vcGVuKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdKTtcbiAgICAgICAgdGhpcy5zZXRfaXRlbV9pY29ucygpO1xuICAgICAgICB0aGlzLnNldF9ndWlkZV93aW5kb3dfdGV4dCgpO1xuICAgICAgICB0aGlzLnNldF9kZXNjcmlwdGlvbl93aW5kb3dfdGV4dCgpO1xuICAgICAgICB0aGlzLmd1aWRlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuYXJyYW5nZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KGNsb3NlX21lbnVfYmVsb3cgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmNoYXJzX21lbnUuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5iYXNpY19pbmZvX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ndWlkZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25fd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLml0ZW1fb3ZlcnZpZXdfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmFycmFuZ2Vfd2luZG93LmNsb3NlKHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi8uLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sJztcbmltcG9ydCB7IERyb3BJdGVtV2luZG93IH0gZnJvbSAnLi9Ecm9wSXRlbVdpbmRvdyc7XG5pbXBvcnQgeyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93IH0gZnJvbSAnLi9JdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93JztcbmltcG9ydCB7IEdpdmVJdGVtT3B0aW9uc1dpbmRvdyB9IGZyb20gJy4vR2l2ZUl0ZW1PcHRpb25zV2luZG93JztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uLy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBJdGVtU2xvdCwgTWFpbkNoYXIgfSBmcm9tICcuLi8uLi9NYWluQ2hhcic7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vLi4vSXRlbSc7XG5pbXBvcnQgeyBTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cgfSBmcm9tICcuL1N0YXRzQ2hlY2tXaXRoSXRlbVdpbmRvdyc7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFdJTl9IRUlHSFQgPSA1MjtcbmNvbnN0IFdJTl9YID0gMTA0O1xuY29uc3QgV0lOX1kgPSAwO1xuY29uc3QgT1BUSU9OX1RFWFRfSE9SSVpPTlRBTF9QQURESU5HID0gODtcbmNvbnN0IE9QVElPTl9URVhUX01BWF9XSURIVCA9IDQwO1xuY29uc3QgT1BUSU9OX1RFWFRfWV9QT1MgPSAzMjtcbmNvbnN0IE1BWF9IT1JJWk9OVEFMID0gMztcbmNvbnN0IE1BWF9WRVJUSUNBTCA9IDI7XG5jb25zdCBDVVJTT1JfWF9TSElGVCA9IC0xNTtcbmNvbnN0IENVUlNPUl9ZX1NISUZUID0gNDtcbmNvbnN0IENIQVJfTkFNRV9YID0gMjc7XG5jb25zdCBDSEFSX05BTUVfWSA9IDg7XG5jb25zdCBJVEVNX05BTUVfWCA9IDI3O1xuY29uc3QgSVRFTV9OQU1FX1kgPSBDSEFSX05BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xuY29uc3QgSVRFTV9JQ09OX1ggPSA4O1xuY29uc3QgSVRFTV9JQ09OX1kgPSA4O1xuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcbmNvbnN0IERJU0FCTEVfQ09MT1IgPSAweDYwNjA2MDtcbmNvbnN0IEVOQUJMRV9DT0xPUiA9IDB4RkZGRkZGO1xuY29uc3QgQUNUSU9OX1dJTkRPV19NU0dfWCA9IDEyMjtcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1kgPSA2NjtcbmNvbnN0IEFDVElPTl9XSU5ET1dfTVNHX1dJRFRIID0gNjc7XG5jb25zdCBBQ1RJT05fV0lORE9XX01TR19IRUlHSFQgPSAyMDtcblxuZXhwb3J0IGNsYXNzIEl0ZW1PcHRpb25zV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB0ZXh0X3Nwcml0ZXM6IHtcbiAgICAgICAgdXNlOiBUZXh0T2JqLFxuICAgICAgICBlcXVpcDogVGV4dE9iaixcbiAgICAgICAgZGV0YWlsczogVGV4dE9iaixcbiAgICAgICAgZ2l2ZTogVGV4dE9iaixcbiAgICAgICAgcmVtb3ZlOiBUZXh0T2JqLFxuICAgICAgICBkcm9wOiBUZXh0T2JqXG4gICAgfTtcbiAgICBwdWJsaWMgaG9yaXpvbnRhbF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyB2ZXJ0aWNhbF9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgY3Vyc29yX2NvbnRyb2w6IEN1cnNvckNvbnRyb2w7XG4gICAgcHVibGljIG9wdGlvbl9hY3RpdmU6IHtcbiAgICAgICAgdXNlOiBib29sZWFuLFxuICAgICAgICBlcXVpcDogYm9vbGVhbixcbiAgICAgICAgZGV0YWlsczogYm9vbGVhbixcbiAgICAgICAgZ2l2ZTogYm9vbGVhbixcbiAgICAgICAgcmVtb3ZlOiBib29sZWFuLFxuICAgICAgICBkcm9wOiBib29sZWFuXG4gICAgfTtcbiAgICBwdWJsaWMgZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93OiBHaXZlSXRlbU9wdGlvbnNXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fcXVhbnRpdHlfbWFuYWdlcl93aW5kb3c6IEl0ZW1RdWFudGl0eU1hbmFnZXJXaW5kb3c7XG4gICAgcHVibGljIGRyb3BfaXRlbV93aW5kb3c6IERyb3BJdGVtV2luZG93O1xuICAgIHB1YmxpYyBhY3Rpb25fbWVzc2FnZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgb25fZ2l2ZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgaWNvbl9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGNoYXJfbmFtZTogVGV4dE9iajtcbiAgICBwdWJsaWMgaXRlbV9uYW1lOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBlcXVpcF9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGl0ZW1fY291bnRfc3ByaXRlOiBQaGFzZXIuQml0bWFwVGV4dDtcbiAgICBwdWJsaWMgc3RhdHNfdXBkYXRlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc3RhdHNfd2luZG93OiBTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3c7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnggPSBXSU5fWDtcbiAgICAgICAgdGhpcy55ID0gV0lOX1k7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54LCB0aGlzLnksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMudGV4dF9zcHJpdGVzID0ge1xuICAgICAgICAgICAgdXNlOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiVXNlXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORywgT1BUSU9OX1RFWFRfWV9QT1MpLFxuICAgICAgICAgICAgZXF1aXA6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJFcXVpcFwiLCBPUFRJT05fVEVYVF9IT1JJWk9OVEFMX1BBRERJTkcgKyBPUFRJT05fVEVYVF9NQVhfV0lESFQsIE9QVElPTl9URVhUX1lfUE9TKSxcbiAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJEZXRhaWxzXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIDIgKiBPUFRJT05fVEVYVF9NQVhfV0lESFQsIE9QVElPTl9URVhUX1lfUE9TKSxcbiAgICAgICAgICAgIGdpdmU6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJHaXZlXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORywgT1BUSU9OX1RFWFRfWV9QT1MgKyBudW1iZXJzLkZPTlRfU0laRSksXG4gICAgICAgICAgICByZW1vdmU6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJSZW1vdmVcIiwgT1BUSU9OX1RFWFRfSE9SSVpPTlRBTF9QQURESU5HICsgT1BUSU9OX1RFWFRfTUFYX1dJREhULCBPUFRJT05fVEVYVF9ZX1BPUyArIG51bWJlcnMuRk9OVF9TSVpFKSxcbiAgICAgICAgICAgIGRyb3A6IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJEcm9wXCIsIE9QVElPTl9URVhUX0hPUklaT05UQUxfUEFERElORyArIDIgKiBPUFRJT05fVEVYVF9NQVhfV0lESFQsIE9QVElPTl9URVhUX1lfUE9TICsgbnVtYmVycy5GT05UX1NJWkUpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZSA9IHtcbiAgICAgICAgICAgIHVzZTogdHJ1ZSxcbiAgICAgICAgICAgIGVxdWlwOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsczogdHJ1ZSxcbiAgICAgICAgICAgIGdpdmU6IHRydWUsXG4gICAgICAgICAgICByZW1vdmU6IHRydWUsXG4gICAgICAgICAgICBkcm9wOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMudmVydGljYWxfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wgPSBuZXcgQ3Vyc29yQ29udHJvbCh0aGlzLmdhbWUsIHRydWUsIHRydWUsICgpID0+IE1BWF9IT1JJWk9OVEFMLCAoKSA9PiBNQVhfVkVSVElDQUwsIHRoaXMuZ3JvdXAsXG4gICAgICAgICAgICB0aGlzLm9uX2NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLm9uX2NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLmdldF9ob3Jpem9udGFsX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X2hvcml6b250YWxfaW5kZXguYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0X3ZlcnRpY2FsX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X3ZlcnRpY2FsX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93ID0gbmV3IEdpdmVJdGVtT3B0aW9uc1dpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAyLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMik7XG4gICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdyA9IG5ldyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgICAgIHRoaXMuZHJvcF9pdGVtX3dpbmRvdyA9IG5ldyBEcm9wSXRlbVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgKyAxLCB0aGlzLmVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMSk7XG4gICAgICAgIHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEFDVElPTl9XSU5ET1dfTVNHX1gsIEFDVElPTl9XSU5ET1dfTVNHX1ksIEFDVElPTl9XSU5ET1dfTVNHX1dJRFRILCBBQ1RJT05fV0lORE9XX01TR19IRUlHSFQpO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5ncm91cC5hbHBoYSA9IDA7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5ncm91cC5hbHBoYSA9IDE7XG4gICAgfVxuXG4gICAgaGlkZV90ZXh0KCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy50ZXh0X3Nwcml0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzW2tleV0udGV4dC5hbHBoYSA9IHRoaXMudGV4dF9zcHJpdGVzW2tleV0uc2hhZG93LmFscGhhID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3dfdGV4dCgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGV4dF9zcHJpdGVzKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc1trZXldLnRleHQuYWxwaGEgPSB0aGlzLnRleHRfc3ByaXRlc1trZXldLnNoYWRvdy5hbHBoYSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc19vcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcbiAgICB9XG5cbiAgICBpc19hY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19hY3RpdmU7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnNvcl94KCkge1xuICAgICAgICByZXR1cm4gT1BUSU9OX1RFWFRfSE9SSVpPTlRBTF9QQURESU5HICsgdGhpcy5ob3Jpem9udGFsX2luZGV4ICogT1BUSU9OX1RFWFRfTUFYX1dJREhUICsgQ1VSU09SX1hfU0hJRlQ7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnNvcl95KCkge1xuICAgICAgICByZXR1cm4gT1BUSU9OX1RFWFRfWV9QT1MgKyBudW1iZXJzLkZPTlRfU0laRSAqIHRoaXMudmVydGljYWxfaW5kZXggKyBDVVJTT1JfWV9TSElGVDtcbiAgICB9XG5cbiAgICBnZXRfdmVydGljYWxfaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsX2luZGV4O1xuICAgIH1cblxuICAgIHNldF92ZXJ0aWNhbF9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnZlcnRpY2FsX2luZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgZ2V0X2hvcml6b250YWxfaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvcml6b250YWxfaW5kZXg7XG4gICAgfVxuXG4gICAgc2V0X2hvcml6b250YWxfaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX2luZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIFxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cub3Blbikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uX21lc3NhZ2Vfd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbl9tZXNzYWdlX3dpbmRvdy5vcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgc2V0X2F2YWlsYWJsZV9vcHRpb25zKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXRlbS51c2VfYWJpbGl0eSB8fCB0aGlzLml0ZW0uYnJva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy51c2UudGV4dC50aW50ID0gRElTQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS51c2UgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLnVzZS50ZXh0LnRpbnQgPSBFTkFCTEVfQ09MT1I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUudXNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXRlbS5lcXVpcGFibGUgfHwgdGhpcy5pdGVtX29iai5lcXVpcHBlZCB8fCAhdGhpcy5pdGVtLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyh0aGlzLmNoYXIua2V5X25hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5lcXVpcC50ZXh0LnRpbnQgPSBESVNBQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmVxdWlwID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5lcXVpcC50ZXh0LnRpbnQgPSBFTkFCTEVfQ09MT1I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUuZXF1aXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmdpdmUudGV4dC50aW50ID0gRElTQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5naXZlLnRleHQudGludCA9IEVOQUJMRV9DT0xPUjtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uX2FjdGl2ZS5naXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXRlbS5lcXVpcGFibGUgfHwgIXRoaXMuaXRlbV9vYmouZXF1aXBwZWQgfHwgIXRoaXMuaXRlbS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXModGhpcy5jaGFyLmtleV9uYW1lKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMucmVtb3ZlLnRleHQudGludCA9IERJU0FCTEVfQ09MT1I7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbl9hY3RpdmUucmVtb3ZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlcy5yZW1vdmUudGV4dC50aW50ID0gRU5BQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLnJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXRlbS5pbXBvcnRhbnRfaXRlbSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXMuZHJvcC50ZXh0LnRpbnQgPSBESVNBQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3AgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzLmRyb3AudGV4dC50aW50ID0gRU5BQkxFX0NPTE9SO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25fYWN0aXZlLmRyb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElURU1fSUNPTl9YLCBJVEVNX0lDT05fWSwgXCJpdGVtc19pY29uc1wiLCB1bmRlZmluZWQsIHRoaXMuaXRlbS5rZXlfbmFtZSk7XG4gICAgICAgIHRoaXMuY2hhcl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmNoYXIubmFtZSwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5pdGVtX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuaXRlbS5uYW1lLCBJVEVNX05BTUVfWCwgSVRFTV9OQU1FX1kpO1xuICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pdGVtX29iai5xdWFudGl0eSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29iai5xdWFudGl0eS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuc2V0X2hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5pdGVtX25hbWUpO1xuICAgICAgICBpZiAodGhpcy5lcXVpcF9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5lcXVpcF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLml0ZW1fY291bnRfc3ByaXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLng7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIHRoaXMueTtcbiAgICB9XG5cbiAgICBvcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyh0ZXh0LCBjbG9zZV9jYWxsYmFjaykge1xuICAgICAgICB0aGlzLmFjdGlvbl9tZXNzYWdlX3dpbmRvdy5zZXRfdGV4dChbdGV4dF0pO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHNfdXBkYXRlX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdHNfdXBkYXRlX2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3Rpb25fbWVzc2FnZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIHRydWUsICgpID0+IHtcbiAgICAgICAgICAgIGNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uX2Nob29zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9yaXpvbnRhbF9pbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLmdpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5naXZlX2l0ZW1fb3B0aW9uc193aW5kb3cuZGVhY3RpdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX2dpdmVfY2FsbGJhY2soKGRlc3RpbmF0aW9uX2NoYXIsIGFmdGVyX2Nob29zZV9jYWxsYmFjaywgdW5tb3VudF9naXZlX3dpbmRvd19zZXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uX2NoYXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2l2ZV9pdGVtX29wdGlvbnNfd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdGluYXRpb25fY2hhci5rZXlfbmFtZSAhPT0gdGhpcy5jaGFyLmtleV9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc3RfaXRlbV9vYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X25hbWU6IHRoaXMuaXRlbV9vYmoua2V5X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1aXBwZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiB0aGlzLml0ZW1fb2JqLnF1YW50aXR5XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXMoZGVzdGluYXRpb25fY2hhci5rZXlfbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdpdmVfaXRlbV9vcHRpb25zX3dpbmRvdy5vcGVuKGRlc3RfaXRlbV9vYmosIHRoaXMuaXRlbSwgZGVzdGluYXRpb25fY2hhciwgZmFsc2UsIHRydWUsIChhbnN3ZXIsIGVxdWlwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbnN3ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfaXRlbSh0aGlzLml0ZW1fb2JqLCB0aGlzLml0ZW1fb2JqLnF1YW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYXIuYWRkX2l0ZW0oZGVzdF9pdGVtX29iai5rZXlfbmFtZSwgZGVzdF9pdGVtX29iai5xdWFudGl0eSwgZXF1aXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJHaXZlbi5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtX29iai5xdWFudGl0eSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtX3F1YW50aXR5X21hbmFnZXJfd2luZG93Lm9wZW4oZGVzdF9pdGVtX29iaiwgdGhpcy5pdGVtLCB0aGlzLmNoYXIsIHF1YW50aXR5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWFudGl0eSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdF9pdGVtX29iai5xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhci5yZW1vdmVfaXRlbSh0aGlzLml0ZW1fb2JqLCBxdWFudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25fY2hhci5hZGRfaXRlbShkZXN0X2l0ZW1fb2JqLmtleV9uYW1lLCBkZXN0X2l0ZW1fb2JqLnF1YW50aXR5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93KFwiR2l2ZW4uXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2suYmluZCh0aGlzLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudF9naXZlX3dpbmRvd19zZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVzdGluYXRpb25fY2hhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXIucmVtb3ZlX2l0ZW0odGhpcy5pdGVtX29iaiwgdGhpcy5pdGVtX29iai5xdWFudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYXIuYWRkX2l0ZW0oZGVzdF9pdGVtX29iai5rZXlfbmFtZSwgZGVzdF9pdGVtX29iai5xdWFudGl0eSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1vdW50X2dpdmVfd2luZG93X3NldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5fYWN0aW9uX21lc3NhZ2Vfd2luZG93KFwiR2l2ZW4uXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJfY2hvb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAwICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5lcXVpcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhci5lcXVpcF9pdGVtKHRoaXMuaXRlbV9vYmouaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJFcXVpcHBlZC5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLnJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhci51bmVxdWlwX2l0ZW0odGhpcy5pdGVtX29iai5pbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuX2FjdGlvbl9tZXNzYWdlX3dpbmRvdyhcIlJlbW92ZWQuXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgbGV0IG9wZW5fZHJvcF93aW5kb3cgPSAocXVhbnRpdHkgPSAxKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcF9pdGVtX3dpbmRvdy5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyLCBxdWFudGl0eSwgZHJvcHBlZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbl9hY3Rpb25fbWVzc2FnZV93aW5kb3coXCJEcm9wcGVkIGl0LlwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmoucXVhbnRpdHkgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9xdWFudGl0eV9tYW5hZ2VyX3dpbmRvdy5vcGVuKHRoaXMuaXRlbV9vYmosIHRoaXMuaXRlbSwgdGhpcy5jaGFyLCBxdWFudGl0eSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpdHkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbl9kcm9wX3dpbmRvdyhxdWFudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3Blbl9kcm9wX3dpbmRvdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuaGlkZV9hcnJvd3MoKTtcbiAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuc2hvdygpO1xuICAgICAgICBpZiAodGhpcy5ob3Jpem9udGFsX2luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMCAmJiB0aGlzLm9wdGlvbl9hY3RpdmUudXNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWxfaW5kZXggPT09IDEgJiYgdGhpcy5vcHRpb25fYWN0aXZlLmdpdmUgJiYgdGhpcy5pdGVtX29iai5lcXVpcHBlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHNfd2luZG93LmNvbXBhcmVfaXRlbXModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ob3Jpem9udGFsX2luZGV4ID09PSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMCAmJiB0aGlzLm9wdGlvbl9hY3RpdmUuZXF1aXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNhbF9pbmRleCA9PT0gMSAmJiB0aGlzLm9wdGlvbl9hY3RpdmUucmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c193aW5kb3cuY29tcGFyZV9pdGVtcyh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvcml6b250YWxfaW5kZXggPT09IDIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsX2luZGV4ID09PSAxICYmIHRoaXMub3B0aW9uX2FjdGl2ZS5kcm9wICYmIHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzX3dpbmRvdy5jb21wYXJlX2l0ZW1zKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbihpdGVtX29iaiwgaXRlbSwgY2hhciwgc3RhdHNfd2luZG93LCBvbl9naXZlX2NhbGxiYWNrLCBjbG9zZV9jYWxsYmFjaywgc3RhdHNfdXBkYXRlX2NhbGxiYWNrLCBvcGVuX2NhbGxiYWNrPykge1xuICAgICAgICB0aGlzLml0ZW1fb2JqID0gaXRlbV9vYmo7XG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuc3RhdHNfd2luZG93ID0gc3RhdHNfd2luZG93O1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMub25fZ2l2ZV9jYWxsYmFjayA9IG9uX2dpdmVfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5zdGF0c191cGRhdGVfY2FsbGJhY2sgPSBzdGF0c191cGRhdGVfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLnNldF9hdmFpbGFibGVfb3B0aW9ucygpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wZW5fY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9wZW5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLnNldF9hdmFpbGFibGVfb3B0aW9ucygpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0IHsgQ3Vyc29yQ29udHJvbCB9IGZyb20gJy4uLy4uL3V0aWxzL0N1cnNvckNvbnRyb2wnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IEl0ZW1TbG90LCBNYWluQ2hhciB9IGZyb20gJy4uLy4uL01haW5DaGFyJztcbmltcG9ydCB7IEl0ZW0gfSBmcm9tICcuLi8uLi9JdGVtJztcblxuY29uc3QgV0lOX1dJRFRIID0gMTMyO1xuY29uc3QgV0lOX0hFSUdIVCA9IDc2O1xuY29uc3QgV0lOX1ggPSAxMDQ7XG5jb25zdCBXSU5fWSA9IDI2O1xuY29uc3QgSU5GT19YID0gMTY7XG5jb25zdCBRVUVTVElPTl9ZID0gMjI7XG5jb25zdCBBTlNXRVJfWCA9IDMyO1xuY29uc3QgWUVTX1kgPSA0NjtcbmNvbnN0IE5PX1kgPSA2MjtcbmNvbnN0IElDT05fWSA9IDQ7XG5jb25zdCBJQ09OX05BTUVfWCA9IDMyO1xuY29uc3QgSUNPTl9OQU1FX1kgPSA4O1xuY29uc3QgUE9TU0lCTEVfQU5TV0VSU19DT1VOVCA9IDI7XG5jb25zdCBDVVJTT1JfWCA9IDE2O1xuY29uc3QgQ1VSU09SX1lfU0hJRlQgPSA1O1xuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcblxuZXhwb3J0IGNsYXNzIERyb3BJdGVtV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBpY29uX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGljb246IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGl0ZW1fY291bnRfc3ByaXRlOiBQaGFzZXIuQml0bWFwVGV4dDtcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYW5zd2VyX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGRyb3BwZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGN1cnNvcl9jb250cm9sOiBDdXJzb3JDb250cm9sO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIHF1YW50aXR5X3RvX3JlbW92ZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFdJTl9YLCBXSU5fWSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dChbXCJBcmUgeW91IHN1cmUgeW91XCIsIFwid2FudCB0byBkcm9wIGl0P1wiXSwgSU5GT19YLCBRVUVTVElPTl9ZLCAxKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlllc1wiLCBBTlNXRVJfWCwgWUVTX1kpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiTm9cIiwgQU5TV0VSX1gsIE5PX1kpO1xuICAgICAgICB0aGlzLmljb25fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgSUNPTl9OQU1FX1gsIElDT05fTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5pY29uID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wgPSBuZXcgQ3Vyc29yQ29udHJvbCh0aGlzLmdhbWUsIGZhbHNlLCB0cnVlLCB1bmRlZmluZWQsICgpID0+IFBPU1NJQkxFX0FOU1dFUlNfQ09VTlQsXG4gICAgICAgICAgICB0aGlzLmdyb3VwLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRoaXMuZ2V0X2Fuc3dlcl9pbmRleC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5zZXRfYW5zd2VyX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfY3Vyc29yX3guYmluZCh0aGlzKSwgdGhpcy5nZXRfY3Vyc29yX3kuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuc2V0X2NvbnRyb2woKTtcbiAgICB9XG5cbiAgICBzZXRfY29udHJvbCgpIHtcbiAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIHRoaXMuZHJvcHBlZCkpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgdGhpcy5vbl9jaG9vc2UoKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnNvcl94KCkge1xuICAgICAgICByZXR1cm4gQ1VSU09SX1g7XG4gICAgfVxuXG4gICAgZ2V0X2N1cnNvcl95KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYW5zd2VyX2luZGV4ID8gTk9fWSA6IFlFU19ZKSArIENVUlNPUl9ZX1NISUZUO1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X2FjdGl2ZTtcbiAgICB9XG5cbiAgICBpc19vcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfb3BlbjtcbiAgICB9XG5cbiAgICBnZXRfYW5zd2VyX2luZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbnN3ZXJfaW5kZXg7XG4gICAgfVxuXG4gICAgc2V0X2Fuc3dlcl9pbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgV0lOX1g7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IHRoaXMuZ2FtZS5jYW1lcmEueSArIFdJTl9ZO1xuICAgIH1cblxuICAgIHNldF9pbmZvKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuaXRlbS5uYW1lLCB0aGlzLmljb25fbmFtZSk7XG4gICAgICAgIHRoaXMuaWNvbiA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElORk9fWCwgSUNPTl9ZLCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgdGhpcy5pdGVtLmtleV9uYW1lKTtcbiAgICAgICAgaWYgKHRoaXMucXVhbnRpdHlfdG9fcmVtb3ZlID4gMSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChJTkZPX1ggKyBTVUJfSUNPTl9YLCBJQ09OX1kgKyBTVUJfSUNPTl9ZLCAnZ3MtaXRlbS1ibXAtZm9udCcsIHRoaXMucXVhbnRpdHlfdG9fcmVtb3ZlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5zZXRfaW5mbygpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb24pO1xuICAgICAgICBpZiAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2Nob29zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5zd2VyX2luZGV4ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXIucmVtb3ZlX2l0ZW0odGhpcy5pdGVtX29iaiwgdGhpcy5xdWFudGl0eV90b19yZW1vdmUpO1xuICAgICAgICAgICAgdGhpcy5kcm9wcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2suYmluZCh0aGlzLCB0aGlzLmRyb3BwZWQpKTtcbiAgICB9XG5cbiAgICBvcGVuKGl0ZW1fb2JqLCBpdGVtLCBjaGFyLCBxdWFudGl0eV90b19yZW1vdmUsIGNsb3NlX2NhbGxiYWNrPywgb3Blbl9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IGl0ZW1fb2JqO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLnF1YW50aXR5X3RvX3JlbW92ZSA9IHF1YW50aXR5X3RvX3JlbW92ZTtcbiAgICAgICAgdGhpcy5hbnN3ZXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMuc2V0X2luZm8oKTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5kcm9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChvcGVuX2NhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy51bnNldF9pbmZvKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBJdGVtQ291bnRlciB9IGZyb20gJy4uLy4uL3V0aWxzL0l0ZW1zQ291bnRlcic7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgSXRlbVNsb3QsIE1haW5DaGFyIH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4uLy4uL0l0ZW0nO1xuXG5jb25zdCBXSU5fV0lEVEggPSAxMzI7XG5jb25zdCBXSU5fSEVJR0hUID0gNTI7XG5jb25zdCBXSU5fWCA9IDEwNDtcbmNvbnN0IFdJTl9ZID0gMDtcbmNvbnN0IFFVRVNUSU9OX1RFWFRfWCA9IDQwO1xuY29uc3QgUVVFU1RJT05fVEVYVF9ZID0gODtcbmNvbnN0IElURU1fTkFNRV9YID0gMjc7XG5jb25zdCBJVEVNX05BTUVfWSA9IDE2O1xuY29uc3QgQ0hBUl9OQU1FX1ggPSAyNztcbmNvbnN0IERFU1RfQ0hBUl9OQU1FX1ggPSA4NDtcbmNvbnN0IENIQVJfTkFNRV9ZID0gSVRFTV9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcbmNvbnN0IElURU1fSUNPTl9YID0gODtcbmNvbnN0IElURU1fSUNPTl9ZID0gODtcbmNvbnN0IFNVQl9JQ09OX1ggPSA3O1xuY29uc3QgU1VCX0lDT05fWSA9IDg7XG5jb25zdCBJVEVNX0NPVU5URVJfWCA9IDU2O1xuY29uc3QgSVRFTV9DT1VOVEVSX1kgPSA0MDtcbmNvbnN0IFJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWCA9IDM3O1xuY29uc3QgUkVNQUlOX1RFWFRfQ0hBUl9DT1VOVF9ZID0gQ0hBUl9OQU1FX1kgKyBudW1iZXJzLkZPTlRfU0laRTtcbmNvbnN0IFJFTUFJTl9URVhUX0RFU1RfQ0hBUl9DT1VOVF9YID0gOTQ7XG5jb25zdCBSRU1PVkVfVEVYVF9DT1VOVF9YID0gNTM7XG5jb25zdCBSRU1PVkVfVEVYVF9DT1VOVF9ZID0gSVRFTV9DT1VOVEVSX1k7XG5cbmV4cG9ydCBjbGFzcyBJdGVtUXVhbnRpdHlNYW5hZ2VyV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBpdGVtOiBJdGVtO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvd19hY3RpdmU6IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgY2hvb3Nlbl9xdWFudGl0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBpdGVtX2NvdW50ZXI6IEl0ZW1Db3VudGVyO1xuICAgIHB1YmxpYyByZW1haW5pbmdfd2l0aF9jaGFyX2NvdW50OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBuZXdfYW1vdW50X3dpdGhfZGVzdF9jaGFyX2NvdW50OiBUZXh0T2JqO1xuICAgIHB1YmxpYyB0b19yZW1vdmVfY291bnQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRlc3RpbmF0aW9uX2NoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgY2hhcl9uYW1lOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGVxdWlwX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgaXRlbV9jb3VudF9zcHJpdGU6IFBoYXNlci5CaXRtYXBUZXh0O1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIGRlc3RfaXRlbV9vYmo6IEl0ZW1TbG90O1xuICAgIHB1YmxpYyBkZXN0X2NoYXJfbmFtZTogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMueCA9IFdJTl9YO1xuICAgICAgICB0aGlzLnkgPSBXSU5fWTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgV0lOX1dJRFRILCBXSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDA7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJIb3cgbWFueT9cIiwgUVVFU1RJT05fVEVYVF9YLCBRVUVTVElPTl9URVhUX1kpO1xuICAgICAgICB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSArIDE7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSA9IDE7XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyID0gbmV3IEl0ZW1Db3VudGVyKHRoaXMuZ2FtZSwgdGhpcy5ncm91cCwgSVRFTV9DT1VOVEVSX1gsIElURU1fQ09VTlRFUl9ZLCB0aGlzLm9uX2NoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5yZW1haW5pbmdfd2l0aF9jaGFyX2NvdW50ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBSRU1BSU5fVEVYVF9DSEFSX0NPVU5UX1gsIFJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUkVNQUlOX1RFWFRfREVTVF9DSEFSX0NPVU5UX1gsIFJFTUFJTl9URVhUX0NIQVJfQ09VTlRfWSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMudG9fcmVtb3ZlX2NvdW50ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBSRU1PVkVfVEVYVF9DT1VOVF9YLCBSRU1PVkVfVEVYVF9DT1VOVF9ZLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbCgpO1xuICAgIH1cblxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVzY19pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICB0aGlzLmNob29zZW5fcXVhbnRpdHkgPSAwO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgb25fY2hhbmdlKHF1YW50aXR5KSB7XG4gICAgICAgIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hvb3Nlbl9xdWFudGl0eS50b1N0cmluZygpLCB0aGlzLnRvX3JlbW92ZV9jb3VudCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoKHRoaXMuaXRlbV9vYmoucXVhbnRpdHkgLSB0aGlzLmNob29zZW5fcXVhbnRpdHkpLnRvU3RyaW5nKCksIHRoaXMucmVtYWluaW5nX3dpdGhfY2hhcl9jb3VudCk7XG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoKHRoaXMuZGVzdF9pdGVtX29iai5xdWFudGl0eSArIHRoaXMuY2hvb3Nlbl9xdWFudGl0eSkudG9TdHJpbmcoKSwgdGhpcy5uZXdfYW1vdW50X3dpdGhfZGVzdF9jaGFyX2NvdW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oZWFkZXIoKSB7XG4gICAgICAgIHRoaXMuaWNvbl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChJVEVNX0lDT05fWCwgSVRFTV9JQ09OX1ksIFwiaXRlbXNfaWNvbnNcIiwgdW5kZWZpbmVkLCB0aGlzLml0ZW0ua2V5X25hbWUpO1xuICAgICAgICB0aGlzLmNoYXJfbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5jaGFyLm5hbWUsIENIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdF9jaGFyX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuZGVzdGluYXRpb25fY2hhci5uYW1lLCBERVNUX0NIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVtX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuaXRlbS5uYW1lLCBJVEVNX05BTUVfWCwgSVRFTV9OQU1FX1kpO1xuICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVxdWlwX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKElURU1fSUNPTl9YICsgU1VCX0lDT05fWCwgSVRFTV9JQ09OX1kgKyBTVUJfSUNPTl9ZLCBcImVxdWlwcGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pdGVtX29iai5xdWFudGl0eSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jb3VudF9zcHJpdGUgPSB0aGlzLmdhbWUuYWRkLmJpdG1hcFRleHQoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksICdncy1pdGVtLWJtcC1mb250JywgdGhpcy5pdGVtX29iai5xdWFudGl0eS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cuYWRkX3Nwcml0ZV90b19ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuc2V0X2hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmljb25fc3ByaXRlKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLmNoYXJfbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmRlc3RpbmF0aW9uX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5kZXN0X2NoYXJfbmFtZSk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMubmV3X2Ftb3VudF93aXRoX2Rlc3RfY2hhcl9jb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLml0ZW1fbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmVxdWlwX3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLmVxdWlwX3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX2Zyb21fZ3JvdXAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIHRoaXMueDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55O1xuICAgIH1cblxuICAgIG9wZW4oaXRlbV9vYmosIGl0ZW0sIGNoYXIsIGNsb3NlX2NhbGxiYWNrLCBkZXN0aW5hdGlvbl9jaGFyPywgb3Blbl9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IGl0ZW1fb2JqO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uX2NoYXIgPSBkZXN0aW5hdGlvbl9jaGFyO1xuICAgICAgICBpZiAodGhpcy5kZXN0aW5hdGlvbl9jaGFyKSB7XG4gICAgICAgICAgICBjb25zdCBkZXN0X2l0ZW1fb2JqID0gdGhpcy5kZXN0aW5hdGlvbl9jaGFyLml0ZW1zLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5rZXlfbmFtZSA9PT0gaXRlbV9vYmoua2V5X25hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGVzdF9pdGVtX29iaiA9IGRlc3RfaXRlbV9vYmoubGVuZ3RoID8gZGVzdF9pdGVtX29ialswXSA6IHtcbiAgICAgICAgICAgICAgICBrZXlfbmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICBpbmRleDogbnVsbCxcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNob29zZW5fcXVhbnRpdHkgPSAxO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5jb25maWcodGhpcy5pdGVtX29iai5xdWFudGl0eSwgdGhpcy5jaG9vc2VuX3F1YW50aXR5KTtcbiAgICAgICAgdGhpcy5ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMub25fY2hhbmdlKHRoaXMuY2hvb3Nlbl9xdWFudGl0eSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAob3Blbl9jYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb3Blbl9jYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5jaG9vc2VuX3F1YW50aXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UodGhpcy5jaG9vc2VuX3F1YW50aXR5KTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLnVuc2V0X2hlYWRlcigpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbn0iLCJjb25zdCBHUklEX0NPTE9SID0gMHgwMDAwMDA7XG5jb25zdCBJTkFDVElWRV9CQVJfQ09MT1IgPSAweDk4OTg5ODtcbmNvbnN0IEFDVElWRV9CQVJfQ09MT1IgPSAweEY4QjA3MDtcbmNvbnN0IE1BWF9JVEVNUyA9IDMwO1xuY29uc3QgR1JJRF9XSURUSCA9IE1BWF9JVEVNUyAqIDIgKyAxO1xuY29uc3QgR1JJRF9IRUlHSFQgPSA4O1xuY29uc3QgRk9SV0FSRCA9IDE7XG5jb25zdCBCQUNLV0FSRCA9IC0xO1xuXG5leHBvcnQgY2xhc3MgSXRlbUNvdW50ZXIge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYXZhaWxhYmxlX2l0ZW1zX2NvdW50OiBudW1iZXI7XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBvbl9jaGFuZ2U6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBjdXJyZW50X3F1YW50aXR5OiBudW1iZXI7XG4gICAgcHVibGljIGludGVybmFsX2dyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGdyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIGFjdGl2ZV9iYXJfZ3JhcGhpY3M6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgaW5hY3RpdmVfYmFyX2dyYXBoaWNzOiBQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hvb3NlX3RpbWVyX3JlcGVhdDogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBjaG9vc2VfdGltZXJfc3RhcnQ6IFBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgaW5kZXhfY2hhbmdlX3RpbWU6IG51bWJlcjtcbiAgICBwdWJsaWMgcmlnaHRfcHJlc3NlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgbGVmdF9wcmVzc2VkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZ3JvdXAsIHgsIHksIG9uX2NoYW5nZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hhbmdlO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSAxO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLnggPSB0aGlzLng7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAueSA9IHRoaXMueTtcbiAgICAgICAgdGhpcy5ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC5hZGQodGhpcy5ncmFwaGljcyk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAuYWRkKHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcyk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxfZ3JvdXAuYWRkKHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzKTtcbiAgICAgICAgdGhpcy5ncm91cC5hZGQodGhpcy5pbnRlcm5hbF9ncm91cCk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdCA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3N0YXJ0ID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5pbmRleF9jaGFuZ2VfdGltZSA9IFBoYXNlci5UaW1lci5RVUFSVEVSLzI7XG4gICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldF9jb250cm9scygpO1xuICAgICAgICB0aGlzLmNyZWF0ZV9ncmlkKCk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2xzKCkge1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5SSUdIVCkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0X3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcF90aW1lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmlnaHRfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldF9jaGFuZ2VfdGltZXJzKEZPUldBUkQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShQaGFzZXIuS2V5Ym9hcmQuUklHSFQpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmUgfHwgIXRoaXMucmlnaHRfcHJlc3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5yaWdodF9wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KFBoYXNlci5LZXlib2FyZC5MRUZUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0X3ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0X3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldF9jaGFuZ2VfdGltZXJzKEJBQ0tXQVJEKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uVXAuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmUgfHwgIXRoaXMubGVmdF9wcmVzc2VkKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmxlZnRfcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRfY2hhbmdlX3RpbWVycyhzdGVwKSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZV9zdGVwKHN0ZXApO1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5hZGQoUGhhc2VyLlRpbWVyLlFVQVJURVIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5sb29wKHRoaXMuaW5kZXhfY2hhbmdlX3RpbWUsIHRoaXMuYWR2YW5jZV9zdGVwLmJpbmQodGhpcywgc3RlcCkpO1xuICAgICAgICAgICAgdGhpcy5jaG9vc2VfdGltZXJfcmVwZWF0LnN0YXJ0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdGFydCgpO1xuICAgIH1cblxuICAgIHN0b3BfdGltZXJzKCkge1xuICAgICAgICB0aGlzLmNob29zZV90aW1lcl9zdGFydC5zdG9wKCk7XG4gICAgICAgIHRoaXMuY2hvb3NlX3RpbWVyX3JlcGVhdC5zdG9wKCk7XG4gICAgfVxuXG4gICAgYWR2YW5jZV9zdGVwKHN0ZXApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ICs9IHN0ZXA7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPiB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gMVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9xdWFudGl0eSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jdXJyZW50X3F1YW50aXR5OyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lU3R5bGUoMSwgQUNUSVZFX0JBUl9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gaSAqIDIgKyAxO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLm1vdmVUbyh4LCAwKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uX2NoYW5nZSh0aGlzLmN1cnJlbnRfcXVhbnRpdHkpO1xuICAgIH1cblxuICAgIGNyZWF0ZV9ncmlkKCkge1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMCwgMCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKEdSSURfV0lEVEgsIDApO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhHUklEX1dJRFRIIC0gMSwgMCk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKEdSSURfV0lEVEggLSAxLCBHUklEX0hFSUdIVCAtIDEpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyhHUklEX1dJRFRIIC0gMSwgR1JJRF9IRUlHSFQgLSAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMCwgR1JJRF9IRUlHSFQgLSAxKTtcblxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSgxLCBHUklEX0NPTE9SKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oMCwgR1JJRF9IRUlHSFQgLSAxKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oMCwgMCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfSVRFTVMgLSAxOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICAgICAgY29uc3QgeCA9IDIgKyAoaSAqIDIpO1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5tb3ZlVG8oeCwgMCk7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbyh4LCBHUklEX0hFSUdIVCAtIDIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlX2luYWN0aXZlX2JhcigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IE1BWF9JVEVNUzsgaSA+IHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50OyAtLWkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzLmxpbmVTdHlsZSgxLCBJTkFDVElWRV9CQVJfQ09MT1IpO1xuICAgICAgICAgICAgY29uc3QgeCA9IChpICogMikgLSAxO1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubGluZVRvKHgsIEdSSURfSEVJR0hUIC0gMik7XG4gICAgICAgIH1cbiAgICB9IFxuXG4gICAgY29uZmlnKGF2YWlsYWJsZV9pdGVtc19jb3VudCwgaW5pdGlhbF9xdWFudGl0eSkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSA9IGluaXRpYWxfcXVhbnRpdHk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50ID0gYXZhaWxhYmxlX2l0ZW1zX2NvdW50O1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY3JlYXRlX2luYWN0aXZlX2JhcigpO1xuICAgICAgICB0aGlzLmFkdmFuY2Vfc3RlcCgwKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaW5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi8uLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IEN1cnNvckNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JDb250cm9sJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uLy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBJdGVtU2xvdCwgTWFpbkNoYXIgfSBmcm9tICcuLi8uLi9NYWluQ2hhcic7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSAnLi4vLi4vSXRlbSc7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDEzMjtcbmNvbnN0IFdJTl9IRUlHSFQgPSAzNjtcbmNvbnN0IFdJTl9YID0gMTA0O1xuY29uc3QgV0lOX1kgPSAwO1xuY29uc3QgQ0hBUl9OQU1FX1ggPSAyNztcbmNvbnN0IENIQVJfTkFNRV9ZID0gODtcbmNvbnN0IElURU1fTkFNRV9YID0gMjc7XG5jb25zdCBJVEVNX05BTUVfWSA9IENIQVJfTkFNRV9ZICsgbnVtYmVycy5GT05UX1NJWkU7XG5jb25zdCBBQ1RJT05fVEVYVF9YID0gODtcbmNvbnN0IEFDVElPTl9URVhUX1kgPSBJVEVNX05BTUVfWSArIG51bWJlcnMuRk9OVF9TSVpFO1xuY29uc3QgSVRFTV9JQ09OX1ggPSA4O1xuY29uc3QgSVRFTV9JQ09OX1kgPSA4O1xuY29uc3QgU1VCX0lDT05fWCA9IDc7XG5jb25zdCBTVUJfSUNPTl9ZID0gODtcbmNvbnN0IFBPU1NJQkxFX0FOU1dFUlNfQ09VTlQgPSAyO1xuY29uc3QgQU5TV0VSX1ggPSAxMTI7XG5jb25zdCBZRVNfWSA9IDg7XG5jb25zdCBOT19ZID0gMjQ7XG5jb25zdCBDVVJTT1JfWCA9IDk2O1xuY29uc3QgQ1VSU09SX1lfU0hJRlQgPSA1O1xuY29uc3QgWUVTID0gMDtcbmNvbnN0IE5PID0gMTtcblxuZXhwb3J0IGNsYXNzIEdpdmVJdGVtT3B0aW9uc1dpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBpdGVtX29iajogSXRlbVNsb3Q7XG4gICAgcHVibGljIGl0ZW06IEl0ZW07XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2hvb3NpbmdfY2hhcjogYm9vbGVhbjtcbiAgICBwdWJsaWMgYXNraW5nX2Zvcl9lcXVpcDogYm9vbGVhbjtcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgYW5zd2VyX2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIHllc190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBub190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBjdXJzb3JfY29udHJvbDogQ3Vyc29yQ29udHJvbDtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBpY29uX3Nwcml0ZTogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgY2hhcl9uYW1lOiBUZXh0T2JqO1xuICAgIHB1YmxpYyBpdGVtX25hbWU6IFRleHRPYmo7XG4gICAgcHVibGljIGFjdGlvbl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBlcXVpcF9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGl0ZW1fY291bnRfc3ByaXRlOiBQaGFzZXIuQml0bWFwVGV4dDtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIGVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHk7XG4gICAgICAgIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkgPSBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNob29zaW5nX2NoYXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hc2tpbmdfZm9yX2VxdWlwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYW5zd2VyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy55ZXNfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJZZXNcIiwgQU5TV0VSX1gsIFlFU19ZKTtcbiAgICAgICAgdGhpcy5ub190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIk5vXCIsIEFOU1dFUl9YLCBOT19ZKTtcbiAgICAgICAgdGhpcy55ZXNfdGV4dC50ZXh0LmFscGhhID0gdGhpcy5ub190ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnllc190ZXh0LnNoYWRvdy5hbHBoYSA9IHRoaXMubm9fdGV4dC5zaGFkb3cuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCBmYWxzZSwgdHJ1ZSwgdW5kZWZpbmVkLCAoKSA9PiBQT1NTSUJMRV9BTlNXRVJTX0NPVU5ULFxuICAgICAgICAgICAgdGhpcy5ncm91cCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLmdldF9hbnN3ZXJfaW5kZXguYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuc2V0X2Fuc3dlcl9pbmRleC5iaW5kKHRoaXMpLCB0aGlzLmlzX29wZW4uYmluZCh0aGlzKSwgdGhpcy5pc19hY3RpdmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0X2N1cnNvcl94LmJpbmQodGhpcyksIHRoaXMuZ2V0X2N1cnNvcl95LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjay5iaW5kKHRoaXMsIGZhbHNlLCBmYWxzZSkpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuIHx8ICF0aGlzLndpbmRvd19hY3RpdmUpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lbnRlcl9pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKHRoaXMuY2xvc2VfY2FsbGJhY2suYmluZCh0aGlzLCB0cnVlLCB0aGlzLmFuc3dlcl9pbmRleCA9PT0gWUVTKSk7XG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeCgpIHtcbiAgICAgICAgcmV0dXJuIENVUlNPUl9YO1xuICAgIH1cblxuICAgIGdldF9jdXJzb3JfeSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFuc3dlcl9pbmRleCA/IE5PX1kgOiBZRVNfWSkgKyBDVVJTT1JfWV9TSElGVDtcbiAgICB9XG5cbiAgICBpc19hY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd19hY3RpdmU7XG4gICAgfVxuXG4gICAgaXNfb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XG4gICAgfVxuXG4gICAgZ2V0X2Fuc3dlcl9pbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5zd2VyX2luZGV4O1xuICAgIH1cblxuICAgIHNldF9hbnN3ZXJfaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hbnN3ZXJfaW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IHRoaXMuZ2FtZS5jYW1lcmEueCArIFdJTl9YO1xuICAgICAgICB0aGlzLmdyb3VwLnkgPSB0aGlzLmdhbWUuY2FtZXJhLnkgKyBXSU5fWTtcbiAgICB9XG5cbiAgICBzZXRfaGVhZGVyKCkge1xuICAgICAgICB0aGlzLmljb25fc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1gsIElURU1fSUNPTl9ZLCBcIml0ZW1zX2ljb25zXCIsIHVuZGVmaW5lZCwgdGhpcy5pdGVtLmtleV9uYW1lKTtcbiAgICAgICAgdGhpcy5jaGFyX25hbWUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuY2hhci5uYW1lLCBDSEFSX05BTUVfWCwgQ0hBUl9OQU1FX1kpO1xuICAgICAgICB0aGlzLml0ZW1fbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24odGhpcy5pdGVtLm5hbWUsIElURU1fTkFNRV9YLCBJVEVNX05BTUVfWSk7XG4gICAgICAgIGlmICh0aGlzLmNob29zaW5nX2NoYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiR2l2ZSBpdCB0byB3aG9tP1wiLCBJVEVNX05BTUVfWCwgQUNUSU9OX1RFWFRfWSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5hc2tpbmdfZm9yX2VxdWlwKSB7XG4gICAgICAgICAgICB0aGlzLnllc190ZXh0LnRleHQuYWxwaGEgPSB0aGlzLm5vX3RleHQudGV4dC5hbHBoYSA9IDE7XG4gICAgICAgICAgICB0aGlzLnllc190ZXh0LnNoYWRvdy5hbHBoYSA9IHRoaXMubm9fdGV4dC5zaGFkb3cuYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25fdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJFcXVpcCB0aGlzIGl0ZW0/XCIsIEFDVElPTl9URVhUX1gsIEFDVElPTl9URVhUX1kpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9vYmouZXF1aXBwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXF1aXBfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoSVRFTV9JQ09OX1ggKyBTVUJfSUNPTl9YLCBJVEVNX0lDT05fWSArIFNVQl9JQ09OX1ksIFwiZXF1aXBwZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtX2NvdW50X3Nwcml0ZSA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChJVEVNX0lDT05fWCArIFNVQl9JQ09OX1gsIElURU1fSUNPTl9ZICsgU1VCX0lDT05fWSwgJ2dzLWl0ZW0tYm1wLWZvbnQnLCB0aGlzLml0ZW1fb2JqLnF1YW50aXR5LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5hZGRfc3ByaXRlX3RvX2dyb3VwKHRoaXMuaXRlbV9jb3VudF9zcHJpdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5zZXRfaGVhZGVyKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGUpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMuY2hhcl9uYW1lKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfdGV4dCh0aGlzLml0ZW1fbmFtZSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQodGhpcy5hY3Rpb25fdGV4dCk7XG4gICAgICAgIHRoaXMueWVzX3RleHQudGV4dC5hbHBoYSA9IHRoaXMubm9fdGV4dC50ZXh0LmFscGhhID0gMDtcbiAgICAgICAgdGhpcy55ZXNfdGV4dC5zaGFkb3cuYWxwaGEgPSB0aGlzLm5vX3RleHQuc2hhZG93LmFscGhhID0gMDtcbiAgICAgICAgaWYgKHRoaXMuZXF1aXBfc3ByaXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuZXF1aXBfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pdGVtX2NvdW50X3Nwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCh0aGlzLml0ZW1fY291bnRfc3ByaXRlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oaXRlbV9vYmosIGl0ZW0sIGNoYXIsIGNob29zaW5nX2NoYXIsIGFza2luZ19mb3JfZXF1aXAsIGNsb3NlX2NhbGxiYWNrPywgb3Blbl9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5pdGVtX29iaiA9IGl0ZW1fb2JqO1xuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmNob29zaW5nX2NoYXIgPSBjaG9vc2luZ19jaGFyO1xuICAgICAgICB0aGlzLmFza2luZ19mb3JfZXF1aXAgPSBhc2tpbmdfZm9yX2VxdWlwO1xuICAgICAgICB0aGlzLmFuc3dlcl9pbmRleCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmFza2luZ19mb3JfZXF1aXApIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKG9wZW5fY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9wZW5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPykge1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy51bnNldF9oZWFkZXIoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFjdGl2ZSgpIHtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGRlYWN0aXZlKCkge1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdyc7XG5pbXBvcnQgeyBJdGVtLCBpdGVtX3R5cGVzIH0gZnJvbSAnLi4vLi4vSXRlbSc7XG5pbXBvcnQgeyBlZmZlY3RfdHlwZXMsIGVmZmVjdF9vcGVyYXRvcnMgfSBmcm9tICcuLi8uLi9FZmZlY3QnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IEl0ZW1TbG90LCBNYWluQ2hhciB9IGZyb20gJy4uLy4uL01haW5DaGFyJztcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDEwMDtcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDkyO1xuY29uc3QgQkFTRV9XSU5fWCA9IDA7XG5jb25zdCBCQVNFX1dJTl9ZID0gNDA7XG5jb25zdCBBUlJPV19YID0gNTM7XG5jb25zdCBBUlJPV19ZX1NISUZUID0gMjtcbmNvbnN0IFBSRVZJRVdfVEVYVF9YID0gOTQ7XG5cbnR5cGUgQXJyb3dzID0ge1xuICAgIGF0dGFjazogUGhhc2VyLlNwcml0ZXxUZXh0T2JqLFxuICAgIGRlZmVuc2U6IFBoYXNlci5TcHJpdGV8VGV4dE9iaixcbiAgICBhZ2lsaXR5OiBQaGFzZXIuU3ByaXRlfFRleHRPYmpcbn07XG5cbmV4cG9ydCBjbGFzcyBTdGF0c0NoZWNrV2l0aEl0ZW1XaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgd2luZG93X29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBhdmF0YXJfZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgeF9hdmF0YXI6IG51bWJlcjtcbiAgICBwdWJsaWMgeV9hdmF0YXI6IG51bWJlcjtcbiAgICBwdWJsaWMgYXZhdGFyOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyB1cF9hcnJvd3M6IEFycm93cztcbiAgICBwdWJsaWMgZG93bl9hcnJvd3M6IEFycm93cztcbiAgICBwdWJsaWMgcHJldmlld19zdGF0c190ZXh0czogQXJyb3dzO1xuICAgIHB1YmxpYyBuYW1lX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGx2X3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGF0dGFja190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBkZWZlbnNlX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGFnaWxpdHlfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgaXRlbTogSXRlbTtcbiAgICBwdWJsaWMgaXRlbV9vYmo6IEl0ZW1TbG90O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1g7XG4gICAgICAgIHRoaXMueSA9IEJBU0VfV0lOX1k7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54LCB0aGlzLnksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cCA9IGdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy54X2F2YXRhciA9IHRoaXMueCArIDg7XG4gICAgICAgIHRoaXMueV9hdmF0YXIgPSB0aGlzLnkgKyA4O1xuICAgICAgICB0aGlzLmF2YXRhciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy51cF9hcnJvd3MgPSB7XG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkFUVEFDS106IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDQ4IC0gQVJST1dfWV9TSElGVCwgXCJ1cF9hcnJvd1wiKSxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuREVGRU5TRV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDY0IC0gQVJST1dfWV9TSElGVCwgXCJ1cF9hcnJvd1wiKSxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDgwIC0gQVJST1dfWV9TSElGVCwgXCJ1cF9hcnJvd1wiKVxuICAgICAgICB9IGFzIEFycm93cztcbiAgICAgICAgdGhpcy5kb3duX2Fycm93cyA9IHtcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQVRUQUNLXTogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoQVJST1dfWCwgNDggLSBBUlJPV19ZX1NISUZULCBcImRvd25fYXJyb3dcIiksXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChBUlJPV19YLCA2NCAtIEFSUk9XX1lfU0hJRlQsIFwiZG93bl9hcnJvd1wiKSxcbiAgICAgICAgICAgIFtlZmZlY3RfdHlwZXMuQUdJTElUWV06IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX1gsIDgwIC0gQVJST1dfWV9TSElGVCwgXCJkb3duX2Fycm93XCIpXG4gICAgICAgIH0gYXMgQXJyb3dzO1xuICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHMgPSB7XG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkFUVEFDS106IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIFBSRVZJRVdfVEVYVF9YLCA0OCwgdHJ1ZSksXG4gICAgICAgICAgICBbZWZmZWN0X3R5cGVzLkRFRkVOU0VdOiB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCBQUkVWSUVXX1RFWFRfWCwgNjQsIHRydWUpLFxuICAgICAgICAgICAgW2VmZmVjdF90eXBlcy5BR0lMSVRZXTogdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgUFJFVklFV19URVhUX1gsIDgwLCB0cnVlKVxuICAgICAgICB9IGFzIEFycm93cztcbiAgICAgICAgdGhpcy5oaWRlX2Fycm93cygpO1xuXG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJMdlwiLCA0OCwgMjQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiQXR0YWNrXCIsIDgsIDQwKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkRlZmVuc2VcIiwgOCwgNTYpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiQWdpbGl0eVwiLCA4LCA3Mik7XG5cbiAgICAgICAgdGhpcy5uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgOCk7XG4gICAgICAgIHRoaXMubHZfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDgwLCAyNCk7XG4gICAgICAgIHRoaXMuYXR0YWNrX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiMFwiLCA0MCwgNDgsIHRydWUpO1xuICAgICAgICB0aGlzLmRlZmVuc2VfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCIwXCIsIDQwLCA2NCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuYWdpbGl0eV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIjBcIiwgNDAsIDgwLCB0cnVlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfcG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuYXZhdGFyX2dyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyB0aGlzLnhfYXZhdGFyO1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgdGhpcy55X2F2YXRhcjtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93Lmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93Lmdyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIHVwZGF0ZV9pbmZvKHNldF9jb21wYXJlX2Fycm93cyA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5sZXZlbC50b1N0cmluZygpLCB0aGlzLmx2X3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jdXJyZW50X2F0ay50b1N0cmluZygpLCB0aGlzLmF0dGFja190ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIuY3VycmVudF9kZWYudG9TdHJpbmcoKSwgdGhpcy5kZWZlbnNlX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jdXJyZW50X2FnaS50b1N0cmluZygpLCB0aGlzLmFnaWxpdHlfdGV4dCk7XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcikge1xuICAgICAgICAgICAgdGhpcy5hdmF0YXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXZhdGFyID0gdGhpcy5hdmF0YXJfZ3JvdXAuY3JlYXRlKDAsIDAsIFwiYXZhdGFyc1wiLCB0aGlzLmNoYXIua2V5X25hbWUpO1xuICAgICAgICBpZiAoc2V0X2NvbXBhcmVfYXJyb3dzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBhcmVfaXRlbXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9jb21wYXJlX2Fycm93cyhlZmZlY3RfdHlwZSwgZXF1aXBfc2xvdF9wcm9wZXJ0eSwgY3VycmVudF9zdGF0c19wcm9wZXJ0eSwgY29tcGFyZV9yZW1vdmluZykge1xuICAgICAgICBsZXQgZWZmZWN0X29iaiA9IF8uZmluZCh0aGlzLml0ZW0uZWZmZWN0cywge3R5cGU6IGVmZmVjdF90eXBlfSk7XG4gICAgICAgIGxldCBwcmV2aWV3X3N0YXRzO1xuICAgICAgICBpZiAoZWZmZWN0X29iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBlcXVpcF9zbG90X2tleV9uYW1lID0gdGhpcy5jaGFyLmVxdWlwX3Nsb3RzW2VxdWlwX3Nsb3RfcHJvcGVydHldID09PSBudWxsID8gbnVsbCA6IHRoaXMuY2hhci5lcXVpcF9zbG90c1tlcXVpcF9zbG90X3Byb3BlcnR5XS5rZXlfbmFtZTtcbiAgICAgICAgICAgIHByZXZpZXdfc3RhdHMgPSB0aGlzLmNoYXIucHJldmlld19zdGF0c19ieV9lZmZlY3QoZWZmZWN0X3R5cGUsIGVmZmVjdF9vYmosIGVxdWlwX3Nsb3Rfa2V5X25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3Rfb2JqID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX3ByZXZpZXdfdGV4dChwcmV2aWV3X3N0YXRzLCBlZmZlY3RfdHlwZSk7XG4gICAgICAgICAgICB0aGlzLnVwX2Fycm93c1tlZmZlY3RfdHlwZV0uYWxwaGEgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXF1aXBwZWRfZWZmZWN0X29iaiA9IF8uZmluZCh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuY2hhci5lcXVpcF9zbG90c1tlcXVpcF9zbG90X3Byb3BlcnR5XS5rZXlfbmFtZV0uZWZmZWN0cywge3R5cGU6IGVmZmVjdF90eXBlfSk7XG4gICAgICAgICAgICBpZiAoZXF1aXBwZWRfZWZmZWN0X29iaiA9PT0gdW5kZWZpbmVkICYmIGVmZmVjdF9vYmogPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGVmZmVjdF9vYmogPT09IHVuZGVmaW5lZCB8fCBjb21wYXJlX3JlbW92aW5nKSB7XG4gICAgICAgICAgICAgICAgZWZmZWN0X29iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZWZmZWN0X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiAwLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogZWZmZWN0X29wZXJhdG9ycy5QTFVTXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcmV2aWV3X3N0YXRzID0gdGhpcy5jaGFyLnByZXZpZXdfc3RhdHNfYnlfZWZmZWN0KGVmZmVjdF90eXBlLCBlZmZlY3Rfb2JqLCB0aGlzLmNoYXIuZXF1aXBfc2xvdHNbZXF1aXBfc2xvdF9wcm9wZXJ0eV0ua2V5X25hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY3VycmVudF9zdGF0cyA9IHRoaXMuY2hhcltjdXJyZW50X3N0YXRzX3Byb3BlcnR5XTtcbiAgICAgICAgICAgIGlmIChwcmV2aWV3X3N0YXRzID4gY3VycmVudF9zdGF0cykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBfYXJyb3dzW2VmZmVjdF90eXBlXS5hbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfcHJldmlld190ZXh0KHByZXZpZXdfc3RhdHMsIGVmZmVjdF90eXBlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlld19zdGF0cyA8IGN1cnJlbnRfc3RhdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25fYXJyb3dzW2VmZmVjdF90eXBlXS5hbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfcHJldmlld190ZXh0KHByZXZpZXdfc3RhdHMsIGVmZmVjdF90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZV9wcmV2aWV3X3RleHQodmFsdWUsIGVmZmVjdF90eXBlKSB7XG4gICAgICAgIHRoaXMucHJldmlld19zdGF0c190ZXh0c1tlZmZlY3RfdHlwZV0udGV4dC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMucHJldmlld19zdGF0c190ZXh0c1tlZmZlY3RfdHlwZV0uc2hhZG93LmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh2YWx1ZS50b1N0cmluZygpLCB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNbZWZmZWN0X3R5cGVdKTtcbiAgICB9XG5cbiAgICBoaWRlX2Fycm93cygpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudXBfYXJyb3dzKSB7XG4gICAgICAgICAgICB0aGlzLnVwX2Fycm93c1trZXldLmFscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMuZG93bl9hcnJvd3Nba2V5XS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLnByZXZpZXdfc3RhdHNfdGV4dHNba2V5XS50ZXh0LmFscGhhID0gMDtcbiAgICAgICAgICAgIHRoaXMucHJldmlld19zdGF0c190ZXh0c1trZXldLnNoYWRvdy5hbHBoYSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYXJlX2l0ZW1zKGNvbXBhcmVfcmVtb3ZpbmcgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmhpZGVfYXJyb3dzKCk7XG4gICAgICAgIGlmICh0aGlzLml0ZW1fb2JqLmVxdWlwcGVkICYmICFjb21wYXJlX3JlbW92aW5nKSByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5pdGVtLmVxdWlwYWJsZV9jaGFycy5pbmNsdWRlcyh0aGlzLmNoYXIua2V5X25hbWUpKSByZXR1cm47XG4gICAgICAgIGxldCBlcXVpcF9zbG90X3Byb3BlcnR5O1xuICAgICAgICBzd2l0Y2ggKHRoaXMuaXRlbS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuV0VBUE9OUzogZXF1aXBfc2xvdF9wcm9wZXJ0eSA9IFwid2VhcG9uXCI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SOiBlcXVpcF9zbG90X3Byb3BlcnR5ID0gXCJoZWFkXCI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkNIRVNUX1BST1RFQ1RPUjogZXF1aXBfc2xvdF9wcm9wZXJ0eSA9IFwiY2hlc3RcIjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuQVJNT1I6IGVxdWlwX3Nsb3RfcHJvcGVydHkgPSBcImJvZHlcIjsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRfY29tcGFyZV9hcnJvd3MoZWZmZWN0X3R5cGVzLkFUVEFDSywgZXF1aXBfc2xvdF9wcm9wZXJ0eSwgXCJjdXJyZW50X2F0a1wiLCBjb21wYXJlX3JlbW92aW5nKTtcbiAgICAgICAgdGhpcy5zZXRfY29tcGFyZV9hcnJvd3MoZWZmZWN0X3R5cGVzLkRFRkVOU0UsIGVxdWlwX3Nsb3RfcHJvcGVydHksIFwiY3VycmVudF9kZWZcIiwgY29tcGFyZV9yZW1vdmluZyk7XG4gICAgICAgIHRoaXMuc2V0X2NvbXBhcmVfYXJyb3dzKGVmZmVjdF90eXBlcy5BR0lMSVRZLCBlcXVpcF9zbG90X3Byb3BlcnR5LCBcImN1cnJlbnRfYWdpXCIsIGNvbXBhcmVfcmVtb3ZpbmcpO1xuICAgIH1cblxuICAgIG9wZW4oY2hhciwgaXRlbSwgaXRlbV9vYmosIGNhbGxiYWNrPykge1xuICAgICAgICB0aGlzLnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmF2YXRhcl9ncm91cC5hbHBoYSA9IDE7XG4gICAgICAgIHRoaXMuY2hhciA9IGNoYXI7XG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XG4gICAgICAgIHRoaXMuaXRlbV9vYmogPSBpdGVtX29iajtcbiAgICAgICAgdGhpcy51cGRhdGVfaW5mbygpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5hdmF0YXJfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LmNsb3NlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL2RqaW5uL0NoYXJzUXVpY2tJbmZvRGppbm5XaW5kb3cnO1xuaW1wb3J0IHsgRGppbm5MaXN0V2luZG93IH0gZnJvbSAnLi4vd2luZG93cy9kamlubi9Eamlubkxpc3RXaW5kb3cnO1xuaW1wb3J0IHsgRGppbm5BY3Rpb25XaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL2RqaW5uL0RqaW5uQWN0aW9uV2luZG93JztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uL0dvbGRlblN1bic7XG5cbmV4cG9ydCBjbGFzcyBNYWluRGppbm5NZW51IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGlzX29wZW46IGJvb2xlYW47XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBjaGFyc19xdWlja19pbmZvX3dpbmRvdzogQ2hhcnNRdWlja0luZm9EamlubldpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fYWN0aW9uX3dpbmRvdzogRGppbm5BY3Rpb25XaW5kb3c7XG4gICAgcHVibGljIGRqaW5uaV9saXN0X3dpbmRvdzogRGppbm5MaXN0V2luZG93O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc2hpZnRfcHJvcGFnYXRpb25fcHJpb3JpdHksIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cgPSBuZXcgQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyh0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cgPSBuZXcgRGppbm5BY3Rpb25XaW5kb3codGhpcy5nYW1lKTtcbiAgICAgICAgdGhpcy5kamlubmlfbGlzdF93aW5kb3cgPSBuZXcgRGppbm5MaXN0V2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSwgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudSgpO1xuICAgICAgICB9LCB0aGlzLCB0aGlzLmVzY19wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KGNsb3NlX2NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy5vcGVuKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdKTtcbiAgICAgICAgdGhpcy5kamlubmlfbGlzdF93aW5kb3cub3Blbih0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93LCB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cpO1xuICAgICAgICB0aGlzLmRqaW5uX2FjdGlvbl93aW5kb3cub3BlbigpO1xuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoY2xvc2VfbWVudV9iZWxvdyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZGppbm5pX2xpc3Rfd2luZG93LmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5jbG9zZV9jYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayhjbG9zZV9tZW51X2JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBUZXh0T2JqLCBXaW5kb3cgfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0ICogYXMgbnVtYmVycyBmcm9tICcuLi8uLi9tYWdpY19udW1iZXJzJztcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuXG5jb25zdCBCQVNFX1dJTl9XSURUSCA9IDEwMDtcbmNvbnN0IEJBU0VfV0lOX0hFSUdIVCA9IDM2O1xuY29uc3QgQkFTRV9XSU5fWCA9IDA7XG5jb25zdCBCQVNFX1dJTl9ZID0gMDtcbmNvbnN0IE5BTUVfWCA9IDg7XG5jb25zdCBOQU1FX1kgPSA4XG5jb25zdCBDTEFTU19ZID0gTkFNRV9ZICsgbnVtYmVycy5GT05UX1NJWkU7XG5jb25zdCBMVl9YID0gNTY7XG5jb25zdCBMVl9ZID0gODtcbmNvbnN0IExWX05VTUJFUl9SSUdIVF9YID0gOTQ7XG5cbmV4cG9ydCBjbGFzcyBDaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGNoYXI6IE1haW5DaGFyO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfbmFtZTogVGV4dE9iajtcbiAgICBwdWJsaWMgY2hhcl9jbGFzczogVGV4dE9iajtcbiAgICBwdWJsaWMgbGV2ZWxfbnVtYmVyOiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmNoYXIgPSBudWxsO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMueCA9IEJBU0VfV0lOX1g7XG4gICAgICAgIHRoaXMueSA9IEJBU0VfV0lOX1k7XG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgdGhpcy54LCB0aGlzLnksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmNoYXJfbmFtZSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgTkFNRV9YLCBOQU1FX1kpO1xuICAgICAgICB0aGlzLmNoYXJfY2xhc3MgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIE5BTUVfWCwgQ0xBU1NfWSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJMdlwiLCBMVl9YLCBMVl9ZKTtcbiAgICAgICAgdGhpcy5sZXZlbF9udW1iZXIgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIExWX05VTUJFUl9SSUdIVF9YLCBMVl9ZLCB0cnVlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVfdGV4dCgpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubmFtZSwgdGhpcy5jaGFyX25hbWUpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5jbGFzcy5uYW1lLCB0aGlzLmNoYXJfY2xhc3MpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5sZXZlbC50b1N0cmluZygpLCB0aGlzLmxldmVsX251bWJlcik7XG4gICAgfVxuXG4gICAgc2V0X2NoYXIoY2hhcikge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLnVwZGF0ZV90ZXh0KCk7XG4gICAgfVxuXG4gICAgb3BlbihjaGFyLCBjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy51cGRhdGVfdGV4dCgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCB7IGRqaW5uX3N0YXR1cywgZGppbm5fZm9udF9jb2xvcnMgfSBmcm9tICcuLi8uLi9Eamlubic7XG5pbXBvcnQgeyBDdXJzb3JDb250cm9sIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ3Vyc29yQ29udHJvbCc7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgYmFzZV9hY3Rpb25zLCBjYXBpdGFsaXplLCBjaGFuZ2VfYnJpZ2h0bmVzcywgZGlyZWN0aW9ucywgZWxlbWVudHMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IERqaW5uTW9kZUhlYWRlcldpbmRvdyB9IGZyb20gJy4vRGppbm5Nb2RlSGVhZGVyV2luZG93JztcbmltcG9ydCB7IERqaW5uQ2hhclN0YXRzV2luZG93IH0gZnJvbSAnLi9EamlubkNoYXJTdGF0c1dpbmRvdyc7XG5pbXBvcnQgeyBEamlublBzeW5lcmd5V2luZG93IH0gZnJvbSAnLi9EamlublBzeW5lcmd5V2luZG93JztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uLy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBEamlubkFjdGlvbldpbmRvdyB9IGZyb20gJy4vRGppbm5BY3Rpb25XaW5kb3cnO1xuaW1wb3J0IHsgQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyB9IGZyb20gJy4vQ2hhcnNRdWlja0luZm9EamlubldpbmRvdyc7XG5cbmNvbnN0IFdJTl9XSURUSCA9IDIzNjtcbmNvbnN0IFdJTl9IRUlHSFQgPSAxMTY7XG5jb25zdCBXSU5fWCA9IDA7XG5jb25zdCBXSU5fWSA9IDQwO1xuY29uc3QgQ0hBUl9YX1BBRERJTkcgPSAzMjtcbmNvbnN0IENIQVJfWV9QQURESU5HID0gMjM7XG5jb25zdCBDSEFSX1hfQkVUV0VFTiA9IDU2O1xuY29uc3QgQ0hBUlNfUEVSX1BBR0UgPSA0O1xuY29uc3QgSElHSExJR0hUX0hFSUdIVCA9IDg7XG5jb25zdCBISUdITElHSFRfV0lEVEggPSA0ODtcbmNvbnN0IEhJR0hMSUdIVF9YX1BBRERJTkcgPSAxNjtcbmNvbnN0IEhJR0hMSUdIVF9ZX1BBRERJTkcgPSAyNDtcbmNvbnN0IERKSU5OX05BTUVfWF9QQURESU5HID0gMjQ7XG5jb25zdCBESklOTl9OQU1FX1lfUEFERElORyA9IDI0O1xuY29uc3QgU1RBUl9YX1BBRERJTkcgPSBISUdITElHSFRfWF9QQURESU5HICsgMTtcbmNvbnN0IFNUQVJfWV9QQURESU5HID0gSElHSExJR0hUX1lfUEFERElORyArIDE7XG5jb25zdCBESklOTl9OQU1FX0JFVFdFRU4gPSA1NjtcbmNvbnN0IERKSU5OX0RFU0NSSVBUSU9OX1ggPSA4O1xuY29uc3QgREpJTk5fREVTQ1JJUFRJT05fWSA9IDEwNDtcbmNvbnN0IERKSU5OX1NQUklURV9YID0gNTA7XG5jb25zdCBESklOTl9DSEFSX1dJTl9TVEFUU19SSUdIVF9YID0gMTIwO1xuY29uc3QgVklFV19TVEFURVMgPSB7XG4gICAgU1RBVFM6IDAsXG4gICAgVEhJU19DSEFSOiAxLFxuICAgIE5FWFRfQ0hBUjogMlxufVxuXG5leHBvcnQgY2xhc3MgRGppbm5MaXN0V2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgYmFzZV93aW5kb3c6IFdpbmRvdztcbiAgICBwdWJsaWMgZ3JvdXA6IFBoYXNlci5Hcm91cDtcbiAgICBwdWJsaWMgY2hhcnNfc3ByaXRlc19ncm91cDogUGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgd2luZG93X2FjdGl2ZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNlbGVjdGVkX2NoYXJfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfZGppbm5faW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgcGFnZV9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBjbG9zZV9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIGNoYXJzX3Nwcml0ZXM6IHtcbiAgICAgICAgW2NoYXJfa2V5X25hbWU6IHN0cmluZ106IFBoYXNlci5TcHJpdGVcbiAgICB9O1xuICAgIHB1YmxpYyBkamlubnNfc3ByaXRlczoge1xuICAgICAgICBbZWxlbWVudDogc3RyaW5nXTogUGhhc2VyLlNwcml0ZVxuICAgIH1bXTtcbiAgICBwdWJsaWMgZGppbm5fZGVzY3JpcHRpb246IFRleHRPYmo7XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQ6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgb25fYWN0aW9uX2Jhcl9oaWdobGlnaHQ6IFBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgY3Vyc29yX2NvbnRyb2w6IEN1cnNvckNvbnRyb2w7XG4gICAgcHVibGljIHNpemVzOiBudW1iZXJbXTtcbiAgICBwdWJsaWMgZGppbm5fbmFtZXM6IFRleHRPYmpbXVtdO1xuICAgIHB1YmxpYyBhY3RpdmVfZGppbm5fc3ByaXRlOiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBkamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3c6IERqaW5uTW9kZUhlYWRlcldpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdDogRGppbm5DaGFyU3RhdHNXaW5kb3c7XG4gICAgcHVibGljIGRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0OiBEamlubkNoYXJTdGF0c1dpbmRvdztcbiAgICBwdWJsaWMgZGppbm5fcHN5bmVyZ3lfd2luZG93OiBEamlublBzeW5lcmd5V2luZG93O1xuICAgIHB1YmxpYyBzZXR0aW5nX2RqaW5uX3N0YXR1czogYm9vbGVhbjtcbiAgICBwdWJsaWMgc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBzZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBkamlubmlfc3RhdHVzX3RleHRzOiBUZXh0T2JqW107XG4gICAgcHVibGljIHN0YXJzOiBQaGFzZXIuU3ByaXRlW11bXTtcbiAgICBwdWJsaWMgZGppbm5fYWN0aW9uX3dpbmRvdzogRGppbm5BY3Rpb25XaW5kb3c7XG4gICAgcHVibGljIGNoYXJzX3F1aWNrX2luZm9fd2luZG93OiBDaGFyc1F1aWNrSW5mb0RqaW5uV2luZG93O1xuICAgIHB1YmxpYyB2aWV3X3N0YXRlOiBudW1iZXI7XG4gICAgcHVibGljIGNoYW5naW5nX2RqaW5uX3N0YXR1czogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yIChnYW1lLCBkYXRhLCBlc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBzaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuY2hhcnNfc3ByaXRlc19ncm91cCk7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNoaWZ0X3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX2Rlc2NyaXB0aW9uID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9ERVNDUklQVElPTl9YLCBESklOTl9ERVNDUklQVElPTl9ZKTtcbiAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0ID0gIHRoaXMuZ2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodCA9ICB0aGlzLmdldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMub25fYWN0aW9uX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sID0gbmV3IEN1cnNvckNvbnRyb2wodGhpcy5nYW1lLCB0cnVlLCB0cnVlLCB0aGlzLmdldF9tYXhfY2hhcnMuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0X21heF9kamlubi5iaW5kKHRoaXMpLCB0aGlzLmdyb3VwLCB0aGlzLm9uX2NoYXJfY2hhbmdlLmJpbmQodGhpcyksIHRoaXMub25fZGppbm5fY2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICB0aGlzLmdldF9jaGFyX2luZGV4LmJpbmQodGhpcyksIHRoaXMuc2V0X2NoYXJfaW5kZXguYmluZCh0aGlzKSwgdGhpcy5nZXRfZGppbm5faW5kZXguYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuc2V0X2RqaW5uX2luZGV4LmJpbmQodGhpcyksIHRoaXMuaXNfb3Blbi5iaW5kKHRoaXMpLCB0aGlzLmlzX2FjdGl2ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5nZXRfeF9jdXJzb3IuYmluZCh0aGlzKSwgdGhpcy5nZXRfeV9jdXJzb3IuYmluZCh0aGlzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNpemVzID0gW107XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cgPSBuZXcgRGppbm5Nb2RlSGVhZGVyV2luZG93KHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0ID0gbmV3IERqaW5uQ2hhclN0YXRzV2luZG93KHRoaXMuZ2FtZSk7XG4gICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQgPSBuZXcgRGppbm5DaGFyU3RhdHNXaW5kb3codGhpcy5nYW1lLCBESklOTl9DSEFSX1dJTl9TVEFUU19SSUdIVF9YKTtcbiAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cgPSBuZXcgRGppbm5Qc3luZXJneVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHksIHRoaXMuc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmluaXRfZGppbm5fc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmluaXRfZGppbm5pX3N0YXR1c190ZXh0cygpO1xuICAgICAgICB0aGlzLnNldF9jb250cm9sKCk7XG4gICAgfVxuXG4gICAgZ2V0X2hpZ2hsaWdodF9iYXIoKSB7XG4gICAgICAgIGNvbnN0IGJhcl9oaWdobGlnaHQgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICBiYXJfaGlnaGxpZ2h0LmJsZW5kTW9kZSA9IFBJWEkuYmxlbmRNb2Rlcy5TQ1JFRU47XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKGJhcl9oaWdobGlnaHQpO1xuICAgICAgICBiYXJfaGlnaGxpZ2h0LmJlZ2luRmlsbCh0aGlzLmJhc2Vfd2luZG93LmNvbG9yLCAxKTtcbiAgICAgICAgYmFyX2hpZ2hsaWdodC5kcmF3UmVjdCgwLCAwLCBISUdITElHSFRfV0lEVEgsIEhJR0hMSUdIVF9IRUlHSFQpO1xuICAgICAgICBiYXJfaGlnaGxpZ2h0LmVuZEZpbGwoKTtcbiAgICAgICAgcmV0dXJuIGJhcl9oaWdobGlnaHQ7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmdyb3VwLnggPSB0aGlzLmdhbWUuY2FtZXJhLnggKyBXSU5fWDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgV0lOX1k7XG4gICAgfVxuXG4gICAgc2V0X2NvbnRyb2woKSB7XG4gICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsX2RqaW5uX3N0YXR1c19zZXQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5KTtcbiAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4gfHwgIXRoaXMud2luZG93X2FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfZGppbm5fb3BlcmF0aW9uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25fY2hvb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMsIHRoaXMuZW50ZXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmRhdGEuc2hpZnRfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbiB8fCAhdGhpcy53aW5kb3dfYWN0aXZlIHx8IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zaGlmdF9pbnB1dC5oYWx0KCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZV9kamlubl9zdGF0dXModGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4LCB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4KTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5zaGlmdF9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgZ2V0X3hfY3Vyc29yKCkge1xuICAgICAgICByZXR1cm4gSElHSExJR0hUX1hfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTiAtIDE0O1xuICAgIH1cblxuICAgIGdldF95X2N1cnNvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID09PSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBISUdITElHSFRfWV9QQURESU5HIC0gbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5kamlubmkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gSElHSExJR0hUX1lfUEFERElORyAtIG51bWJlcnMuRk9OVF9TSVpFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEhJR0hMSUdIVF9ZX1BBRERJTkcgKyB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ICogbnVtYmVycy5GT05UX1NJWkUgKyAzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNfb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93X29wZW47XG4gICAgfVxuXG4gICAgaXNfYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dfYWN0aXZlO1xuICAgIH1cblxuICAgIGdldF9jaGFyX2luZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4O1xuICAgIH1cblxuICAgIHNldF9jaGFyX2luZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIGdldF9kamlubl9pbmRleCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID09PSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4O1xuICAgICAgICB9IGVsc2UgeyBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2RqaW5uX2luZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSBpbmRleDtcbiAgICB9XG5cbiAgICBnZXRfbWF4X2NoYXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0X21heF9kamlubigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID09PSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRfZGppbm5fc3ByaXRlcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDSEFSU19QRVJfUEFHRTsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzLnB1c2goe30pO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGVsZW1lbnRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBESklOTl9TUFJJVEVfWCArIGkgKiBDSEFSX1hfQkVUV0VFTjtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzW2ldW2VsZW1dID0gdGhpcy5jaGFyc19zcHJpdGVzX2dyb3VwLmNyZWF0ZSh4LCBDSEFSX1lfUEFERElORywgZWxlbSArIFwiX2RqaW5uX3NldFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uc19zcHJpdGVzW2ldW2VsZW1dLmFuY2hvci5zZXRUbygwLjUsIDEuMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS5zY2FsZS54ID0gLTE7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubnNfc3ByaXRlc1tpXVtlbGVtXS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0X2RqaW5uaV9zdGF0dXNfdGV4dHMoKSB7XG4gICAgICAgIHRoaXMuZGppbm5pX3N0YXR1c190ZXh0cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBTVEFSX1hfUEFERElORyAtIDEgKyBpICogREpJTk5fTkFNRV9CRVRXRUVOO1xuICAgICAgICAgICAgY29uc3QgeSA9IDE2XG4gICAgICAgICAgICB0aGlzLmRqaW5uaV9zdGF0dXNfdGV4dHMucHVzaCh0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIHgsIHkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9kamlubl9zcHJpdGUodHdlZW4gPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSB0aGlzX2NoYXIuZGppbm5pLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpc19jaGFyLmRqaW5uaVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XV07XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlX2RqaW5uX3Nwcml0ZS5hbHBoYSA9IDA7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9kamlubl9zcHJpdGUuYW5pbWF0aW9ucy5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGhpc19zcHJpdGUgPSB0aGlzLmRqaW5uc19zcHJpdGVzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF1bdGhpc19kamlubi5lbGVtZW50XTtcbiAgICAgICAgdGhpcy5hY3RpdmVfZGppbm5fc3ByaXRlID0gdGhpc19zcHJpdGU7XG4gICAgICAgIGlmICh0d2Vlbikge1xuICAgICAgICAgICAgdGhpc19zcHJpdGUuc2NhbGUuc2V0VG8oMCwgMCk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXNfc3ByaXRlLnNjYWxlKS50byhcbiAgICAgICAgICAgICAgICB7IHg6IC0xLCB5OiAxIH0sXG4gICAgICAgICAgICAgICAgUGhhc2VyLlRpbWVyLlFVQVJURVIgPj4gMSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc19zcHJpdGUuYWxwaGEgPSAxO1xuICAgICAgICBsZXQgYWN0aW9uLCBkaXJlY3Rpb247XG4gICAgICAgIHN3aXRjaCAodGhpc19kamlubi5zdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlJFQ09WRVJZOlxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IFwibGVmdFwiO1xuICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTpcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBcImRvd25cIjtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBcInN0YW5kYnlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDpcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBcImRvd25cIjtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBcInNldFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9zcHJpdGVzW3RoaXNfZGppbm4uZWxlbWVudF0uc2V0QW5pbWF0aW9uKHRoaXNfc3ByaXRlLCBhY3Rpb24pO1xuICAgICAgICB0aGlzX3Nwcml0ZS5hbmltYXRpb25zLnBsYXkoYWN0aW9uICsgXCJfXCIgKyBkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIGxvYWRfcGFnZSgpIHtcbiAgICAgICAgdGhpcy5zaXplcyA9IG5ldyBBcnJheSh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5kamlubl9uYW1lcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcGFydHlfaW5kZXggPSB0aGlzLnBhZ2VfaW5kZXggKiBDSEFSU19QRVJfUEFHRSArIGk7XG4gICAgICAgICAgICBpZiAocGFydHlfaW5kZXggPj0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCkgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbcGFydHlfaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgY2hhcl9rZXlfbmFtZSA9IHRoaXNfY2hhci5rZXlfbmFtZTtcbiAgICAgICAgICAgIGlmICghKGNoYXJfa2V5X25hbWUgaW4gdGhpcy5jaGFyc19zcHJpdGVzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbl9rZXkgPSB0aGlzX2NoYXIuc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KGJhc2VfYWN0aW9ucy5JRExFKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0gPSB0aGlzLmNoYXJzX3Nwcml0ZXNfZ3JvdXAuY3JlYXRlKDAsIDAsIGFjdGlvbl9rZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS5hbmNob3Iuc2V0VG8oMC41LCAxLjApO1xuICAgICAgICAgICAgICAgIHRoaXNfY2hhci5zcHJpdGVfYmFzZS5zZXRBbmltYXRpb24odGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdLCBiYXNlX2FjdGlvbnMuSURMRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0pO1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2NoYXJfa2V5X25hbWVdLmFuaW1hdGlvbnMucGxheShhbmltYXRpb25fa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBDSEFSX1hfUEFERElORyArIGkgKiBDSEFSX1hfQkVUV0VFTjtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS54ID0geDtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfc3ByaXRlc1tjaGFyX2tleV9uYW1lXS55ID0gQ0hBUl9ZX1BBRERJTkc7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNbY2hhcl9rZXlfbmFtZV0uYWxwaGEgPSAxO1xuICAgICAgICAgICAgdGhpcy5kamlubl9uYW1lcy5wdXNoKFtdKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnMucHVzaChbXSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9saXN0KGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX2RqaW5uX2xpc3QoY2hhcl9pbmRleCkge1xuICAgICAgICB0aGlzLmRqaW5uX25hbWVzW2NoYXJfaW5kZXhdLmZvckVhY2goc3ByaXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cucmVtb3ZlX3RleHQoc3ByaXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RhcnNbY2hhcl9pbmRleF0uZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cChzcHJpdGUsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2NoYXJfaW5kZXhdO1xuICAgICAgICBjb25zdCBjaGFyX2RqaW5uaSA9IHRoaXNfY2hhci5kamlubmk7XG4gICAgICAgIGxldCB0aGlzX2RqaW5uX25hbWVzID0gW107XG4gICAgICAgIGxldCBzdGFycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYXJfZGppbm5pLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbY2hhcl9kamlubmlbal1dO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl94ID0gU1RBUl9YX1BBRERJTkcgKyBjaGFyX2luZGV4ICogREpJTk5fTkFNRV9CRVRXRUVOO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl95ID0gU1RBUl9ZX1BBRERJTkcgKyBqICogbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgICAgICBzdGFycy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKHN0YXJfeCwgc3Rhcl95LCB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcbiAgICAgICAgICAgIGNvbnN0IGRqaW5uX3ggPSBESklOTl9OQU1FX1hfUEFERElORyArIGNoYXJfaW5kZXggKiBESklOTl9OQU1FX0JFVFdFRU47XG4gICAgICAgICAgICBjb25zdCBkamlubl95ID0gREpJTk5fTkFNRV9ZX1BBRERJTkcgKyBqICogbnVtYmVycy5GT05UX1NJWkU7XG4gICAgICAgICAgICBsZXQgY29sb3I7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXNfZGppbm4uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU0VUOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TRVRdOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiBjb2xvciA9IGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TVEFOREJZXTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuUkVDT1ZFUlk6IGNvbG9yID0gZGppbm5fZm9udF9jb2xvcnNbZGppbm5fc3RhdHVzLlJFQ09WRVJZXTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkamlubl9uYW1lID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzX2RqaW5uLm5hbWUsIGRqaW5uX3gsIGRqaW5uX3ksIGZhbHNlLCBmYWxzZSwgY29sb3IpO1xuICAgICAgICAgICAgdGhpc19kamlubl9uYW1lcy5wdXNoKGRqaW5uX25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2l6ZXNbY2hhcl9pbmRleF0gPSBjaGFyX2RqaW5uaS5sZW5ndGg7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF0gPSB0aGlzX2RqaW5uX25hbWVzO1xuICAgICAgICB0aGlzLnN0YXJzW2NoYXJfaW5kZXhdID0gc3RhcnM7XG4gICAgfVxuXG4gICAgdW5zZXRfcGFnZSgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2hhcnNfc3ByaXRlcykge1xuICAgICAgICAgICAgdGhpcy5jaGFyc19zcHJpdGVzW2tleV0uYW5pbWF0aW9ucy5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS5hbHBoYSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5yZW1vdmVfZnJvbV9ncm91cCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGppbm5fbmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gdGhpcy5kamlubl9uYW1lc1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmFtZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KG5hbWVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9oaWdobGlnaHRfYmFyKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5kamlubmkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfbnVtYmVyX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYWdlX251bWJlcl9iYXJfaGlnaGxpZ2h0LmFscGhhID0gMTtcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC54ID0gSElHSExJR0hUX1hfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCAqIERKSU5OX05BTUVfQkVUV0VFTjtcbiAgICAgICAgICAgIHRoaXMucGFnZV9udW1iZXJfYmFyX2hpZ2hsaWdodC55ID0gSElHSExJR0hUX1lfUEFERElORyArIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggIT09IHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodC5hbHBoYSA9IDE7XG4gICAgICAgICAgICB0aGlzLm9uX2FjdGlvbl9iYXJfaGlnaGxpZ2h0LnggPSBISUdITElHSFRfWF9QQURESU5HICsgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4ICogREpJTk5fTkFNRV9CRVRXRUVOO1xuICAgICAgICAgICAgdGhpcy5vbl9hY3Rpb25fYmFyX2hpZ2hsaWdodC55ID0gSElHSExJR0hUX1lfUEFERElORyArIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggKiBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25fYWN0aW9uX2Jhcl9oaWdobGlnaHQuYWxwaGEgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyAmJiB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID09PSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XS5kamlubmkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuZGppbm5fZGVzY3JpcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGhpc19jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW3RoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleF07XG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kYXRhLmluZm8uZGppbm5pX2xpc3RbdGhpc19jaGFyLmRqaW5uaVt0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4XV07XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfZGppbm4uZGVzY3JpcHRpb24sIHRoaXMuZGppbm5fZGVzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl90ZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykge1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW3RoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXhdXTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fYWN0aW9uX3dpbmRvdy5zZXRfYWN0aW9uX3RleHQodGhpc19kamlubi5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fY2hhcl9jaGFuZ2UoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSBhZnRlcl9pbmRleDtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXMgJiYgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID09PSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPj0gdGhpcy5zaXplc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IHRoaXMuc2l6ZXNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XSAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgdGhpcy5jaGFyc19xdWlja19pbmZvX3dpbmRvdy5zZXRfY2hhcih0aGlzX2NoYXIpO1xuICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcbiAgICB9XG5cbiAgICBvbl9kamlubl9jaGFuZ2UoYmVmb3JlX2luZGV4LCBhZnRlcl9pbmRleCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gYWZ0ZXJfaW5kZXg7XG4gICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgdGhpcy5zZXRfYWN0aW9uX3RleHQoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fZGVzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfZGppbm5fc3ByaXRlKCk7XG4gICAgfVxuXG4gICAgb25fY2hvb3NlKCkge1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4XTtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleF1dO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyB8fCB0aGlzX2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlJFQ09WRVJZKSByZXR1cm47IFxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jaGFyc19zcHJpdGVzKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS55IC09IG51bWJlcnMuRk9OVF9TSVpFO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGVsZW1lbnRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0ueSAtPSBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENIQVJTX1BFUl9QQUdFOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBzdGF0dXNfdGV4dDtcbiAgICAgICAgICAgIGlmIChpID09PSB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXNfZGppbm4uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogc3RhdHVzX3RleHQgPSBjYXBpdGFsaXplKGRqaW5uX3N0YXR1cy5TVEFOREJZKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNUQU5EQlk6IHN0YXR1c190ZXh0ID0gY2FwaXRhbGl6ZShkamlubl9zdGF0dXMuU0VUKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlcl9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChvdGhlcl9jaGFyID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChvdGhlcl9jaGFyLmRqaW5uaS5sZW5ndGggPCB0aGlzX2NoYXIuZGppbm5pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfdGV4dCA9IFwiR2l2ZVwiO1xuICAgICAgICAgICAgICAgICAgICArK3RoaXMuc2l6ZXNbaV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzX3RleHQgPSBcIlRyYWRlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChzdGF0dXNfdGV4dCwgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXggPSB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXg7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggPSB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4O1xuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kamlubl9hY3Rpb25fd2luZG93LnNldF9hY3Rpb25fZm9yX3NwZWNpZmljX2RqaW5uKHRoaXNfY2hhciwgdGhpc19kamlubik7XG4gICAgICAgIHRoaXMuZGFya2VuX2ZvbnRfY29sb3IoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5zZXRfY3Vyc29yX3Bvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgZGFya2VuX2ZvbnRfY29sb3IoZGFya2VuID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRqaW5uX25hbWVzW3RoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfY2hhcl9pbmRleF0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW2ldXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZGFya2VuID8gY2hhbmdlX2JyaWdodG5lc3MoZGppbm5fZm9udF9jb2xvcnNbdGhpc19kamlubi5zdGF0dXNdLCAwLjcpIDogZGppbm5fZm9udF9jb2xvcnNbdGhpc19kamlubi5zdGF0dXNdO1xuICAgICAgICAgICAgaWYgKGRhcmtlbiAmJiBpID09PSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2RqaW5uX2luZGV4KSBjb250aW51ZTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoY29sb3IsIHRoaXMuZGppbm5fbmFtZXNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYW5jZWxfZGppbm5fc3RhdHVzX3NldChyZXNldF9pbmRleCA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cykgcmV0dXJuO1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jaGFyc19zcHJpdGVzKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3Nwcml0ZXNba2V5XS55ICs9IG51bWJlcnMuRk9OVF9TSVpFO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ0hBUlNfUEVSX1BBR0U7ICsraSkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbSA9IGVsZW1lbnRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IGVsZW1lbnRzLk5PX0VMRU1FTlQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5zX3Nwcml0ZXNbaV1bZWxlbV0ueSArPSBudW1iZXJzLkZPTlRfU0laRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubmlfc3RhdHVzX3RleHRzW2ldKTtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tpXTtcbiAgICAgICAgICAgIGlmICh0aGlzX2NoYXIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICAgICAgICB0aGlzLnNpemVzW2ldID0gdGhpc19jaGFyLmRqaW5uaS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2V0X2luZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXg7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2RqaW5uX2luZGV4ID0gdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuc2V0X2hpZ2hsaWdodF9iYXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhcmtlbl9mb250X2NvbG9yKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldF9oaWdobGlnaHRfYmFyKCk7XG4gICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2Rlc2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuc2V0X2RqaW5uX3Nwcml0ZSgpO1xuICAgICAgICB0aGlzLmN1cnNvcl9jb250cm9sLnNldF9jdXJzb3JfcG9zaXRpb24oKTtcbiAgICB9XG5cbiAgICBzZXRfZGppbm5fb3BlcmF0aW9uKCkge1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4XTtcbiAgICAgICAgY29uc3QgdGhpc19kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W3RoaXNfY2hhci5kamlubmlbdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleF1dO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19jaGFyX2luZGV4ICE9PSB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRfY2hhciA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXhdO1xuICAgICAgICAgICAgbGV0IHRoaXNfc3RhdHVzZXMsIG5leHRfc3RhdHVzZXMsIHRoaXNfZGppbm5pLCBuZXh0X2RqaW5uaSwgYWN0aW9uX3RleHQsIG5leHRfZGppbm47XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9PT0gbmV4dF9jaGFyLmRqaW5uaS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzX3N0YXR1c2VzID0gW3RoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogZGppbm5fc3RhdHVzLlNUQU5EQlldO1xuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzZXMgPSBbdGhpc19kamlubi5zdGF0dXMgPT09IGRqaW5uX3N0YXR1cy5TVEFOREJZID8gXCJpcnJlbGV2YW50XCIgOiB0aGlzX2RqaW5uLnN0YXR1c107XG4gICAgICAgICAgICAgICAgdGhpc19kamlubmkgPSBbdGhpc19kamlubl07XG4gICAgICAgICAgICAgICAgbmV4dF9kamlubmkgPSBbdGhpc19kamlubl07XG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHQgPSBcIkdpdmVcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dF9kamlubiA9IHRoaXMuZGF0YS5pbmZvLmRqaW5uaV9saXN0W25leHRfY2hhci5kamlubmlbdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleF1dO1xuICAgICAgICAgICAgICAgIHRoaXNfc3RhdHVzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIG5leHRfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogbmV4dF9kamlubi5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogZGppbm5fc3RhdHVzLlNUQU5EQllcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogdGhpc19kamlubi5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIG5leHRfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSA/IFwiaXJyZWxldmFudFwiIDogZGppbm5fc3RhdHVzLlNUQU5EQllcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pID0gW25leHRfZGppbm4sIHRoaXNfZGppbm5dO1xuICAgICAgICAgICAgICAgIG5leHRfZGppbm5pID0gW3RoaXNfZGppbm4sIG5leHRfZGppbm5dO1xuICAgICAgICAgICAgICAgIGFjdGlvbl90ZXh0ID0gXCJUcmFkZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0Lm9wZW4oXG4gICAgICAgICAgICAgICAgdGhpc19jaGFyLFxuICAgICAgICAgICAgICAgIHRoaXNfZGppbm5pLFxuICAgICAgICAgICAgICAgIHRoaXNfc3RhdHVzZXMsXG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0Lm9wZW4oXG4gICAgICAgICAgICAgICAgbmV4dF9jaGFyLFxuICAgICAgICAgICAgICAgIG5leHRfZGppbm5pLFxuICAgICAgICAgICAgICAgIG5leHRfc3RhdHVzZXMsXG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X3JpZ2h0LmJhc2Vfd2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eDogREpJTk5fQ0hBUl9XSU5fU1RBVFNfUklHSFRfWH0pO1xuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cub3BlbihcbiAgICAgICAgICAgICAgICBbdGhpc19jaGFyLCBuZXh0X2NoYXJdLFxuICAgICAgICAgICAgICAgIG5leHRfZGppbm5pLFxuICAgICAgICAgICAgICAgIHRoaXNfc3RhdHVzZXMsXG4gICAgICAgICAgICAgICAgYWN0aW9uX3RleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudmlld19zdGF0ZSA9IFZJRVdfU1RBVEVTLlNUQVRTO1xuICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cub3Blbih0aGlzX2NoYXIsIHRoaXNfZGppbm5pLCB0aGlzX3N0YXR1c2VzLCAoZXhlY3V0ZV9vcGVyYXRpb24pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoZXhlY3V0ZV9vcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbl90ZXh0ID09PSBcIlRyYWRlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfY2hhci5yZXBsYWNlX2RqaW5uKHRoaXNfZGppbm4ua2V5X25hbWUsIG5leHRfZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLnJlcGxhY2VfZGppbm4obmV4dF9kamlubi5rZXlfbmFtZSwgdGhpc19kamlubi5rZXlfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uX3RleHQgPT09IFwiR2l2ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2NoYXIucmVtb3ZlX2RqaW5uKHRoaXNfZGppbm4ua2V5X25hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9jaGFyLmFkZF9kamlubih0aGlzX2RqaW5uLmtleV9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfZGppbm5faW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX2RqaW5uX2xpc3QodGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfZGppbm5fbGlzdCh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbF9kamlubl9zdGF0dXNfc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH0sIHRydWUsICgpID0+IHtcbiAgICAgICAgICAgICAgICArK3RoaXMudmlld19zdGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3X3N0YXRlID4gVklFV19TVEFURVMuTkVYVF9DSEFSKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld19zdGF0ZSA9IFZJRVdfU1RBVEVTLlNUQVRTO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudmlld19zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFZJRVdfU1RBVEVTLlNUQVRTOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cuYmFzZV93aW5kb3cuY2xvc2UodW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX2NoYXJfc3RhdHNfd2luZG93X2xlZnQuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiBESklOTl9DSEFSX1dJTl9TVEFUU19SSUdIVF9YfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5zZXRfYWN0aW9uX2luZm9fdGV4dChgOiAke3RoaXNfY2hhci5uYW1lfSdzIFBzeWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuVEhJU19DSEFSOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9wc3luZXJneV93aW5kb3cudXBkYXRlX2luZm8odGhpc19jaGFyLCB0aGlzX2RqaW5uaSwgdGhpc19zdGF0dXNlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy5iYXNlX3dpbmRvdy5zaG93KHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19yaWdodC5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LnNldF9hY3Rpb25faW5mb190ZXh0KGA6ICR7bmV4dF9jaGFyLm5hbWV9J3MgUHN5YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5ORVhUX0NIQVI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3BzeW5lcmd5X3dpbmRvdy51cGRhdGVfaW5mbyhuZXh0X2NoYXIsIG5leHRfZGppbm5pLCBuZXh0X3N0YXR1c2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cuc2hvdyh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfcmlnaHQuYmFzZV93aW5kb3cudXBkYXRlX3Bvc2l0aW9uKHt4OiAwfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19jaGFuZ2VfaGVhZGVyX3dpbmRvdy5zZXRfYWN0aW9uX2luZm9fdGV4dChcIjogU3RhdHVzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYWN0aW9uX3RleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5leHRfc3RhdHVzO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzX2RqaW5uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU1RBTkRCWTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBkamlubl9zdGF0dXMuU1RBTkRCWTogbmV4dF9zdGF0dXMgPSBkamlubl9zdGF0dXMuU0VUOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfY2hhbmdlX2hlYWRlcl93aW5kb3cub3BlbihbdGhpc19jaGFyXSwgW3RoaXNfZGppbm5dLCBbbmV4dF9zdGF0dXNdKTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fY2hhcl9zdGF0c193aW5kb3dfbGVmdC5vcGVuKHRoaXNfY2hhciwgW3RoaXNfZGppbm5dLCBbbmV4dF9zdGF0dXNdKTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fcHN5bmVyZ3lfd2luZG93Lm9wZW4odGhpc19jaGFyLCBbdGhpc19kamlubl0sIFtuZXh0X3N0YXR1c10sIChleGVjdXRlX29wZXJhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2NoYW5nZV9oZWFkZXJfd2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kamlubl9jaGFyX3N0YXRzX3dpbmRvd19sZWZ0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGV4ZWN1dGVfb3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX2RqaW5uX3N0YXR1cyh0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXgsIHRoaXMuc2V0dGluZ19kamlubl9zdGF0dXNfZGppbm5faW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbF9kamlubl9zdGF0dXNfc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hhbmdlX2RqaW5uX3N0YXR1cyhjaGFyX2luZGV4LCBkamlubl9pbmRleCkge1xuICAgICAgICBjb25zdCB0aGlzX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbY2hhcl9pbmRleF07XG4gICAgICAgIGNvbnN0IHRoaXNfZGppbm4gPSB0aGlzLmRhdGEuaW5mby5kamlubmlfbGlzdFt0aGlzX2NoYXIuZGppbm5pW2RqaW5uX2luZGV4XV07XG4gICAgICAgIGlmICh0aGlzX2RqaW5uLnN0YXR1cyA9PT0gZGppbm5fc3RhdHVzLlNFVCkge1xuICAgICAgICAgICAgdGhpc19kamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TVEFOREJZLCB0aGlzX2NoYXIpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihkamlubl9mb250X2NvbG9yc1tkamlubl9zdGF0dXMuU1RBTkRCWV0sIHRoaXMuZGppbm5fbmFtZXNbY2hhcl9pbmRleF1bZGppbm5faW5kZXhdKTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cudXBkYXRlX3RleHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X2FjdGlvbl90ZXh0KCk7XG4gICAgICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXNfZGppbm4uc3RhdHVzID09PSBkamlubl9zdGF0dXMuU1RBTkRCWSkge1xuICAgICAgICAgICAgdGhpc19kamlubi5zZXRfc3RhdHVzKGRqaW5uX3N0YXR1cy5TRVQsIHRoaXNfY2hhcik7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKGRqaW5uX2ZvbnRfY29sb3JzW2RqaW5uX3N0YXR1cy5TRVRdLCB0aGlzLmRqaW5uX25hbWVzW2NoYXJfaW5kZXhdW2RqaW5uX2luZGV4XSk7XG4gICAgICAgICAgICB0aGlzLmNoYXJzX3F1aWNrX2luZm9fd2luZG93LnVwZGF0ZV90ZXh0KCk7XG4gICAgICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRfZGppbm5fc3ByaXRlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4oY2hhcnNfcXVpY2tfaW5mb193aW5kb3csIGRqaW5uX2FjdGlvbl93aW5kb3csIGNsb3NlX2NhbGxiYWNrPywgb3Blbl9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9kamlubl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMucGFnZV9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzX2NoYXJfaW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5zZXR0aW5nX2RqaW5uX3N0YXR1c19kamlubl9pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnNldHRpbmdfZGppbm5fc3RhdHVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcnNfcXVpY2tfaW5mb193aW5kb3cgPSBjaGFyc19xdWlja19pbmZvX3dpbmRvdztcbiAgICAgICAgdGhpcy5kamlubl9hY3Rpb25fd2luZG93ID0gZGppbm5fYWN0aW9uX3dpbmRvdztcbiAgICAgICAgdGhpcy5sb2FkX3BhZ2UoKTtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5zZXRfaGlnaGxpZ2h0X2JhcigpO1xuICAgICAgICB0aGlzLnNldF9hY3Rpb25fdGV4dCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZV9kamlubl9kZXNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLnNldF9kamlubl9zcHJpdGUoKTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5hY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3dfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jaGFuZ2luZ19kamlubl9zdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3codW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIGlmIChvcGVuX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICBvcGVuX2NhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZShjbG9zZV9jYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgICAgIHRoaXMudW5zZXRfcGFnZSgpO1xuICAgICAgICB0aGlzLmdyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSh1bmRlZmluZWQsIGZhbHNlKTtcbiAgICAgICAgaWYgKGNsb3NlX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICBjbG9zZV9jYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMud2luZG93X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuY3Vyc29yX2NvbnRyb2wuYWN0aXZhdGUoKTtcbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLndpbmRvd19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJzb3JfY29udHJvbC5kZWFjdGl2YXRlKCk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdyc7XG5pbXBvcnQgeyBiYXNlX2FjdGlvbnMsIGNhcGl0YWxpemUsIGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IERqaW5uLCBkamlubl9mb250X2NvbG9ycyB9IGZyb20gJy4uLy4uL0RqaW5uJztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgTWFpbkNoYXIgfSBmcm9tICcuLi8uLi9NYWluQ2hhcic7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMjM2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XG5jb25zdCBCQVNFX1dJTl9YID0gMDtcbmNvbnN0IEJBU0VfV0lOX1kgPSAwO1xuY29uc3QgT0tfTVNHX1ggPSAxMDQ7XG5jb25zdCBPS19NU0dfWF8yID0gMTMyO1xuY29uc3QgT0tfTVNHX1kgPSAyNDtcbmNvbnN0IE9LX01TR19ZXzIgPSAxNjtcbmNvbnN0IERKSU5OX1NUQVRVU19YID0gMTA0O1xuY29uc3QgREpJTk5fU1RBVFVTX1hfMiA9IDEzMjtcbmNvbnN0IERKSU5OX1NUQVRVU19ZID0gODtcbmNvbnN0IFNUQVJfQkVGT1JFX1ggPSA0OTtcbmNvbnN0IFNUQVJfQkVGT1JFX1kgPSA5O1xuY29uc3QgU1RBUl9BRlRFUl9YID0gNDk7XG5jb25zdCBTVEFSX0FGVEVSX1kgPSAyNTtcbmNvbnN0IERKSU5OX05BTUVfQkVGT1JFX1ggPSA1NjtcbmNvbnN0IERKSU5OX05BTUVfQkVGT1JFX1kgPSA4O1xuY29uc3QgREpJTk5fTkFNRV9BRlRFUl9YID0gNTY7XG5jb25zdCBESklOTl9OQU1FX0FGVEVSX1kgPSAyNDtcbmNvbnN0IERKSU5OX1ggPSAzMjtcbmNvbnN0IERKSU5OX1kgPSAzMTtcbmNvbnN0IERKSU5OX01VTFRfWCA9IFszMiwgOTldO1xuY29uc3QgREpJTk5fTVVMVF9ZID0gWzIxLCAzN107XG5jb25zdCBDSEFSU19YID0gWzE2LCAxMTddO1xuY29uc3QgQ0hBUlNfWSA9IFszNCwgMzRdO1xuY29uc3QgQVJST1dfQ0hBTkdFX0RKSU5OX1ggPSA2NDtcbmNvbnN0IEFSUk9XX0NIQU5HRV9ESklOTl9ZID0gMTY7XG5jb25zdCBTUEFDRUJBUl9LRVlfWCA9IDEzMjtcbmNvbnN0IFNQQUNFQkFSX0tFWV9ZID0gMjQ7XG5cbmV4cG9ydCBjbGFzcyBEamlubk1vZGVIZWFkZXJXaW5kb3cge1xuICAgIHB1YmxpYyBnYW1lOiBQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTogR29sZGVuU3VuO1xuICAgIHB1YmxpYyB3aW5kb3dfb3BlbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGdyb3VwOiBQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIG9rX21zZ190ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBkamlubl9zdGF0dXNfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGppbm5fbmFtZV9iZWZvcmVfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGppbm5fbmFtZV9hZnRlcl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBzcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGRqaW5uX3Nwcml0ZXM6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgdHdlZW5zOiBQaGFzZXIuVHdlZW5bXTtcbiAgICBwdWJsaWMgZGppbm5fc3RhdHVzX2Fycm93OiBQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBzcGFjZWJhcl9rZXk6IHtcbiAgICAgICAgc2hhZG93OiBQaGFzZXIuU3ByaXRlLFxuICAgICAgICB0ZXh0OiBQaGFzZXIuU3ByaXRlXG4gICAgfTtcbiAgICBwdWJsaWMgYWN0aW9uX2luZm9fdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgZGppbm5fc3RhdHVzX2Fycm93X2JsaW5rX3RpbWVyOiBQaGFzZXIuVGltZXI7XG4gICAgcHVibGljIGNoYXJzOiBNYWluQ2hhcltdO1xuICAgIHB1YmxpYyBhY3Rpb25fdGV4dDogc3RyaW5nO1xuICAgIHB1YmxpYyBkamlubmk6IERqaW5uW107XG4gICAgcHVibGljIG5leHRfZGppbm5pX3N0YXR1czogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMud2luZG93X29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy54ID0gQkFTRV9XSU5fWDtcbiAgICAgICAgdGhpcy55ID0gQkFTRV9XSU5fWTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB0aGlzLngsIHRoaXMueSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBnYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLm9rX21zZ190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIklzIHRoaXMgT0s/XCIsIE9LX01TR19YLCBPS19NU0dfWSk7XG4gICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERKSU5OX1NUQVRVU19YLCBESklOTl9TVEFUVVNfWSk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgREpJTk5fTkFNRV9CRUZPUkVfWCwgREpJTk5fTkFNRV9CRUZPUkVfWSk7XG4gICAgICAgIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBESklOTl9OQU1FX0FGVEVSX1gsIERKSU5OX05BTUVfQUZURVJfWSk7XG4gICAgICAgIHRoaXMuc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy50d2VlbnMgPSBbXTtcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3cgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChBUlJPV19DSEFOR0VfREpJTk5fWCwgQVJST1dfQ0hBTkdFX0RKSU5OX1ksIFwiYXJyb3dfY2hhbmdlXCIpO1xuICAgICAgICB0aGlzLnNwYWNlYmFyX2tleSA9IHtcbiAgICAgICAgICAgIHNoYWRvdzogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1BBQ0VCQVJfS0VZX1ggKyAxLCBTUEFDRUJBUl9LRVlfWSArIDEsIFwic3BhY2ViYXJfa2V5Ym9hcmRcIiwgMHgwKSxcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNQQUNFQkFSX0tFWV9YLCBTUEFDRUJBUl9LRVlfWSwgXCJzcGFjZWJhcl9rZXlib2FyZFwiKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGlvbl9pbmZvX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQud2lkdGggKyBTUEFDRUJBUl9LRVlfWCArIDIsIFNQQUNFQkFSX0tFWV9ZKTtcbiAgICAgICAgdGhpcy5pbml0X2Fycm93X2JsaW5rcygpO1xuICAgIH1cblxuICAgIHVwZGF0ZV9wb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5ncm91cC54ID0gdGhpcy5nYW1lLmNhbWVyYS54ICsgQkFTRV9XSU5fWDtcbiAgICAgICAgdGhpcy5ncm91cC55ID0gdGhpcy5nYW1lLmNhbWVyYS55ICsgQkFTRV9XSU5fWTtcbiAgICB9XG5cbiAgICBpbml0X2Fycm93X2JsaW5rcygpIHtcbiAgICAgICAgdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIgPSB0aGlzLmdhbWUudGltZS5jcmVhdGUoZmFsc2UpO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5sb29wKDkwLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IHRoaXMuZGppbm5fc3RhdHVzX2Fycm93LmFscGhhID8gMCA6IDE7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5zdGFydCgpO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xuICAgIH1cblxuICAgIHNldF9hY3Rpb25faW5mb190ZXh0KHRleHQpIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0ZXh0LCB0aGlzLmFjdGlvbl9pbmZvX3RleHQpO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgdGhpcy51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbl90ZXh0ID0gY2FwaXRhbGl6ZSh0aGlzLm5leHRfZGppbm5pX3N0YXR1c1swXSk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuYWN0aW9uX3RleHQsIHRoaXMuZGppbm5fc3RhdHVzX3RleHQsIERKSU5OX1NUQVRVU19YKTtcbiAgICAgICAgICAgIHRoaXMuc3BhY2ViYXJfa2V5LnRleHQuYWxwaGEgPSB0aGlzLnNwYWNlYmFyX2tleS5zaGFkb3cuYWxwaGEgPSAwO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLmFjdGlvbl9pbmZvX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogT0tfTVNHX1gsIHk6IE9LX01TR19ZfSwgdGhpcy5va19tc2dfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuZGppbm5pWzBdLm5hbWUsIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKGRqaW5uX2ZvbnRfY29sb3JzW3RoaXMuZGppbm5pWzBdLnN0YXR1c10sIHRoaXMuZGppbm5fbmFtZV9iZWZvcmVfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X3Bvc2l0aW9uKHt4OiBESklOTl9OQU1FX0JFRk9SRV9YLCB5OiBESklOTl9OQU1FX0JFRk9SRV9ZfSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IERKSU5OX05BTUVfQUZURVJfWH0sIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMF0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihkamlubl9mb250X2NvbG9yc1t0aGlzLm5leHRfZGppbm5pX3N0YXR1c1swXV0sIHRoaXMuZGppbm5fbmFtZV9hZnRlcl90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQkVGT1JFX1gsIFNUQVJfQkVGT1JFX1ksIHRoaXMuZGppbm5pWzBdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQUZURVJfWCwgU1RBUl9BRlRFUl9ZLCB0aGlzLmRqaW5uaVswXS5lbGVtZW50ICsgXCJfc3RhclwiKSk7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5yZXN1bWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5hY3Rpb25fdGV4dCwgdGhpcy5kamlubl9zdGF0dXNfdGV4dCwgREpJTk5fU1RBVFVTX1hfMik7XG4gICAgICAgICAgICB0aGlzLnNwYWNlYmFyX2tleS50ZXh0LmFscGhhID0gdGhpcy5zcGFjZWJhcl9rZXkuc2hhZG93LmFscGhhID0gMTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoYDogJHt0aGlzLmNoYXJzWzBdLm5hbWV9J3MgUHN5YCwgdGhpcy5hY3Rpb25faW5mb190ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IE9LX01TR19YXzIsIHk6IE9LX01TR19ZXzJ9LCB0aGlzLm9rX21zZ190ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMF0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbdGhpcy5kamlubmlbMF0uc3RhdHVzXSwgdGhpcy5kamlubl9uYW1lX2JlZm9yZV90ZXh0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbl90ZXh0ID09PSBcIlRyYWRlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaCh0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTVEFSX0JFRk9SRV9YIC0gNSwgU1RBUl9CRUZPUkVfWSwgdGhpcy5kamlubmlbMF0uZWxlbWVudCArIFwiX3N0YXJcIikpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5kamlubmlbMV0ubmFtZSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoZGppbm5fZm9udF9jb2xvcnNbdGhpcy5kamlubmlbMV0uc3RhdHVzXSwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQUZURVJfWCAtIDUsIFNUQVJfQUZURVJfWSwgdGhpcy5kamlubmlbMV0uZWxlbWVudCArIFwiX3N0YXJcIikpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IERKSU5OX05BTUVfQUZURVJfWCAtIDV9LCB0aGlzLmRqaW5uX25hbWVfYWZ0ZXJfdGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9wb3NpdGlvbih7eDogREpJTk5fTkFNRV9CRUZPUkVfWCAtIDUsIHk6IERKSU5OX05BTUVfQkVGT1JFX1l9LCB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbl90ZXh0ID09PSBcIkdpdmVcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCJcIiwgdGhpcy5kamlubl9uYW1lX2FmdGVyX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfcG9zaXRpb24oe3g6IERKSU5OX05BTUVfQkVGT1JFX1ggLSA1LCB5OiBESklOTl9OQU1FX0JFRk9SRV9ZICsgbnVtYmVycy5GT05UX1NJWkV9LCB0aGlzLmRqaW5uX25hbWVfYmVmb3JlX3RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKFNUQVJfQkVGT1JFX1ggLSA1LCBTVEFSX0JFRk9SRV9ZICsgbnVtYmVycy5GT05UX1NJWkUsIHRoaXMuZGppbm5pWzBdLmVsZW1lbnQgKyBcIl9zdGFyXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGppbm5fc3RhdHVzX2Fycm93LmFscGhhID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9jaGFyX2FuZF9kamlubl9zcHJpdGUoKTtcbiAgICB9XG5cbiAgICBzZXRfY2hhcl9hbmRfZGppbm5fc3ByaXRlKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNfY2hhciA9IHRoaXMuY2hhcnNbaV07XG4gICAgICAgICAgICBjb25zdCB0aGlzX2RqaW5uID0gdGhpcy5kamlubmlbaV07XG4gICAgICAgICAgICBsZXQgZGppbm5feCwgZGppbm5feTtcbiAgICAgICAgICAgIGlmIChbXCJUcmFkZVwiLCBcIkdpdmVcIl0uaW5jbHVkZXModGhpcy5hY3Rpb25fdGV4dCkpIHtcbiAgICAgICAgICAgICAgICBkamlubl94ID0gREpJTk5fTVVMVF9YW2ldO1xuICAgICAgICAgICAgICAgIGRqaW5uX3kgPSBESklOTl9NVUxUX1lbaV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRqaW5uX3ggPSBESklOTl9YO1xuICAgICAgICAgICAgICAgIGRqaW5uX3kgPSBESklOTl9ZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWN0aW9uX2tleSA9IHRoaXNfY2hhci5zcHJpdGVfYmFzZS5nZXRBY3Rpb25LZXkoYmFzZV9hY3Rpb25zLklETEUpO1xuICAgICAgICAgICAgY29uc3QgY2hhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChDSEFSU19YW2ldLCBDSEFSU19ZW2ldLCBhY3Rpb25fa2V5KTtcbiAgICAgICAgICAgIGNoYXJfc3ByaXRlLmFuY2hvci5zZXRUbygwLjUsIDEuMCk7XG4gICAgICAgICAgICBjb25zdCBhbmltYXRpb25fa2V5ID0gdGhpc19jaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleShiYXNlX2FjdGlvbnMuSURMRSwgcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0pO1xuICAgICAgICAgICAgY2hhcl9zcHJpdGUuYW5pbWF0aW9ucy5hZGQoYW5pbWF0aW9uX2tleSwgdGhpc19jaGFyLnNwcml0ZV9iYXNlLmFuaW1hdGlvbnMuaWRsZS5kb3duLCB0aGlzX2NoYXIuc3ByaXRlX2Jhc2UuYWN0aW9ucy5pZGxlLmZyYW1lX3JhdGUsIHRydWUpO1xuICAgICAgICAgICAgY2hhcl9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KGFuaW1hdGlvbl9rZXksIHRoaXNfY2hhci5zcHJpdGVfYmFzZS5hY3Rpb25zLmlkbGUuZnJhbWVfcmF0ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZXMucHVzaChjaGFyX3Nwcml0ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbl90ZXh0ID09PSBcIkdpdmVcIiAmJiBpID09PSAxKSBicmVhaztcblxuICAgICAgICAgICAgY29uc3QgZGppbm5fc3ByaXRlID0gdGhpcy5ncm91cC5jcmVhdGUoZGppbm5feCwgZGppbm5feSwgdGhpc19kamlubi5lbGVtZW50ICsgXCJfZGppbm5fXCIgKyB0aGlzX2RqaW5uLnN0YXR1cyk7XG4gICAgICAgICAgICBkamlubl9zcHJpdGUuYW5jaG9yLnNldFRvKDAuNSwgMS4wKTtcbiAgICAgICAgICAgIGRqaW5uX3Nwcml0ZS5zY2FsZS54ID0gLTAuODtcbiAgICAgICAgICAgIGRqaW5uX3Nwcml0ZS5zY2FsZS55ID0gMC44O1xuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8uZGppbm5pX3Nwcml0ZXNbdGhpc19kamlubi5lbGVtZW50XS5zZXRBbmltYXRpb24oZGppbm5fc3ByaXRlLCB0aGlzX2RqaW5uLnN0YXR1cyk7XG4gICAgICAgICAgICBkamlubl9zcHJpdGUuYW5pbWF0aW9ucy5wbGF5KHRoaXNfZGppbm4uc3RhdHVzICsgXCJfZG93blwiKTtcbiAgICAgICAgICAgIHRoaXMuZGppbm5fc3ByaXRlcy5wdXNoKGRqaW5uX3Nwcml0ZSk7XG5cbiAgICAgICAgICAgIGlmIChbXCJUcmFkZVwiLCBcIkdpdmVcIl0uaW5jbHVkZXModGhpcy5hY3Rpb25fdGV4dCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWduID0gaSA9PT0gMCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gc2lnbiAqIDE3LCBiID0gc2lnbiAqIDMzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHlfc2hpZnQgPSAtc2lnbiAqIDU7XG4gICAgICAgICAgICAgICAgY29uc3QgdHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKGRqaW5uX3Nwcml0ZSkudG8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IFtkamlubl95LCBkamlubl95ICsgeV9zaGlmdCwgZGppbm5feSArIHlfc2hpZnQsIGRqaW5uX3ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogW2RqaW5uX3gsIGRqaW5uX3grYSwgZGppbm5feCthK2IsIGRqaW5uX3grYStiK2FdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIDcwMCxcbiAgICAgICAgICAgICAgICAgICAgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgLTEsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0d2Vlbi5yZXBlYXREZWxheSgzMDApO1xuICAgICAgICAgICAgICAgIHRoaXMudHdlZW5zLnB1c2godHdlZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdW5tb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHNwcml0ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRqaW5uX3Nwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHdlZW5zLmZvckVhY2godHdlZW4gPT4ge1xuICAgICAgICAgICAgdHdlZW4uc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zcHJpdGVzID0gW107XG4gICAgICAgIHRoaXMuZGppbm5fc3ByaXRlcyA9IFtdO1xuICAgICAgICB0aGlzLnR3ZWVucyA9IFtdO1xuICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvdy5hbHBoYSA9IDA7XG4gICAgICAgIGlmICghdGhpcy5kamlubl9zdGF0dXNfYXJyb3dfYmxpbmtfdGltZXIucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX3N0YXR1c19hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlbihjaGFycywgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMsIGFjdGlvbl90ZXh0PywgY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMuY2hhcnMgPSBjaGFycztcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLmFjdGlvbl90ZXh0ID0gYWN0aW9uX3RleHQ7XG4gICAgICAgIHRoaXMubW91bnRfd2luZG93KCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2hvdygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGNsb3NlKGNhbGxiYWNrPykge1xuICAgICAgICB0aGlzLnVubW91bnRfd2luZG93KCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdyc7XG5pbXBvcnQgKiBhcyBudW1iZXJzIGZyb20gJy4uLy4uL21hZ2ljX251bWJlcnMnO1xuaW1wb3J0IHsgb3JkZXJlZF9lbGVtZW50cyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuaW1wb3J0IHsgRGppbm4gfSBmcm9tICcuLi8uLi9Eamlubic7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMTE2O1xuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xuY29uc3QgQVZBVEFSX1ggPSA4O1xuY29uc3QgQVZBVEFSX1kgPSA4O1xuY29uc3QgQ0hBUl9OQU1FX1ggPSA0ODtcbmNvbnN0IENIQVJfTkFNRV9ZID0gODtcbmNvbnN0IExWX1ggPSA0ODtcbmNvbnN0IExWX1kgPSAyNDtcbmNvbnN0IExWX05VTUJFUl9YID0gMTEwO1xuY29uc3QgTFZfTlVNQkVSX1kgPSAyNDtcbmNvbnN0IENMQVNTX1ggPSA4O1xuY29uc3QgQ0xBU1NfWSA9IDQwO1xuY29uc3QgREpJTk5fTlVNQkVSX1NMT1RfV0lEVEggPSAxNztcbmNvbnN0IERKSU5OX05VTUJFUl9YID0gMTEwO1xuY29uc3QgREpJTk5fTlVNQkVSX1kgPSA0ODtcbmNvbnN0IHN0YXRzID0gW1wiSFBcIiwgXCJQUFwiLCBcIkF0dGFja1wiLCBcIkRlZmVuc2VcIiwgXCJBZ2lsaXR5XCIsIFwiTHVja1wiXTtcbmNvbnN0IHN0YXRzX2tleXMgPSBbXCJtYXhfaHBcIiwgXCJtYXhfcHBcIiwgXCJhdGtcIiwgXCJkZWZcIiwgXCJhZ2lcIiwgXCJsdWtcIl07XG5jb25zdCBTVEFUU19YID0gODtcbmNvbnN0IFNUQVRTX0JBU0VfWSA9IDY0O1xuY29uc3QgU1RBVFNfQ1VSUkVOVF9YID0gNzg7XG5jb25zdCBTVEFUU19ORVhUX1ggPSAxMTA7XG5jb25zdCBORVdfQ0xBU1NfWCA9IDg7XG5jb25zdCBORVdfQ0xBU1NfWSA9IDU2O1xuY29uc3QgZWxlbWVudHNfbGlzdCA9IG9yZGVyZWRfZWxlbWVudHMuc2xpY2UoKS5yZXZlcnNlKCk7XG5jb25zdCBBUlJPV19DSEFOR0VfQ0xBU1NfWCA9IDI0O1xuY29uc3QgQVJST1dfQ0hBTkdFX0NMQVNTX1kgPSA0ODtcblxuZXhwb3J0IGNsYXNzIERqaW5uQ2hhclN0YXRzV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBzcHJpdGVzOiBQaGFzZXIuU3ByaXRlW107XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfbmFtZV90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBsZXZlbF9udW1iZXJfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY2xhc3NfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgbmV3X2NsYXNzX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uX251bWJlcl90ZXh0czoge1xuICAgICAgICBbZWxlbWVudDogc3RyaW5nXTogVGV4dE9ialxuICAgIH07XG4gICAgcHVibGljIHN0YXRzX2N1cnJlbnRfdGV4dHM6IHtcbiAgICAgICAgW3N0YXQ6IHN0cmluZ106IFRleHRPYmpcbiAgICB9O1xuICAgIHB1YmxpYyBzdGF0c19uZXh0X3RleHRzOiB7XG4gICAgICAgIFtzdGF0OiBzdHJpbmddOiBUZXh0T2JqXG4gICAgfTtcbiAgICBwdWJsaWMgY2xhc3NfbmFtZV9hcnJvdzogUGhhc2VyLlNwcml0ZTtcbiAgICBwdWJsaWMgY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lcjogUGhhc2VyLlRpbWVyO1xuICAgIHB1YmxpYyBjaGFyOiBNYWluQ2hhcjtcbiAgICBwdWJsaWMgZGppbm5pOiBEamlubltdO1xuICAgIHB1YmxpYyBuZXh0X2RqaW5uaV9zdGF0dXM6IHN0cmluZztcbiAgICBwdWJsaWMgYWN0aW9uOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB3aW5feCA9IDApIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcml0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCB3aW5feCwgQkFTRV9XSU5fWSwgQkFTRV9XSU5fV0lEVEgsIEJBU0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuY2hhcl9uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIENIQVJfTkFNRV9YLCBDSEFSX05BTUVfWSk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJMdlwiLCBMVl9YLCBMVl9ZKTtcbiAgICAgICAgdGhpcy5sZXZlbF9udW1iZXJfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgTFZfTlVNQkVSX1gsIExWX05VTUJFUl9ZLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jbGFzc190ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDTEFTU19YLCBDTEFTU19ZKTtcbiAgICAgICAgdGhpcy5uZXdfY2xhc3NfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgTkVXX0NMQVNTX1gsIE5FV19DTEFTU19ZKTtcbiAgICAgICAgdGhpcy5kamlubl9udW1iZXJfdGV4dHMgPSB7fTtcbiAgICAgICAgZWxlbWVudHNfbGlzdC5mb3JFYWNoKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB4ID0gREpJTk5fTlVNQkVSX1ggLSBpICogREpJTk5fTlVNQkVSX1NMT1RfV0lEVEg7XG4gICAgICAgICAgICB0aGlzLmRqaW5uX251bWJlcl90ZXh0c1tlbGVtZW50XSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgeCwgREpJTk5fTlVNQkVSX1ksIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGF0c19jdXJyZW50X3RleHRzID0ge307XG4gICAgICAgIHRoaXMuc3RhdHNfbmV4dF90ZXh0cyA9IHt9O1xuICAgICAgICBzdGF0cy5mb3JFYWNoKChzdGF0LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB5ID0gU1RBVFNfQkFTRV9ZICsgaSAqIG51bWJlcnMuRk9OVF9TSVpFO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihzdGF0LCBTVEFUU19YLCB5KTtcbiAgICAgICAgICAgIGxldCBzaGlmdCA9IDA7XG4gICAgICAgICAgICBpZiAoW1wiSFBcIiwgXCJQUFwiXS5pbmNsdWRlcyhzdGF0KSkge1xuICAgICAgICAgICAgICAgIHNoaWZ0ID0gLTg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YXRzX2N1cnJlbnRfdGV4dHNbc3RhdF0gPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFNUQVRTX0NVUlJFTlRfWCArIHNoaWZ0LCB5LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHNfbmV4dF90ZXh0c1tzdGF0XSA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgU1RBVFNfTkVYVF9YLCB5LCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvdyA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFSUk9XX0NIQU5HRV9DTEFTU19YLCBBUlJPV19DSEFOR0VfQ0xBU1NfWSwgXCJhcnJvd19jaGFuZ2VcIik7XG4gICAgICAgIHRoaXMuaW5pdF9hcnJvd19ibGlua3MoKTtcbiAgICB9XG5cbiAgICBpbml0X2Fycm93X2JsaW5rcygpIHtcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLmxvb3AoOTAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvdy5hbHBoYSA9IHRoaXMuY2xhc3NfbmFtZV9hcnJvdy5hbHBoYSA/IDAgOiAxO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvd19ibGlua190aW1lci5wYXVzZSgpO1xuICAgICAgICB0aGlzLmNsYXNzX25hbWVfYXJyb3cuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIG1vdW50X3dpbmRvdygpIHtcbiAgICAgICAgY29uc3QgYXZhdGFyX3Nwcml0ZSA9IHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKEFWQVRBUl9YLCBBVkFUQVJfWSwgXCJhdmF0YXJzXCIsIHVuZGVmaW5lZCAsIHRoaXMuY2hhci5rZXlfbmFtZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGF2YXRhcl9zcHJpdGUpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXMuY2hhci5uYW1lLCB0aGlzLmNoYXJfbmFtZV90ZXh0KTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXIubGV2ZWwudG9TdHJpbmcoKSwgdGhpcy5sZXZlbF9udW1iZXJfdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpcy5jaGFyLmNsYXNzLm5hbWUsIHRoaXMuY2xhc3NfdGV4dCk7XG4gICAgICAgIGVsZW1lbnRzX2xpc3QuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dCh0aGlzLmNoYXJbZWxlbWVudCArIFwiX2RqaW5uaVwiXS5sZW5ndGgudG9TdHJpbmcoKSwgdGhpcy5kamlubl9udW1iZXJfdGV4dHNbZWxlbWVudF0pO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl93aWR0aCA9IDYsIGNoYXJfd2lkdGggPSA2O1xuICAgICAgICAgICAgY29uc3QgeCA9IERKSU5OX05VTUJFUl9YIC0gc3Rhcl93aWR0aCAtIGNoYXJfd2lkdGggLSAxIC0gaSAqIERKSU5OX05VTUJFUl9TTE9UX1dJRFRIO1xuICAgICAgICAgICAgY29uc3Qgc3Rhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cCh4LCBESklOTl9OVU1CRVJfWSArIDEsIGVsZW1lbnQgKyBcIl9zdGFyXCIpO1xuICAgICAgICAgICAgdGhpcy5zcHJpdGVzLnB1c2goc3Rhcl9zcHJpdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcHJldmlld192YWx1ZXMgPSB0aGlzLmNoYXIucHJldmlld19kamlubl9jaGFuZ2Uoc3RhdHNfa2V5cywgdGhpcy5kamlubmkubWFwKGQgPT4gZC5rZXlfbmFtZSksIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLCB0aGlzLmFjdGlvbik7XG4gICAgICAgIGlmIChwcmV2aWV3X3ZhbHVlcy5jbGFzc19rZXlfbmFtZSAhPT0gdGhpcy5jaGFyLmNsYXNzLmtleV9uYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHByZXZpZXdfdmFsdWVzLmNsYXNzX25hbWUsIHRoaXMubmV3X2NsYXNzX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnJlc3VtZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLm5ld19jbGFzc190ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0cy5mb3JFYWNoKChzdGF0LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3N0YXQgPSB0aGlzLmNoYXJbc3RhdHNfa2V5c1tpXV07XG4gICAgICAgICAgICBjb25zdCBuZXh0X3N0YXQgPSBwcmV2aWV3X3ZhbHVlc1tzdGF0c19rZXlzW2ldXTtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoY3VycmVudF9zdGF0LnRvU3RyaW5nKCksIHRoaXMuc3RhdHNfY3VycmVudF90ZXh0c1tzdGF0XSk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KG5leHRfc3RhdC50b1N0cmluZygpLCB0aGlzLnN0YXRzX25leHRfdGV4dHNbc3RhdF0pO1xuICAgICAgICAgICAgY29uc3QgeSA9IFNUQVRTX0JBU0VfWSArIGkgKiBudW1iZXJzLkZPTlRfU0laRSAtIDM7XG4gICAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xuICAgICAgICAgICAgaWYgKFtcIkhQXCIsIFwiUFBcIl0uaW5jbHVkZXMoc3RhdCkpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCA9IC04O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRfc3RhdCAhPT0gbmV4dF9zdGF0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyb3dfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU1RBVFNfQ1VSUkVOVF9YICsgc2hpZnQsIHksIFwic3RhdF9cIiArIChuZXh0X3N0YXQgPiBjdXJyZW50X3N0YXQgPyBcInVwXCIgOiBcImRvd25cIikpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3ByaXRlcy5wdXNoKGFycm93X3Nwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVubW91bnRfd2luZG93KCkge1xuICAgICAgICB0aGlzLnNwcml0ZXMuZm9yRWFjaChzcHJpdGUgPT4ge1xuICAgICAgICAgICAgc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2xhc3NfbmFtZV9hcnJvdy5hbHBoYSA9IDA7XG4gICAgICAgIGlmICghdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5jbGFzc19uYW1lX2Fycm93X2JsaW5rX3RpbWVyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuKGNoYXIsIGRqaW5uaSwgbmV4dF9kamlubmlfc3RhdHVzLCBhY3Rpb24/LCBjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgdGhpcy5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5zaG93KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2luZG93X29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoY2FsbGJhY2s/KSB7XG4gICAgICAgIHRoaXMudW5tb3VudF93aW5kb3coKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGV4dE9iaiwgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCAqIGFzIG51bWJlcnMgZnJvbSAnLi4vLi4vbWFnaWNfbnVtYmVycyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgTWFpbkNoYXIgfSBmcm9tICcuLi8uLi9NYWluQ2hhcic7XG5pbXBvcnQgeyBEamlubiB9IGZyb20gJy4uLy4uL0RqaW5uJztcblxuY29uc3QgQkFTRV9XSU5fV0lEVEggPSAxMTY7XG5jb25zdCBCQVNFX1dJTl9IRUlHSFQgPSAxMTY7XG5jb25zdCBCQVNFX1dJTl9YID0gMTIwO1xuY29uc3QgQkFTRV9XSU5fWSA9IDQwO1xuY29uc3QgRUxFTV9QRVJfUEFHRSA9IDU7XG5jb25zdCBFTEVNX1BBRERJTkdfVE9QID0gMTI7XG5jb25zdCBFTEVNX1BBRERJTkdfTEVGVCA9IDg7XG5jb25zdCBTUEFDRV9CRVRXRUVOX0lURU1TID0gMjtcbmNvbnN0IFBTWV9QUF9YID0gMTA5O1xuY29uc3QgUFNZX1BQX0NPU1RfWCA9IDg2O1xuY29uc3QgUFNZX1BQX0NPU1RfWSA9IDg7XG5jb25zdCBFTEVNX05BTUVfSUNPTl9TSElGVCA9IDQ7XG5jb25zdCBGT1JXQVJEID0gMTtcbmNvbnN0IEJBQ0tXQVJEID0gLTE7XG5jb25zdCBQU1lfR0FJTl9DT0xPUiA9IG51bWJlcnMuWUVMTE9XX0ZPTlRfQ09MT1I7XG5jb25zdCBQU1lfTE9TVF9DT0xPUiA9IG51bWJlcnMuUkVEX0ZPTlRfQ09MT1I7XG5jb25zdCBQU1lfSU5GT18xX1kgPSA5NjtcbmNvbnN0IFBTWV9JTkZPX1ggPSA4O1xuY29uc3QgUFNZX0lORk9fMl9ZID0gUFNZX0lORk9fMV9ZICsgMSArIG51bWJlcnMuRk9OVF9TSVpFO1xuXG5leHBvcnQgY2xhc3MgRGppbm5Qc3luZXJneVdpbmRvdyB7XG4gICAgcHVibGljIGdhbWU6IFBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOiBHb2xkZW5TdW47XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyB0ZXh0X3Nwcml0ZXNfaW5fd2luZG93OiBUZXh0T2JqW107XG4gICAgcHVibGljIGljb25fc3ByaXRlc19pbl93aW5kb3c6IFBoYXNlci5TcHJpdGVbXTtcbiAgICBwdWJsaWMgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGJhc2Vfd2luZG93OiBXaW5kb3c7XG4gICAgcHVibGljIHBzeV9pbmZvXzFfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgcHN5X2luZm9fMl90ZXh0OiBUZXh0T2JqO1xuICAgIHB1YmxpYyBleGVjdXRlX29wZXJhdGlvbjogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBzcGFjZWJhcl9jYWxsYmFjazogRnVuY3Rpb247XG4gICAgcHVibGljIHBhZ2VfbnVtYmVyOiBudW1iZXI7XG4gICAgcHVibGljIHBhZ2VfaW5kZXg6IG51bWJlcjtcbiAgICBwdWJsaWMgYWxsX2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGFiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGdhaW5lZF9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBsb3N0X2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIGludGVyc2VjdGlvbl9hYmlsaXRpZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBjdXJyZW50X2FiaWxpdGllczogc3RyaW5nW107XG4gICAgcHVibGljIG5leHRfYWJpbGl0aWVzOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgY2hhcjogTWFpbkNoYXI7XG4gICAgcHVibGljIGRqaW5uaTogRGppbm5bXTtcbiAgICBwdWJsaWMgbmV4dF9kamlubmlfc3RhdHVzOiBzdHJpbmc7XG4gICAgcHVibGljIGFjdGlvbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgZGF0YSwgZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5LCBlbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSwgc3BhY2ViYXJfcHJvcGFnYXRpb25fcHJpb3JpdHkpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cgPSBbXTtcbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIHRoaXMuZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ID0gZXNjX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IGVudGVyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSA9IHNwYWNlYmFyX3Byb3BhZ2F0aW9uX3ByaW9yaXR5ICsgMTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBCQVNFX1dJTl9YLCBCQVNFX1dJTl9ZLCBCQVNFX1dJTl9XSURUSCwgQkFTRV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5pbml0X3BhZ2VfaW5kaWNhdG9yX2JhcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiUFBcIiwgUFNZX1BQX0NPU1RfWCwgUFNZX1BQX0NPU1RfWSk7XG4gICAgICAgIHRoaXMucHN5X2luZm9fMV90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBQU1lfSU5GT19YLCBQU1lfSU5GT18xX1kpO1xuICAgICAgICB0aGlzLnBzeV9pbmZvXzJfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgUFNZX0lORk9fWCwgUFNZX0lORk9fMl9ZKTtcbiAgICAgICAgdGhpcy5zZXRfY29udHJvbCgpO1xuICAgIH1cblxuICAgIHNldF9jb250cm9sKCkge1xuICAgICAgICB0aGlzLmRhdGEuZXNjX2lucHV0LmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93X29wZW4pIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5lc2NfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlX29wZXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lc2NfcHJvcGFnYXRpb25fcHJpb3JpdHkpO1xuICAgICAgICB0aGlzLmRhdGEuZW50ZXJfaW5wdXQuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmVudGVyX2lucHV0LmhhbHQoKTtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZV9vcGVyYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSh0aGlzLmNsb3NlX2NhbGxiYWNrKTtcbiAgICAgICAgfSwgdGhpcywgdGhpcy5lbnRlcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlJJR0hUKS5vbkRvd24uYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3dfb3BlbikgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VfcGFnZShGT1JXQVJEKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLkxFRlQpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKEJBQ0tXQVJEKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGF0YS5zcGFjZWJhcl9pbnB1dC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvd19vcGVuKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmRhdGEuc3BhY2ViYXJfaW5wdXQuaGFsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3BhY2ViYXJfY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2ViYXJfY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcywgdGhpcy5zcGFjZWJhcl9wcm9wYWdhdGlvbl9wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgc2V0X3BhZ2VfbnVtYmVyKCkge1xuICAgICAgICBjb25zdCBsaXN0X2xlbmd0aCA9IHRoaXMuYWxsX2FiaWxpdGllcy5sZW5ndGg7XG4gICAgICAgIHRoaXMucGFnZV9udW1iZXIgPSAoKChsaXN0X2xlbmd0aCAtIDEpL0VMRU1fUEVSX1BBR0UpIHwgMCkgKyAxO1xuICAgICAgICBpZiAodGhpcy5wYWdlX2luZGV4ID49IHRoaXMucGFnZV9udW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZV9pbmRleCA9IHRoaXMucGFnZV9udW1iZXIgLSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hhbmdlX3BhZ2UocGFnZV9zaGlmdCkge1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggKz0gcGFnZV9zaGlmdDtcbiAgICAgICAgaWYgKHRoaXMucGFnZV9pbmRleCA9PT0gdGhpcy5wYWdlX251bWJlcikge1xuICAgICAgICAgICAgdGhpcy5wYWdlX2luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhZ2VfaW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSB0aGlzLnBhZ2VfbnVtYmVyIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldF9hYmlsaXRpZXNfbGlzdCgpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcl9oaWdobGlnaHQodGhpcy5wYWdlX251bWJlciwgdGhpcy5wYWdlX2luZGV4KTtcbiAgICB9XG5cbiAgICBzZXRfYWJpbGl0aWVzX2xpc3QoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJfc3ByaXRlcygpO1xuICAgICAgICB0aGlzLmFiaWxpdGllcyA9IHRoaXMuYWxsX2FiaWxpdGllcy5zbGljZSh0aGlzLnBhZ2VfaW5kZXggKiBFTEVNX1BFUl9QQUdFLCAodGhpcy5wYWdlX2luZGV4ICsgMSkgKiBFTEVNX1BFUl9QQUdFKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFiaWxpdGllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3Qga2V5X25hbWUgPSB0aGlzLmFiaWxpdGllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBFTEVNX1BBRERJTkdfTEVGVDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBFTEVNX1BBRERJTkdfVE9QICsgaSAqIChudW1iZXJzLklDT05fSEVJR0hUICsgU1BBQ0VfQkVUV0VFTl9JVEVNUyk7XG4gICAgICAgICAgICBjb25zdCBpY29uX3ggPSB4ICsgKG51bWJlcnMuSUNPTl9XSURUSCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IGljb25feSA9IHkgKyAobnVtYmVycy5JQ09OX0hFSUdIVCA+PiAxKTtcbiAgICAgICAgICAgIGNvbnN0IHhfZWxlbV9uYW1lID0gRUxFTV9QQURESU5HX0xFRlQgKyBudW1iZXJzLklDT05fV0lEVEggKyAyO1xuICAgICAgICAgICAgY29uc3QgcHN5bmVyZ3lfbmFtZV9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKHRoaXMuZGF0YS5pbmZvLmFiaWxpdGllc19saXN0W2tleV9uYW1lXS5uYW1lLCB4X2VsZW1fbmFtZSwgeSArIEVMRU1fTkFNRV9JQ09OX1NISUZUKTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvdy5wdXNoKHRoaXMuYmFzZV93aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGljb25feCwgaWNvbl95LCBcImFiaWxpdGllc19pY29uc1wiLCB1bmRlZmluZWQsIGtleV9uYW1lKSk7XG4gICAgICAgICAgICB0aGlzLmljb25fc3ByaXRlc19pbl93aW5kb3dbaV0uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnN0IHBzeW5lcmd5X2Nvc3Rfc3ByaXRlID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdFtrZXlfbmFtZV0ucHBfY29zdCwgUFNZX1BQX1gsIHkgKyBFTEVNX05BTUVfSUNPTl9TSElGVCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnRleHRfc3ByaXRlc19pbl93aW5kb3cucHVzaChwc3luZXJneV9jb3N0X3Nwcml0ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmluY2x1ZGVzKGtleV9uYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0dBSU5fQ09MT1IsIHBzeW5lcmd5X25hbWVfc3ByaXRlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9HQUlOX0NPTE9SLCBwc3luZXJneV9jb3N0X3Nwcml0ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9zdF9hYmlsaXRpZXMuaW5jbHVkZXMoa2V5X25hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfTE9TVF9DT0xPUiwgcHN5bmVyZ3lfbmFtZV9zcHJpdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHRfY29sb3IoUFNZX0xPU1RfQ09MT1IsIHBzeW5lcmd5X2Nvc3Rfc3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldF9hYmlsaXRpZXMoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9hYmlsaXRpZXMgPSB0aGlzLmNoYXIuYWJpbGl0aWVzLmZpbHRlcihrZXlfbmFtZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ga2V5X25hbWUgaW4gdGhpcy5kYXRhLmluZm8uYWJpbGl0aWVzX2xpc3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcmV2aWV3X3ZhbHVlcyA9IHRoaXMuY2hhci5wcmV2aWV3X2RqaW5uX2NoYW5nZShbXSwgdGhpcy5kamlubmkubWFwKGQgPT4gZC5rZXlfbmFtZSksIHRoaXMubmV4dF9kamlubmlfc3RhdHVzLCB0aGlzLmFjdGlvbik7XG4gICAgICAgIHRoaXMubmV4dF9hYmlsaXRpZXMgPSBwcmV2aWV3X3ZhbHVlcy5hYmlsaXRpZXMuZmlsdGVyKGtleV9uYW1lID0+IHtcbiAgICAgICAgICAgIHJldHVybiBrZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5hYmlsaXRpZXNfbGlzdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBjdXJyZW50X3NldCA9IG5ldyBTZXQodGhpcy5jdXJyZW50X2FiaWxpdGllcyk7XG4gICAgICAgIGxldCBuZXh0X3NldCA9IG5ldyBTZXQodGhpcy5uZXh0X2FiaWxpdGllcyk7XG4gICAgICAgIHRoaXMuZ2FpbmVkX2FiaWxpdGllcyA9IFsuLi5uZXh0X3NldF0uZmlsdGVyKHggPT4gIWN1cnJlbnRfc2V0Lmhhcyh4KSk7XG4gICAgICAgIHRoaXMubG9zdF9hYmlsaXRpZXMgPSBbLi4uY3VycmVudF9zZXRdLmZpbHRlcih4ID0+ICFuZXh0X3NldC5oYXMoeCkpO1xuICAgICAgICB0aGlzLmludGVyc2VjdGlvbl9hYmlsaXRpZXMgPSBbLi4uY3VycmVudF9zZXRdLmZpbHRlcih4ID0+IG5leHRfc2V0Lmhhcyh4KSk7XG4gICAgICAgIHRoaXMuYWxsX2FiaWxpdGllcyA9IHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5jb25jYXQodGhpcy5pbnRlcnNlY3Rpb25fYWJpbGl0aWVzLCB0aGlzLmxvc3RfYWJpbGl0aWVzKTtcbiAgICAgICAgaWYgKHRoaXMuZ2FpbmVkX2FiaWxpdGllcy5sZW5ndGggPT09IDAgJiYgdGhpcy5sb3N0X2FiaWxpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQoXCIqIE5vIGNoYW5nZVwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKG51bWJlcnMuREVGQVVMVF9GT05UX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIlwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5nYWluZWRfYWJpbGl0aWVzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmxvc3RfYWJpbGl0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgTG9zdFwiLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzFfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMucHN5X2luZm9fMl90ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhaW5lZF9hYmlsaXRpZXMubGVuZ3RoICYmIHRoaXMubG9zdF9hYmlsaXRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiKiBQc3luZXJneSBHYWluZWRcIiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dF9jb2xvcihQU1lfR0FJTl9DT0xPUiwgdGhpcy5wc3lfaW5mb18xX3RleHQpO1xuICAgICAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIiogUHN5bmVyZ3kgTG9zdFwiLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0X2NvbG9yKFBTWV9MT1NUX0NPTE9SLCB0aGlzLnBzeV9pbmZvXzJfdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3VudF93aW5kb3coKSB7XG4gICAgICAgIHRoaXMuc2V0X2FiaWxpdGllcygpO1xuICAgICAgICB0aGlzLnNldF9hYmlsaXRpZXNfbGlzdCgpO1xuICAgICAgICB0aGlzLnNldF9wYWdlX251bWJlcigpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNldF9wYWdlX2luZGljYXRvcih0aGlzLnBhZ2VfbnVtYmVyLCB0aGlzLnBhZ2VfaW5kZXgpO1xuICAgIH1cblxuICAgIGNsZWFyX3Nwcml0ZXMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV9mcm9tX2dyb3VwKHRoaXMuaWNvbl9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pY29uX3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnJlbW92ZV90ZXh0KHRoaXMudGV4dF9zcHJpdGVzX2luX3dpbmRvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0X3Nwcml0ZXNfaW5fd2luZG93ID0gW107XG4gICAgfVxuXG4gICAgdXBkYXRlX2luZm8oY2hhciwgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMpIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5jaGFyID0gY2hhcjtcbiAgICAgICAgdGhpcy5kamlubmkgPSBkamlubmk7XG4gICAgICAgIHRoaXMubmV4dF9kamlubmlfc3RhdHVzID0gbmV4dF9kamlubmlfc3RhdHVzO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdygpO1xuICAgIH1cblxuICAgIG9wZW4oY2hhciwgZGppbm5pLCBuZXh0X2RqaW5uaV9zdGF0dXMsIGNsb3NlX2NhbGxiYWNrLCBoaWRkZW4gPSBmYWxzZSwgc3BhY2ViYXJfY2FsbGJhY2s/LCBhY3Rpb24/LCBjYWxsYmFjayA9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgICAgICB0aGlzLmRqaW5uaSA9IGRqaW5uaTtcbiAgICAgICAgdGhpcy5uZXh0X2RqaW5uaV9zdGF0dXMgPSBuZXh0X2RqaW5uaV9zdGF0dXM7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5leGVjdXRlX29wZXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhZ2VfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1vdW50X3dpbmRvdygpO1xuICAgICAgICB0aGlzLnNwYWNlYmFyX2NhbGxiYWNrID0gc3BhY2ViYXJfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5jbGVhcl9zcHJpdGVzKCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudW5zZXRfcGFnZV9pbmRpY2F0b3IoKTtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuZXhlY3V0ZV9vcGVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfVxufSIsImltcG9ydCB7IFRleHRPYmosIFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdyc7XG5pbXBvcnQgeyBkamlubl9zdGF0dXMgfSBmcm9tICcuLi8uLi9Eamlubic7XG5cbmNvbnN0IEJBU0VfV0lOX1dJRFRIID0gMTMyO1xuY29uc3QgQkFTRV9XSU5fSEVJR0hUID0gMzY7XG5jb25zdCBCQVNFX1dJTl9YID0gMTA0O1xuY29uc3QgQkFTRV9XSU5fWSA9IDA7XG5jb25zdCBDSE9PU0VfQV9ESl9YID0gODtcbmNvbnN0IENIT09TRV9BX0RKX1kgPSA4O1xuY29uc3QgQ0hBUl9OQU1FX1ggPSA4O1xuY29uc3QgQ0hBUl9OQU1FX1kgPSAxNjtcbmNvbnN0IERKSU5OX05BTUVfWCA9IDY0O1xuY29uc3QgREpJTk5fTkFNRV9ZID0gMTY7XG5jb25zdCBTSElGVF9LRVlfWCA9IDg7XG5jb25zdCBTSElGVF9LRVlfWSA9IDI0O1xuY29uc3QgREpJTk5fQUNUSU9OX1ggPSBTSElGVF9LRVlfWCArIDIzO1xuY29uc3QgREpJTk5fQUNUSU9OX1kgPSAyNDtcblxuZXhwb3J0IGNsYXNzIERqaW5uQWN0aW9uV2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIHdpbmRvd19vcGVuOiBib29sZWFuO1xuICAgIHB1YmxpYyBiYXNlX3dpbmRvdzogV2luZG93O1xuICAgIHB1YmxpYyBhY3Rpb25fZGVzY3JpcHRpb25fdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgY2hhcl9uYW1lX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGRqaW5uX25hbWVfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgc3Rhcl9zcHJpdGU6IFBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIHNoaWZ0X2tleToge1xuICAgICAgICBzaGFkb3c6IFBoYXNlci5TcHJpdGUsXG4gICAgICAgIHRleHQ6IFBoYXNlci5TcHJpdGVcbiAgICB9O1xuICAgIHB1YmxpYyBhY3Rpb25fdGV4dDogVGV4dE9iajtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfV0lOX1gsIEJBU0VfV0lOX1ksIEJBU0VfV0lOX1dJRFRILCBCQVNFX1dJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLmFjdGlvbl9kZXNjcmlwdGlvbl90ZXh0ID0gdGhpcy5iYXNlX3dpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIlwiLCBDSE9PU0VfQV9ESl9YLCBDSE9PU0VfQV9ESl9ZKTtcbiAgICAgICAgdGhpcy5jaGFyX25hbWVfdGV4dCA9IHRoaXMuYmFzZV93aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQ0hBUl9OQU1FX1gsIENIQVJfTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5kamlubl9uYW1lX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERKSU5OX05BTUVfWCwgREpJTk5fTkFNRV9ZKTtcbiAgICAgICAgdGhpcy5zdGFyX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2hpZnRfa2V5ID0ge1xuICAgICAgICAgICAgc2hhZG93OiB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChTSElGVF9LRVlfWCArIDEsIFNISUZUX0tFWV9ZICsgMSwgXCJzaGlmdF9rZXlib2FyZFwiLCAweDApLFxuICAgICAgICAgICAgdGV4dDogdGhpcy5iYXNlX3dpbmRvdy5jcmVhdGVfYXRfZ3JvdXAoU0hJRlRfS0VZX1gsIFNISUZUX0tFWV9ZLCBcInNoaWZ0X2tleWJvYXJkXCIpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWN0aW9uX3RleHQgPSB0aGlzLmJhc2Vfd2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIERKSU5OX0FDVElPTl9YLCBESklOTl9BQ1RJT05fWSk7XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl90ZXh0KHN0YXR1cykge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiQ2hvb3NlIGEgZGppbm4uXCIsIHRoaXMuYWN0aW9uX2Rlc2NyaXB0aW9uX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuY2hhcl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuZGppbm5fbmFtZV90ZXh0KTtcbiAgICAgICAgdGhpcy5zaGlmdF9rZXkudGV4dC5hbHBoYSA9IHRoaXMuc2hpZnRfa2V5LnNoYWRvdy5hbHBoYSA9IDE7XG4gICAgICAgIGlmICh0aGlzLnN0YXJfc3ByaXRlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJfc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuc3Rhcl9zcHJpdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaChzdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgZGppbm5fc3RhdHVzLlNFVDogdGhpcy5iYXNlX3dpbmRvdy51cGRhdGVfdGV4dChcIjogU3RhbmRieVwiLCB0aGlzLmFjdGlvbl90ZXh0KTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGRqaW5uX3N0YXR1cy5TVEFOREJZOiB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiOiBTZXRcIiwgdGhpcy5hY3Rpb25fdGV4dCk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbl9mb3Jfc3BlY2lmaWNfZGppbm4odGhpc19jaGFyLCB0aGlzX2RqaW5uKSB7XG4gICAgICAgIHRoaXMuc3Rhcl9zcHJpdGUgPSB0aGlzLmJhc2Vfd2luZG93LmNyZWF0ZV9hdF9ncm91cChESklOTl9OQU1FX1ggLSA3LCBESklOTl9OQU1FX1kgKyAxLCB0aGlzX2RqaW5uLmVsZW1lbnQgKyBcIl9zdGFyXCIpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiV2hhdCB3aWxsIHlvdSBkbz9cIiwgdGhpcy5hY3Rpb25fZGVzY3JpcHRpb25fdGV4dCk7XG4gICAgICAgIHRoaXMuYmFzZV93aW5kb3cudXBkYXRlX3RleHQodGhpc19jaGFyLm5hbWUgKyBcIidzXCIsIHRoaXMuY2hhcl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KHRoaXNfZGppbm4ubmFtZSwgdGhpcy5kamlubl9uYW1lX3RleHQpO1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnVwZGF0ZV90ZXh0KFwiXCIsIHRoaXMuYWN0aW9uX3RleHQpO1xuICAgICAgICB0aGlzLnNoaWZ0X2tleS50ZXh0LmFscGhhID0gdGhpcy5zaGlmdF9rZXkuc2hhZG93LmFscGhhID0gMDtcbiAgICB9XG5cbiAgICBvcGVuKGNhbGxiYWNrPykge1xuICAgICAgICB0aGlzLmJhc2Vfd2luZG93LnNob3coKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5kb3dfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjbG9zZShjYWxsYmFjaz8pIHtcbiAgICAgICAgdGhpcy5iYXNlX3dpbmRvdy5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpbmRvd19vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU3ByaXRlQmFzZSB9IGZyb20gJy4uL1Nwcml0ZUJhc2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZV9taXNjX2RhdGEoZ2FtZSwgbWlzY19kYiwgbG9hZF9wcm9taXNlX3Jlc29sdmUpIHtcbiAgICBsZXQgbWlzY19zcHJpdGVfYmFzZV9saXN0ID0ge307XG4gICAgbGV0IGxvYWRfcHJvbWlzZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pc2NfZGIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgbWlzY19kYXRhID0gbWlzY19kYltpXTtcbiAgICAgICAgY29uc3Qgc3ByaXRlX2Jhc2UgPSBuZXcgU3ByaXRlQmFzZShtaXNjX2RhdGEua2V5X25hbWUsIG1pc2NfZGF0YS5hY3Rpb25zLm1hcChhY3Rpb24gPT4gYWN0aW9uLmtleV9uYW1lKSk7XG4gICAgICAgIG1pc2Nfc3ByaXRlX2Jhc2VfbGlzdFttaXNjX2RhdGEua2V5X25hbWVdID0gc3ByaXRlX2Jhc2U7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWlzY19kYXRhLmFjdGlvbnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IG1pc2NfZGF0YS5hY3Rpb25zW2pdO1xuICAgICAgICAgICAgc3ByaXRlX2Jhc2Uuc2V0QWN0aW9uU3ByaXRlc2hlZXQoYWN0aW9uLmtleV9uYW1lLCBhY3Rpb24uc3ByaXRlc2hlZXQuaW1hZ2UsIGFjdGlvbi5zcHJpdGVzaGVldC5qc29uKTtcbiAgICAgICAgICAgIHNwcml0ZV9iYXNlLnNldEFjdGlvbkRpcmVjdGlvbnMoYWN0aW9uLmtleV9uYW1lLCBhY3Rpb24uYW5pbWF0aW9ucywgYWN0aW9uLmZyYW1lc19jb3VudCk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25GcmFtZVJhdGUoYWN0aW9uLmtleV9uYW1lLCBhY3Rpb24uZnJhbWVfcmF0ZSk7XG4gICAgICAgICAgICBzcHJpdGVfYmFzZS5zZXRBY3Rpb25Mb29wKGFjdGlvbi5rZXlfbmFtZSwgYWN0aW9uLmxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIHNwcml0ZV9iYXNlLmdlbmVyYXRlQWxsRnJhbWVzKCk7XG4gICAgICAgIGxldCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZTtcbiAgICAgICAgY29uc3QgbG9hZF9zcHJpdGVzaGVldF9wcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuICAgICAgICBsb2FkX3Byb21pc2VzLnB1c2gobG9hZF9zcHJpdGVzaGVldF9wcm9taXNlKTtcbiAgICAgICAgc3ByaXRlX2Jhc2UubG9hZFNwcml0ZXNoZWV0cyhnYW1lLCB0cnVlLCBsb2FkX3Nwcml0ZXNoZWV0X3Byb21pc2VfcmVzb2x2ZSk7XG4gICAgfVxuICAgIFByb21pc2UuYWxsKGxvYWRfcHJvbWlzZXMpLnRoZW4obG9hZF9wcm9taXNlX3Jlc29sdmUpO1xuICAgIHJldHVybiBtaXNjX3Nwcml0ZV9iYXNlX2xpc3Q7XG59IiwiaW1wb3J0IHsgRGlhbG9nRGF0YSwgU2hvcGtlZXBEaWFsb2cgfSBmcm9tICcuLi93aW5kb3dzL3Nob3AvU2hvcGtlZXBEaWFsb2cnO1xuaW1wb3J0IHsgQnV5QXJ0aWZhY3RzTWVudSB9IGZyb20gJy4uL3dpbmRvd3Mvc2hvcC9CdXlBcnRpZmFjdHNNZW51JztcbmltcG9ydCB7IFNlbGxSZXBhaXJNZW51IH0gZnJvbSAnLi4vd2luZG93cy9zaG9wL1NlbGxSZXBhaXJNZW51JztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBJbnZlbnRvcnlXaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL3Nob3AvSW52ZW50b3J5V2luZG93JztcbmltcG9ydCB7IEJ1eVNlbGVjdE1lbnUgfSBmcm9tICcuLi93aW5kb3dzL3Nob3AvQnV5U2VsZWN0TWVudSc7XG5pbXBvcnQgeyBFcXVpcENvbXBhcmUgfSBmcm9tICcuLi93aW5kb3dzL3Nob3AvRXF1aXBDb21wYXJlJztcbmltcG9ydCB7IFllc05vTWVudSB9IGZyb20gJy4uL3dpbmRvd3MvWWVzTm9NZW51JztcbmltcG9ydCB7IFNob3BJdGVtUXVhbnRpdHlXaW5kb3cgfSBmcm9tICcuLi93aW5kb3dzL3Nob3AvU2hvcEl0ZW1RdWFudGl0eVdpbmRvdyc7XG5pbXBvcnQgeyBXaW5kb3csIFRleHRPYmogfSBmcm9tICcuLi9XaW5kb3cnO1xuaW1wb3J0IHsgU2hvcENoYXJEaXNwbGF5IH0gZnJvbSAnLi4vd2luZG93cy9zaG9wL1Nob3BDaGFyRGlzcGxheSc7XG5pbXBvcnQgeyBDdXJzb3JNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvQ3Vyc29yTWFuYWdlcic7XG5pbXBvcnQgeyBDb250cm9sTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL0NvbnRyb2xNYW5hZ2VyJztcbmltcG9ydCB7IEJ1dHRvblNlbGVjdE1lbnUgfSBmcm9tICcuLi9zdXBwb3J0X21lbnVzL0J1dHRvblNlbGVjdE1lbnUnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IFNob3BJdGVtIH0gZnJvbSAnLi4vU2hvcCc7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IFNob3AgfSBmcm9tICcuLi9TaG9wJztcblxuY29uc3QgSVRFTV9QUklDRV9XSU5fWCA9IDA7XG5jb25zdCBJVEVNX1BSSUNFX1dJTl9ZID0gNjQ7XG5jb25zdCBJVEVNX1BSSUNFX1dJTl9XSURUSCA9IDExNjtcbmNvbnN0IElURU1fUFJJQ0VfV0lOX0hFSUdIVCA9IDI4O1xuY29uc3QgSVRFTV9QUklDRV9OQU1FX1ggPSA4O1xuY29uc3QgSVRFTV9QUklDRV9OQU1FX1kgPSA4O1xuY29uc3QgSVRFTV9QUklDRV9MQUJFTF9YID0gODtcbmNvbnN0IElURU1fUFJJQ0VfTEFCRUxfWSA9IDE2O1xuY29uc3QgSVRFTV9QUklDRV9WQUxfRU5EX1ggPSA3NztcbmNvbnN0IElURU1fUFJJQ0VfVkFMX1kgPSAxNjtcbmNvbnN0IElURU1fUFJJQ0VfQ09JTlNfWCA9IDgwO1xuY29uc3QgSVRFTV9QUklDRV9DT0lOU19ZID0gMTY7XG5cbmNvbnN0IElURU1fUFJJQ0VfV0lOX1gyID0gMTIwO1xuY29uc3QgSVRFTV9QUklDRV9XSU5fWTIgPSA2NDtcblxuY29uc3QgWU9VUl9DT0lOU19XSU5fWCA9IDE0NDtcbmNvbnN0IFlPVVJfQ09JTlNfV0lOX1kgPSA1NjtcbmNvbnN0IFlPVVJfQ09JTlNfV0lOX1dJRFRIID0gOTI7XG5jb25zdCBZT1VSX0NPSU5TX1dJTl9IRUlHSFQgPSAyODtcbmNvbnN0IFlPVVJfQ09JTlNfTEFCRUxfWCA9IDg7XG5jb25zdCBZT1VSX0NPSU5TX0xBQkVMX1kgPSA4O1xuY29uc3QgWU9VUl9DT0lOU19WQUxfRU5EX1ggPSA4NTtcbmNvbnN0IFlPVVJfQ09JTlNfVkFMX1kgPSAxNjtcblxuY29uc3QgWU9VUl9DT0lOU19XSU5fWDIgPSAwO1xuY29uc3QgWU9VUl9DT0lOU19XSU5fWTIgPSA3MjtcblxuY29uc3QgSVRFTV9ERVNDX1dJTl9YID0gMDtcbmNvbnN0IElURU1fREVTQ19XSU5fWSA9IDEzNjtcbmNvbnN0IElURU1fREVTQ19XSU5fV0lEVEggPSAyMzY7XG5jb25zdCBJVEVNX0RFU0NfV0lOX0hFSUdIVCA9IDIwO1xuY29uc3QgSVRFTV9ERVNDX1RFWFRfWCA9IDg7XG5jb25zdCBJVEVNX0RFU0NfVEVYVF9ZID0gODtcblxuY29uc3QgSVRFTV9ERVNDX1dJTl9YMiA9IDA7XG5jb25zdCBJVEVNX0RFU0NfV0lOX1kyID0gNDA7XG5cbmNvbnN0IFNFTExfTVVMVElQTElFUiA9IDMvNDtcbmNvbnN0IFJFUEFJUl9NVUxUSVBMSUVSID0gMS80O1xuY29uc3QgU0VMTF9CUk9LRU5fTVVMVElQTElFUiA9IFNFTExfTVVMVElQTElFUiAtIFJFUEFJUl9NVUxUSVBMSUVSO1xuXG5jb25zdCBCVVlfTU9ERSA9IFwiYnV5XCJcbmNvbnN0IFNFTExfTU9ERSA9IFwic2VsbFwiXG5cbmV4cG9ydCBjbGFzcyBTaG9wTWVudXtcbiAgICBwdWJsaWMgZ2FtZTogUGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6IEdvbGRlblN1bjtcbiAgICBwdWJsaWMgc2hvcF9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHB1YmxpYyBpdGVtc19kYjoge1xuICAgICAgICBrZXlfbmFtZTogc3RyaW5nO1xuICAgICAgICBpdGVtOiBhbnk7XG4gICAgfVxuICAgIHB1YmxpYyBzaG9wc19kYjp7W2tleV9uYW1lOnN0cmluZ10gOiBTaG9wfTtcbiAgICBwdWJsaWMgc2hvcGtlZXBfZGlhbG9nX2RiOntba2V5X25hbWU6c3RyaW5nXSA6IERpYWxvZ0RhdGF9O1xuXG4gICAgcHVibGljIG5vcm1hbF9pdGVtX2xpc3Q6IHtba2V5X25hbWU6c3RyaW5nXSA6IFNob3BJdGVtfTtcbiAgICBwdWJsaWMgYXJ0aWZhY3RfbGlzdDoge1trZXlfbmFtZTpzdHJpbmddIDogU2hvcEl0ZW19O1xuXG4gICAgcHVibGljIGJ1dHRvbnNfa2V5czogc3RyaW5nW107XG4gICAgcHVibGljIHdpbmRvd3NfbW9kZTogc3RyaW5nO1xuICAgIHB1YmxpYyBjdXJyZW50X2luZGV4OiBudW1iZXI7XG4gICAgcHVibGljIGN1cnNvcl9tYW5hZ2VyOiBDdXJzb3JNYW5hZ2VyO1xuICAgIHB1YmxpYyBjb250cm9sX21hbmFnZXI6IENvbnRyb2xNYW5hZ2VyO1xuICAgIFxuICAgIHB1YmxpYyBob3Jpem9udGFsX21lbnU6IEJ1dHRvblNlbGVjdE1lbnU7XG4gICAgcHVibGljIG5wY19kaWFsb2c6IFNob3BrZWVwRGlhbG9nO1xuICAgIHB1YmxpYyB5ZXNub19hY3Rpb246IFllc05vTWVudTtcbiAgICBwdWJsaWMgaW52X3dpbjogSW52ZW50b3J5V2luZG93O1xuICAgIHB1YmxpYyBidXlfc2VsZWN0OiBCdXlTZWxlY3RNZW51O1xuICAgIHB1YmxpYyBlcV9jb21wYXJlOiBFcXVpcENvbXBhcmU7XG4gICAgcHVibGljIHF1YW50X3dpbjogU2hvcEl0ZW1RdWFudGl0eVdpbmRvdztcbiAgICBwdWJsaWMgY2hhcl9kaXNwbGF5OiBTaG9wQ2hhckRpc3BsYXk7XG5cbiAgICBwdWJsaWMgaXRlbV9wcmljZV93aW46IFdpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9kZXNjX3dpbjogV2luZG93O1xuICAgIHB1YmxpYyB5b3VyX2NvaW5zX3dpbjogV2luZG93O1xuXG4gICAgcHVibGljIGJ1eV9tZW51OiBCdXlBcnRpZmFjdHNNZW51O1xuICAgIHB1YmxpYyBzZWxsX21lbnU6IFNlbGxSZXBhaXJNZW51O1xuXG4gICAgcHVibGljIHlvdXJfY29pbnNfbGFiZWw6IFRleHRPYmo7XG4gICAgcHVibGljIHlvdXJfY29pbnNfdGV4dDogVGV4dE9iajtcbiAgICBwdWJsaWMgaXRlbV9uYW1lX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fcHJpY2VfY29pbnNfbGFiZWw6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fcHJpY2VfbGFiZWw6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fcHJpY2VfdmFsX3RleHQ6IFRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fZGVzY190ZXh0OiBUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTpQaGFzZXIuR2FtZSwgZGF0YTpHb2xkZW5TdW4pe1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5pdGVtc19kYiA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3Q7XG4gICAgICAgIHRoaXMuc2hvcHNfZGIgPSBfLm1hcEtleXModGhpcy5kYXRhLmRicy5zaG9wc19kYiwgc2hvcCA9PiBzaG9wLmtleV9uYW1lKSBhcyB7W2tleV9uYW1lOnN0cmluZ10gOiBTaG9wfTs7XG4gICAgICAgIHRoaXMuc2hvcGtlZXBfZGlhbG9nX2RiID0gdGhpcy5kYXRhLmRicy5zaG9wa2VlcF9kaWFsb2dfZGI7XG5cbiAgICAgICAgdGhpcy5ub3JtYWxfaXRlbV9saXN0ID0ge307XG4gICAgICAgIHRoaXMuYXJ0aWZhY3RfbGlzdCA9IHt9O1xuXG4gICAgICAgIHRoaXMuYnV0dG9uc19rZXlzID0gW1wiYnV5XCIsIFwic2VsbFwiLCBcImFydGlmYWN0c1wiLCBcInJlcGFpclwiXTtcbiAgICAgICAgdGhpcy53aW5kb3dzX21vZGUgPSBCVVlfTU9ERTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2luZGV4PSAwO1xuXG4gICAgICAgIHRoaXMuY3Vyc29yX21hbmFnZXIgPSBuZXcgQ3Vyc29yTWFuYWdlcih0aGlzLmdhbWUpO1xuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlciA9IG5ldyBDb250cm9sTWFuYWdlcih0aGlzLmdhbWUpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsX21lbnUgPSBuZXcgQnV0dG9uU2VsZWN0TWVudSh0aGlzLmdhbWUsIHRoaXMuZGF0YSxcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uc19rZXlzLFxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMubWFwKGIgPT4gY2FwaXRhbGl6ZShiKSksXG4gICAgICAgICAgICB7b25fcHJlc3M6IHRoaXMuYnV0dG9uX3ByZXNzLmJpbmQodGhpcyksIG9uX2NhbmNlbDogdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIpO1xuXG4gICAgICAgIHRoaXMubnBjX2RpYWxvZyA9IG5ldyBTaG9wa2VlcERpYWxvZyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy55ZXNub19hY3Rpb24gPSBuZXcgWWVzTm9NZW51KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLmNvbnRyb2xfbWFuYWdlcik7XG4gICAgICAgIHRoaXMuaW52X3dpbiA9IG5ldyBJbnZlbnRvcnlXaW5kb3codGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMsIHRoaXMub25faW52X3dpbl9jaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYnV5X3NlbGVjdCA9IG5ldyBCdXlTZWxlY3RNZW51KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzLCB0aGlzLm9uX2J1eV9zZWxlY3RfY2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVxX2NvbXBhcmUgPSBuZXcgRXF1aXBDb21wYXJlKHRoaXMuZ2FtZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5xdWFudF93aW4gPSBuZXcgU2hvcEl0ZW1RdWFudGl0eVdpbmRvdyh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcy5jdXJzb3JfbWFuYWdlcik7XG4gICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5ID0gbmV3IFNob3BDaGFyRGlzcGxheSh0aGlzLmdhbWUsIHRoaXMuZGF0YSwgdGhpcywgdGhpcy5vbl9jaGFyX2Rpc3BsYXlfY2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4gPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgSVRFTV9QUklDRV9XSU5fWCwgSVRFTV9QUklDRV9XSU5fWSwgSVRFTV9QUklDRV9XSU5fV0lEVEgsIElURU1fUFJJQ0VfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMueW91cl9jb2luc193aW4gPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgWU9VUl9DT0lOU19XSU5fWCwgWU9VUl9DT0lOU19XSU5fWSwgWU9VUl9DT0lOU19XSU5fV0lEVEgsIFlPVVJfQ09JTlNfV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuaXRlbV9kZXNjX3dpbiA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBJVEVNX0RFU0NfV0lOX1gsIElURU1fREVTQ19XSU5fWSwgSVRFTV9ERVNDX1dJTl9XSURUSCwgSVRFTV9ERVNDX1dJTl9IRUlHSFQpO1xuICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5idXlfbWVudSA9IG5ldyBCdXlBcnRpZmFjdHNNZW51KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zZWxsX21lbnUgPSBuZXcgU2VsbFJlcGFpck1lbnUodGhpcy5nYW1lLCB0aGlzLmRhdGEsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMueW91cl9jb2luc19sYWJlbCA9IHRoaXMueW91cl9jb2luc193aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXCJZb3VyIENvaW5zOiBcIiwgWU9VUl9DT0lOU19MQUJFTF9YLCBZT1VSX0NPSU5TX0xBQkVMX1kpO1xuICAgICAgICB0aGlzLnlvdXJfY29pbnNfdGV4dCA9IHRoaXMueW91cl9jb2luc193aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgWU9VUl9DT0lOU19WQUxfRU5EX1gsIFlPVVJfQ09JTlNfVkFMX1ksIHRydWUpO1xuXG4gICAgICAgIHRoaXMuaXRlbV9uYW1lX3RleHQgPSB0aGlzLml0ZW1fcHJpY2Vfd2luLnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIElURU1fUFJJQ0VfTkFNRV9YLCBJVEVNX1BSSUNFX05BTUVfWSk7XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV9sYWJlbCA9IHRoaXMuaXRlbV9wcmljZV93aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXCJQcmljZVwiLCBJVEVNX1BSSUNFX0xBQkVMX1gsIElURU1fUFJJQ0VfTEFCRUxfWSk7XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV92YWxfdGV4dCA9IHRoaXMuaXRlbV9wcmljZV93aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgSVRFTV9QUklDRV9WQUxfRU5EX1gsIElURU1fUFJJQ0VfVkFMX1ksIHRydWUpO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2VfY29pbnNfbGFiZWwgPSB0aGlzLml0ZW1fcHJpY2Vfd2luLnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiQ29pbnNcIiwgSVRFTV9QUklDRV9DT0lOU19YLCBJVEVNX1BSSUNFX0NPSU5TX1kpO1xuXG4gICAgICAgIHRoaXMuaXRlbV9kZXNjX3RleHQgPSB0aGlzLml0ZW1fZGVzY193aW4uc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgSVRFTV9ERVNDX1RFWFRfWCwgSVRFTV9ERVNDX1RFWFRfWSk7XG4gICAgfVxuXG4gICAgb25fY2hhcl9kaXNwbGF5X2NoYW5nZShrZXlfbmFtZTpzdHJpbmcpe1xuICAgICAgICBpZih0aGlzLmVxX2NvbXBhcmUuaXNfb3BlbikgdGhpcy5lcV9jb21wYXJlLmNoYW5nZV9jaGFyYWN0ZXIoa2V5X25hbWUpO1xuICAgICAgICBpZih0aGlzLmludl93aW4uaXNfb3BlbikgdGhpcy5pbnZfd2luLmNoYW5nZV9jaGFyYWN0ZXIoa2V5X25hbWUpO1xuICAgIH1cblxuICAgIG9uX2ludl93aW5fY2hhbmdlKGxpbmU6bnVtYmVyLCBjb2w6bnVtYmVyKXtcbiAgICAgICAgaWYodGhpcy5pdGVtX3ByaWNlX3dpbi5vcGVuICYmIHRoaXMuc2VsbF9tZW51LmFjdGl2ZSl7XG4gICAgICAgICAgICBsZXQgaXNfcmVwYWlyID0gdGhpcy5zZWxsX21lbnUuaXNfcmVwYWlyX21lbnU7XG4gICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5pbnZfd2luLml0ZW1fZ3JpZFtsaW5lXVtjb2xdO1xuXG4gICAgICAgICAgICBpZihpdG0pe1xuICAgICAgICAgICAgICAgIGxldCBpdGVtX3ByaWNlID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtpdG0ua2V5X25hbWVdLnByaWNlO1xuICAgICAgICAgICAgICAgIGxldCBpbXBvcnRhbnRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbaXRtLmtleV9uYW1lXS5pbXBvcnRhbnRfaXRlbTtcbiAgICAgICAgICAgICAgICBsZXQgcHJpY2VfdmFsID0gaXRlbV9wcmljZTtcblxuICAgICAgICAgICAgICAgIGlmKGlzX3JlcGFpcikgcHJpY2VfdmFsID0gaXRlbV9wcmljZSpSRVBBSVJfTVVMVElQTElFUiB8IDA7XG4gICAgICAgICAgICAgICAgZWxzZSBwcmljZV92YWwgPSBpdGVtX3ByaWNlICogKGl0bS5icm9rZW4gPyBTRUxMX0JST0tFTl9NVUxUSVBMSUVSIDogU0VMTF9NVUxUSVBMSUVSKSB8IDA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9pdGVtX2luZm8oaXRtLmtleV9uYW1lLCBwcmljZV92YWwsIGlzX3JlcGFpciA/ICFpdG0uYnJva2VuIDogaW1wb3J0YW50X2l0ZW0sIGlzX3JlcGFpciA/IGl0bS5icm9rZW4gOiB0cnVlLCBpbXBvcnRhbnRfaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9idXlfc2VsZWN0X2NoYW5nZShrZXlfbmFtZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLnVwZGF0ZV9pdGVtX2luZm8oa2V5X25hbWUpO1xuICAgIH1cblxuICAgIHNldF9pdGVtX2xpc3RzKCl7XG4gICAgICAgIGxldCBub3JtYWxfbGlzdDpTaG9wSXRlbVtdID0gW107XG4gICAgICAgIGxldCBhcnRpZmFjdF9saXN0OlNob3BJdGVtW10gPSBbXTtcblxuICAgICAgICBsZXQgaXRlbV9saXN0ID0gdGhpcy5zaG9wc19kYlt0aGlzLnNob3Bfa2V5XS5pdGVtX2xpc3Q7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPGl0ZW1fbGlzdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMuaXRlbXNfZGJbaXRlbV9saXN0W2ldLmtleV9uYW1lXTtcbiAgICAgICAgICAgIGlmKGl0ZW1fbGlzdFtpXS5xdWFudGl0eSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmKGl0ZW0ucmFyZV9pdGVtID09PSB0cnVlKSBhcnRpZmFjdF9saXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICBlbHNlIG5vcm1hbF9saXN0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5vcm1hbF9pdGVtX2xpc3QgPSBfLm1hcEtleXMobm9ybWFsX2xpc3QsIGl0ZW0gPT4gaXRlbS5rZXlfbmFtZSkgYXMge1trZXlfbmFtZTpzdHJpbmddIDogU2hvcEl0ZW19O1xuICAgICAgICB0aGlzLmFydGlmYWN0X2xpc3QgPSBfLm1hcEtleXMoYXJ0aWZhY3RfbGlzdCwgaXRlbSA9PiBpdGVtLmtleV9uYW1lKSBhcyB7W2tleV9uYW1lOnN0cmluZ10gOiBTaG9wSXRlbX07O1xuICAgIH1cblxuICAgIHVwZGF0ZV95b3VyX2NvaW5zKCl7XG4gICAgICAgIHRoaXMueW91cl9jb2luc193aW4udXBkYXRlX3RleHQoU3RyaW5nKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuY29pbnMpLCB0aGlzLnlvdXJfY29pbnNfdGV4dCk7XG4gICAgfVxuXG4gICAgdXBkYXRlX2l0ZW1faW5mbyhrZXk6c3RyaW5nLCBjdXN0b21fcHJpY2U/Om51bWJlciwgY3VzdG9tX21zZzpib29sZWFuPWZhbHNlLFxuICAgICAgICBicm9rZW46Ym9vbGVhbj1mYWxzZSwgY2FudF9zZWxsOmJvb2xlYW49ZmFsc2Upe1xuICAgICAgICBsZXQgdGhpc19pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtrZXldO1xuXG4gICAgICAgIHRoaXMuaXRlbV9kZXNjX3dpbi51cGRhdGVfdGV4dCh0aGlzX2l0ZW0uZGVzY3JpcHRpb24sIHRoaXMuaXRlbV9kZXNjX3RleHQpO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV90ZXh0KHRoaXNfaXRlbS5uYW1lLCB0aGlzLml0ZW1fbmFtZV90ZXh0KTtcblxuICAgICAgICBsZXQgY29pbnNfbGFiZWwgPSAoY3VzdG9tX21zZykgPyBcIlwiIDogXCJDb2luc1wiO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV90ZXh0KGNvaW5zX2xhYmVsLCB0aGlzLml0ZW1fcHJpY2VfY29pbnNfbGFiZWwpO1xuXG4gICAgICAgIGxldCBwcmljZV9sYWJlbCA9IFwiUHJpY2VcIjtcbiAgICAgICAgaWYoY3VzdG9tX21zZyAmJiAhYnJva2VuKSBwcmljZV9sYWJlbCA9IFwiSXQncyBub3QgYnJva2VuLlwiO1xuICAgICAgICBlbHNlIGlmKGN1c3RvbV9tc2cgJiYgY2FudF9zZWxsKSBwcmljZV9sYWJlbCA9IFwiV2UgY2FuJ3QgYnV5IHRoYXQuXCI7XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4udXBkYXRlX3RleHQocHJpY2VfbGFiZWwsIHRoaXMuaXRlbV9wcmljZV9sYWJlbCk7XG5cbiAgICAgICAgbGV0IHByaWNlX3ZhbCA9IGN1c3RvbV9wcmljZSA/IGN1c3RvbV9wcmljZSA6IHRoaXNfaXRlbS5wcmljZTtcbiAgICAgICAgbGV0IHByaWNlX3RleHQgPSAoY3VzdG9tX21zZykgPyBcIlwiIDogcHJpY2VfdmFsO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luLnVwZGF0ZV90ZXh0KHByaWNlX3RleHQsIHRoaXMuaXRlbV9wcmljZV92YWxfdGV4dCk7XG4gICAgfVxuXG4gICAgYWx0ZXJuYXRlX3dpbmRvd19wb3MobW9kZTpzdHJpbmcpe1xuICAgICAgICBpZih0aGlzLndpbmRvd3NfbW9kZSA9PT0gbW9kZSkgcmV0dXJuO1xuICAgICAgICBpZihtb2RlPT09QlVZX01PREUpe1xuICAgICAgICAgICAgdGhpcy5pdGVtX3ByaWNlX3dpbi51cGRhdGVfcG9zaXRpb24oe3g6IElURU1fUFJJQ0VfV0lOX1gsIHk6IElURU1fUFJJQ0VfV0lOX1l9KTtcbiAgICAgICAgICAgIHRoaXMuaXRlbV9kZXNjX3dpbi51cGRhdGVfcG9zaXRpb24oe3g6IElURU1fREVTQ19XSU5fWCwgeTogSVRFTV9ERVNDX1dJTl9ZfSk7XG4gICAgICAgICAgICB0aGlzLnlvdXJfY29pbnNfd2luLnVwZGF0ZV9wb3NpdGlvbih7eDogWU9VUl9DT0lOU19XSU5fWCwgeTogWU9VUl9DT0lOU19XSU5fWX0pO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dzX21vZGUgPSBCVVlfTU9ERTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgdGhpcy5pdGVtX3ByaWNlX3dpbi51cGRhdGVfcG9zaXRpb24oe3g6IElURU1fUFJJQ0VfV0lOX1gyLCB5OiBJVEVNX1BSSUNFX1dJTl9ZMn0pO1xuICAgICAgICAgICAgdGhpcy5pdGVtX2Rlc2Nfd2luLnVwZGF0ZV9wb3NpdGlvbih7eDogSVRFTV9ERVNDX1dJTl9YMiwgeTogSVRFTV9ERVNDX1dJTl9ZMn0pO1xuICAgICAgICAgICAgdGhpcy55b3VyX2NvaW5zX3dpbi51cGRhdGVfcG9zaXRpb24oe3g6IFlPVVJfQ09JTlNfV0lOX1gyLCB5OiBZT1VSX0NPSU5TX1dJTl9ZMn0pO1xuICAgICAgICAgICAgdGhpcy53aW5kb3dzX21vZGUgPSBTRUxMX01PREU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBidXR0b25fcHJlc3MoKSB7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LmRlYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgIHRoaXMuY3VycmVudF9pbmRleCA9IHRoaXMuaG9yaXpvbnRhbF9tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleDtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAodGhpcy5idXR0b25zX2tleXNbdGhpcy5ob3Jpem9udGFsX21lbnUuc2VsZWN0ZWRfYnV0dG9uX2luZGV4XSl7XG4gICAgICAgICAgICBjYXNlIFwiYnV5XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5hbHRlcm5hdGVfd2luZG93X3BvcyhCVVlfTU9ERSk7XG4gICAgICAgICAgICAgICAgdGhpcy5idXlfbWVudS5vcGVuX21lbnUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNlbGxcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0ZV93aW5kb3dfcG9zKFNFTExfTU9ERSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21lbnUub3Blbl9tZW51KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhcnRpZmFjdHNcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0ZV93aW5kb3dfcG9zKEJVWV9NT0RFKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tZW51Lm9wZW5fbWVudSh0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXBhaXJcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0ZV93aW5kb3dfcG9zKFNFTExfTU9ERSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21lbnUub3Blbl9tZW51KHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKCF0aGlzLm5wY19kaWFsb2cuaXNfYWN0aXZlKXtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy5jbG9zZV9kaWFsb2coKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbF9tZW51LnVwZGF0ZV9wb3NpdGlvbigpO1xuICAgIH1cblxuICAgIGlzX2FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9yaXpvbnRhbF9tZW51Lm1lbnVfYWN0aXZlO1xuICAgIH1cblxuICAgIG9wZW5faG9yaXpvbnRhbF9tZW51KG1lc3NhZ2Vfa2V5PVwiY2FuY2VsX29wdGlvblwiKXtcbiAgICAgICAgaWYoIXRoaXMubnBjX2RpYWxvZy5pc19hY3RpdmUpe1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLm9wZW4odGhpcy5zaG9wX2tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1lc3NhZ2Vfa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS5vcGVuKHVuZGVmaW5lZCwgdGhpcy5jdXJyZW50X2luZGV4KTtcblxuICAgIH1cblxuICAgIG9wZW5fbWVudShzaG9wX2tleTpzdHJpbmcsIGNsb3NlX2NhbGxiYWNrPzpGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gc2hvcF9rZXk7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcblxuICAgICAgICBpZih0aGlzLmRhdGEuaGVyby5pbl9hY3Rpb24oKSl7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaGVyby5zdG9wX2NoYXIoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnVwZGF0ZV9zaGFkb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0X2l0ZW1fbGlzdHMoKTtcbiAgICAgICAgdGhpcy5kYXRhLnNob3Bfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMub3Blbl9ob3Jpem9udGFsX21lbnUoKTtcbiAgICB9XG5cbiAgICBlbmRfZGlhbG9nKCkge1xuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZGF0YS5zaG9wX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcblxuICAgICAgICBpZih0aGlzLmNsb3NlX2NhbGxiYWNrKSB0aGlzLmNsb3NlX2NhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuICAgIH1cblxuICAgIGNsb3NlX21lbnUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc19hY3RpdmUoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmhvcml6b250YWxfbWVudS5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwiZ29vZGJ5ZVwiKTsgXG5cbiAgICAgICAgdGhpcy5ub3JtYWxfaXRlbV9saXN0ID0ge307XG4gICAgICAgIHRoaXMuYXJ0aWZhY3RfbGlzdCA9IHt9O1xuICAgICAgICB0aGlzLmN1cnJlbnRfaW5kZXggPSAwO1xuXG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLmFjdGlvbnNbXCJlbnRlclwiXS5jYWxsYmFjayA9IHRoaXMuZW5kX2RpYWxvZy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfYWN0aW9ucygpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEaWFsb2dNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvRGlhbG9nTWFuYWdlcic7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgU2hvcE1lbnUgfSBmcm9tICcuLi8uLi9tYWluX21lbnVzL1Nob3BNZW51JztcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuXG5jb25zdCBGUkFNRV9TSVpFID0gMzY7XG5cbmV4cG9ydCB0eXBlIERpYWxvZ0RhdGE9e1xuICAgIGtleV9uYW1lOnN0cmluZyxcbiAgICBtZXNzYWdlczpEaWFsb2dNZXNzYWdlW11cbn1cblxuZXhwb3J0IHR5cGUgRGlhbG9nTWVzc2FnZT17XG4gICAga2V5OnN0cmluZyxcbiAgICB0ZXh0OnN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgU2hvcGtlZXBEaWFsb2d7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6R29sZGVuU3VuO1xuICAgIHB1YmxpYyBwYXJlbnQ6U2hvcE1lbnU7XG4gICAgcHVibGljIHNob3Bfa2V5OnN0cmluZztcbiAgICBwdWJsaWMgYXZhdGFyX2tleTpzdHJpbmc7XG4gICAgcHVibGljIGRpYWxvZ19rZXk6c3RyaW5nO1xuXG4gICAgcHVibGljIGRpYWxvZ19tYW5hZ2VyOkRpYWxvZ01hbmFnZXI7XG4gICAgcHVibGljIG1lc3NhZ2VzOntba2V5OnN0cmluZ10gOiBEaWFsb2dNZXNzYWdlfTtcbiAgICBwdWJsaWMgY3VycmVudF9tZXNzYWdlOnN0cmluZztcbiAgICBwdWJsaWMgaXNfYWN0aXZlOmJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOlBoYXNlci5HYW1lLCBkYXRhOkdvbGRlblN1biwgcGFyZW50OlNob3BNZW51KXtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuc2hvcF9rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmF2YXRhcl9rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmRpYWxvZ19rZXkgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nX21hbmFnZXIgPSBuZXcgRGlhbG9nTWFuYWdlcih0aGlzLmdhbWUsIHRoaXMuZGF0YSk7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuKHNob3Bfa2V5OnN0cmluZyl7XG4gICAgICAgIHRoaXMuc2hvcF9rZXkgPSBzaG9wX2tleTtcbiAgICAgICAgdGhpcy5hdmF0YXJfa2V5ID0gdGhpcy5wYXJlbnQuc2hvcHNfZGJbc2hvcF9rZXldLmF2YXRhcl9rZXk7XG4gICAgICAgIHRoaXMuZGlhbG9nX2tleSA9IHRoaXMucGFyZW50LnNob3BzX2RiW3Nob3Bfa2V5XS5kaWFsb2dfa2V5O1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gXy5tYXBLZXlzKHRoaXMuZGF0YS5zaG9wX21lbnUuc2hvcGtlZXBfZGlhbG9nX2RiW3RoaXMuZGlhbG9nX2tleV0ubWVzc2FnZXMsIG1lc3NhZ2VzID0+IG1lc3NhZ2VzLmtleSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVfZGlhbG9nKFwid2VsY29tZVwiKTsgXG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKCl7XG4gICAgICAgIHRoaXMuZGlhbG9nX21hbmFnZXIudXBkYXRlX3Bvc2l0aW9uKCk7XG4gICAgfVxuICAgIFxuICAgIHJlcGxhY2VfdGV4dChtZXNzYWdlOnN0cmluZywgaGVybz86c3RyaW5nLCBpdGVtPzpzdHJpbmcsIHByaWNlPzpzdHJpbmcpe1xuICAgICAgICBkb3tcbiAgICAgICAgICAgIGlmKG1lc3NhZ2UuaW5jbHVkZXMoXCIke0hFUk99XCIpKSBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJHtIRVJPfVwiLCBoZXJvKTtcbiAgICAgICAgICAgIGlmKG1lc3NhZ2UuaW5jbHVkZXMoXCIke0lURU19XCIpKSBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKFwiJHtJVEVNfVwiLCBpdGVtKTtcbiAgICAgICAgICAgIGlmKG1lc3NhZ2UuaW5jbHVkZXMoXCIke1BSSUNFfVwiKSkgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZShcIiR7UFJJQ0V9XCIsIHByaWNlKTtcbiAgICAgICAgfXdoaWxlKG1lc3NhZ2UuaW5jbHVkZXMoXCIke0hFUk99XCIpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoXCIke0lURU19XCIpIHx8IG1lc3NhZ2UuaW5jbHVkZXMoXCIke1BSSUNFfVwiKSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBnZXRfbWVzc2FnZShtZXNzYWdlX2tleTpzdHJpbmcpe1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlc1ttZXNzYWdlX2tleV0udGV4dDtcbiAgICB9XG5cbiAgICB1cGRhdGVfZGlhbG9nKG1lc3NhZ2U6c3RyaW5nLCBzaG93X2NyeXN0YWw6Ym9vbGVhbj1mYWxzZSwgaXNfa2V5OmJvb2xlYW49dHJ1ZSwgY2FsbGJhY2s/OkZ1bmN0aW9uKXtcbiAgICAgICAgaWYoaXNfa2V5KSB0aGlzLmN1cnJlbnRfbWVzc2FnZSA9IHRoaXMubWVzc2FnZXNbbWVzc2FnZV0udGV4dDtcbiAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRfbWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmRpYWxvZ19tYW5hZ2VyLnF1aWNrX25leHQodGhpcy5jdXJyZW50X21lc3NhZ2UsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICB0aGlzLmF2YXRhcl9rZXksXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAge3g6IEZSQU1FX1NJWkUrNCwgeTowfSxcbiAgICAgICAge3g6IDAsIHk6IDB9LFxuICAgICAgICBzaG93X2NyeXN0YWwpO1xuICAgIH1cblxuICAgIGNsb3NlX2RpYWxvZyhjYWxsYmFjaz86RnVuY3Rpb24sIGRpYWxvZ19vbmx5OmJvb2xlYW49dHJ1ZSl7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlhbG9nX21hbmFnZXIua2lsbF9kaWFsb2coY2FsbGJhY2ssIGRpYWxvZ19vbmx5KTtcbiAgICB9XG5cbiAgICBjbG9zZSgpe1xuICAgICAgICB0aGlzLmNsb3NlX2RpYWxvZyh1bmRlZmluZWQsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnNob3Bfa2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdmF0YXJfa2V5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kaWFsb2dfa2V5ID0gbnVsbDtcblxuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50X21lc3NhZ2UgPSBudWxsO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgSXRlbSwgaXRlbV90eXBlcyB9IGZyb20gJy4uLy4uL0l0ZW0nO1xuaW1wb3J0IHsgU2hvcE1lbnUgfSBmcm9tICcuLi8uLi9tYWluX21lbnVzL1Nob3BNZW51JztcbmltcG9ydCB7IENvbnRyb2xNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ29udHJvbE1hbmFnZXInO1xuaW1wb3J0IHsgSW52ZW50b3J5V2luZG93IH0gZnJvbSAnLi9JbnZlbnRvcnlXaW5kb3cnO1xuaW1wb3J0IHsgU2hvcENoYXJEaXNwbGF5IH0gZnJvbSAnLi9TaG9wQ2hhckRpc3BsYXknO1xuaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCB7IFNob3BJdGVtUXVhbnRpdHlXaW5kb3cgfSBmcm9tICcuL1Nob3BJdGVtUXVhbnRpdHlXaW5kb3cnO1xuaW1wb3J0IHsgQnV5U2VsZWN0TWVudSB9IGZyb20gJy4vQnV5U2VsZWN0TWVudSc7XG5pbXBvcnQgeyBFcXVpcENvbXBhcmUgfSBmcm9tICcuL0VxdWlwQ29tcGFyZSc7XG5pbXBvcnQgeyBZZXNOb01lbnUgfSBmcm9tICcuLi9ZZXNOb01lbnUnO1xuaW1wb3J0IHsgU2hvcGtlZXBEaWFsb2cgfSBmcm9tICcuL1Nob3BrZWVwRGlhbG9nJztcbmltcG9ydCB7IFNob3BJdGVtIH0gZnJvbSAnLi4vLi4vU2hvcCc7XG5pbXBvcnQgeyBNYWluQ2hhciB9IGZyb20gJy4uLy4uL01haW5DaGFyJztcblxuY29uc3QgTUFYX0lOVkVOVE9SWV9TSVpFID0gMTU7XG5jb25zdCBNQVhfSVRFTVNfUEVSX1BBR0UgPSA3O1xuY29uc3QgTUFYX1NUQUNLX1NJWkUgPSAzMDtcblxuY29uc3QgU0VMTF9NVUxUSVBMSUVSID0gMy80O1xuY29uc3QgUkVQQUlSX01VTFRJUExJRVIgPSAxLzQ7XG5jb25zdCBTRUxMX0JST0tFTl9NVUxUSVBMSUVSID0gU0VMTF9NVUxUSVBMSUVSIC0gUkVQQUlSX01VTFRJUExJRVI7XG5cbmNvbnN0IFlFU05PX1ggPSA1NjtcbmNvbnN0IFlFU05PX1kgPSA0MDtcblxuY29uc3QgSVRFTV9DT1VOVEVSX0xPT1BfVElNRSA9IDEwMDtcblxuZXhwb3J0IGNsYXNzIEJ1eUFydGlmYWN0c01lbnV7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6R29sZGVuU3VuO1xuICAgIHB1YmxpYyBwYXJlbnQ6U2hvcE1lbnU7XG4gICAgcHVibGljIGNvbnRyb2xfbWFuYWdlcjpDb250cm9sTWFuYWdlcjtcbiAgICBcbiAgICBwdWJsaWMgaXRlbV9kZXNjX3dpbjpXaW5kb3c7XG4gICAgcHVibGljIHlvdXJfY29pbnNfd2luOldpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9wcmljZV93aW46V2luZG93O1xuICAgIHB1YmxpYyBjaGFyX2Rpc3BsYXk6U2hvcENoYXJEaXNwbGF5O1xuICAgIHB1YmxpYyBpbnZfd2luOkludmVudG9yeVdpbmRvdztcbiAgICBwdWJsaWMgcXVhbnRfd2luOlNob3BJdGVtUXVhbnRpdHlXaW5kb3c7XG4gICAgcHVibGljIGJ1eV9zZWxlY3Q6QnV5U2VsZWN0TWVudTtcbiAgICBwdWJsaWMgZXFfY29tcGFyZTpFcXVpcENvbXBhcmU7XG4gICAgcHVibGljIHllc25vX2FjdGlvbjpZZXNOb01lbnU7XG4gICAgcHVibGljIG5wY19kaWFsb2c6U2hvcGtlZXBEaWFsb2c7XG5cbiAgICBwdWJsaWMgaXNfYXJ0aWZhY3RzX21lbnU6Ym9vbGVhbjtcbiAgICBwdWJsaWMgaXRlbV9saXN0Ontba2V5X25hbWU6c3RyaW5nXSA6IFNob3BJdGVtfTs7XG4gICAgcHVibGljIHNlbGVjdGVkX2l0ZW06U2hvcEl0ZW07XG4gICAgcHVibGljIGJ1eV9zZWxlY3RfcG9zOntwYWdlOm51bWJlciwgaW5kZXg6bnVtYmVyLCBpc19sYXN0OmJvb2xlYW59O1xuICAgIHB1YmxpYyBvbGRfaXRlbTpJdGVtO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyYWN0ZXI6TWFpbkNoYXI7XG4gICAgcHVibGljIHNlbGVjdGVkX2NoYXJfaW5kZXg6bnVtYmVyO1xuICAgIHB1YmxpYyBhY3RpdmU6Ym9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihnYW1lOlBoYXNlci5HYW1lLCBkYXRhOkdvbGRlblN1biwgcGFyZW50OlNob3BNZW51KXtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyID0gdGhpcy5wYXJlbnQuY29udHJvbF9tYW5hZ2VyO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5pdGVtX2Rlc2Nfd2luID0gdGhpcy5wYXJlbnQuaXRlbV9kZXNjX3dpbjtcbiAgICAgICAgdGhpcy55b3VyX2NvaW5zX3dpbiA9IHRoaXMucGFyZW50LnlvdXJfY29pbnNfd2luO1xuICAgICAgICB0aGlzLml0ZW1fcHJpY2Vfd2luID0gdGhpcy5wYXJlbnQuaXRlbV9wcmljZV93aW47XG4gICAgICAgIHRoaXMuY2hhcl9kaXNwbGF5ID0gdGhpcy5wYXJlbnQuY2hhcl9kaXNwbGF5O1xuICAgICAgICB0aGlzLmludl93aW4gPSB0aGlzLnBhcmVudC5pbnZfd2luO1xuICAgICAgICB0aGlzLnF1YW50X3dpbiA9ICB0aGlzLnBhcmVudC5xdWFudF93aW47XG4gICAgICAgIHRoaXMuYnV5X3NlbGVjdCA9IHRoaXMucGFyZW50LmJ1eV9zZWxlY3Q7XG4gICAgICAgIHRoaXMuZXFfY29tcGFyZSA9IHRoaXMucGFyZW50LmVxX2NvbXBhcmU7XG4gICAgICAgIHRoaXMueWVzbm9fYWN0aW9uID0gdGhpcy5wYXJlbnQueWVzbm9fYWN0aW9uO1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cgPSB0aGlzLnBhcmVudC5ucGNfZGlhbG9nO1xuXG4gICAgICAgIHRoaXMuaXNfYXJ0aWZhY3RzX21lbnUgPSBudWxsO1xuICAgICAgICB0aGlzLml0ZW1fbGlzdCA9IHt9O1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmJ1eV9zZWxlY3RfcG9zID0ge3BhZ2U6IDAsIGluZGV4OiAwLCBpc19sYXN0OiBmYWxzZX07XG4gICAgICAgIHRoaXMub2xkX2l0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3RlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdXBkYXRlX2dhbWVfdGlja2V0X3N0ZXAoKXtcbiAgICAgICAgbGV0IGJvdWdodCA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuZ2FtZV90aWNrZXRzLnRpY2tldHNfYm91Z2h0XG4gICAgICAgIGlmKGJvdWdodCA+PSAxICYmIGJvdWdodCA8IDYpIHJldHVybiAzMDA7XG4gICAgICAgIGlmKGJvdWdodCA+PSA2ICYmIGJvdWdodCA8IDExKSByZXR1cm4gNTAwO1xuICAgICAgICBpZihib3VnaHQgPj0gMTEgJiYgYm91Z2h0IDwgMTYpIHJldHVybiAxMDAwO1xuICAgICAgICBpZihib3VnaHQgPj0gMTYgJiYgYm91Z2h0IDwgMjEpIHJldHVybiAyMDAwO1xuICAgICAgICBpZihib3VnaHQgPj0gMjEgJiYgYm91Z2h0IDwgMjYpIHJldHVybiA0MDAwO1xuICAgICAgICBpZihib3VnaHQgPj0gMjYpIHJldHVybiA4MDAwO1xuICAgIH1cblxuICAgIGNoZWNrX2dhbWVfdGlja2V0KCl7XG4gICAgICAgIGxldCBnYW1lX3RpY2tldCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmdhbWVfdGlja2V0cy5jb2luc19yZW1haW5pbmcgLT0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnByaWNlO1xuICAgICAgICBpZih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmdhbWVfdGlja2V0cy5jb2luc19yZW1haW5pbmcgPD0gMCl7XG4gICAgICAgICAgICBnYW1lX3RpY2tldCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmdhbWVfdGlja2V0cy50aWNrZXRzX2JvdWdodCArPSAxO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5nYW1lX3RpY2tldHMuY29pbnNfcmVtYWluaW5nICs9IHRoaXMudXBkYXRlX2dhbWVfdGlja2V0X3N0ZXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGdhbWVfdGlja2V0KXtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwiZ2FtZV90aWNrZXRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMub3Blbl9pbnZlbnRvcnlfdmlldy5iaW5kKHRoaXMsIHRydWUpfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB0aGlzLm9wZW5fYnV5X3NlbGVjdCgpO1xuICAgIH1cblxuICAgIHNlbGxfb2xkX2VxdWlwKG9sZF9pdGVtOkl0ZW0pe1xuICAgICAgICBsZXQgbXNnX2tleSA9IG9sZF9pdGVtLnJhcmVfaXRlbSA/IFwiYWZ0ZXJfc2VsbF9hcnRpZmFjdFwiIDogXCJhZnRlcl9zZWxsX25vcm1hbFwiO1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhtc2dfa2V5LCB0cnVlKTtcblxuICAgICAgICBpZihvbGRfaXRlbS5yYXJlX2l0ZW0pe1xuICAgICAgICAgICAgbGV0IHNob3BfbGlzdCA9IHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdDtcbiAgICAgICAgICAgIGxldCBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPHNob3BfbGlzdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoc2hvcF9saXN0W2ldLmtleV9uYW1lID0gb2xkX2l0ZW0ua2V5X25hbWUpe1xuICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3RbaV0ucXVhbnRpdHkgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighZXhpc3RzKXtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3QucHVzaCh7a2V5X25hbWU6IG9sZF9pdGVtLmtleV9uYW1lLCBxdWFudGl0eTogMX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpPTA7IGk8dGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV0ua2V5X25hbWUgPT09IG9sZF9pdGVtLmtleV9uYW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2VsbF9wcmljZSA9IHRoaXMub2xkX2l0ZW0uYnJva2VuID8gdGhpcy5vbGRfaXRlbS5wcmljZSpTRUxMX0JST0tFTl9NVUxUSVBMSUVSIDogdGhpcy5vbGRfaXRlbS5wcmljZSpTRUxMX01VTFRJUExJRVI7XG5cbiAgICAgICAgdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5jb2lucyArPSBzZWxsX3ByaWNlIHwgMDtcbiAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZW50ZXI6IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKX0pO1xuICAgIH1cblxuICAgIGVxdWlwX25ld19pdGVtKCl7XG4gICAgICAgIGxldCBpdGVtX3R5cGUgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0udHlwZTtcbiAgICAgICAgbGV0IGVxX3Nsb3RzID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuZXF1aXBfc2xvdHM7XG5cbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJlcXVpcF9jb21wbGltZW50XCIsIHRydWUpO1xuXG4gICAgICAgIHRoaXMub2xkX2l0ZW0gPSBudWxsO1xuICAgICAgICBzd2l0Y2goaXRlbV90eXBlKXtcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5XRUFQT05TOlxuICAgICAgICAgICAgICAgIGlmKGVxX3Nsb3RzLndlYXBvbikgdGhpcy5vbGRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZXFfc2xvdHMud2VhcG9uLmtleV9uYW1lXTtcbiAgICAgICAgICAgICAgICBicmVhazsgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkFSTU9SOlxuICAgICAgICAgICAgICAgIGlmKGVxX3Nsb3RzLmJvZHkpIHRoaXMub2xkX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLmJvZHkua2V5X25hbWVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkNIRVNUX1BST1RFQ1RPUjpcbiAgICAgICAgICAgICAgICBpZihlcV9zbG90cy5jaGVzdCkgdGhpcy5vbGRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZXFfc2xvdHMuY2hlc3Qua2V5X25hbWVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkhFQURfUFJPVEVDVE9SOlxuICAgICAgICAgICAgICAgIGlmKGVxX3Nsb3RzLmhlYWQpIHRoaXMub2xkX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLmhlYWQua2V5X25hbWVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLlJJTkc6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMucmluZykgdGhpcy5vbGRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZXFfc2xvdHMucmluZy5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuTEVHX1BST1RFQ1RPUjpcbiAgICAgICAgICAgICAgICBpZihlcV9zbG90cy5ib290cykgdGhpcy5vbGRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZXFfc2xvdHMuYm9vdHMua2V5X25hbWVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLlVOREVSV0VBUjpcbiAgICAgICAgICAgICAgICBpZihlcV9zbG90cy51bmRlcndlYXIpIHRoaXMub2xkX2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLnVuZGVyd2Vhci5rZXlfbmFtZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLm9sZF9pdGVtKXtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYoaXRtLmtleV9uYW1lID09PSB0aGlzLm9sZF9pdGVtLmtleV9uYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIudW5lcXVpcF9pdGVtKGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGk9dGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoLTE7IGk+MDsgaS0tKXtcbiAgICAgICAgICAgIGxldCBpdG0gPSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtc1tpXTtcbiAgICAgICAgICAgIGlmKGl0bS5rZXlfbmFtZSA9PT0gdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5lcXVpcF9pdGVtKGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIXRoaXMub2xkX2l0ZW0pe1xuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxldCBhZnRlcl9jb21wbGltZW50ID0gKCkgPT57XG4gICAgICAgICAgICAgICAgbGV0IHNlbGxfcHJpY2UgPSB0aGlzLm9sZF9pdGVtLmJyb2tlbiA/IHRoaXMub2xkX2l0ZW0ucHJpY2UqU0VMTF9CUk9LRU5fTVVMVElQTElFUiA6IHRoaXMub2xkX2l0ZW0ucHJpY2UqU0VMTF9NVUxUSVBMSUVSO1xuICAgIFxuICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwic2VsbF9jdXJyZW50XCIpO1xuICAgICAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgdGhpcy5vbGRfaXRlbS5uYW1lLCBTdHJpbmcoc2VsbF9wcmljZSB8IDApKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMueWVzbm9fYWN0aW9uLm9wZW5fbWVudSh7eWVzOiB0aGlzLnNlbGxfb2xkX2VxdWlwLmJpbmQodGhpcywgdGhpcy5vbGRfaXRlbSksIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtc2dfa2V5ID0gdGhpcy5vbGRfaXRlbS5yYXJlX2l0ZW0gPyBcImRlY2xpbmVfc2VsbF9hcnRpZmFjdFwiIDogXCJkZWNsaW5lX3NlbGxfbm9ybWFsXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKG1zZ19rZXksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5jaGVja19nYW1lX3RpY2tldC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKX0pO1xuICAgICAgICAgICAgICAgIH19LHt4OiBZRVNOT19YLCB5OiBZRVNOT19ZfSk7XG4gICAgICAgICAgICB9IFxuICAgIFxuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IGFmdGVyX2NvbXBsaW1lbnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBlbnRlcjogYWZ0ZXJfY29tcGxpbWVudC5iaW5kKHRoaXMpfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbl9wdXJjaGFzZV9zdWNjZXNzKGVxdWlwX2Fzazpib29sZWFuPWZhbHNlLCBnYW1lX3RpY2tldDpib29sZWFuPWZhbHNlKXtcbiAgICAgICAgbGV0IHF1YW50aXR5ID0gMTtcbiAgICAgICAgbGV0IGtleV9uYW1lID0gZ2FtZV90aWNrZXQgPyBcImdhbWVfdGlja2V0XCIgOiB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWU7XG4gICAgICAgIGxldCBpdGVtX3RvX2FkZCA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3Rba2V5X25hbWVdO1xuXG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4gJiYgIWdhbWVfdGlja2V0KSBxdWFudGl0eSA9IHRoaXMucXVhbnRfd2luLmNob3Nlbl9xdWFudGl0eTtcblxuICAgICAgICBpZih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zIC0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnByaWNlKnF1YW50aXR5IDwgMCAmJiAhZ2FtZV90aWNrZXQpe1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJub3RfZW5vdWdoX2NvaW5zXCIsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuXG4gICAgICAgICAgICBpZih0aGlzLnF1YW50X3dpbi5pc19vcGVuKSB0aGlzLnF1YW50X3dpbi5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbnRlcjogdGhpcy5vcGVuX2J1eV9zZWxlY3QuYmluZCh0aGlzKX0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImFmdGVyX2J1eVwiLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZih0aGlzLnF1YW50X3dpbi5pc19vcGVuKSB0aGlzLnF1YW50X3dpbi5jbG9zZSgpO1xuICAgICAgICAgICAgaWYoIWdhbWVfdGlja2V0KSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zIC09ICB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucHJpY2UqcXVhbnRpdHk7XG5cbiAgICAgICAgICAgIGxldCBleGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYoaXRtLmtleV9uYW1lID09PSBpdGVtX3RvX2FkZC5rZXlfbmFtZSAmJiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2l0ZW1fdG9fYWRkLmtleV9uYW1lXS5jYXJyeV91cF90b18zMCl7XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zW2ldLnF1YW50aXR5ICs9IHF1YW50aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG5ld19pbmRleCA9IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgIGlmKCFleGlzdHMpe1xuICAgICAgICAgICAgICAgIGlmKGl0ZW1fdG9fYWRkLmVxdWlwYWJsZSkgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMucHVzaCh7a2V5X25hbWU6IGl0ZW1fdG9fYWRkLmtleV9uYW1lLCBxdWFudGl0eTogMSwgZXF1aXBwZWQ6IGZhbHNlLCBpbmRleDogbmV3X2luZGV4fSk7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5wdXNoKHtrZXlfbmFtZTogaXRlbV90b19hZGQua2V5X25hbWUsIHF1YW50aXR5OiBxdWFudGl0eSwgaW5kZXg6IG5ld19pbmRleH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZighZ2FtZV90aWNrZXQpe1xuICAgICAgICAgICAgICAgIGxldCBzaG9wX2xpc3QgPSB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3Q7XG5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDsgaTxzaG9wX2xpc3QubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBpZihzaG9wX2xpc3RbaV0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSAmJiBzaG9wX2xpc3RbaV0ucXVhbnRpdHkgIT09IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdFtpXS5xdWFudGl0eSAtPSBxdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5zZXRfaXRlbV9saXN0cygpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbV9saXN0ID0gdGhpcy5pc19hcnRpZmFjdHNfbWVudSA/IHRoaXMucGFyZW50LmFydGlmYWN0X2xpc3QgOiB0aGlzLnBhcmVudC5ub3JtYWxfaXRlbV9saXN0O1xuICAgICAgICAgICAgICAgIHRoaXMuYnV5X3NlbGVjdC5pdGVtcyA9IHRoaXMuaXRlbV9saXN0O1xuXG4gICAgICAgICAgICAgICAgaWYoZXF1aXBfYXNrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVxdWlwX25vdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwiZXF1aXBfbm93XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQodGV4dCwgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllc25vX2FjdGlvbi5vcGVuX21lbnUoe3llczogdGhpcy5lcXVpcF9uZXdfaXRlbS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm86IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7eDogWUVTTk9fWCwgeTogWUVTTk9fWX0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IGVxdWlwX25vdy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXI6IGVxdWlwX25vdy5iaW5kKHRoaXMpfSk7ICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMuY2hlY2tfZ2FtZV90aWNrZXQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVyOiB0aGlzLmNoZWNrX2dhbWVfdGlja2V0LmJpbmQodGhpcyl9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCB7ZXNjOiB0aGlzLm9wZW5fYnV5X3NlbGVjdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5vcGVuX2J1eV9zZWxlY3QuYmluZCh0aGlzKX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgIFxuICAgIH1cblxuICAgIG9uX2J1eV9lcXVpcF9zZWxlY3QoKXtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSB0aGlzLmNoYXJfZGlzcGxheS5saW5lc1t0aGlzLmNoYXJfZGlzcGxheS5jdXJyZW50X2xpbmVdW3RoaXMuY2hhcl9kaXNwbGF5LnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gdGhpcy5jaGFyX2Rpc3BsYXkuc2VsZWN0ZWRfaW5kZXg7XG5cbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXMubGVuZ3RoID09PSBNQVhfSU5WRU5UT1JZX1NJWkUpe1xuICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLm5wY19kaWFsb2cuZ2V0X21lc3NhZ2UoXCJpbnZlbnRvcnlfZnVsbFwiKTtcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYoIXRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5lcXVpcGFibGVfY2hhcnMuaW5jbHVkZXModGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIua2V5X25hbWUpKXtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5nZXRfbWVzc2FnZShcImNhbnRfZXF1aXBcIik7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5yZXBsYWNlX3RleHQodGV4dCwgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIubmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMueWVzbm9fYWN0aW9uLm9wZW5fbWVudSh7eWVzOiB0aGlzLm9uX3B1cmNoYXNlX3N1Y2Nlc3MuYmluZCh0aGlzKSwgbm86IHRoaXMub3Blbl9lcXVpcF9jb21wYXJlLmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgICAgIHt4OiBZRVNOT19YLCB5OiBZRVNOT19ZfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMub25fcHVyY2hhc2Vfc3VjY2Vzcyh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2J1eV9pdGVtX3NlbGVjdChnYW1lX3RpY2tldDpib29sZWFuPWZhbHNlKXtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSB0aGlzLmNoYXJfZGlzcGxheS5saW5lc1t0aGlzLmNoYXJfZGlzcGxheS5jdXJyZW50X2xpbmVdW3RoaXMuY2hhcl9kaXNwbGF5LnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gdGhpcy5jaGFyX2Rpc3BsYXkuc2VsZWN0ZWRfaW5kZXg7XG4gICAgICAgIGxldCBoYXZlX3F1YW50ID0gMDtcblxuICAgICAgICBmb3IobGV0IGk9MDsgaTx0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV07XG4gICAgICAgICAgICBpZihpdG0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSl7XG4gICAgICAgICAgICAgICAgaGF2ZV9xdWFudCA9IGl0bS5xdWFudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmxlbmd0aCA9PT0gTUFYX0lOVkVOVE9SWV9TSVpFKXtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKFwiaW52ZW50b3J5X2Z1bGxcIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKHRleHQsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVsc2UgaWYoaGF2ZV9xdWFudCA9PT0gTUFYX1NUQUNLX1NJWkUpe1xuICAgICAgICAgICAgbGV0IGl0ZW1fbmFtZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5uYW1lO1xuXG4gICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5nZXRfbWVzc2FnZShcInN0YWNrX2Z1bGxcIik7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLnJlcGxhY2VfdGV4dCh0ZXh0LCB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5uYW1lLCBpdGVtX25hbWUpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYoZ2FtZV90aWNrZXQpIHRoaXMub25fcHVyY2hhc2Vfc3VjY2VzcyhmYWxzZSwgZ2FtZV90aWNrZXQpO1xuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zIC0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnByaWNlIDwgMCAmJiAhZ2FtZV90aWNrZXQpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcIm5vdF9lbm91Z2hfY29pbnNcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCB7ZXNjOiB0aGlzLm9wZW5fYnV5X3NlbGVjdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5vcGVuX2J1eV9zZWxlY3QuYmluZCh0aGlzKX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImJ1eV9xdWFudGl0eVwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3BfaXRlbXMgPSB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaG9wX2l0ZW1fbWF0Y2ggPSBzaG9wX2l0ZW1zLmZpbHRlcihpID0+IHsgcmV0dXJuIChpLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpOyB9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3BfaXRlbSA9IHtrZXlfbmFtZTogc2hvcF9pdGVtX21hdGNoLmtleV9uYW1lLCBxdWFudGl0eTogc2hvcF9pdGVtX21hdGNoLnF1YW50aXR5ID09PSAtMSA/IDMwIDogc2hvcF9pdGVtX21hdGNoLnF1YW50aXR5fTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJfaXRlbV9tYXRjaCA9IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmZpbHRlcihpID0+IHsgcmV0dXJuIChpLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJfaXRlbSA9IGNoYXJfaXRlbV9tYXRjaC5sZW5ndGggIT09IDAgPyBjaGFyX2l0ZW1fbWF0Y2hbMF0gOiBudWxsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5xdWFudF93aW4uaXNfb3BlbikgdGhpcy5xdWFudF93aW4ub3BlbihzaG9wX2l0ZW0sIGNoYXJfaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKHRydWUsIGZhbHNlLCB0cnVlLCBmYWxzZSwge3JpZ2h0OiB0aGlzLnF1YW50X3dpbi5pbmNyZWFzZV9hbW91bnQuYmluZCh0aGlzLnF1YW50X3dpbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLnF1YW50X3dpbi5kZWNyZWFzZV9hbW91bnQuYmluZCh0aGlzLnF1YW50X3dpbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBlc2M6IHRoaXMub3Blbl9pbnZlbnRvcnlfdmlldy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMub25fcHVyY2hhc2Vfc3VjY2Vzcy5iaW5kKHRoaXMpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIElURU1fQ09VTlRFUl9MT09QX1RJTUUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uX2NhbmNlbF9jaGFyX3NlbGVjdCgpe1xuICAgICAgICBpZih0aGlzLmludl93aW4uaXNfb3BlbikgdGhpcy5pbnZfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuZXFfY29tcGFyZS5pc19vcGVuKSB0aGlzLmVxX2NvbXBhcmUuY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5jaGFyX2Rpc3BsYXkuaXNfb3Blbil0aGlzLmNoYXJfZGlzcGxheS5jbG9zZSgpO1xuICAgICAgICB0aGlzLm9wZW5fYnV5X3NlbGVjdCgpO1xuICAgIH1cblxuICAgIG9uX2NhbmNlbF9nYW1lX3RpY2tldCgpe1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcImdhbWVfdGlja2V0X2RlY2xpbmVcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCB7ZXNjOiB0aGlzLm9uX2NhbmNlbF9jaGFyX3NlbGVjdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZW50ZXI6IHRoaXMub25fY2FuY2VsX2NoYXJfc2VsZWN0LmJpbmQodGhpcyl9KTtcbiAgICB9XG5cbiAgICBvcGVuX2VxdWlwX2NvbXBhcmUoKXtcbiAgICAgICAgdGhpcy5idXlfc2VsZWN0X3BvcyA9IHtwYWdlOiB0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlLFxuICAgICAgICAgICAgaW5kZXg6IHRoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleCxcbiAgICAgICAgICAgIGlzX2xhc3Q6IHRoaXMuYnV5X3NlbGVjdC5pc19sYXN0KHRoaXMuYnV5X3NlbGVjdC5jdXJyZW50X3BhZ2UsIHRoaXMuYnV5X3NlbGVjdC5zZWxlY3RlZF9pbmRleCl9O1xuICAgICAgICBpZih0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuYnV5X3NlbGVjdC5pc19vcGVuKSB0aGlzLmJ1eV9zZWxlY3QuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJjaGFyYWN0ZXJfc2VsZWN0XCIpO1xuXG4gICAgICAgIGxldCBjaGFyX2tleSA9ICh0aGlzLnNlbGVjdGVkX2NoYXJhY3RlcikgPyB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5rZXlfbmFtZSA6IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1swXS5rZXlfbmFtZTtcbiAgICAgICAgaWYoIXRoaXMuY2hhcl9kaXNwbGF5LmlzX29wZW4pIHRoaXMuY2hhcl9kaXNwbGF5Lm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcbiAgICAgICAgaWYoIXRoaXMuZXFfY29tcGFyZS5pc19vcGVuKSB0aGlzLmVxX2NvbXBhcmUub3BlbihjaGFyX2tleSwgdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbCh0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZSwge3JpZ2h0OiB0aGlzLmNoYXJfZGlzcGxheS5uZXh0X2NoYXIuYmluZCh0aGlzLmNoYXJfZGlzcGxheSksXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmNoYXJfZGlzcGxheS5wcmV2aW91c19jaGFyLmJpbmQodGhpcy5jaGFyX2Rpc3BsYXkpLFxuICAgICAgICAgICAgdXA6IHRoaXMuY2hhcl9kaXNwbGF5LnByZXZpb3VzX2xpbmUuYmluZCh0aGlzLmNoYXJfZGlzcGxheSksXG4gICAgICAgICAgICBkb3duOiB0aGlzLmNoYXJfZGlzcGxheS5uZXh0X2xpbmUuYmluZCh0aGlzLmNoYXJfZGlzcGxheSksXG4gICAgICAgICAgICBlc2M6IHRoaXMub25fY2FuY2VsX2NoYXJfc2VsZWN0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbnRlcjogdGhpcy5vbl9idXlfZXF1aXBfc2VsZWN0LmJpbmQodGhpcyl9KTtcbiAgICB9XG5cbiAgICBvcGVuX2ludmVudG9yeV92aWV3KGdhbWVfdGlja2V0OmJvb2xlYW49ZmFsc2Upe1xuICAgICAgICBpZighZ2FtZV90aWNrZXQgJiYgdGhpcy5idXlfc2VsZWN0LmlzX29wZW4pe1xuICAgICAgICAgICAgdGhpcy5idXlfc2VsZWN0X3BvcyA9IHtcbiAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmJ1eV9zZWxlY3Quc2VsZWN0ZWRfaW5kZXgsXG4gICAgICAgICAgICAgICAgaXNfbGFzdDogdGhpcy5idXlfc2VsZWN0LmlzX2xhc3QodGhpcy5idXlfc2VsZWN0LmN1cnJlbnRfcGFnZSwgdGhpcy5idXlfc2VsZWN0LnNlbGVjdGVkX2luZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYodGhpcy5pdGVtX2Rlc2Nfd2luLm9wZW4pIHRoaXMuaXRlbV9kZXNjX3dpbi5jbG9zZSgpO1xuICAgICAgICBpZih0aGlzLmJ1eV9zZWxlY3QuaXNfb3BlbikgdGhpcy5idXlfc2VsZWN0LmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuZXFfY29tcGFyZS5pc19vcGVuKSB0aGlzLmVxX2NvbXBhcmUuY2xvc2UoKTtcblxuICAgICAgICBpZihnYW1lX3RpY2tldCkgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJnYW1lX3RpY2tldF9zZWxlY3RcIik7XG4gICAgICAgIGVsc2UgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJjaGFyYWN0ZXJfc2VsZWN0XCIpO1xuXG4gICAgICAgIGxldCB0aGlzX2l0ZW0gPSBnYW1lX3RpY2tldCA/IFwiZ2FtZV90aWNrZXRcIiA6IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZTtcblxuICAgICAgICBpZighdGhpcy5jaGFyX2Rpc3BsYXkuaXNfb3BlbikgdGhpcy5jaGFyX2Rpc3BsYXkub3Blbih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICBlbHNlIHRoaXMuY2hhcl9kaXNwbGF5LnNlbGVjdF9jaGFyKHRoaXMuc2VsZWN0ZWRfY2hhcl9pbmRleCk7XG5cbiAgICAgICAgbGV0IGNoYXJfa2V5ID0gKHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyKSA/IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLmtleV9uYW1lIDogdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzWzBdLmtleV9uYW1lO1xuICAgICAgICBcbiAgICAgICAgaWYodGhpcy5pbnZfd2luLmlzX29wZW4pIHRoaXMuaW52X3dpbi5jbG9zZSgpO1xuICAgICAgICB0aGlzLmludl93aW4ub3BlbihjaGFyX2tleSwgdGhpc19pdGVtLCB0cnVlKTsgXG5cbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2wodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHtyaWdodDogdGhpcy5jaGFyX2Rpc3BsYXkubmV4dF9jaGFyLmJpbmQodGhpcy5jaGFyX2Rpc3BsYXkpLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5jaGFyX2Rpc3BsYXkucHJldmlvdXNfY2hhci5iaW5kKHRoaXMuY2hhcl9kaXNwbGF5KSxcbiAgICAgICAgICAgIHVwOiB0aGlzLmNoYXJfZGlzcGxheS5wcmV2aW91c19saW5lLmJpbmQodGhpcy5jaGFyX2Rpc3BsYXkpLFxuICAgICAgICAgICAgZG93bjogdGhpcy5jaGFyX2Rpc3BsYXkubmV4dF9saW5lLmJpbmQodGhpcy5jaGFyX2Rpc3BsYXkpLFxuICAgICAgICAgICAgZXNjOiAoZ2FtZV90aWNrZXQgPyB0aGlzLm9uX2NhbmNlbF9nYW1lX3RpY2tldC5iaW5kKHRoaXMpOiB0aGlzLm9uX2NhbmNlbF9jaGFyX3NlbGVjdC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIGVudGVyOiB0aGlzLm9uX2J1eV9pdGVtX3NlbGVjdC5iaW5kKHRoaXMsIGdhbWVfdGlja2V0KX0pO1xuICAgIH1cbiAgICBcbiAgICBvbl9idXlfc2VsZWN0KCl7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IHRoaXMuYnV5X3NlbGVjdC5wYWdlc1t0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlXVt0aGlzLmJ1eV9zZWxlY3Quc2VsZWN0ZWRfaW5kZXhdO1xuXG4gICAgICAgIGlmKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5lcXVpcGFibGUpIHRoaXMub3Blbl9lcXVpcF9jb21wYXJlKCk7XG4gICAgICAgIGVsc2UgdGhpcy5vcGVuX2ludmVudG9yeV92aWV3KCk7XG4gICAgfVxuXG4gICAgb3Blbl9idXlfc2VsZWN0KG1zZ19rZXk6c3RyaW5nPVwic2VsbF9mb2xsb3dfdXBcIil7XG4gICAgICAgIGlmKE9iamVjdC5rZXlzKHRoaXMuaXRlbV9saXN0KS5sZW5ndGggPT09IDApIHRoaXMuY2xvc2VfbWVudSgpO1xuICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYodGhpcy5idXlfc2VsZWN0X3Bvcy5pc19sYXN0KXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmJ1eV9zZWxlY3RfcG9zLmluZGV4ID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfc2VsZWN0X3Bvcy5wYWdlIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3NlbGVjdF9wb3MuaW5kZXggPSBNQVhfSVRFTVNfUEVSX1BBR0UtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmJ1eV9zZWxlY3RfcG9zLmluZGV4IC09IDE7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhtc2dfa2V5KTtcbiAgICAgICAgICAgIGlmKHRoaXMuY2hhcl9kaXNwbGF5LmlzX29wZW4pIHRoaXMuY2hhcl9kaXNwbGF5LmNsb3NlKCk7XG4gICAgICAgICAgICBpZih0aGlzLmludl93aW4uaXNfb3BlbikgdGhpcy5pbnZfd2luLmNsb3NlKCk7XG4gICAgICAgICAgICBpZih0aGlzLmVxX2NvbXBhcmUuaXNfb3BlbikgdGhpcy5lcV9jb21wYXJlLmNsb3NlKCk7XG4gICAgXG4gICAgICAgICAgICBpZighdGhpcy5idXlfc2VsZWN0LmlzX29wZW4pIHRoaXMuYnV5X3NlbGVjdC5vcGVuKHRoaXMuaXRlbV9saXN0LCB0aGlzLmJ1eV9zZWxlY3RfcG9zLmluZGV4LCB0aGlzLmJ1eV9zZWxlY3RfcG9zLnBhZ2UpO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIucmVzZXQoKTtcbiAgICBcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IHRoaXMuYnV5X3NlbGVjdC5wYWdlc1t0aGlzLmJ1eV9zZWxlY3QuY3VycmVudF9wYWdlXVt0aGlzLmJ1eV9zZWxlY3Quc2VsZWN0ZWRfaW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX2l0ZW1faW5mbyh0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcbiAgICBcbiAgICAgICAgICAgIGlmKCF0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLnNob3coKTtcbiAgICAgICAgICAgIGlmKCF0aGlzLml0ZW1fcHJpY2Vfd2luLm9wZW4pIHRoaXMuaXRlbV9wcmljZV93aW4uc2hvdygpO1xuICAgICAgICAgICAgaWYoIXRoaXMueW91cl9jb2luc193aW4ub3BlbikgdGhpcy55b3VyX2NvaW5zX3dpbi5zaG93KCk7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbCh0cnVlLCB0cnVlLCB0cnVlLCBmYWxzZSwge3JpZ2h0OiB0aGlzLmJ1eV9zZWxlY3QubmV4dF9pdGVtLmJpbmQodGhpcy5idXlfc2VsZWN0KSxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmJ1eV9zZWxlY3QucHJldmlvdXNfaXRlbS5iaW5kKHRoaXMuYnV5X3NlbGVjdCksXG4gICAgICAgICAgICAgICAgdXA6IHRoaXMuYnV5X3NlbGVjdC5wcmV2aW91c19wYWdlLmJpbmQodGhpcy5idXlfc2VsZWN0KSxcbiAgICAgICAgICAgICAgICBkb3duOiB0aGlzLmJ1eV9zZWxlY3QubmV4dF9wYWdlLmJpbmQodGhpcy5idXlfc2VsZWN0KSxcbiAgICAgICAgICAgICAgICBlc2M6IHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGVudGVyOiB0aGlzLm9uX2J1eV9zZWxlY3QuYmluZCh0aGlzKX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KGlzX2FydGlmYWN0c19tZW51OmJvb2xlYW4pe1xuICAgICAgICB0aGlzLmlzX2FydGlmYWN0c19tZW51ID0gaXNfYXJ0aWZhY3RzX21lbnU7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pdGVtX2xpc3QgPSB0aGlzLmlzX2FydGlmYWN0c19tZW51ID8gdGhpcy5wYXJlbnQuYXJ0aWZhY3RfbGlzdCA6IHRoaXMucGFyZW50Lm5vcm1hbF9pdGVtX2xpc3Q7XG5cbiAgICAgICAgaWYoaXNfYXJ0aWZhY3RzX21lbnUpe1xuICAgICAgICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5pdGVtX2xpc3QpLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJub19hcnRpZmFjdHNcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMuY2xvc2VfbWVudS5iaW5kKHRoaXMpfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwiYXJ0aWZhY3RzX21lbnVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vcGVuX2J1eV9zZWxlY3QuYmluZCh0aGlzLCBcImJ1eV9zZWxlY3RcIiksXG4gICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMub3Blbl9idXlfc2VsZWN0LmJpbmQodGhpcywgXCJidXlfc2VsZWN0XCIpfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB0aGlzLm9wZW5fYnV5X3NlbGVjdChcImJ1eV9zZWxlY3RcIik7XG4gICAgfVxuXG4gICAgY2xvc2VfbWVudSgpe1xuICAgICAgICBpZih0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuaXRlbV9wcmljZV93aW4ub3BlbikgdGhpcy5pdGVtX3ByaWNlX3dpbi5jbG9zZSgpO1xuICAgICAgICBpZih0aGlzLnlvdXJfY29pbnNfd2luLm9wZW4pIHRoaXMueW91cl9jb2luc193aW4uY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5jaGFyX2Rpc3BsYXkuaXNfb3BlbikgdGhpcy5jaGFyX2Rpc3BsYXkuY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5pbnZfd2luLmlzX29wZW4pIHRoaXMuaW52X3dpbi5jbG9zZSgpO1xuICAgICAgICBpZih0aGlzLnllc25vX2FjdGlvbi5pc19vcGVuKSB0aGlzLnllc25vX2FjdGlvbi5jbG9zZV9tZW51KCk7XG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuYnV5X3NlbGVjdC5pc19vcGVuKSB0aGlzLmJ1eV9zZWxlY3QuY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5lcV9jb21wYXJlLmlzX29wZW4pIHRoaXMuZXFfY29tcGFyZS5jbG9zZSgpO1xuXG4gICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLmhpZGUoKTtcblxuICAgICAgICB0aGlzLmlzX2FydGlmYWN0c19tZW51ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pdGVtX2xpc3QgPSB7fTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbGRfaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnV5X3NlbGVjdF9wb3MgPSB7cGFnZTogMCwgaW5kZXg6IDAsIGlzX2xhc3Q6IGZhbHNlfTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICB0aGlzLnBhcmVudC5ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQub3Blbl9ob3Jpem9udGFsX21lbnUoKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tIFwiLi4vLi4vR29sZGVuU3VuXCI7XG5pbXBvcnQgeyBJdGVtU2xvdCwgTWFpbkNoYXIgfSBmcm9tIFwiLi4vLi4vTWFpbkNoYXJcIjtcbmltcG9ydCB7IFNob3BNZW51IH0gZnJvbSBcIi4uLy4uL21haW5fbWVudXMvU2hvcE1lbnVcIjtcbmltcG9ydCB7IENvbnRyb2xNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0NvbnRyb2xNYW5hZ2VyXCI7XG5pbXBvcnQgeyBXaW5kb3cgfSBmcm9tIFwiLi4vLi4vV2luZG93XCI7XG5pbXBvcnQgeyBZZXNOb01lbnUgfSBmcm9tIFwiLi4vWWVzTm9NZW51XCI7XG5pbXBvcnQgeyBJbnZlbnRvcnlXaW5kb3cgfSBmcm9tIFwiLi9JbnZlbnRvcnlXaW5kb3dcIjtcbmltcG9ydCB7IFNob3BDaGFyRGlzcGxheSB9IGZyb20gXCIuL1Nob3BDaGFyRGlzcGxheVwiO1xuaW1wb3J0IHsgU2hvcEl0ZW1RdWFudGl0eVdpbmRvdyB9IGZyb20gXCIuL1Nob3BJdGVtUXVhbnRpdHlXaW5kb3dcIjtcbmltcG9ydCB7IFNob3BrZWVwRGlhbG9nIH0gZnJvbSBcIi4vU2hvcGtlZXBEaWFsb2dcIjtcblxuY29uc3QgU0VMTF9NVUxUSVBMSUVSID0gMy80O1xuY29uc3QgUkVQQUlSX01VTFRJUExJRVIgPSAxLzQ7XG5jb25zdCBTRUxMX0JST0tFTl9NVUxUSVBMSUVSID0gU0VMTF9NVUxUSVBMSUVSIC0gUkVQQUlSX01VTFRJUExJRVI7XG5cbmNvbnN0IFJFUEFJUl9XQUlUX1RJTUUgPSBQaGFzZXIuVGltZXIuU0VDT05EKjY7XG5cbmNvbnN0IFlFU05PX1ggPSA1NjtcbmNvbnN0IFlFU05PX1kgPSA0MDtcblxuZXhwb3J0IGNsYXNzIFNlbGxSZXBhaXJNZW51e1xuICAgIHB1YmxpYyBnYW1lOlBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOkdvbGRlblN1bjtcbiAgICBwdWJsaWMgcGFyZW50OlNob3BNZW51O1xuICAgIHB1YmxpYyBjb250cm9sX21hbmFnZXI6Q29udHJvbE1hbmFnZXI7XG5cbiAgICBwdWJsaWMgaXRlbV9kZXNjX3dpbjpXaW5kb3c7XG4gICAgcHVibGljIHlvdXJfY29pbnNfd2luOldpbmRvdztcbiAgICBwdWJsaWMgaXRlbV9wcmljZV93aW46V2luZG93O1xuICAgIHB1YmxpYyBjaGFyX2Rpc3BsYXk6U2hvcENoYXJEaXNwbGF5O1xuICAgIHB1YmxpYyBpbnZfd2luOkludmVudG9yeVdpbmRvdztcbiAgICBwdWJsaWMgcXVhbnRfd2luOlNob3BJdGVtUXVhbnRpdHlXaW5kb3c7XG4gICAgcHVibGljIHllc25vX2FjdGlvbjpZZXNOb01lbnU7XG4gICAgcHVibGljIG5wY19kaWFsb2c6U2hvcGtlZXBEaWFsb2c7XG5cbiAgICBwdWJsaWMgaXNfcmVwYWlyX21lbnU6Ym9vbGVhbjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfaXRlbTpJdGVtU2xvdDtcbiAgICBwdWJsaWMgaW52X3dpbl9wb3M6e2xpbmU6bnVtYmVyLCBjb2w6bnVtYmVyfTtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfY2hhcmFjdGVyOk1haW5DaGFyO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyX2luZGV4Om51bWJlcjtcbiAgICBwdWJsaWMgYWN0aXZlOmJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBkYXRhLCBwYXJlbnQpe1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIgPSB0aGlzLnBhcmVudC5jb250cm9sX21hbmFnZXI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLml0ZW1fZGVzY193aW4gPSB0aGlzLnBhcmVudC5pdGVtX2Rlc2Nfd2luO1xuICAgICAgICB0aGlzLnlvdXJfY29pbnNfd2luID0gdGhpcy5wYXJlbnQueW91cl9jb2luc193aW47XG4gICAgICAgIHRoaXMuaXRlbV9wcmljZV93aW4gPSB0aGlzLnBhcmVudC5pdGVtX3ByaWNlX3dpbjtcbiAgICAgICAgdGhpcy5jaGFyX2Rpc3BsYXkgPSB0aGlzLnBhcmVudC5jaGFyX2Rpc3BsYXk7XG4gICAgICAgIHRoaXMuaW52X3dpbiA9IHRoaXMucGFyZW50Lmludl93aW47XG4gICAgICAgIHRoaXMucXVhbnRfd2luID0gIHRoaXMucGFyZW50LnF1YW50X3dpbjtcbiAgICAgICAgdGhpcy55ZXNub19hY3Rpb24gPSB0aGlzLnBhcmVudC55ZXNub19hY3Rpb247XG4gICAgICAgIHRoaXMubnBjX2RpYWxvZyA9IHRoaXMucGFyZW50Lm5wY19kaWFsb2c7XG5cbiAgICAgICAgdGhpcy5pc19yZXBhaXJfbWVudSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuaW52X3dpbl9wb3MgPSB7bGluZTogMCwgY29sOiAwfTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9uX2l0ZW1fcmVwYWlyKCl7XG4gICAgICAgIGlmKHRoaXMubnBjX2RpYWxvZy5kaWFsb2dfbWFuYWdlci53aW5kb3cub3Blbil7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cuZGlhbG9nX21hbmFnZXIud2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICBsZXQgY3J5c3RhbCA9IHRoaXMubnBjX2RpYWxvZy5kaWFsb2dfbWFuYWdlci5kaWFsb2dfY3J5c3RhbDtcbiAgICAgICAgICAgIGlmKGNyeXN0YWwudmlzaWJsZSA9IHRydWUpIGNyeXN0YWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnZfd2luLmtpbGxfaXRlbV9hdCh0aGlzLmludl93aW5fcG9zLmxpbmUsdGhpcy5pbnZfd2luX3Bvcy5jb2wpO1xuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuXG4gICAgICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUkVQQUlSX1dBSVRfVElNRSwgKCk9PntcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbS5icm9rZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuY29pbnMgLT0gKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSpSRVBBSVJfTVVMVElQTElFUiB8IDApO1xuXG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcInJlcGFpcl9kb25lXCIsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcblxuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwicmVwYWlyX2ZvbGxvd191cFwiLCB0aGlzLmludl93aW5fcG9zKSxcbiAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJyZXBhaXJfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpfSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIG9uX3JlcGFpcl9pdGVtX3NlbGVjdCgpe1xuICAgICAgICB0aGlzLmludl93aW5fcG9zID0gdGhpcy5pbnZfd2luLmN1cnNvcl9wb3M7XG5cbiAgICAgICAgaWYodGhpcy5pdGVtX2Rlc2Nfd2luLm9wZW4pIHRoaXMuaXRlbV9kZXNjX3dpbi5jbG9zZSgpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gdGhpcy5pbnZfd2luLml0ZW1fZ3JpZFt0aGlzLmludl93aW5fcG9zLmxpbmVdW3RoaXMuaW52X3dpbl9wb3MuY29sXTtcblxuICAgICAgICBpZighdGhpcy5zZWxlY3RlZF9pdGVtLmJyb2tlbil7XG4gICAgICAgICAgICBsZXQgaXRlbV9icmVha2FibGUgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0udXNlX3R5cGUgPT09IFwiYnJlYWtzX3doZW5fdXNlXCI7XG4gICAgICAgICAgICBsZXQgbXNnX2tleSA9IGl0ZW1fYnJlYWthYmxlID8gXCJjYW50X3JlcGFpclwiIDogXCJyZXBhaXJfZGVjbGluZVwiO1xuXG4gICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMubnBjX2RpYWxvZy5nZXRfbWVzc2FnZShtc2dfa2V5KTtcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLm5hbWUpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJyZXBhaXJfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpLFxuICAgICAgICAgICAgICAgIGVudGVyOiB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInJlcGFpcl9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3Bvcyl9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxldCBwcmljZSA9ICh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucHJpY2UgKiBSRVBBSVJfTVVMVElQTElFUikgfCAwO1xuICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLm5wY19kaWFsb2cuZ2V0X21lc3NhZ2UoXCJyZXBhaXJfZGVhbFwiKTtcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLm5hbWUsIFN0cmluZyhwcmljZSkpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy55ZXNub19hY3Rpb24ub3Blbl9tZW51KHt5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcInJlcGFpcl9kZWFsX2FjY2VwdFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vbl9pdGVtX3JlcGFpci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5vbl9pdGVtX3JlcGFpci5iaW5kKHRoaXMpfSlcbiAgICAgICAgICAgICAgICB9LCBubzogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubnBjX2RpYWxvZy51cGRhdGVfZGlhbG9nKFwicmVwYWlyX2RlYWxfZGVjbGluZVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJyZXBhaXJfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpLFxuICAgICAgICAgICAgICAgICAgICBlbnRlcjogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJyZXBhaXJfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpfSlcbiAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICB7eDogWUVTTk9fWCwgeTogWUVTTk9fWX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fc2FsZV9zdWNjZXNzKHF1YW50aXR5ID0gMSl7XG4gICAgICAgIGxldCBtc2dfa2V5ID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbSA/IFwiYWZ0ZXJfc2VsbF9hcnRpZmFjdFwiIDogXCJhZnRlcl9zZWxsX25vcm1hbFwiO1xuICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhtc2dfa2V5LCB0cnVlKTtcblxuICAgICAgICBsZXQgaXRlbV9wcmljZSA9ICh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucHJpY2UgKiAodGhpcy5zZWxlY3RlZF9pdGVtLmJyb2tlbiA/IFNFTExfQlJPS0VOX01VTFRJUExJRVIgOiBTRUxMX01VTFRJUExJRVIpKSB8IDA7XG4gICAgICAgIHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEuY29pbnMgKz0gaXRlbV9wcmljZSpxdWFudGl0eTtcbiAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlX3lvdXJfY29pbnMoKTtcblxuICAgICAgICBmb3IobGV0IGk9MDsgaTx0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgaXRtID0gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV07XG4gICAgICAgICAgICBpZihpdG0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV0ucXVhbnRpdHkgLT0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIuaXRlbXNbaV0ucXVhbnRpdHkgPT09IDApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXJhY3Rlci5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbSl7IFxuICAgICAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHNob3BfbGlzdCA9IHRoaXMuZGF0YS5pbmZvLnNob3BzX2xpc3RbdGhpcy5wYXJlbnQuc2hvcF9rZXldLml0ZW1fbGlzdDtcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPHNob3BfbGlzdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoc2hvcF9saXN0W2ldLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpe1xuICAgICAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5mby5zaG9wc19saXN0W3RoaXMucGFyZW50LnNob3Bfa2V5XS5pdGVtX2xpc3RbaV0ucXVhbnRpdHkgKz0gcXVhbnRpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIWV4aXN0cykgc2hvcF9saXN0LnB1c2goe2tleV9uYW1lOiB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUsIHF1YW50aXR5OiBxdWFudGl0eX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5pbnZfd2luLmlzX29wZW4pIHRoaXMuaW52X3dpbi5jbG9zZSgpO1xuICAgICAgICBpZighdGhpcy5pbnZfd2luLmlzX29wZW4pIHRoaXMuaW52X3dpbi5vcGVuKHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLmtleV9uYW1lLCB1bmRlZmluZWQsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJzZWxsX2ZvbGxvd191cFwiLCB0aGlzLmludl93aW5fcG9zKSxcbiAgICAgICAgICAgIGVudGVyOiB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInNlbGxfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpfSk7XG4gICAgfVxuXG4gICAgb25fc2VsbF9pdGVtX3NlbGVjdCgpe1xuICAgICAgICB0aGlzLmludl93aW5fcG9zID0gdGhpcy5pbnZfd2luLmN1cnNvcl9wb3M7XG5cbiAgICAgICAgaWYodGhpcy5pdGVtX2Rlc2Nfd2luLm9wZW4pIHRoaXMuaXRlbV9kZXNjX3dpbi5jbG9zZSgpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gdGhpcy5pbnZfd2luLml0ZW1fZ3JpZFt0aGlzLmludl93aW5fcG9zLmxpbmVdW3RoaXMuaW52X3dpbl9wb3MuY29sXTtcblxuICAgICAgICBpZih0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0uaW1wb3J0YW50X2l0ZW0pe1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJjYW50X3NlbGxcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCB7ZXNjOiB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInNlbGxfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpLFxuICAgICAgICAgICAgZW50ZXI6IHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwic2VsbF9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3Bvcyl9KVxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZih0aGlzLnNlbGVjdGVkX2l0ZW0ucXVhbnRpdHkgPT09IDEpe1xuICAgICAgICAgICAgbGV0IG1zZ19rZXkgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucmFyZV9pdGVtID8gXCJzZWxsX2FydGlmYWN0XCIgOiBcInNlbGxfbm9ybWFsXCI7XG5cbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5ucGNfZGlhbG9nLmdldF9tZXNzYWdlKG1zZ19rZXkpO1xuICAgICAgICAgICAgbGV0IGl0ZW1fbmFtZSA9IG1zZ19rZXkgPT09IFwic2VsbF9ub3JtYWxcIiA/IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5uYW1lIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IGl0ZW1fcHJpY2UgPSAodGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnByaWNlICogKHRoaXMuc2VsZWN0ZWRfaXRlbS5icm9rZW4gPyBTRUxMX0JST0tFTl9NVUxUSVBMSUVSIDogU0VMTF9NVUxUSVBMSUVSKSkgfCAwOyBcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgaXRlbV9uYW1lLCBTdHJpbmcoaXRlbV9wcmljZSkpO1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2codGV4dCwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy55ZXNub19hY3Rpb24ub3Blbl9tZW51KHt5ZXM6IHRoaXMub25fc2FsZV9zdWNjZXNzLmJpbmQodGhpcyksIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRlY2xpbmVfbXNnID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFt0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWVdLnJhcmVfaXRlbSA/IFwiZGVjbGluZV9zZWxsX2FydGlmYWN0XCIgOiBcImRlY2xpbmVfc2VsbF9ub3JtYWxcIjtcbiAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhkZWNsaW5lX21zZywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwic2FsZV9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3BvcyksXG4gICAgICAgICAgICAgICAgICAgIGVudGVyOiB0aGlzLm9uX2NoYXJhY3Rlcl9zZWxlY3QuYmluZCh0aGlzLCBcInNlbGxfZm9sbG93X3VwXCIsIHRoaXMuaW52X3dpbl9wb3MpfSlcbiAgICAgICAgICAgICAgICB9fSxcbiAgICAgICAgICAgICAgICB7eDogWUVTTk9fWCwgeTogWUVTTk9fWX0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coXCJzZWxsX3F1YW50aXR5X3NlbGVjdFwiKTtcblxuICAgICAgICAgICAgbGV0IGNoYXJfaXRlbV9tYXRjaCA9IHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyLml0ZW1zLmZpbHRlcihpID0+IHsgcmV0dXJuIChpLmtleV9uYW1lID09PSB0aGlzLnNlbGVjdGVkX2l0ZW0ua2V5X25hbWUpOyB9KTtcbiAgICAgICAgICAgIGxldCBjaGFyX2l0ZW0gPSBjaGFyX2l0ZW1fbWF0Y2gubGVuZ3RoICE9PSAwID8gY2hhcl9pdGVtX21hdGNoWzBdIDogbnVsbDtcblxuICAgICAgICAgICAgaWYoIXRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLm9wZW4oY2hhcl9pdGVtKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKHRydWUsIGZhbHNlLCB0cnVlLCBmYWxzZSwge3JpZ2h0OiB0aGlzLnF1YW50X3dpbi5pbmNyZWFzZV9hbW91bnQuYmluZCh0aGlzLnF1YW50X3dpbiksXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5xdWFudF93aW4uZGVjcmVhc2VfYW1vdW50LmJpbmQodGhpcy5xdWFudF93aW4pLFxuICAgICAgICAgICAgICAgIGVzYzogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcywgXCJzZWxsX2ZvbGxvd191cFwiLCB0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgsIHRoaXMuaW52X3dpbl9wb3MpLFxuICAgICAgICAgICAgICAgIGVudGVyOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWFudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHF1YW50ID0gdGhpcy5xdWFudF93aW4uY2hvc2VuX3F1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1YW50X3dpbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5jdXJzb3JfbWFuYWdlci5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB0aGlzLm5wY19kaWFsb2cuZ2V0X21lc3NhZ2UoXCJzZWxsX3F1YW50aXR5X2NvbmZpcm1cIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX3ByaWNlID0gKHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5zZWxlY3RlZF9pdGVtLmtleV9uYW1lXS5wcmljZSAqICh0aGlzLnNlbGVjdGVkX2l0ZW0uYnJva2VuID8gU0VMTF9CUk9LRU5fTVVMVElQTElFUiA6IFNFTExfTVVMVElQTElFUikpIHwgMDsgXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSB0aGlzLm5wY19kaWFsb2cucmVwbGFjZV90ZXh0KHRleHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcoaXRlbV9wcmljZSpxdWFudCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyh0ZXh0LCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVzbm9fYWN0aW9uLm9wZW5fbWVudSh7eWVzOiB0aGlzLm9uX3NhbGVfc3VjY2Vzcy5iaW5kKHRoaXMsIHF1YW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVjbGluZV9tc2cgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbS5rZXlfbmFtZV0ucmFyZV9pdGVtID8gXCJkZWNsaW5lX3NlbGxfYXJ0aWZhY3RcIiA6IFwiZGVjbGluZV9zZWxsX25vcm1hbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2coZGVjbGluZV9tc2csIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIuc2V0X2NvbnRyb2woZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHtlc2M6IHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwic2VsbF9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3BvcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXI6IHRoaXMub25fY2hhcmFjdGVyX3NlbGVjdC5iaW5kKHRoaXMsIFwic2VsbF9mb2xsb3dfdXBcIiwgdGhpcy5pbnZfd2luX3Bvcyl9KTt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge3g6IFlFU05PX1gsIHk6IFlFU05PX1l9KVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25fY2hhcmFjdGVyX3NlbGVjdChtc2dfa2V5PVwic2VsbF9mb2xsb3dfdXBcIiwgaXRlbV9wb3MgPSB7bGluZTogMCwgY29sOiAwfSl7XG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKCF0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLnNob3coKTtcbiAgICAgICAgaWYoIXRoaXMuaXRlbV9wcmljZV93aW4ub3BlbikgdGhpcy5pdGVtX3ByaWNlX3dpbi5zaG93KCk7XG5cbiAgICAgICAgaWYobXNnX2tleSkgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2cobXNnX2tleSk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIgPSB0aGlzLmNoYXJfZGlzcGxheS5saW5lc1t0aGlzLmNoYXJfZGlzcGxheS5jdXJyZW50X2xpbmVdW3RoaXMuY2hhcl9kaXNwbGF5LnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4ID0gdGhpcy5jaGFyX2Rpc3BsYXkuc2VsZWN0ZWRfaW5kZXg7XG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLmludl93aW4uaXNfb3BlbikgdGhpcy5pbnZfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKCF0aGlzLmludl93aW4uaXNfb3BlbikgdGhpcy5pbnZfd2luLm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIua2V5X25hbWUsIHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLmludl93aW4uc2V0X2N1cnNvcihpdGVtX3Bvcy5saW5lLGl0ZW1fcG9zLmNvbCk7XG4gICAgICAgIGlmKCF0aGlzLmludl93aW4uaXRlbV9ncmlkW2l0ZW1fcG9zLmxpbmVdW2l0ZW1fcG9zLmNvbF0pIHRoaXMuaW52X3dpbi5wcmV2aW91c19jb2woKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbCh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB7cmlnaHQ6IHRoaXMuaW52X3dpbi5uZXh0X2NvbC5iaW5kKHRoaXMuaW52X3dpbiksXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLmludl93aW4ucHJldmlvdXNfY29sLmJpbmQodGhpcy5pbnZfd2luKSxcbiAgICAgICAgICAgIHVwOiB0aGlzLmludl93aW4ucHJldmlvdXNfbGluZS5iaW5kKHRoaXMuaW52X3dpbiksXG4gICAgICAgICAgICBkb3duOiB0aGlzLmludl93aW4ubmV4dF9saW5lLmJpbmQodGhpcy5pbnZfd2luKSxcbiAgICAgICAgICAgIGVzYzogdGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbnRlcjogKHRoaXMuaXNfcmVwYWlyX21lbnUgPyB0aGlzLm9uX3JlcGFpcl9pdGVtX3NlbGVjdC5iaW5kKHRoaXMpIDogdGhpcy5vbl9zZWxsX2l0ZW1fc2VsZWN0LmJpbmQodGhpcykpfSk7XG4gICAgfVxuXG4gICAgb3Blbl9pbnZlbnRvcnlfdmlldyhtc2dfa2V5PVwic2VsbF9mb2xsb3dfdXBcIil7XG4gICAgICAgIGlmKHRoaXMuaXRlbV9kZXNjX3dpbi5vcGVuKSB0aGlzLml0ZW1fZGVzY193aW4uY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5pdGVtX3ByaWNlX3dpbi5vcGVuKSB0aGlzLml0ZW1fcHJpY2Vfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG5cbiAgICAgICAgdGhpcy5ucGNfZGlhbG9nLnVwZGF0ZV9kaWFsb2cobXNnX2tleSk7XG5cbiAgICAgICAgaWYoIXRoaXMueW91cl9jb2luc193aW4ub3BlbikgdGhpcy55b3VyX2NvaW5zX3dpbi5zaG93KCk7XG4gICAgICAgIHRoaXMucGFyZW50LnVwZGF0ZV95b3VyX2NvaW5zKCk7XG5cbiAgICAgICAgaWYoIXRoaXMuY2hhcl9kaXNwbGF5LmlzX29wZW4pIHRoaXMuY2hhcl9kaXNwbGF5Lm9wZW4odGhpcy5zZWxlY3RlZF9jaGFyX2luZGV4KTtcbiAgICAgICAgZWxzZSB0aGlzLmNoYXJfZGlzcGxheS5zZWxlY3RfY2hhcih0aGlzLnNlbGVjdGVkX2NoYXJfaW5kZXgpO1xuICAgICAgICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLmNoYXJfZGlzcGxheS5jaGFyX2dyb3VwKTtcblxuICAgICAgICBsZXQgY2hhcl9rZXkgPSAodGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIpID8gdGhpcy5zZWxlY3RlZF9jaGFyYWN0ZXIua2V5X25hbWUgOiB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnNbMF0ua2V5X25hbWU7XG4gICAgICAgIGlmKHRoaXMuaW52X3dpbi5pc19vcGVuKSB0aGlzLmludl93aW4uY2xvc2UoKTtcbiAgICAgICAgaWYoIXRoaXMuaW52X3dpbi5pc19vcGVuKSB0aGlzLmludl93aW4ub3BlbihjaGFyX2tleSwgdW5kZWZpbmVkLCBmYWxzZSk7IFxuXG4gICAgICAgIHRoaXMuY29udHJvbF9tYW5hZ2VyLnNldF9jb250cm9sKHRydWUsIHRydWUsIHRydWUsIGZhbHNlLCB7cmlnaHQ6IHRoaXMuY2hhcl9kaXNwbGF5Lm5leHRfY2hhci5iaW5kKHRoaXMuY2hhcl9kaXNwbGF5KSxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMuY2hhcl9kaXNwbGF5LnByZXZpb3VzX2NoYXIuYmluZCh0aGlzLmNoYXJfZGlzcGxheSksXG4gICAgICAgICAgICB1cDogdGhpcy5jaGFyX2Rpc3BsYXkucHJldmlvdXNfbGluZS5iaW5kKHRoaXMuY2hhcl9kaXNwbGF5KSxcbiAgICAgICAgICAgIGRvd246IHRoaXMuY2hhcl9kaXNwbGF5Lm5leHRfbGluZS5iaW5kKHRoaXMuY2hhcl9kaXNwbGF5KSxcbiAgICAgICAgICAgIGVzYzogdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbnRlcjogdGhpcy5vbl9jaGFyYWN0ZXJfc2VsZWN0LmJpbmQodGhpcyl9KTtcbiAgICB9XG5cbiAgICBvcGVuX21lbnUoaXNfcmVwYWlyX21lbnUpe1xuICAgICAgICB0aGlzLmlzX3JlcGFpcl9tZW51ID0gaXNfcmVwYWlyX21lbnU7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICBpZihpc19yZXBhaXJfbWVudSl7XG4gICAgICAgICAgICB0aGlzLm5wY19kaWFsb2cudXBkYXRlX2RpYWxvZyhcInJlcGFpcl9tZW51XCIsIHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5zZXRfY29udHJvbChmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwge2VzYzogdGhpcy5vcGVuX2ludmVudG9yeV92aWV3LmJpbmQodGhpcywgXCJyZXBhaXJfc2VsZWN0XCIpLFxuICAgICAgICAgICAgZW50ZXI6IHRoaXMub3Blbl9pbnZlbnRvcnlfdmlldy5iaW5kKHRoaXMsIFwicmVwYWlyX3NlbGVjdFwiKX0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgdGhpcy5vcGVuX2ludmVudG9yeV92aWV3KFwic2VsbF9zZWxlY3RcIik7XG4gICAgfVxuXG4gICAgY2xvc2VfbWVudSgpe1xuICAgICAgICBpZih0aGlzLml0ZW1fZGVzY193aW4ub3BlbikgdGhpcy5pdGVtX2Rlc2Nfd2luLmNsb3NlKCk7XG4gICAgICAgIGlmKHRoaXMuaXRlbV9wcmljZV93aW4ub3BlbikgdGhpcy5pdGVtX3ByaWNlX3dpbi5jbG9zZSgpO1xuICAgICAgICBpZih0aGlzLnlvdXJfY29pbnNfd2luLm9wZW4pIHRoaXMueW91cl9jb2luc193aW4uY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5jaGFyX2Rpc3BsYXkuaXNfb3BlbikgdGhpcy5jaGFyX2Rpc3BsYXkuY2xvc2UoKTtcbiAgICAgICAgaWYodGhpcy5pbnZfd2luLmlzX29wZW4pIHRoaXMuaW52X3dpbi5jbG9zZSgpO1xuICAgICAgICBpZih0aGlzLnllc25vX2FjdGlvbi5pc19vcGVuKSB0aGlzLnllc25vX2FjdGlvbi5jbG9zZV9tZW51KCk7XG4gICAgICAgIGlmKHRoaXMucXVhbnRfd2luLmlzX29wZW4pIHRoaXMucXVhbnRfd2luLmNsb3NlKCk7XG5cbiAgICAgICAgdGhpcy5wYXJlbnQuY3Vyc29yX21hbmFnZXIuaGlkZSgpO1xuXG4gICAgICAgIHRoaXMuaXNfcmVwYWlyX21lbnUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmludl93aW5fcG9zID0ge2xpbmU6IDAsIGNvbDogMH07XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfY2hhcmFjdGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xfbWFuYWdlci5yZXNldCgpO1xuICAgICAgICB0aGlzLnBhcmVudC5ob3Jpem9udGFsX21lbnUuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5wYXJlbnQub3Blbl9ob3Jpem9udGFsX21lbnUoKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBXaW5kb3csIFRleHRPYmogfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0IHsga2lsbF9hbGxfc3ByaXRlcyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IEdvbGRlblN1biB9IGZyb20gJy4uLy4uL0dvbGRlblN1bic7XG5pbXBvcnQgeyBTaG9wTWVudSB9IGZyb20gJy4uLy4uL21haW5fbWVudXMvU2hvcE1lbnUnO1xuaW1wb3J0IHsgTWFpbkNoYXIsIEl0ZW1TbG90IH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuXG5jb25zdCBNQVhfUEVSX0xJTkUgPSA1O1xuY29uc3QgTUFYX0xJTkVTID0gMztcbmNvbnN0IElDT05fU0laRSA9IDE2O1xuXG5jb25zdCBNRVNTQUdFX0hBVkVfSVRFTSA9IFwiWW91IGhhdmUgXCI7XG5jb25zdCBNRVNTQUdFX05PX0lURU0gPSBcIk5vbmUgaW4gc3RvY2tcIjtcblxuY29uc3QgQkFTRV9YID0gMTI4O1xuY29uc3QgQkFTRV9ZID0gOTY7XG5jb25zdCBCQVNFX1dJRFRIID0gMTA4O1xuY29uc3QgQkFTRV9IRUlHSFQgPSA2MDtcbmNvbnN0IEVYUEFORF9ESUZGID0gODtcblxuY29uc3QgSVRFTV9YID0gMTY7XG5jb25zdCBJVEVNX1kgPSA4O1xuXG5jb25zdCBTVUJfSUNPTl9YID0gNztcbmNvbnN0IFNVQl9JQ09OX1kgPSA4O1xuXG5jb25zdCBTVUJfVEVYVF9YX1NISUZUID0gODtcblxuY29uc3QgVEVYVF9YID0gODtcbmNvbnN0IFRFWFRfWSA9IDg7XG5cbmNvbnN0IENVUlNPUl9YID0gMTM2O1xuY29uc3QgQ1VSU09SX1kgPSAxMTI7XG5cbmNvbnN0IFNQUklURV9HUk9VUF9LRVkgPSBcInNwcml0ZXNcIjtcbmNvbnN0IElDT05fR1JPVVBfS0VZID0gXCJpY29uc1wiO1xuXG5jb25zdCBJVEVNU19JTUdfS0VZID0gXCJpdGVtc19pY29uc1wiO1xuY29uc3QgQkFDS0dST1VORF9JTUdfS0VZID0gXCJpdGVtX2JvcmRlclwiO1xuY29uc3QgRVFVSVBQRURfSU1HX0tFWSA9IFwiZXF1aXBwZWRcIjtcbmNvbnN0IEJST0tFTl9JTUdfS0VZID0gXCJicm9rZW5cIjsgXG5cbi8qRGlzcGxheXMgYSBjaGFyYWN0ZXIncyBpbnZlbnRvcnkgdGhyb3VnaCBpY29uc1xuVXNlZCBpbiBzaG9wIG1lbnVzLiBDYW4gZGlzcGxheSB0aGUgYW1vdXQgb2YgYW4gaXRlbSBpbiB0aGUgaW52ZW50b3J5XG5cbklucHV0OiBnYW1lIFtQaGFzZXI6R2FtZV0gLSBSZWZlcmVuY2UgdG8gdGhlIHJ1bm5pbmcgZ2FtZSBvYmplY3RcbiAgICAgICBkYXRhIFtHb2xkZW5TdW5dIC0gUmVmZXJlbmNlIHRvIHRoZSBtYWluIEpTIENsYXNzIGluc3RhbmNlKi9cbmV4cG9ydCBjbGFzcyBJbnZlbnRvcnlXaW5kb3d7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6R29sZGVuU3VuO1xuICAgIHB1YmxpYyBwYXJlbnQ6U2hvcE1lbnU7XG4gICAgcHVibGljIG9uX2NoYW5nZTpGdW5jdGlvbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6RnVuY3Rpb247XG5cbiAgICBwdWJsaWMgZXhwYW5kZWQ6Ym9vbGVhbjtcbiAgICBwdWJsaWMgaXNfb3Blbjpib29sZWFuO1xuICAgIHB1YmxpYyB3aW5kb3c6V2luZG93O1xuICAgIHB1YmxpYyB0ZXh0OlRleHRPYmo7XG4gICAgXG4gICAgcHVibGljIGNoYXI6TWFpbkNoYXI7XG4gICAgcHVibGljIGl0ZW1fZ3JpZDpJdGVtU2xvdFtdW107XG4gICAgcHVibGljIHNlbGVjdGVkX2l0ZW06c3RyaW5nO1xuICAgIHB1YmxpYyBjdXJzb3JfcG9zOntsaW5lOm51bWJlciwgY29sOm51bWJlcn07XG4gICAgcHVibGljIHNwcml0ZV9ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGljb25fZ3JvdXA6UGhhc2VyLkdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTpQaGFzZXIuR2FtZSwgZGF0YTpHb2xkZW5TdW4sIHBhcmVudDpTaG9wTWVudSwgb25fY2hhbmdlOkZ1bmN0aW9uKXtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub25fY2hhbmdlID0gb25fY2hhbmdlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICB0aGlzLmV4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIEJBU0VfWCwgQkFTRV9ZLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiXCIsIFRFWFRfWCwgVEVYVF9ZKTtcbiAgICAgICAgdGhpcy50ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnRleHQuc2hhZG93LmFscGhhID0gMDtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2hhciA9IG51bGw7XG4gICAgICAgIHRoaXMuaXRlbV9ncmlkID0gW107XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3Vyc29yX3BvcyA9IHtsaW5lOiAwLCBjb2w6IDB9O1xuICAgICAgICB0aGlzLnNwcml0ZV9ncm91cCA9IHRoaXMud2luZG93LmRlZmluZV9pbnRlcm5hbF9ncm91cChTUFJJVEVfR1JPVVBfS0VZLCB7eDogSVRFTV9YLCB5OiBJVEVNX1l9KTtcbiAgICAgICAgdGhpcy5pY29uX2dyb3VwID0gdGhpcy53aW5kb3cuZGVmaW5lX2ludGVybmFsX2dyb3VwKElDT05fR1JPVVBfS0VZLCB7eDogSVRFTV9YICsgU1VCX0lDT05fWCwgeTogSVRFTV9ZICsgU1VCX0lDT05fWX0pO1xuICAgIH1cblxuICAgIC8qQ2hlY2tzIGFuZCBtYW5hZ2VzIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZXhwYW5kIFtib29sZWFuXTogSWYgdHJ1ZSwgdGhlIHdpbmRvdyBiZSBpbiBleHBhbmRlZCBzdGF0ZSovXG4gICAgY2hlY2tfZXhwYW5kKGV4cGFuZDpib29sZWFuKXtcbiAgICAgICAgaWYoZXhwYW5kKSB0aGlzLnNldF90ZXh0KCk7XG4gICAgICAgIGlmKHRoaXMuZXhwYW5kZWQgPT09IGV4cGFuZCkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBtb2RpZmllciA9IGV4cGFuZCA/IDEgOiAtMTtcblxuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfc2l6ZSh7aGVpZ2h0OiB0aGlzLndpbmRvdy5oZWlnaHQgKyBtb2RpZmllciAqIEVYUEFORF9ESUZGfSk7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV9wb3NpdGlvbih7eTogdGhpcy53aW5kb3cueSAtIG1vZGlmaWVyICogRVhQQU5EX0RJRkZ9KTtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueSA9IHRoaXMuc3ByaXRlX2dyb3VwLnkgKyBtb2RpZmllciAqIEVYUEFORF9ESUZGO1xuICAgICAgICB0aGlzLmljb25fZ3JvdXAueSA9IHRoaXMuaWNvbl9ncm91cC55ICsgbW9kaWZpZXIgKiBFWFBBTkRfRElGRjtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlKCk7XG5cbiAgICAgICAgdGhpcy5leHBhbmRlZCA9IGV4cGFuZDtcbiAgICB9XG5cbiAgICAvKlNldHMgYW5kIGRpc3BsYXlzIHRoZSB0ZXh0IHJlbGF0aXZlIHRvIHRoZSBzZWxlY3RlZCBpdGVtKi9cbiAgICBzZXRfdGV4dCgpe1xuICAgICAgICBsZXQgaXRlbV9tYXRjaCA9IG51bGw7XG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZmluaXNoID0gZmFsc2U7XG5cbiAgICAgICAgZm9yKGxldCBsaW5lPTA7IGxpbmU8TUFYX0xJTkVTOyBsaW5lKyspe1xuICAgICAgICAgICAgZm9yKGxldCBjb2w9MDsgY29sPE1BWF9QRVJfTElORTsgY29sKyspe1xuICAgICAgICAgICAgICAgIGlmKCF0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdKXtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXRlbV9ncmlkW2xpbmVdW2NvbF0ua2V5X25hbWUgPT09IHRoaXMuc2VsZWN0ZWRfaXRlbSl7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1fbWF0Y2ggPSB0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGZvdW5kIHx8IGZpbmlzaCkgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZighZm91bmQpIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KE1FU1NBR0VfTk9fSVRFTSwgdGhpcy50ZXh0KTtcbiAgICAgICAgZWxzZSB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChNRVNTQUdFX0hBVkVfSVRFTSArIGl0ZW1fbWF0Y2gucXVhbnRpdHksIHRoaXMudGV4dCk7XG5cbiAgICAgICAgdGhpcy50ZXh0LnRleHQuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLnRleHQuc2hhZG93LmFscGhhID0gMTtcbiAgICB9XG5cbiAgICAvKkNoYW5nZXMgdGhlIGNoYXJhY3RlciB3aG9zZSBpbnZlbnRvcnkgaXMgYmVpbmcgc2hvd25cblxuICAgIElucHV0OiBrZXlfbmFtZSBbbnVtYmVyXSAtIFRoZSBjaGFyYWN0ZXIncyBrZXkgbmFtZSovXG4gICAgY2hhbmdlX2NoYXJhY3RlcihrZXlfbmFtZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuZmlsdGVyKGMgPT4geyByZXR1cm4gKGMua2V5X25hbWUgPT09IGtleV9uYW1lKX0pWzBdO1xuICAgICAgICB0aGlzLm1ha2VfaXRlbV9ncmlkKCk7XG5cbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnNwcml0ZV9ncm91cCk7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy5pY29uX2dyb3VwKTtcbiAgICAgICAgaWYodGhpcy5leHBhbmRlZCkgdGhpcy5zZXRfdGV4dCgpO1xuICAgICAgICB0aGlzLnNldF9zcHJpdGVzKCk7XG4gICAgfVxuXG4gICAgbWFrZV9pdGVtX2dyaWQoKXtcbiAgICAgICAgdGhpcy5pdGVtX2dyaWQgPSBbXTtcblxuICAgICAgICBsZXQgY2hhcl9pdGVtcyA9IHRoaXMuY2hhci5pdGVtcy5maWx0ZXIoaXRlbV9vYmogPT4ge3JldHVybiBpdGVtX29iai5rZXlfbmFtZSBpbiB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0O30pO1xuXG4gICAgICAgIGxldCBsaW5lcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGxpbmUgPSAwOyBsaW5lIDwgKGNoYXJfaXRlbXMubGVuZ3RoL01BWF9QRVJfTElORSB8IDApKzE7IGxpbmUrKyl7XG4gICAgICAgICAgICBsZXQgdGhpc19saW5lID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IE1BWF9QRVJfTElORTsgY29sKyspe1xuICAgICAgICAgICAgICAgIGlmKGNoYXJfaXRlbXNbbGluZSpNQVhfUEVSX0xJTkUrY29sXSkgdGhpc19saW5lLnB1c2goY2hhcl9pdGVtc1tsaW5lKk1BWF9QRVJfTElORStjb2xdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmVzLnB1c2godGhpc19saW5lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZW1fZ3JpZCA9IGxpbmVzO1xuICAgIH1cblxuICAgIFxuICAgIGtpbGxfaXRlbV9hdChsaW5lOm51bWJlciwgY29sOm51bWJlcil7XG4gICAgICAgIGxldCBpdGVtX2ljb25zID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOlBoYXNlci5TcHJpdGUpID0+IHsgXG4gICAgICAgICAgICByZXR1cm4gKHMuYWxpdmUgPT09IHRydWUgJiYgcy5rZXkgPT09IElURU1TX0lNR19LRVkgJiYgcy54ID09PSBjb2wqSUNPTl9TSVpFICYmIHMueSA9PT0gbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICAgfSk7XG4gICAgICAgIGxldCBiZ19pY29ucyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczpQaGFzZXIuU3ByaXRlKSA9PiB7IFxuICAgICAgICAgICAgcmV0dXJuIChzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBCQUNLR1JPVU5EX0lNR19LRVkgJiYgcy54ID09PSBjb2wqSUNPTl9TSVpFICYmIHMueSA9PT0gbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAoaXRlbV9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIChiZ19pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIFxuICAgICAgICBpZih0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLmJyb2tlbil7XG4gICAgICAgICAgICBsZXQgYnJva2VuX2ljb25zID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChiOlBoYXNlci5TcHJpdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGIuYWxpdmUgPT09IHRydWUgJiYgYi5rZXkgPT09IEJST0tFTl9JTUdfS0VZICYmIGIueCA9PT0gY29sKklDT05fU0laRSAmJiBiLnkgPT09IGxpbmUqSUNPTl9TSVpFKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKGJyb2tlbl9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLmVxdWlwcGVkKXtcbiAgICAgICAgICAgIGxldCBlcXVpcHBlZF9pY29ucyA9IHRoaXMuaWNvbl9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKGU6UGhhc2VyLlNwcml0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoZS5hbGl2ZSA9PT0gdHJ1ZSAmJiBlLmtleSA9PT0gRVFVSVBQRURfSU1HX0tFWSAmJiBlLnggPT09IGNvbCpJQ09OX1NJWkUgJiYgZS55ID09PSBsaW5lKklDT05fU0laRSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIChlcXVpcHBlZF9pY29uc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5raWxsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0X2NvbCgpe1xuICAgICAgICBpZiAodGhpcy5pdGVtX2dyaWQubGVuZ3RoID09PSAxICYmIHRoaXMuaXRlbV9ncmlkW3RoaXMuY3Vyc29yX3Bvcy5saW5lXS5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZih0aGlzLmN1cnNvcl9wb3MuY29sIDwgdGhpcy5pdGVtX2dyaWRbdGhpcy5jdXJzb3JfcG9zLmxpbmVdLmxlbmd0aC0xKXtcbiAgICAgICAgICAgIHRoaXMuc2V0X2N1cnNvcih0aGlzLmN1cnNvcl9wb3MubGluZSwgdGhpcy5jdXJzb3JfcG9zLmNvbCsxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYodGhpcy5jdXJzb3JfcG9zLmxpbmUgPT09IHRoaXMuaXRlbV9ncmlkLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IoMCwwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuY3Vyc29yX3Bvcy5saW5lKzEsMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19jb2woKXtcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCA9PT0gMSAmJiB0aGlzLml0ZW1fZ3JpZFt0aGlzLmN1cnNvcl9wb3MubGluZV0ubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgaWYodGhpcy5jdXJzb3JfcG9zLmNvbCA+IDApe1xuICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuY3Vyc29yX3Bvcy5saW5lLCB0aGlzLmN1cnNvcl9wb3MuY29sLTEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBpZih0aGlzLmN1cnNvcl9wb3MubGluZSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuaXRlbV9ncmlkLmxlbmd0aC0xLCB0aGlzLml0ZW1fZ3JpZFt0aGlzLml0ZW1fZ3JpZC5sZW5ndGgtMV0ubGVuZ3RoLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUtMSwgTUFYX1BFUl9MSU5FLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dF9saW5lKCl7XG4gICAgICAgIGlmKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmKHRoaXMuY3Vyc29yX3Bvcy5saW5lID09PSB0aGlzLml0ZW1fZ3JpZC5sZW5ndGgtMSl7XG4gICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IoMCwgdGhpcy5jdXJzb3JfcG9zLmNvbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGlmKHRoaXMuY3Vyc29yX3Bvcy5jb2wgPiB0aGlzLml0ZW1fZ3JpZFt0aGlzLmN1cnNvcl9wb3MubGluZSsxXS5sZW5ndGgtMSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUrMSwgdGhpcy5pdGVtX2dyaWRbdGhpcy5jdXJzb3JfcG9zLmxpbmUrMV0ubGVuZ3RoLTEpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUrMSwgdGhpcy5jdXJzb3JfcG9zLmNvbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2aW91c19saW5lKCl7XG4gICAgICAgIGlmKHRoaXMuaXRlbV9ncmlkLmxlbmd0aCA9PT0gMSkgcmV0dXJuO1xuXG4gICAgICAgIGlmKHRoaXMuY3Vyc29yX3Bvcy5saW5lID09PSAwKXtcbiAgICAgICAgICAgIGlmKHRoaXMuY3Vyc29yX3Bvcy5jb2wgPiB0aGlzLml0ZW1fZ3JpZFt0aGlzLml0ZW1fZ3JpZC5sZW5ndGgtMV0ubGVuZ3RoLTEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuaXRlbV9ncmlkLmxlbmd0aC0xLCB0aGlzLml0ZW1fZ3JpZFt0aGlzLml0ZW1fZ3JpZC5sZW5ndGgtMV0ubGVuZ3RoLTEpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLnNldF9jdXJzb3IodGhpcy5pdGVtX2dyaWQubGVuZ3RoLTEsIHRoaXMuY3Vyc29yX3Bvcy5jb2wpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5jdXJzb3JfcG9zLmxpbmUtMSwgdGhpcy5jdXJzb3JfcG9zLmNvbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKk1vdmVzIHRoZSBjdXJzb3IgdG8gdGhlIGdpdmVuIGNvbHVtbiBhbmQgbGluZSovXG4gICAgc2V0X2N1cnNvcihsaW5lOm51bWJlciwgY29sOm51bWJlcil7XG4gICAgICAgIHRoaXMuY3Vyc29yX3BvcyA9IHtsaW5lOiBsaW5lLCBjb2w6IGNvbH07XG4gICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oQ1VSU09SX1ggKyBjb2wqSUNPTl9TSVpFLCBDVVJTT1JfWSArIGxpbmUqSUNPTl9TSVpFLCBcInBvaW50XCIsIHRydWUpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZShsaW5lLCBjb2wpO1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgdGhlIHNwcml0ZXMgZm9yIHRoZSB3aW5kb3dcbiAgICBJbmNsdWRlcyBpY29ucyBhbmQgcXVhbnRpdHkgdGV4dCovXG4gICAgc2V0X3Nwcml0ZXMoKXtcbiAgICAgICAgbGV0IGZpbmlzaCA9IGZhbHNlO1xuXG4gICAgICAgIGZvcihsZXQgbGluZT0wOyBsaW5lPE1BWF9MSU5FUzsgbGluZSsrKXtcbiAgICAgICAgICAgIGZvcihsZXQgY29sPTA7IGNvbDxNQVhfUEVSX0xJTkU7IGNvbCsrKXtcblxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdKXtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHRoaXNfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5rZXlfbmFtZV07XG5cbiAgICAgICAgICAgICAgICBsZXQgZGVhZF9pdGVtcyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczpQaGFzZXIuU3ByaXRlKSA9PiB7IHJldHVybiAocy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IElURU1TX0lNR19LRVkpOyB9KTtcbiAgICAgICAgICAgICAgICBsZXQgZGVhZF9iYWNrZ3JvdW5kcyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczpQaGFzZXIuU3ByaXRlKSA9PiB7IHJldHVybiAocy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IEJBQ0tHUk9VTkRfSU1HX0tFWSk7IH0pO1xuXG4gICAgICAgICAgICAgICAgaWYoZGVhZF9pdGVtcy5sZW5ndGg+MCAmJiBkZWFkX2JhY2tncm91bmRzLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAgICAgKGRlYWRfYmFja2dyb3VuZHNbMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoY29sKklDT05fU0laRSwgbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICAoZGVhZF9pdGVtc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5yZXNldChjb2wqSUNPTl9TSVpFLCBsaW5lKklDT05fU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIChkZWFkX2l0ZW1zWzBdIGFzIFBoYXNlci5TcHJpdGUpLmZyYW1lTmFtZSA9IHRoaXNfaXRlbS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGNvbCpJQ09OX1NJWkUsIGxpbmUqSUNPTl9TSVpFLCBCQUNLR1JPVU5EX0lNR19LRVksIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTUFJJVEVfR1JPVVBfS0VZKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGNvbCpJQ09OX1NJWkUsIGxpbmUqSUNPTl9TSVpFLCBJVEVNU19JTUdfS0VZLCB1bmRlZmluZWQsIHRoaXNfaXRlbS5rZXlfbmFtZSwgU1BSSVRFX0dST1VQX0tFWSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbV9ncmlkW2xpbmVdW2NvbF0uYnJva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWFkX2Jyb2tlbiA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoYjpQaGFzZXIuU3ByaXRlKSA9PiB7IHJldHVybiAoYi5hbGl2ZSA9PT0gZmFsc2UgJiYgYi5rZXkgPT09IEJST0tFTl9JTUdfS0VZKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRlYWRfYnJva2VuLmxlbmd0aD4wKSAoZGVhZF9icm9rZW5bMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoY29sKklDT05fU0laRSwgbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChjb2wqSUNPTl9TSVpFLCBsaW5lKklDT05fU0laRSwgQlJPS0VOX0lNR19LRVksIHVuZGVmaW5lZCx1bmRlZmluZWQsIFNQUklURV9HUk9VUF9LRVkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLmVxdWlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWFkX2ljb25zID0gdGhpcy5pY29uX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoZTpQaGFzZXIuU3ByaXRlKSA9PiB7IHJldHVybiAoZS5hbGl2ZSA9PT0gZmFsc2UgJiYgZS5rZXkgPT09IEVRVUlQUEVEX0lNR19LRVkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGVhZF9pY29ucy5sZW5ndGg+MCkgKGRlYWRfaWNvbnNbMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoY29sKklDT05fU0laRSwgbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMud2luZG93LmNyZWF0ZV9hdF9ncm91cChjb2wqSUNPTl9TSVpFLCBsaW5lKklDT05fU0laRSwgRVFVSVBQRURfSU1HX0tFWSwgdW5kZWZpbmVkLHVuZGVmaW5lZCwgSUNPTl9HUk9VUF9LRVkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1fZ3JpZFtsaW5lXVtjb2xdLnF1YW50aXR5ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVhZF90ZXh0ID0gdGhpcy5pY29uX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigodDpQaGFzZXIuQml0bWFwVGV4dCkgPT4geyByZXR1cm4gKHQuYWxpdmUgPT09IGZhbHNlICYmIHQudGV4dCAhPT0gdW5kZWZpbmVkKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRlYWRfdGV4dC5sZW5ndGg+MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZGVhZF90ZXh0WzBdIGFzIFBoYXNlci5CaXRtYXBUZXh0KS50ZXh0ID0gdGhpcy5pdGVtX2dyaWRbbGluZV1bY29sXS5xdWFudGl0eS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGRlYWRfdGV4dFswXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkucmVzZXQoY29sKklDT05fU0laRSwgbGluZSpJQ09OX1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVhZF90ZXh0WzBdLnggKz0gKFNVQl9URVhUX1hfU0hJRlQgLSAoZGVhZF90ZXh0WzBdIGFzIFBoYXNlci5CaXRtYXBUZXh0KS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtX2NvdW50ID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KGNvbCpJQ09OX1NJWkUsIGxpbmUqSUNPTl9TSVpFLCAnZ3MtaXRlbS1ibXAtZm9udCcsIHRoaXMuaXRlbV9ncmlkW2xpbmVdW2NvbF0ucXVhbnRpdHkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtX2NvdW50LnggKz0gKFNVQl9URVhUX1hfU0hJRlQgLSBpdGVtX2NvdW50LndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93LmFkZF90b19pbnRlcm5hbF9ncm91cChJQ09OX0dST1VQX0tFWSwgaXRlbV9jb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihmaW5pc2gpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3ByaXRlX2dyb3VwLmFscGhhID0gMTtcbiAgICB9XG5cbiAgICAvKk9wZW5zIHRoaXMgd2luZG93IGZvciBhIGdpdmVuIGNoYXJhY3RlclxuXG4gICAgSW5wdXQ6IGNoYXJfa2V5IFtzdHJpbmddIC0gVGhlIGNoYXJhY3RlcidzIGtleSBuYW1lXG4gICAgICAgICAgIGl0ZW0gW3N0cmluZ10gLSBUaGUgaXRlbSB0byBjaGVjayBhZ2FpbnN0XG4gICAgICAgICAgIGV4cGFuZCBbYm9vbGVhbl0gLSBJZiB0cnVlLCB0aGUgd2luZG93IHdpbGwgYmUgaW4gZXhwYW5kZWQgc3RhdGVcbiAgICAgICAgICAgY2xvc2VfY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbClcbiAgICAgICAgICAgb3Blbl9jYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgb3BlbihjaGFyX2tleTpzdHJpbmcsIGl0ZW0/OnN0cmluZywgZXhwYW5kOmJvb2xlYW49ZmFsc2UsIGNsb3NlX2NhbGxiYWNrPzpGdW5jdGlvbiwgb3Blbl9jYWxsYmFjaz86RnVuY3Rpb24pe1xuICAgICAgICB0aGlzLmNoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuZmlsdGVyKGMgPT4geyByZXR1cm4gKGMua2V5X25hbWUgPT09IGNoYXJfa2V5KX0pWzBdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBpdGVtO1xuXG4gICAgICAgIHRoaXMubWFrZV9pdGVtX2dyaWQoKTtcbiAgICAgICAgdGhpcy5jaGVja19leHBhbmQoZXhwYW5kKTtcbiAgICAgICAgdGhpcy5zZXRfc3ByaXRlcygpO1xuXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgaW5mb3JtYXRpb24gYW5kIGNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzcHJpdGVzIGFyZSBkZXN0cm95ZWQqL1xuICAgIGNsb3NlKGRlc3Ryb3kgPSBmYWxzZSl7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy5zcHJpdGVfZ3JvdXAsIGRlc3Ryb3kpO1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuaWNvbl9ncm91cCwgZGVzdHJveSk7XG5cbiAgICAgICAgdGhpcy50ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLnRleHQuc2hhZG93LmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJzb3JfcG9zID0ge2xpbmU6IDAsIGNvbDogMH07XG4gICAgICAgIHRoaXMuaXRlbV9ncmlkID0gW107XG4gICAgICAgIHRoaXMuY2hlY2tfZXhwYW5kKGZhbHNlKTtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCB7IGtpbGxfYWxsX3Nwcml0ZXMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgU2hvcE1lbnUgfSBmcm9tICcuLi8uLi9tYWluX21lbnVzL1Nob3BNZW51JztcbmltcG9ydCB7IFNob3BJdGVtIH0gZnJvbSAnLi4vLi4vU2hvcC5qcyc7XG5cbmNvbnN0IE1BWF9QRVJfUEFHRSA9IDc7XG5cbmNvbnN0IFdJTl9YID0gMDtcbmNvbnN0IFdJTl9ZID0gOTY7XG5jb25zdCBXSU5fV0lEVEggPSAyMzY7XG5jb25zdCBXSU5fSEVJR0hUID0gMjg7XG5cbmNvbnN0IElURU1fWCA9IDE2O1xuY29uc3QgSVRFTV9ZID0gMTYrOTY7XG5jb25zdCBUQUdfWCA9IDI0O1xuY29uc3QgVEFHX1kgPSAxMDQ7XG5cbmNvbnN0IFRFWFRfWCA9IDM5O1xuY29uc3QgVEVYVF9FTkRfWSA9IDEzMTtcbmNvbnN0IFRFWFRfQkdfQ09MT1IgPSAweGZmNzMwMDtcblxuY29uc3QgQkdfU0hJRlRfWCA9IC0zO1xuY29uc3QgQkdfU0hJRlRfWSA9IDE7XG5cbmNvbnN0IExJTkVfU0hJRlQgPSAzMjtcblxuY29uc3QgQ1VSU09SX1ggPSAwO1xuY29uc3QgQ1VSU09SX1kgPSAxMTI7XG5cbmNvbnN0IEFSUk9XX0dST1VQX1ggPSAyMjQ7XG5jb25zdCBBUlJPV19HUk9VUF9ZID0gODA7XG5jb25zdCBVUF9BUlJPV19YID0gMTY7XG5jb25zdCBVUF9BUlJPV19ZID0gMjA7XG5jb25zdCBET1dOX0FSUk9XX1ggPSAwO1xuY29uc3QgRE9XTl9BUlJPV19ZID0gNTI7XG5jb25zdCBBUlJPV19ZX0RJRkYgPSA4O1xuXG5jb25zdCBTRUxFQ1RfVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSO1xuY29uc3QgQVJST1dfVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5cbi8qRGlzcGxheXMgYSBzaG9wa2VlcGVyJ3Mgd2FyZXMgdG8gcHVyY2hhc2VcblN1cHBvcnRzIG11bHRpcGxlIGl0ZW0gcGFnZXNcblxuSW5wdXQ6IGdhbWUgW1BoYXNlcjpHYW1lXSAtIFJlZmVyZW5jZSB0byB0aGUgcnVubmluZyBnYW1lIG9iamVjdFxuICAgICAgIGRhdGEgW0dvbGRlblN1bl0gLSBSZWZlcmVuY2UgdG8gdGhlIG1haW4gSlMgQ2xhc3MgaW5zdGFuY2VcbiAgICAgICBwYXJlbnQgW1Nob3BNZW51U2NyZWVuXSAtIFRoZSBtYWluIHNob3AgbWVudSBjbGFzc1xuICAgICAgIG9uX2NoYW5nZSBbZnVuY3Rpb25dIC0gRnVuY3Rpb24gY2FsbGJhY2sgdG8gdXBkYXRlIHRoZSBwYXJlbnQqL1xuZXhwb3J0IGNsYXNzIEJ1eVNlbGVjdE1lbnV7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6R29sZGVuU3VuO1xuICAgIHB1YmxpYyBwYXJlbnQ6U2hvcE1lbnU7XG4gICAgcHVibGljIG9uX2NoYW5nZTpGdW5jdGlvbjtcbiAgICBwdWJsaWMgY2xvc2VfY2FsbGJhY2s6RnVuY3Rpb247XG5cbiAgICBwdWJsaWMgd2luZG93OldpbmRvdztcbiAgICBwdWJsaWMgaXRlbXM6e1trZXlfbmFtZTpzdHJpbmddIDogU2hvcEl0ZW19O1xuICAgIHB1YmxpYyBzZWxlY3RlZF9pbmRleDpudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfcGFnZTpudW1iZXI7XG4gICAgcHVibGljIHBhZ2VzOlNob3BJdGVtW11bXTtcbiAgICBwdWJsaWMgdHdlZW5zOntpdGVtOlBoYXNlci5Ud2VlbiwgYmc6UGhhc2VyLlR3ZWVufTtcbiAgICBwdWJsaWMgaXNfb3Blbjpib29sZWFuO1xuXG4gICAgcHVibGljIHNwcml0ZV9ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHRhZ19ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHRleHRfZ3JvdXA6UGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBiZ19ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGFycm93X2dyb3VwOlBoYXNlci5Hcm91cDtcblxuICAgIHB1YmxpYyB1cF9hcnJvdzpQaGFzZXIuU3ByaXRlO1xuICAgIHB1YmxpYyBkb3duX2Fycm93OlBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGFycm93X3R3ZWVuczpQaGFzZXIuVHdlZW5bXTtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWU6UGhhc2VyLkdhbWUsIGRhdGE6R29sZGVuU3VuLCBwYXJlbnQ6U2hvcE1lbnUsIG9uX2NoYW5nZTpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSA9IG9uX2NoYW5nZTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgV0lOX1gsIFdJTl9ZLCBXSU5fV0lEVEgsIFdJTl9IRUlHSFQpO1xuICAgICAgICB0aGlzLml0ZW1zID0ge307XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcGFnZSA9IDA7XG4gICAgICAgIHRoaXMucGFnZXMgPSBbXTtcbiAgICAgICAgdGhpcy50d2VlbnMgPSB7aXRlbTogbnVsbCwgYmc6IG51bGx9O1xuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNwcml0ZV9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueCA9IElURU1fWDtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueSA9IElURU1fWTtcbiAgICAgICAgdGhpcy50YWdfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMudGFnX2dyb3VwLnggPSBUQUdfWDtcbiAgICAgICAgdGhpcy50YWdfZ3JvdXAueSA9IFRBR19ZO1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMudGV4dF9ncm91cC54ID0gVEVYVF9YO1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAueSA9IFRFWFRfRU5EX1k7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueCA9IFRFWFRfWCArIEJHX1NISUZUX1g7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueSA9IFRFWFRfRU5EX1kgKyBCR19TSElGVF9ZO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnggPSBBUlJPV19HUk9VUF9YO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnkgPSBBUlJPV19HUk9VUF9ZO1xuXG4gICAgICAgIHRoaXMudXBfYXJyb3cgPSB0aGlzLmFycm93X2dyb3VwLmNyZWF0ZShVUF9BUlJPV19YLCBVUF9BUlJPV19ZLCBcImdyZWVuX2Fycm93XCIpO1xuICAgICAgICB0aGlzLnVwX2Fycm93LnJvdGF0aW9uID0gTWF0aC5QSTtcbiAgICAgICAgdGhpcy5kb3duX2Fycm93ID0gdGhpcy5hcnJvd19ncm91cC5jcmVhdGUoRE9XTl9BUlJPV19YLCBET1dOX0FSUk9XX1ksIFwiZ3JlZW5fYXJyb3dcIik7XG4gICAgICAgIHRoaXMudXBfYXJyb3cuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuYXJyb3dfdHdlZW5zID0gW107XG4gICAgfVxuXG4gICAgLypVcGRhdGVzIHRoZSBncm91cHMnIHBvc2l0aW9ucyBvbiBzY3JlZW4qL1xuICAgIHVwZGF0ZV9ncm91cF9wb3MoKXtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueCA9IElURU1fWCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAueSA9IElURU1fWSArIHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy50YWdfZ3JvdXAueCA9IFRBR19YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLnRhZ19ncm91cC55ID0gVEFHX1kgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHRoaXMudGV4dF9ncm91cC54ID0gVEVYVF9YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAueSA9IFRFWFRfRU5EX1kgKyB0aGlzLmdhbWUuY2FtZXJhLnk7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueCA9IFRFWFRfWCArIEJHX1NISUZUX1ggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuYmdfZ3JvdXAueSA9IFRFWFRfRU5EX1kgKyBCR19TSElGVF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnggPSBBUlJPV19HUk9VUF9YICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLnkgPSBBUlJPV19HUk9VUF9ZICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuICAgIH1cblxuICAgIC8qSGlkZXMgb3Igc2hvd3Mgc3BlY2lmaWMgYXJyb3dzXG4gICAgXG4gICAgSW5wdXQ6IHVwLCBkb3duIFtib29sZWFuXSAtIElmIHRydWUsIHNob3dzIHVwL2Rvd24gYXJyb3cqL1xuICAgIHNldF9hcnJvd3ModXA6Ym9vbGVhbj1mYWxzZSwgZG93bjpib29sZWFuPWZhbHNlKXtcbiAgICAgICAgdGhpcy51cF9hcnJvdy54ID0gVVBfQVJST1dfWDtcbiAgICAgICAgdGhpcy51cF9hcnJvdy55ID0gVVBfQVJST1dfWTtcbiAgICAgICAgdGhpcy5kb3duX2Fycm93LnggPSBET1dOX0FSUk9XX1g7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdy55ID0gRE9XTl9BUlJPV19ZO1xuICAgICAgICBpZih1cCkgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIGVsc2UgdGhpcy51cF9hcnJvdy5hbHBoYSA9IDA7XG5cbiAgICAgICAgaWYoZG93bikgdGhpcy5kb3duX2Fycm93LmFscGhhID0gMTtcbiAgICAgICAgZWxzZSB0aGlzLmRvd25fYXJyb3cuYWxwaGEgPSAwO1xuICAgIH1cblxuICAgIC8qQ2hlY2tzIHdoaWNoIGFycm93cyB0byBzaG93IG9yIGhpZGUqL1xuICAgIGNoZWNrX2Fycm93cygpe1xuICAgICAgICBsZXQgdXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IGRvd24gPSBmYWxzZTtcblxuICAgICAgICBpZih0aGlzLmN1cnJlbnRfcGFnZSA8IHRoaXMucGFnZXMubGVuZ3RoLTEpIGRvd24gPSB0cnVlO1xuICAgICAgICBpZih0aGlzLmN1cnJlbnRfcGFnZSA+IDApIHVwID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnNldF9hcnJvd3ModXAsIGRvd24pO1xuICAgICAgICB0aGlzLmluaXRfYXJyb3dfdHdlZW5zKCk7XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuYXJyb3dfZ3JvdXApO1xuICAgIH1cblxuICAgIC8qU3RhcnRzIHRoZSBhcnJvdyBhbmltYXRpb25zKi9cbiAgICBpbml0X2Fycm93X3R3ZWVucygpe1xuICAgICAgICBsZXQgdXBfdHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMudXBfYXJyb3cpXG4gICAgICAgICAgICAgICAgLnRvKHt5OiBVUF9BUlJPV19ZIC0gQVJST1dfWV9ESUZGfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAudG8oe3k6IFVQX0FSUk9XX1l9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKS5sb29wKCk7XG4gICAgICAgIHRoaXMuYXJyb3dfdHdlZW5zLnB1c2godXBfdHdlZW4pO1xuXG4gICAgICAgIGxldCBkb3duX3R3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmRvd25fYXJyb3cpXG4gICAgICAgICAgICAgICAgLnRvKHt5OiBET1dOX0FSUk9XX1kgKyBBUlJPV19ZX0RJRkZ9LCBBUlJPV19UV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgICAgIC50byh7eTogRE9XTl9BUlJPV19ZfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSkubG9vcCgpO1xuICAgICAgICB0aGlzLmFycm93X3R3ZWVucy5wdXNoKGRvd25fdHdlZW4pO1xuXG4gICAgICAgIHVwX3R3ZWVuLnN0YXJ0KCk7XG4gICAgICAgIGRvd25fdHdlZW4uc3RhcnQoKTtcbiAgICB9XG5cbiAgICAvKkNsZWFycyB0aGUgYXJyb3cgYW5pbWF0aW9ucyovXG4gICAgY2xlYXJfYXJyb3dfdHdlZW5zKCl7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuYXJyb3dfdHdlZW5zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMuZ2FtZS50d2VlbnMucmVtb3ZlKHRoaXMuYXJyb3dfdHdlZW5zLnBvcCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qU2V0cyB0aGUgcHJpY2UgZm9yIGEgZ2l2ZW4gaXRlbSdzIHRhZ1xuXG4gICAgSW5wdXQ6IHRleHQgW3N0cmluZ10gLSBQcmljZSBvZiB0aGUgaXRlbVxuICAgICAgICAgICBpbmRleCBbbnVtYmVyXSAtIExpbmUgaW5kZXggb2YgdGhlIGl0ZW0qL1xuICAgIHNldF90ZXh0KHRleHQ6c3RyaW5nLCBpbmRleDpudW1iZXIpe1xuICAgICAgICBsZXQgZGVhZF90ZXh0cyA9IHRoaXMudGV4dF9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHQ6UGhhc2VyLkJpdG1hcFRleHQpID0+IHsgcmV0dXJuICh0LmFsaXZlID09PSBmYWxzZSAmJiB0LnRpbnQgIT09IDApOyB9KTtcbiAgICAgICAgbGV0IGRlYWRfc2hhZG93cyA9IHRoaXMudGV4dF9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6UGhhc2VyLkJpdG1hcFRleHQpID0+IHsgcmV0dXJuIChzLmFsaXZlID09PSBmYWxzZSAmJiBzLnRpbnQgPT09IDApOyB9KTtcblxuICAgICAgICBsZXQgc3ByaXRlID0gbnVsbDtcbiAgICAgICAgbGV0IHNoYWRvdyA9IG51bGw7XG5cbiAgICAgICAgaWYoZGVhZF90ZXh0cy5sZW5ndGg+MCAmJiBkZWFkX3NoYWRvd3MubGVuZ3RoPjApe1xuICAgICAgICAgICAgKGRlYWRfdGV4dHNbMF0gYXMgUGhhc2VyLkJpdG1hcFRleHQpLnRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgKGRlYWRfdGV4dHNbMF0gYXMgUGhhc2VyLkJpdG1hcFRleHQpLnJlc2V0KGluZGV4KkxJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgKGRlYWRfc2hhZG93c1swXSBhcyBQaGFzZXIuQml0bWFwVGV4dCkudGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAoZGVhZF9zaGFkb3dzWzBdIGFzIFBoYXNlci5CaXRtYXBUZXh0KS5yZXNldChpbmRleCpMSU5FX1NISUZULCAwKTtcbiAgICAgICAgICAgIHNwcml0ZSA9IGRlYWRfdGV4dHNbMF07XG4gICAgICAgICAgICBzaGFkb3cgPSBkZWFkX3NoYWRvd3NbMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHNoYWRvdyA9IHRoaXMuZ2FtZS5hZGQuYml0bWFwVGV4dChpbmRleCpMSU5FX1NISUZULCAwLCAnZ3Mtc2hvcC1ibXAtZm9udCcsIHRleHQpO1xuICAgICAgICAgICAgc3ByaXRlID0gdGhpcy5nYW1lLmFkZC5iaXRtYXBUZXh0KGluZGV4KkxJTkVfU0hJRlQsIDAsICdncy1zaG9wLWJtcC1mb250JywgdGV4dCk7XG4gICAgICAgICAgICBzaGFkb3cucm90YXRpb24gPSBNYXRoLlBJLzI7XG4gICAgICAgICAgICBzcHJpdGUucm90YXRpb24gPSBNYXRoLlBJLzI7XG4gICAgICAgICAgICBzaGFkb3cudGludCA9IDB4MDtcbiAgICAgICAgICAgIHRoaXMudGV4dF9ncm91cC5hZGQoc2hhZG93KTtcbiAgICAgICAgICAgIHRoaXMudGV4dF9ncm91cC5hZGQoc3ByaXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNoYWRvdy55IC09IChzcHJpdGUud2lkdGgtMSk7XG4gICAgICAgIHNwcml0ZS55IC09IHNwcml0ZS53aWR0aDtcbiAgICAgICAgc2hhZG93LnggLT0gMTtcbiAgICAgICAgXG4gICAgICAgIGxldCBkZWFkX3RleHRfYmdzID0gdGhpcy5iZ19ncm91cC5jaGlsZHJlbi5maWx0ZXIoKGJnOlBoYXNlci5HcmFwaGljcykgPT4geyByZXR1cm4gYmcuYWxpdmUgPT09IGZhbHNlOyB9KTtcblxuICAgICAgICBpZihkZWFkX3RleHRfYmdzLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIChkZWFkX3RleHRfYmdzWzBdIGFzIFBoYXNlci5HcmFwaGljcykuY2xlYXIoKTtcbiAgICAgICAgICAgIChkZWFkX3RleHRfYmdzWzBdIGFzIFBoYXNlci5HcmFwaGljcykuYmVnaW5GaWxsKFRFWFRfQkdfQ09MT1IsIDEpO1xuICAgICAgICAgICAgKGRlYWRfdGV4dF9iZ3NbMF0gYXMgUGhhc2VyLkdyYXBoaWNzKS5kcmF3UmVjdCgwLCAwLCAtKHNwcml0ZS5oZWlnaHQrMSksIC0oc3ByaXRlLndpZHRoKzEpKTtcbiAgICAgICAgICAgIChkZWFkX3RleHRfYmdzWzBdIGFzIFBoYXNlci5HcmFwaGljcykuZW5kRmlsbCgpO1xuICAgICAgICAgICAgKGRlYWRfdGV4dF9iZ3NbMF0gYXMgUGhhc2VyLkdyYXBoaWNzKS5yZXNldChpbmRleCpMSU5FX1NISUZULCAwKVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBsZXQgYmcgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKGluZGV4KkxJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgYmcuYmVnaW5GaWxsKFRFWFRfQkdfQ09MT1IsIDEpO1xuICAgICAgICAgICAgYmcuZHJhd1JlY3QoMCwgMCwgLShzcHJpdGUuaGVpZ2h0KzEpLCAtKHNwcml0ZS53aWR0aCsxKSk7XG4gICAgICAgICAgICBiZy5lbmRGaWxsKCk7XG4gICAgICAgICAgICB0aGlzLmJnX2dyb3VwLmFkZChiZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLnRleHRfZ3JvdXApO1xuICAgIH1cblxuICAgIC8qU3BsaXRzIHRoZSBzaG9wa2VlcGVyJ3Mgd2FyZXMgaW50byBwYWdlcyovXG4gICAgbWFrZV9wYWdlcygpe1xuICAgICAgICBsZXQgaXRlbXNfbGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuICAgICAgICBsZXQga2V5cyA9IEFycmF5LmZyb20oT2JqZWN0LmtleXModGhpcy5pdGVtcykpO1xuICAgICAgICBsZXQgcGFnZV9udW1iZXIgPSBpdGVtc19sZW5ndGglTUFYX1BFUl9QQUdFPT09MCA/IChpdGVtc19sZW5ndGgvTUFYX1BFUl9QQUdFKSB8IDAgOiAoKGl0ZW1zX2xlbmd0aC9NQVhfUEVSX1BBR0UpIHwgMCkgKyAxO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGk8cGFnZV9udW1iZXI7IGkrKyl7XG4gICAgICAgICAgICBsZXQgd2FyZXMgPSBbXTtcbiAgICAgICAgICAgIGZvcihsZXQgbj1pKk1BWF9QRVJfUEFHRTsgbjwoaSsxKSpNQVhfUEVSX1BBR0U7IG4rKyl7XG4gICAgICAgICAgICAgICAgaWYoIWtleXNbbl0pIGJyZWFrO1xuICAgICAgICAgICAgICAgIHdhcmVzLnB1c2godGhpcy5pdGVtc1trZXlzW25dXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZ2VzW2ldID0gd2FyZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIHRoZSBzcHJpdGVzIGZvciB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogcGFnZSBbbnVtYmVyXSAtIFRoZSBpdGVtIHBhZ2UgaW5kZXgqL1xuICAgIHNldF9zcHJpdGVzKHBhZ2U6bnVtYmVyKXsgICAgICAgIFxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpPHRoaXMucGFnZXNbcGFnZV0ubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgICAgICBsZXQgZGVhZF9pdGVtcyA9IHRoaXMuc3ByaXRlX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczpQaGFzZXIuU3ByaXRlKSA9PiB7IHJldHVybiAocy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IFwiaXRlbXNfaWNvbnNcIik7IH0pO1xuICAgICAgICAgICAgbGV0IGRlYWRfYmFja2dyb3VuZHMgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6UGhhc2VyLlNwcml0ZSkgPT4geyByZXR1cm4gKHMuYWxpdmUgPT09IGZhbHNlICYmIHMua2V5ID09PSBcIml0ZW1fYm9yZGVyXCIpOyB9KTtcblxuICAgICAgICAgICAgaWYoZGVhZF9pdGVtcy5sZW5ndGg+MCAmJiBkZWFkX2JhY2tncm91bmRzLmxlbmd0aD4wKXtcbiAgICAgICAgICAgICAgICAoZGVhZF9iYWNrZ3JvdW5kc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5yZXNldChpKkxJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgICAgIGRlYWRfYmFja2dyb3VuZHNbMF0uc2NhbGUueCA9IDE7XG4gICAgICAgICAgICAgICAgZGVhZF9iYWNrZ3JvdW5kc1swXS5zY2FsZS55ID0gMTtcbiAgICAgICAgICAgICAgICAoZGVhZF9pdGVtc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5mcmFtZU5hbWUgPSB0aGlzLnBhZ2VzW3BhZ2VdW2ldLmtleV9uYW1lO1xuICAgICAgICAgICAgICAgIGRlYWRfaXRlbXNbMF0uc2NhbGUueCA9IDE7XG4gICAgICAgICAgICAgICAgZGVhZF9pdGVtc1swXS5zY2FsZS55ID0gMTtcbiAgICAgICAgICAgICAgICAoZGVhZF9pdGVtc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5yZXNldChpKkxJTkVfU0hJRlQsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZV9ncm91cC5jcmVhdGUoaSpMSU5FX1NISUZULCAwLCBcIml0ZW1fYm9yZGVyXCIpLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVfZ3JvdXAuY3JlYXRlKGkqTElORV9TSElGVCwgMCwgXCJpdGVtc19pY29uc1wiLCB0aGlzLnBhZ2VzW3BhZ2VdW2ldLmtleV9uYW1lKS5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGVhZF90YWdzID0gdGhpcy50YWdfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKCh0OlBoYXNlci5TcHJpdGUpID0+IHsgcmV0dXJuIHQuYWxpdmUgPT09IGZhbHNlOyB9KTtcbiAgICAgICAgICAgIGlmKGRlYWRfdGFncy5sZW5ndGg+MCkgKGRlYWRfdGFnc1swXSBhcyBQaGFzZXIuU3ByaXRlKS5yZXNldChpKkxJTkVfU0hJRlQsIDApOyBcbiAgICAgICAgICAgIGVsc2UgdGhpcy50YWdfZ3JvdXAuY3JlYXRlKGkqTElORV9TSElGVCwgMCwgXCJwcmljZV90YWdcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBwcmljZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbdGhpcy5wYWdlc1twYWdlXVtpXS5rZXlfbmFtZV0ucHJpY2U7XG4gICAgICAgICAgICB0aGlzLnNldF90ZXh0KHByaWNlLnRvU3RyaW5nKCksIGkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0X2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCVNQVhfUEVSX1BBR0UpO1xuICAgIH1cblxuICAgIC8qRGlzcGxheXMgYSBzcGVjaWZpYyBwYWdlIG9mIGl0ZW1zXG5cbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gLSBJbmRleCBvZiB0aGUgcGFnZSB0byBiZSBkaXNwbGF5ZWQqL1xuICAgIGNoYW5nZV9wYWdlKHBhZ2U6bnVtYmVyLCBmb3JjZV9pbmRleD86bnVtYmVyKXtcbiAgICAgICAgaWYodGhpcy5wYWdlcy5sZW5ndGggPT09IDEpIHJldHVybjtcbiAgICAgICAgdGhpcy5jbGVhcl9hcnJvd190d2VlbnMoKTtcblxuICAgICAgICBsZXQgaXRlbXNfbGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuICAgICAgICBpZihpdGVtc19sZW5ndGggPCBNQVhfUEVSX1BBR0UqcGFnZSkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlID0gcGFnZTtcbiAgICAgICAgXG4gICAgICAgIGlmKGZvcmNlX2luZGV4ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IGZvcmNlX2luZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYodGhpcy5zZWxlY3RlZF9pbmRleCAhPT0gbnVsbCAmJiB0aGlzLnNlbGVjdGVkX2luZGV4ID49IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuc3ByaXRlX2dyb3VwKTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnRhZ19ncm91cCk7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy50ZXh0X2dyb3VwKTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLmJnX2dyb3VwKTtcbiAgICAgICAgdGhpcy51bnNldF9pdGVtKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuICAgICAgICB0aGlzLnNldF9zcHJpdGVzKHBhZ2UpO1xuICAgICAgICB0aGlzLmNoZWNrX2Fycm93cygpO1xuICAgICAgICB0aGlzLmNoYW5nZV9pdGVtKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuICAgIH1cblxuICAgIC8qQ2hhbmdlcyB0byB0aGUgbmV4dCBpdGVtIHBhZ2VcbiAgICBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIGNvbnRyb2xzKi9cbiAgICBuZXh0X3BhZ2UoZm9yY2VfaW5kZXg/Om51bWJlcil7XG4gICAgICAgIGlmKHRoaXMucGFnZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9wYWdlICsgMSA9PT0gdGhpcy5wYWdlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gIHRoaXMuY3VycmVudF9wYWdlICsgMTtcblxuICAgICAgICB0aGlzLmNoYW5nZV9wYWdlKGluZGV4LCBmb3JjZV9pbmRleCk7XG4gICAgfVxuXG4gICAgLypDaGFuZ2VzIHRvIHRoZSBwcmV2aW91cyBpdGVtIHBhZ2VcbiAgICBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIGNvbnRyb2xzKi9cbiAgICBwcmV2aW91c19wYWdlKGZvcmNlX2luZGV4PzpudW1iZXIpe1xuICAgICAgICBpZih0aGlzLnBhZ2VzLmxlbmd0aCA9PT0gMSB8fCB0aGlzLmN1cnJlbnRfcGFnZSAtMSA8IDApIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jdXJyZW50X3BhZ2UgLSAxO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlX3BhZ2UoaW5kZXgsIGZvcmNlX2luZGV4KTtcbiAgICB9XG5cbiAgICAvKlNlbGVjdHMgYSBzcGVjaWZpYyBpdGVtIG9uIHNjcmVlblxuXG4gICAgSW5wdXQ6IHN0ZXAgW251bWJlcl0gLSBTdGVwIGluZGV4IGZvciBuZXcgaXRlbSBzZWxlY3Rpb24qL1xuICAgIGNoYW5nZV9pdGVtKGluZGV4Om51bWJlcil7XG4gICAgICAgIHRoaXMudW5zZXRfaXRlbSh0aGlzLnNlbGVjdGVkX2luZGV4KTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgdGhpcy5zZXRfaXRlbSh0aGlzLnNlbGVjdGVkX2luZGV4KTtcbiAgICAgICAgdGhpcy5zZXRfY3Vyc29yKHRoaXMuc2VsZWN0ZWRfaW5kZXgpO1xuICAgICAgICB0aGlzLm9uX2NoYW5nZSh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlXVt0aGlzLnNlbGVjdGVkX2luZGV4XS5rZXlfbmFtZSk7XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBpdGVtIHdpdGggdGhlIG5leHQgaW5kZXhcbiAgICBDeWNsZXMgdG8gbmV4dCBwYWdlIGlmIG5lY2Vzc2FyeVxuICAgIFVzZWQgYXMgYSBjYWxsYmFjayBmb3IgY29udHJvbHMqL1xuICAgIG5leHRfaXRlbSgpe1xuICAgICAgICBpZih0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlXS5sZW5ndGggPT09IDEgJiYgdGhpcy5wYWdlcy5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkX2luZGV4ICsgMSA9PT0gdGhpcy5wYWdlc1t0aGlzLmN1cnJlbnRfcGFnZV0ubGVuZ3RoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudF9wYWdlICsgMSA9PT0gdGhpcy5wYWdlcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSB0aGlzLmNoYW5nZV9pdGVtKDApO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5jaGFuZ2VfcGFnZSgwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGhpcy5uZXh0X3BhZ2UoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlX2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypSZXR1cm5zIHRoZSBpdGVtIHdpdGggdGhlIHByZXZpb3VzIGluZGV4XG4gICAgQ3ljbGVzIHRvIHByZXZpb3VzIHBhZ2UgaWYgbmVjZXNzYXJ5XG4gICAgVXNlZCBhcyBhIGNhbGxiYWNrIGZvciBjb250cm9scyovXG4gICAgcHJldmlvdXNfaXRlbSgpe1xuICAgICAgICBpZih0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlXS5sZW5ndGggPT09IDEgJiYgdGhpcy5wYWdlcy5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkX2luZGV4IC0xIDwgMCl7XG4gICAgICAgICAgICBpZih0aGlzLmN1cnJlbnRfcGFnZSAtMSA8IDApe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMucGFnZXMubGVuZ3RoID09PSAxKSB0aGlzLmNoYW5nZV9pdGVtKHRoaXMucGFnZXNbdGhpcy5jdXJyZW50X3BhZ2VdLmxlbmd0aC0xKTtcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuY2hhbmdlX3BhZ2UodGhpcy5wYWdlcy5sZW5ndGgtMSwgdGhpcy5wYWdlc1t0aGlzLnBhZ2VzLmxlbmd0aC0xXS5sZW5ndGgtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHRoaXMucHJldmlvdXNfcGFnZSh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudF9wYWdlIC0xXS5sZW5ndGgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlX2l0ZW0odGhpcy5zZWxlY3RlZF9pbmRleCAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBzY2FsaW5nIGFuaW1hdGlvbiBmb3IgdGhlIHNlbGVjdGVkIGl0ZW1cblxuICAgIElucHV0OiBpbmRleCBbbnVtYmVyXSAtIEl0ZW0gaW5kZXggKG9uIHNjcmVlbikqL1xuICAgIHNldF9pdGVtKGluZGV4Om51bWJlcikge1xuICAgICAgICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLnNwcml0ZV9ncm91cCk7XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLmdyb3VwKTtcbiAgICAgICAgbGV0IGl0bV9saXN0ID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOlBoYXNlci5TcHJpdGUpID0+IHsgcmV0dXJuIChzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBcIml0ZW1zX2ljb25zXCIpOyB9KTtcbiAgICAgICAgbGV0IGJnX2xpc3QgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6UGhhc2VyLlNwcml0ZSkgPT4geyByZXR1cm4gKHMuYWxpdmUgPT09IHRydWUgJiYgcy5rZXkgPT09IFwiaXRlbV9ib3JkZXJcIik7IH0pO1xuICAgICAgICBcbiAgICAgICAgbGV0IHR3ZWVucyA9IFt0aGlzLnR3ZWVucy5pdGVtLCB0aGlzLnR3ZWVucy5iZ107XG4gICAgICAgIGxldCBsaXN0cyA9IFtpdG1fbGlzdCwgYmdfbGlzdF07XG5cbiAgICAgICAgZm9yKGxldCBpPTA7IGk8MjsgaSsrKXtcbiAgICAgICAgICAgIHR3ZWVuc1tpXSA9IHRoaXMuZ2FtZS5hZGQudHdlZW4obGlzdHNbaV1baW5kZXhdLnNjYWxlKS50byhcbiAgICAgICAgICAgICAgICB7IHg6IDEuNTUsIHk6IDEuNTUgfSxcbiAgICAgICAgICAgICAgICBTRUxFQ1RfVFdFRU5fVElNRSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAtMSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy50d2VlbnMgPSB7aXRlbTogdHdlZW5zWzBdLCBiZzogdHdlZW5zWzFdfTtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyB3ZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBpdGVtIG9uIHRoZSBsaXN0XG5cbiAgICBJbnB1dDogcGFnZVtudW1iZXJdIC0gVGhlIGl0ZW0ncyBwYWdlXG4gICAgICAgICAgIGluZGV4W251bWJlcl0gLSBUaGUgaXRlbSdzIGluZGV4XG4gICAgXG4gICAgT3V0cHV0OiBbYm9vbGVhbl0gLSBUcnVlIGlmIGxhc3QsIGZhbHNlIG90aGVyd2lzZSovXG4gICAgaXNfbGFzdChwYWdlOm51bWJlciwgaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgaWYocGFnZSA9PT0gdGhpcy5wYWdlcy5sZW5ndGgtMSAmJiBpbmRleCA9PT0gdGhpcy5wYWdlc1twYWdlXS5sZW5ndGgtMSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qUmVtb3ZlcyB0aGUgc2NhbGluZyBhbmltYXRpb24gZnJvbSB0aGUgc2VsZWN0ZWQgaXRlbVxuXG4gICAgSW5wdXQ6IGluZGV4IFtudW1iZXJdIC0gSXRlbSBpbmRleCAob24gc2NyZWVuKSovXG4gICAgdW5zZXRfaXRlbShpbmRleDpudW1iZXIpIHtcbiAgICAgICAgbGV0IGl0bV9saXN0ID0gdGhpcy5zcHJpdGVfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChzOlBoYXNlci5TcHJpdGUpID0+IHsgcmV0dXJuIChzLmFsaXZlID09PSB0cnVlICYmIHMua2V5ID09PSBcIml0ZW1zX2ljb25zXCIpOyB9KTtcbiAgICAgICAgbGV0IGJnX2xpc3QgPSB0aGlzLnNwcml0ZV9ncm91cC5jaGlsZHJlbi5maWx0ZXIoKHM6UGhhc2VyLlNwcml0ZSkgPT4geyByZXR1cm4gKHMuYWxpdmUgPT09IHRydWUgJiYgcy5rZXkgPT09IFwiaXRlbV9ib3JkZXJcIik7IH0pO1xuXG4gICAgICAgIGxldCB0d2VlbnMgPSBbdGhpcy50d2VlbnMuaXRlbSwgdGhpcy50d2VlbnMuYmddO1xuICAgICAgICBsZXQgbGlzdHMgPSBbaXRtX2xpc3QsIGJnX2xpc3RdO1xuXG4gICAgICAgIGZvcihsZXQgaT0wOyBpPDI7IGkrKyl7XG4gICAgICAgICAgICBpZiAobGlzdHNbaV1baW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgKGxpc3RzW2ldW2luZGV4XSBhcyBQaGFzZXIuU3ByaXRlKS5zY2FsZS5zZXRUbygxLjAsIDEuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHdlZW5zW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnR3ZWVucy5yZW1vdmUodHdlZW5zW2ldKTtcbiAgICAgICAgICAgICAgICB0d2VlbnNbaV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypTZXRzIHRoZSBjdXJzb3IgdG8gdGhlIGN1cnJlbnQgaXRlbSdzIGluZGV4XG5cbiAgICBJbnB1dDogaW5kZXggW251bWJlcl0gLSBTZWxlY3RlZCBpdGVtJ3MgaW5kZXgqL1xuICAgIHNldF9jdXJzb3IoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgdGhpcy5wYXJlbnQuY3Vyc29yX21hbmFnZXIubW92ZV90byhDVVJTT1JfWCArIGluZGV4KkxJTkVfU0hJRlQsIENVUlNPUl9ZLCBcInBvaW50XCIpO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3cgYXQgcGFnZSAwXG5cbiAgICBJbnB1dDogaXRlbXMgW2FycmF5XSAtIFRoZSBpdGVtIGxpc3QgdG8gZGlzcGxheSAoYXJyYXkgb2YgSXRlbSlcbiAgICAgICAgICAgaW5kZXggW251bWJlcl0gLSBJbml0aWFsIHNlbGVjdGVkIGl0ZW0gaW5kZXhcbiAgICAgICAgICAgcGFnZSBbbnVtYmVyXSAtIEluaXRpYWwgc2VsZWN0ZWQgcGFnZSBpbmRleFxuICAgICAgICAgICBjbG9zZV9jYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKVxuICAgICAgICAgICBvcGVuX2NhbGxiYWNrIFtmdW5jdGlvbl0gLSBDYWxsYmFjayBmdW5jdGlvbiAoT3B0aW9uYWwpKi9cbiAgICBvcGVuKGl0ZW1zOntba2V5X25hbWU6c3RyaW5nXSA6IFNob3BJdGVtfSwgaW5kZXg6bnVtYmVyPTAsIHBhZ2U6bnVtYmVyPTAsIGNsb3NlX2NhbGxiYWNrPzpGdW5jdGlvbiwgb3Blbl9jYWxsYmFjaz86RnVuY3Rpb24pe1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlID0gcGFnZVxuICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IHRydWU7XG4gICAgICAgIHRoaXMubWFrZV9wYWdlcygpO1xuXG4gICAgICAgIHRoaXMuY2hlY2tfYXJyb3dzKCk7XG4gICAgICAgIHRoaXMuc2V0X3Nwcml0ZXModGhpcy5jdXJyZW50X3BhZ2UpO1xuICAgICAgICB0aGlzLnNldF9jdXJzb3IodGhpcy5zZWxlY3RlZF9pbmRleCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2dyb3VwX3BvcygpO1xuXG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBjbG9zZV9jYWxsYmFjaztcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgaW5mb3JtYXRpb24gYW5kIGNsb3NlcyB0aGUgd2luZG93XG5cbiAgICBJbnB1dDogZGVzdHJveSBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzcHJpdGVzIGFyZSBkZXN0cm95ZWQqL1xuICAgIGNsb3NlKGRlc3Ryb3k6Ym9vbGVhbj1mYWxzZSl7XG4gICAgICAgIHRoaXMudW5zZXRfaXRlbSh0aGlzLnNlbGVjdGVkX2luZGV4KTtcblxuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuc3ByaXRlX2dyb3VwLCBkZXN0cm95KTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLnRhZ19ncm91cCwgZGVzdHJveSk7XG4gICAgICAgIGtpbGxfYWxsX3Nwcml0ZXModGhpcy50ZXh0X2dyb3VwLCBkZXN0cm95KTtcbiAgICAgICAga2lsbF9hbGxfc3ByaXRlcyh0aGlzLmJnX2dyb3VwLCBkZXN0cm95KTtcblxuICAgICAgICB0aGlzLml0ZW1zID0ge307XG4gICAgICAgIHRoaXMucGFnZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudF9wYWdlID0gMDtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zZXRfYXJyb3dzKGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgV2luZG93LCBUZXh0T2JqIH0gZnJvbSAnLi4vLi4vV2luZG93JztcbmltcG9ydCB7IGtpbGxfYWxsX3Nwcml0ZXMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBpdGVtX3R5cGVzIH0gZnJvbSAnLi4vLi4vSXRlbSc7XG5pbXBvcnQgeyBlZmZlY3Rfb3BlcmF0b3JzLCBlZmZlY3RfdHlwZXMgfSBmcm9tICcuLi8uLi9FZmZlY3QnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cbmNvbnN0IEJBU0VfWCA9IDEyODtcbmNvbnN0IEJBU0VfWSA9IDg4O1xuY29uc3QgQkFTRV9XSURUSCA9IDEwODtcbmNvbnN0IEJBU0VfSEVJR0hUID0gNjg7XG5cbmNvbnN0IENBTlRfRVFVSVBfWCA9IDE0O1xuY29uc3QgQ0FOVF9FUVVJUF9ZID0gMzI7XG5cbmNvbnN0IFRYVF9HUk9VUF9YID0gODtcbmNvbnN0IFRYVF9HUk9VUF9ZID0gODtcblxuY29uc3QgTElORV9TSElGVCA9IDE2O1xuXG5jb25zdCBDVVJSX1NUQVRfRU5EX1ggPSA1MztcbmNvbnN0IE5FV19TVEFUX0VORF9YID0gQ1VSUl9TVEFUX0VORF9YICsgNDA7XG5cbmNvbnN0IEFSUk9XX1ggPSA2NTtcbmNvbnN0IEFSUk9XX1kgPSA3O1xuY29uc3QgVVBfQVJST1dfWV9TSElGVCA9IC0xO1xuXG5jb25zdCBTRVBBUkFUT1JfWCA9IDQ7XG5jb25zdCBTRVBBUkFUT1JfWSA9IDE5O1xuY29uc3QgU0VQQVJBVE9SX0xFTkdUSCA9IDEwNDtcblxuY29uc3QgU0VQQVJBVE9SX0NPVU5UID0gMztcblxuLypDb21wYXJlcyB0aGUgY2hhcmFjdGVyJ3MgZXF1aXBwZWQgaXRlbSB3aXRoIGFub3RoZXIgaXRlbVxuVXNlZCBpbiBzaG9wIG1lbnVzLiBXaWxsIHNob3cgc3RhdCBkaWZmZXJlbmNlc1xuXG5JbnB1dDogZ2FtZSBbUGhhc2VyOkdhbWVdIC0gUmVmZXJlbmNlIHRvIHRoZSBydW5uaW5nIGdhbWUgb2JqZWN0XG4gICAgICAgZGF0YSBbR29sZGVuU3VuXSAtIFJlZmVyZW5jZSB0byB0aGUgbWFpbiBKUyBDbGFzcyBpbnN0YW5jZSovXG5leHBvcnQgY2xhc3MgRXF1aXBDb21wYXJlIHtcbiAgICBwdWJsaWMgZ2FtZTpQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTpHb2xkZW5TdW47XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOkZ1bmN0aW9uO1xuXG4gICAgcHVibGljIHNlbGVjdGVkX2l0ZW06c3RyaW5nO1xuICAgIHB1YmxpYyBzZWxlY3RlZF9jaGFyOk1haW5DaGFyO1xuICAgIHB1YmxpYyBpc19vcGVuOmJvb2xlYW47XG4gICAgcHVibGljIHdpbmRvdzpXaW5kb3c7XG4gICAgcHVibGljIHRleHRfZ3JvdXA6UGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBhcnJvd19ncm91cDpQaGFzZXIuR3JvdXA7XG5cbiAgICBwdWJsaWMgY2FudF9lcXVpcF90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIGF0a19sYWJlbF90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIGRlZl9sYWJlbF90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIGFnaV9sYWJlbF90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIGl0ZW1fbmFtZV90ZXh0OlRleHRPYmo7XG5cbiAgICBwdWJsaWMgY3Vycl9hdGtfdGV4dDpUZXh0T2JqO1xuICAgIHB1YmxpYyBjdXJyX2RlZl90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIGN1cnJfYWdpX3RleHQ6VGV4dE9iajtcblxuICAgIHB1YmxpYyBuZXdfYXRrX3RleHQ6VGV4dE9iajtcbiAgICBwdWJsaWMgbmV3X2RlZl90ZXh0OlRleHRPYmo7XG4gICAgcHVibGljIG5ld19hZ2lfdGV4dDpUZXh0T2JqO1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZTpQaGFzZXIuR2FtZSwgZGF0YTpHb2xkZW5TdW4pIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93KHRoaXMuZ2FtZSwgQkFTRV9YLCBCQVNFX1ksIEJBU0VfV0lEVEgsIEJBU0VfSEVJR0hUKTtcblxuICAgICAgICB0aGlzLnRleHRfZ3JvdXAgPSB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoXCJ0ZXh0c1wiLCB7eDogVFhUX0dST1VQX1gsIHk6IFRYVF9HUk9VUF9ZfSk7XG4gICAgICAgIHRoaXMuYXJyb3dfZ3JvdXAgPSB0aGlzLndpbmRvdy5kZWZpbmVfaW50ZXJuYWxfZ3JvdXAoXCJhcnJvd3NcIiwge3g6IEFSUk9XX1gsIHk6IEFSUk9XX1l9KTtcblxuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dCA9IHRoaXMud2luZG93LnNldF90ZXh0X2luX3Bvc2l0aW9uKFwiQ2FuJ3QgZXF1aXBcIiwgQ0FOVF9FUVVJUF9YLCBDQU5UX0VRVUlQX1ksIGZhbHNlLCBmYWxzZSwgdGhpcy53aW5kb3cuZm9udF9jb2xvciwgZmFsc2UsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dC5zaGFkb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIHRoaXMuYXRrX2xhYmVsX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJBVEtcIiwwLDAsZmFsc2UpOyBcbiAgICAgICAgdGhpcy5kZWZfbGFiZWxfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIkRFRlwiLDAsTElORV9TSElGVCxmYWxzZSk7ICBcbiAgICAgICAgdGhpcy5hZ2lfbGFiZWxfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIkFHTFwiLDAsMipMSU5FX1NISUZULGZhbHNlKTsgXG4gICAgICAgIHRoaXMuaXRlbV9uYW1lX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJcIiwwLDMqTElORV9TSElGVCxmYWxzZSk7IFxuXG4gICAgICAgIHRoaXMuY3Vycl9hdGtfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLENVUlJfU1RBVF9FTkRfWCwgMCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY3Vycl9kZWZfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLENVUlJfU1RBVF9FTkRfWCwgTElORV9TSElGVCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY3Vycl9hZ2lfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLENVUlJfU1RBVF9FTkRfWCwgMipMSU5FX1NISUZULCB0cnVlKTtcblxuICAgICAgICB0aGlzLm5ld19hdGtfdGV4dCA9IHRoaXMuaW5pdF90ZXh0X3Nwcml0ZShcIlwiLE5FV19TVEFUX0VORF9YLCAwLCB0cnVlKTtcbiAgICAgICAgdGhpcy5uZXdfZGVmX3RleHQgPSB0aGlzLmluaXRfdGV4dF9zcHJpdGUoXCJcIixORVdfU1RBVF9FTkRfWCwgTElORV9TSElGVCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubmV3X2FnaV90ZXh0ID0gdGhpcy5pbml0X3RleHRfc3ByaXRlKFwiXCIsTkVXX1NUQVRfRU5EX1gsIDIqTElORV9TSElGVCwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy50ZXh0X2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC5hbHBoYSA9IDA7XG4gICAgfVxuXG4gICAgLypJbml0aWFsaXplcyBhIHRleHQtc2hhZG93IHBhaXJcblxuICAgIElucHV0OiB0ZXh0IFtzdHJpbmddIC0gVGhlIHRleHQgdG8gZGlzcGxheVxuICAgICAgICAgICB4LCB5IFtudW1iZXJdIC0gVGhlIHRleHQgcG9zaXRpb25cbiAgICAgICAgICAgcmlnaHRfYWxpZ24gLSBJZiB0cnVlLCB0aGUgdGV4dCB3aWxsIGJlIHJpZ2h0LWFsaWduZWQqL1xuICAgIGluaXRfdGV4dF9zcHJpdGUodGV4dDpzdHJpbmcsIHg6bnVtYmVyLCB5Om51bWJlciwgcmlnaHRfYWxpZ246Ym9vbGVhbil7XG4gICAgICAgIGxldCB0eHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbih0ZXh0LCB4LCB5LCByaWdodF9hbGlnbik7XG4gICAgICAgIHRoaXMud2luZG93LmFkZF90b19pbnRlcm5hbF9ncm91cChcInRleHRzXCIsdHh0LnNoYWRvdyk7XG4gICAgICAgIHRoaXMud2luZG93LmFkZF90b19pbnRlcm5hbF9ncm91cChcInRleHRzXCIsdHh0LnRleHQpO1xuICAgICAgICByZXR1cm4gdHh0O1xuICAgIH1cblxuICAgIC8qQ3JlYXRlcyBvciByZWN5Y2xlcyBhbiBhcnJvdyBzcHJpdGVcblxuICAgIElucHV0OiBkaWZmIFtudW1iZXJdIC0gU3RhdCBkaWZmZXJlbmNlLCBhZmZlY3RzIHRoZSBhcnJvdyB0eXBlXG4gICAgICAgICAgIGxpbmUgW251bWJlcl0gLSBMaW5lIGluZGV4IGZvciBkaXNwbGF5aW5nIHB1cnBvc2VzKi9cbiAgICBtYWtlX2Fycm93KGRpZmY6bnVtYmVyLCBsaW5lOm51bWJlcil7XG4gICAgICAgIGlmKGRpZmYgPT09IDApIHJldHVybjtcblxuICAgICAgICBsZXQgYXJyb3dfeCA9IDA7XG4gICAgICAgIGxldCBhcnJvd195ID0gTElORV9TSElGVCpsaW5lICsgKGRpZmY+MCA/IFVQX0FSUk9XX1lfU0hJRlQgOiAwKTtcbiAgICAgICAgbGV0IGtleSA9IGRpZmY+MCA/IFwidXBfYXJyb3dcIiA6IFwiZG93bl9hcnJvd1wiO1xuXG4gICAgICAgIGxldCBkZWFkX2Fycm93cyA9IHRoaXMuYXJyb3dfZ3JvdXAuY2hpbGRyZW4uZmlsdGVyKChhOlBoYXNlci5TcHJpdGUpID0+IHsgcmV0dXJuIChhLmFsaXZlID09PSBmYWxzZSAmJiBhLmtleSA9PT0ga2V5KTsgfSk7XG4gICAgICAgIGlmKGRlYWRfYXJyb3dzLmxlbmd0aD4wKSAoZGVhZF9hcnJvd3NbMF0gYXMgUGhhc2VyLlNwcml0ZSkucmVzZXQoYXJyb3dfeCwgYXJyb3dfeSk7XG4gICAgICAgIGVsc2UgdGhpcy53aW5kb3cuY3JlYXRlX2F0X2dyb3VwKGFycm93X3gsIGFycm93X3ksIGtleSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiYXJyb3dzXCIpO1xuICAgIH1cblxuICAgIC8qRmluZHMgdGhlIHN0YXRpc3RpY2FsIGRpZmZlcmVuY2UgaW4gYSBzdGF0IGZvciB0d28gaXRlbXNcblxuICAgIElucHV0OiBlcXVpcHBlZCBbc3RyaW5nXSAtIEtleSBuYW1lIGZvciB0aGUgZXF1aXBwZWQgaXRlbVxuICAgICAgICAgICBuZXdfaXRlbSBbc3RyaW5nXSAtIEtleSBuYW1lIGZvciB0aGUgaXRlbSBiZWluZyBjb21wYXJlZFxuICAgICAgICAgICBzdGF0IFtzdHJpbmddIC0gU3RhdCB0byBjb21wYXJlXG4gICAgICAgICAgIGN1cnJlbnRfdmFsIFtudW1iZXJdIC0gQ3VycmVudCB2YWx1ZSBvZiB0aGUgc3RhdCovXG4gICAgY29tcGFyZV9pdGVtcyhlcXVpcHBlZDpzdHJpbmcsIG5ld19pdGVtOnN0cmluZywgc3RhdDpzdHJpbmcsIGN1cnJlbnRfdmFsOm51bWJlcil7XG4gICAgICAgIGxldCBlcV9lZmZlY3RzID0ge307XG4gICAgICAgIGlmKGVxdWlwcGVkKXtcbiAgICAgICAgICAgIGVxX2VmZmVjdHMgPSBfLm1hcEtleXModGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtlcXVpcHBlZF0uZWZmZWN0cywgZWZmZWN0ID0+IGVmZmVjdC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbml0ZW1fZWZmZWN0cyA9IF8ubWFwS2V5cyh0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W25ld19pdGVtXS5lZmZlY3RzLCBlZmZlY3QgPT4gZWZmZWN0LnR5cGUpO1xuXG4gICAgICAgIGxldCBlcV9zdGF0ID0gMDtcbiAgICAgICAgbGV0IG5pdGVtX3N0YXQgPSAwO1xuXG4gICAgICAgIGlmKGVxX2VmZmVjdHNbc3RhdF0pe1xuICAgICAgICAgICAgc3dpdGNoKGVxX2VmZmVjdHNbc3RhdF0ub3BlcmF0b3Ipe1xuICAgICAgICAgICAgICAgIGNhc2UgZWZmZWN0X29wZXJhdG9ycy5QTFVTOlxuICAgICAgICAgICAgICAgICAgICBlcV9zdGF0ID0gZXFfZWZmZWN0c1tzdGF0XS5xdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLk1JTlVTOlxuICAgICAgICAgICAgICAgICAgICBlcV9zdGF0ID0gLTEqZXFfZWZmZWN0c1tzdGF0XS5xdWFudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlRJTUVTOlxuICAgICAgICAgICAgICAgICAgICBlcV9zdGF0ID0gZXFfZWZmZWN0c1tzdGF0XS5xdWFudGl0eSpjdXJyZW50X3ZhbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLkRJVklERTpcbiAgICAgICAgICAgICAgICAgICAgZXFfc3RhdCA9IChlcV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5L2N1cnJlbnRfdmFsKSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYobml0ZW1fZWZmZWN0c1tzdGF0XSl7XG4gICAgICAgICAgICBzd2l0Y2gobml0ZW1fZWZmZWN0c1tzdGF0XS5vcGVyYXRvcil7XG4gICAgICAgICAgICAgICAgY2FzZSBlZmZlY3Rfb3BlcmF0b3JzLlBMVVM6XG4gICAgICAgICAgICAgICAgICAgIG5pdGVtX3N0YXQgPSBuaXRlbV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuTUlOVVM6XG4gICAgICAgICAgICAgICAgICAgIG5pdGVtX3N0YXQgPSAtMSpuaXRlbV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuVElNRVM6XG4gICAgICAgICAgICAgICAgICAgIG5pdGVtX3N0YXQgPSBuaXRlbV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5KmN1cnJlbnRfdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGVmZmVjdF9vcGVyYXRvcnMuRElWSURFOlxuICAgICAgICAgICAgICAgICAgICBuaXRlbV9zdGF0ID0gLShjdXJyZW50X3ZhbC9uaXRlbV9lZmZlY3RzW3N0YXRdLnF1YW50aXR5KSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5pdGVtX3N0YXQgLSBlcV9zdGF0KTtcbiAgICB9XG5cbiAgICAvKlVwZGF0ZXMgdGhlIHRleHQgYW5kIGNyZWF0ZXMgYXJyb3dzIGlmIG5lY2Vzc2FyeVxuICAgIFxuICAgIElucHV0OiBzdGF0IFtzdHJpbmddIC0gXCJhdHRhY2tcIiwgXCJkZWZlbnNlXCIsIFwiYWdpbGl0eVwiXG4gICAgICAgICAgIGN1cnJfdmFsIFtudW1iZXJdIC0gVGhlIGN1cnJlbnQgc3RhdFxuICAgICAgICAgICBzdGF0X2RpZmYgW251bWJlcl0gLSBTdGF0IGRpZmZlcmVuY2UqL1xuICAgIGRpc3BsYXlfc3RhdChzdGF0OnN0cmluZywgY3Vycl92YWw6bnVtYmVyLCBzdGF0X2RpZmY6bnVtYmVyKXtcbiAgICAgICAgbGV0IG5ld19zdGF0X3RleHQgPSBudWxsO1xuICAgICAgICBsZXQgY3Vycl9zdGF0X3RleHQgPSBudWxsO1xuICAgICAgICBsZXQgbGluZSA9IDA7XG5cbiAgICAgICAgc3dpdGNoKHN0YXQpe1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQVRUQUNLOlxuICAgICAgICAgICAgICAgIG5ld19zdGF0X3RleHQgPSB0aGlzLm5ld19hdGtfdGV4dDtcbiAgICAgICAgICAgICAgICBjdXJyX3N0YXRfdGV4dCA9IHRoaXMuY3Vycl9hdGtfdGV4dDtcbiAgICAgICAgICAgICAgICBsaW5lID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZWZmZWN0X3R5cGVzLkRFRkVOU0U6XG4gICAgICAgICAgICAgICAgbmV3X3N0YXRfdGV4dCA9IHRoaXMubmV3X2RlZl90ZXh0O1xuICAgICAgICAgICAgICAgIGN1cnJfc3RhdF90ZXh0ID0gdGhpcy5jdXJyX2RlZl90ZXh0O1xuICAgICAgICAgICAgICAgIGxpbmUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBlZmZlY3RfdHlwZXMuQUdJTElUWTpcbiAgICAgICAgICAgICAgICBuZXdfc3RhdF90ZXh0ID0gdGhpcy5uZXdfYWdpX3RleHQ7XG4gICAgICAgICAgICAgICAgY3Vycl9zdGF0X3RleHQgPSB0aGlzLmN1cnJfYWdpX3RleHQ7XG4gICAgICAgICAgICAgICAgbGluZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG5ld19zdGF0X3RleHQudGV4dC5hbHBoYSA9IHN0YXRfZGlmZj09PTAgPyAwIDogMTtcbiAgICAgICAgbmV3X3N0YXRfdGV4dC5zaGFkb3cuYWxwaGEgPSBzdGF0X2RpZmY9PT0wID8gMCA6IDE7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFN0cmluZyhjdXJyX3ZhbCksIGN1cnJfc3RhdF90ZXh0KTtcbiAgICAgICAgaWYoc3RhdF9kaWZmID09PSAwKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChTdHJpbmcoY3Vycl92YWwgKyBzdGF0X2RpZmYpLCBuZXdfc3RhdF90ZXh0KTtcbiAgICAgICAgdGhpcy5tYWtlX2Fycm93KHN0YXRfZGlmZiwgbGluZSk7XG4gICAgfVxuXG4gICAgLypDb21wYXJlIHRoZSBzYW1lIGl0ZW0gZm9yIGEgZGlmZmVyZW50IGNoYXJhY3RlciovXG4gICAgY2hhbmdlX2NoYXJhY3RlcihrZXlfbmFtZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2NoYXIgPSB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLm1lbWJlcnMuZmlsdGVyKGMgPT4geyByZXR1cm4gKGMua2V5X25hbWUgPT09IGtleV9uYW1lKX0pWzBdO1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuYXJyb3dfZ3JvdXApO1xuXG4gICAgICAgIHRoaXMuc2hvd19zdGF0X2NvbXBhcmUoKTtcbiAgICB9XG5cbiAgICAvKkRpc3BsYXlzIHRoZSBzdGF0IGNvbXBhcmlzb24qL1xuICAgIHNob3dfc3RhdF9jb21wYXJlKCl7XG4gICAgICAgIGlmKCF0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbV0uZXF1aXBhYmxlX2NoYXJzLmluY2x1ZGVzKHRoaXMuc2VsZWN0ZWRfY2hhci5rZXlfbmFtZSkpe1xuICAgICAgICAgICAgdGhpcy5zaG93X2NhbnRfZXF1aXAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnRleHQuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dC5zaGFkb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIGxldCBzZWxlY3RlZF9pdGVtX3R5cGUgPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W3RoaXMuc2VsZWN0ZWRfaXRlbV0udHlwZTtcbiAgICAgICAgbGV0IGNoYXJfY3VycmVudF9pdGVtID0gbnVsbDtcbiAgICAgICAgbGV0IGVxX3Nsb3RzID0gdGhpcy5zZWxlY3RlZF9jaGFyLmVxdWlwX3Nsb3RzO1xuXG4gICAgICAgIHN3aXRjaChzZWxlY3RlZF9pdGVtX3R5cGUpe1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLldFQVBPTlM6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMud2VhcG9uKSBjaGFyX2N1cnJlbnRfaXRlbSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3RbZXFfc2xvdHMud2VhcG9uLmtleV9uYW1lXS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICBicmVhazsgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkFSTU9SOlxuICAgICAgICAgICAgICAgIGlmKGVxX3Nsb3RzLmJvZHkpIGNoYXJfY3VycmVudF9pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtlcV9zbG90cy5ib2R5LmtleV9uYW1lXS5rZXlfbmFtZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgaXRlbV90eXBlcy5DSEVTVF9QUk9URUNUT1I6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMuY2hlc3QpIGNoYXJfY3VycmVudF9pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtlcV9zbG90cy5jaGVzdC5rZXlfbmFtZV0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuSEVBRF9QUk9URUNUT1I6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMuaGVhZCkgY2hhcl9jdXJyZW50X2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLmhlYWQua2V5X25hbWVdLmtleV9uYW1lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLlJJTkc6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMucmluZykgY2hhcl9jdXJyZW50X2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLnJpbmcua2V5X25hbWVdLmtleV9uYW1lO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBpdGVtX3R5cGVzLkxFR19QUk9URUNUT1I6XG4gICAgICAgICAgICAgICAgaWYoZXFfc2xvdHMuYm9vdHMpIGNoYXJfY3VycmVudF9pdGVtID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtlcV9zbG90cy5ib290cy5rZXlfbmFtZV0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGl0ZW1fdHlwZXMuVU5ERVJXRUFSOlxuICAgICAgICAgICAgICAgIGlmKGVxX3Nsb3RzLnVuZGVyd2VhcikgY2hhcl9jdXJyZW50X2l0ZW0gPSB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2VxX3Nsb3RzLnVuZGVyd2Vhci5rZXlfbmFtZV0ua2V5X25hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYXRrX2RpZmYgPSB0aGlzLmNvbXBhcmVfaXRlbXMoY2hhcl9jdXJyZW50X2l0ZW0sIHRoaXMuc2VsZWN0ZWRfaXRlbSwgZWZmZWN0X3R5cGVzLkFUVEFDSywgdGhpcy5zZWxlY3RlZF9jaGFyLmF0ayk7XG4gICAgICAgIGxldCBkZWZfZGlmZiA9IHRoaXMuY29tcGFyZV9pdGVtcyhjaGFyX2N1cnJlbnRfaXRlbSwgdGhpcy5zZWxlY3RlZF9pdGVtLCBlZmZlY3RfdHlwZXMuREVGRU5TRSwgdGhpcy5zZWxlY3RlZF9jaGFyLmRlZik7XG4gICAgICAgIGxldCBhZ2lfZGlmZiA9IHRoaXMuY29tcGFyZV9pdGVtcyhjaGFyX2N1cnJlbnRfaXRlbSwgdGhpcy5zZWxlY3RlZF9pdGVtLCBlZmZlY3RfdHlwZXMuQUdJTElUWSwgdGhpcy5zZWxlY3RlZF9jaGFyLmFnaSk7XG5cbiAgICAgICAgdGhpcy5kaXNwbGF5X3N0YXQoZWZmZWN0X3R5cGVzLkFUVEFDSywgdGhpcy5zZWxlY3RlZF9jaGFyLmF0aywgYXRrX2RpZmYpO1xuICAgICAgICB0aGlzLmRpc3BsYXlfc3RhdChlZmZlY3RfdHlwZXMuREVGRU5TRSwgdGhpcy5zZWxlY3RlZF9jaGFyLmRlZiwgZGVmX2RpZmYpO1xuICAgICAgICB0aGlzLmRpc3BsYXlfc3RhdChlZmZlY3RfdHlwZXMuQUdJTElUWSwgdGhpcy5zZWxlY3RlZF9jaGFyLmFnaSwgYWdpX2RpZmYpO1xuXG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5kYXRhLmluZm8uaXRlbXNfbGlzdFtjaGFyX2N1cnJlbnRfaXRlbV0gPyB0aGlzLmRhdGEuaW5mby5pdGVtc19saXN0W2NoYXJfY3VycmVudF9pdGVtXS5uYW1lIDogXCJcIjtcbiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlX3RleHQobmFtZSwgdGhpcy5pdGVtX25hbWVfdGV4dCk7XG5cbiAgICAgICAgZm9yKGxldCBpPTA7IGk8U0VQQVJBVE9SX0NPVU5UOyBpKyspe1xuICAgICAgICAgICAgdGhpcy53aW5kb3cuZHJhd19zZXBhcmF0b3IoU0VQQVJBVE9SX1gsIFNFUEFSQVRPUl9ZK0xJTkVfU0hJRlQqaSwgU0VQQVJBVE9SX1grU0VQQVJBVE9SX0xFTkdUSCAsIFNFUEFSQVRPUl9ZK0xJTkVfU0hJRlQqaSwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50ZXh0X2dyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC5hbHBoYSA9IDE7XG4gICAgfVxuXG4gICAgLypEaXNwbGF5cyB0aGUgXCJDYW4ndCBlcXVpcFwiIG1lc3NhZ2UqL1xuICAgIHNob3dfY2FudF9lcXVpcCgpe1xuICAgICAgICB0aGlzLnRleHRfZ3JvdXAuYWxwaGEgPSAwO1xuICAgICAgICB0aGlzLmFycm93X2dyb3VwLmFscGhhID0gMDtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xlYXJfc2VwYXJhdG9ycygpO1xuXG4gICAgICAgIHRoaXMuY2FudF9lcXVpcF90ZXh0LnRleHQuYWxwaGEgPSAxO1xuICAgICAgICB0aGlzLmNhbnRfZXF1aXBfdGV4dC5zaGFkb3cuYWxwaGEgPSAxO1xuICAgIH1cblxuICAgIC8qT3BlbnMgdGhpcyB3aW5kb3cgd2l0aCB0aGUgc2VsZWN0ZWQgbWVtYmVyXG5cbiAgICBJbnB1dDogY2hhcl9rZXkgW3N0cmluZ10gLSBUaGUgY2hhcmFjdGVyJ3Mga2V5IG5hbWVcbiAgICAgICAgICAgaXRlbSBbc3RyaW5nXSAtIEtleSBuYW1lIG9mIHRoZSBpdGVtIHRvIGNvbXBhcmVcbiAgICAgICAgICAgY2xvc2VfY2FsbGJhY2sgW2Z1bmN0aW9uXSAtIENhbGxiYWNrIGZ1bmN0aW9uIChPcHRpb25hbClcbiAgICAgICAgICAgb3Blbl9jYWxsYmFjayBbZnVuY3Rpb25dIC0gQ2FsbGJhY2sgZnVuY3Rpb24gKE9wdGlvbmFsKSovXG4gICAgb3BlbihjaGFyX2tleTpzdHJpbmcsIGl0ZW06c3RyaW5nLCBjbG9zZV9jYWxsYmFjaz86RnVuY3Rpb24sIG9wZW5fY2FsbGJhY2s/OkZ1bmN0aW9uKXtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmZpbHRlcigoYzpNYWluQ2hhcikgPT4geyByZXR1cm4gKGMua2V5X25hbWUgPT09IGNoYXJfa2V5KX0pWzBdO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW0gPSBpdGVtO1xuXG4gICAgICAgIHRoaXMuc2hvd19zdGF0X2NvbXBhcmUoKTtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMud2luZG93LnNob3cob3Blbl9jYWxsYmFjaywgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qQ2xlYXJzIGluZm9ybWF0aW9uIGFuZCBjbG9zZXMgdGhlIHdpbmRvd1xuXG4gICAgSW5wdXQ6IGRlc3Ryb3kgW2Jvb2xlYW5dIC0gSWYgdHJ1ZSwgc3ByaXRlcyBhcmUgZGVzdHJveWVkKi9cbiAgICBjbG9zZShkZXN0cm95OmJvb2xlYW49ZmFsc2Upe1xuICAgICAgICBraWxsX2FsbF9zcHJpdGVzKHRoaXMuYXJyb3dfZ3JvdXAsIGRlc3Ryb3kpO1xuICAgICAgICBpZihkZXN0cm95KSBraWxsX2FsbF9zcHJpdGVzKHRoaXMudGV4dF9ncm91cCwgZGVzdHJveSk7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9jaGFyID0gbnVsbDtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IEJ1dHRvblNlbGVjdE1lbnUgfSBmcm9tICcuLi9zdXBwb3J0X21lbnVzL0J1dHRvblNlbGVjdE1lbnUnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IENvbnRyb2xNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvQ29udHJvbE1hbmFnZXInO1xuXG5jb25zdCBUSVRMRV9XSU5ET1dfV0lEVEggPSAzNlxuY29uc3QgWUVTX0FDVElPTiA9IFwieWVzXCI7XG5jb25zdCBOT19BQ1RJT04gPSBcIm5vXCI7XG5cbmV4cG9ydCBjbGFzcyBZZXNOb01lbnV7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRhdGE6R29sZGVuU3VuO1xuICAgIHB1YmxpYyBjb250cm9sX21hbmFnZXI6Q29udHJvbE1hbmFnZXI7XG5cbiAgICBwdWJsaWMgeWVzX2NhbGxiYWNrOkZ1bmN0aW9uO1xuICAgIHB1YmxpYyBub19jYWxsYmFjazpGdW5jdGlvbjtcbiAgICBcbiAgICBwdWJsaWMgYnV0dG9uc19rZXlzOnN0cmluZ1tdO1xuICAgIHB1YmxpYyBpc19vcGVuOmJvb2xlYW47XG4gICAgcHVibGljIG1lbnU6QnV0dG9uU2VsZWN0TWVudTtcbiAgICBjb25zdHJ1Y3RvcihnYW1lOlBoYXNlci5HYW1lLCBkYXRhOkdvbGRlblN1biwgY29udHJvbF9tYW5hZ2VyOkNvbnRyb2xNYW5hZ2VyKXtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIgPSBjb250cm9sX21hbmFnZXI7XG5cbiAgICAgICAgdGhpcy55ZXNfY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLm5vX2NhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICB0aGlzLmJ1dHRvbnNfa2V5cyA9IFtZRVNfQUNUSU9OLCBOT19BQ1RJT05dO1xuXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMubWVudSA9IG5ldyBCdXR0b25TZWxlY3RNZW51KHRoaXMuZ2FtZSwgdGhpcy5kYXRhLFxuICAgICAgICAgICAgdGhpcy5idXR0b25zX2tleXMsXG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnNfa2V5cy5tYXAoYiA9PiBjYXBpdGFsaXplKGIpKSxcbiAgICAgICAgICAgIHtvbl9wcmVzczogdGhpcy5idXR0b25fcHJlc3MuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uX2NhbmNlbDogdGhpcy5jbG9zZV9tZW51LmJpbmQodGhpcyl9LFxuICAgICAgICAgICAgdGhpcy5jb250cm9sX21hbmFnZXIpO1xuICAgICAgICB0aGlzLm1lbnUudGl0bGVfd2luZG93LnVwZGF0ZV9zaXplKHt3aWR0aDogVElUTEVfV0lORE9XX1dJRFRIfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlX3Bvc2l0aW9uKG5ld194Om51bWJlcj11bmRlZmluZWQsIG5ld195Om51bWJlcj11bmRlZmluZWQpIHtcbiAgICAgICAgaWYobmV3X3ggIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBsZXQgZGlmZiA9IHRoaXMubWVudS50aXRsZV93aW5kb3cueCAtIHRoaXMubWVudS54O1xuICAgICAgICAgICAgdGhpcy5tZW51LnggPSBuZXdfeDtcbiAgICAgICAgICAgIHRoaXMubWVudS50aXRsZV93aW5kb3cueCA9IG5ld194ICsgZGlmZjtcbiAgICAgICAgfSBcbiAgICAgICAgaWYobmV3X3kgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLm1lbnUueSA9IG5ld195O1xuICAgICAgICAgICAgdGhpcy5tZW51LnRpdGxlX3dpbmRvdy55ID0gbmV3X3k7XG4gICAgICAgIH0gXG4gICAgICAgIHRoaXMubWVudS51cGRhdGVfcG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5tZW51LnRpdGxlX3dpbmRvdy5zZW5kX3RvX2Zyb250KCk7XG4gICAgfVxuXG4gICAgYnV0dG9uX3ByZXNzKCl7XG4gICAgICAgIHN3aXRjaCAodGhpcy5idXR0b25zX2tleXNbdGhpcy5tZW51LnNlbGVjdGVkX2J1dHRvbl9pbmRleF0pe1xuICAgICAgICAgICAgY2FzZSBZRVNfQUNUSU9OOlxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VfbWVudSh0aGlzLnllc19jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5PX0FDVElPTjpcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlX21lbnUodGhpcy5ub19jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc19hY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lbnUubWVudV9hY3RpdmU7XG4gICAgfVxuXG4gICAgb3Blbl9tZW51KGNhbGxiYWNrczp7eWVzOkZ1bmN0aW9uLCBubzpGdW5jdGlvbn0sIGN1c3RvbV9wb3M/Ont4Om51bWJlciwgeTpudW1iZXJ9KXtcbiAgICAgICAgdGhpcy55ZXNfY2FsbGJhY2sgPSBjYWxsYmFja3MueWVzO1xuICAgICAgICB0aGlzLm5vX2NhbGxiYWNrID0gY2FsbGJhY2tzLm5vO1xuXG4gICAgICAgIGlmKHRoaXMuZGF0YS5oZXJvLmluX2FjdGlvbigpKXtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oZXJvLnN0b3BfY2hhcigpO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmhlcm8udXBkYXRlX3NoYWRvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tZW51Lm9wZW4odW5kZWZpbmVkLCAwLCB0cnVlLCB7YWN0aXZlX2RlZmF1bHQ6IDEuMSwgbWF4X3NjYWxlOiAxLjJ9KTtcblxuICAgICAgICBpZihjdXN0b21fcG9zKXtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX3Bvc2l0aW9uKGN1c3RvbV9wb3MueCwgY3VzdG9tX3Bvcy55KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBjbG9zZV9tZW51KGNhbGxiYWNrPzpGdW5jdGlvbikge1xuICAgICAgICBpZihjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSBjYWxsYmFjayA9IHRoaXMubm9fY2FsbGJhY2s7XG4gICAgICAgIGlmICghdGhpcy5pc19hY3RpdmUoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLm1lbnUuY2xvc2UoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBTaG9wSXRlbUNvdW50ZXIgfSBmcm9tICcuL1Nob3BJdGVtQ291bnRlcic7XG5pbXBvcnQgeyBXaW5kb3csIFRleHRPYmogfSBmcm9tICcuLi8uLi9XaW5kb3cnO1xuaW1wb3J0IHsgR29sZGVuU3VuIH0gZnJvbSAnLi4vLi4vR29sZGVuU3VuJztcbmltcG9ydCB7IEN1cnNvck1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9DdXJzb3JNYW5hZ2VyJztcbmltcG9ydCB7IFNob3BJdGVtIH0gZnJvbSAnLi4vLi4vU2hvcCc7XG5pbXBvcnQgeyBJdGVtU2xvdCB9IGZyb20gJy4uLy4uL01haW5DaGFyJztcblxuY29uc3QgUVVBTlRJVFlfV0lOX1ggPSA1NjtcbmNvbnN0IFFVQU5USVRZX1dJTl9ZID0gMzI7XG5jb25zdCBRVUFOVElUWV9XSU5fV0lEVEggPSAxODA7XG5jb25zdCBRVUFOVElUWV9XSU5fSEVJR0hUID0gMjA7XG5cbmNvbnN0IElURU1fQ09VTlRFUl9YID0gODtcbmNvbnN0IElURU1fQ09VTlRFUl9ZID0gODtcblxuY29uc3QgUVVBTlRJVFlfVEVYVF9FTkRfWCA9IDkzO1xuY29uc3QgUVVBTlRJVFlfVEVYVF9ZID0gODtcblxuY29uc3QgQ09JTlNfVkFMVUVfRU5EX1ggPSAxNDE7XG5jb25zdCBDT0lOU19WQUxVRV9ZID0gODtcblxuY29uc3QgQ09JTlNfTEFCRUxfWCA9IDE0NDtcbmNvbnN0IENPSU5TX0xBQkVMX1kgPSA4O1xuXG5jb25zdCBDVVJTT1JfWCA9IDEzMjtcbmNvbnN0IENVUlNPUl9ZID0gNDY7XG5cbmV4cG9ydCBjbGFzcyBTaG9wSXRlbVF1YW50aXR5V2luZG93IHtcbiAgICBwdWJsaWMgZ2FtZTpQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZGF0YTpHb2xkZW5TdW47XG4gICAgcHVibGljIGN1cnNvcl9tYW5hZ2VyOkN1cnNvck1hbmFnZXI7XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOkZ1bmN0aW9uO1xuXG4gICAgcHVibGljIHdpbmRvdzpXaW5kb3c7XG4gICAgcHVibGljIGl0ZW1fY291bnRlcjpTaG9wSXRlbUNvdW50ZXI7XG4gICAgcHVibGljIGNob3Nlbl9xdWFudGl0eTpudW1iZXI7XG4gICAgcHVibGljIGJhc2VfcHJpY2U6bnVtYmVyO1xuICAgIHB1YmxpYyBpc19vcGVuOmJvb2xlYW47XG5cbiAgICBwdWJsaWMgcXVhbnRpdHlfdGV4dDpUZXh0T2JqO1xuICAgIHB1YmxpYyBjb2luc192YWxfdGV4dDpUZXh0T2JqO1xuICAgIHB1YmxpYyBjb2luc19sYWJlbF90ZXh0OlRleHRPYmo7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOlBoYXNlci5HYW1lLCBkYXRhOkdvbGRlblN1biwgY3Vyc29yX21hbmFnZXI6Q3Vyc29yTWFuYWdlcikge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmN1cnNvcl9tYW5hZ2VyID0gY3Vyc29yX21hbmFnZXI7XG4gICAgICAgIHRoaXMuY2xvc2VfY2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvdyh0aGlzLmdhbWUsIFFVQU5USVRZX1dJTl9YLCBRVUFOVElUWV9XSU5fWSwgUVVBTlRJVFlfV0lOX1dJRFRILCBRVUFOVElUWV9XSU5fSEVJR0hUKTtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIgPSBuZXcgU2hvcEl0ZW1Db3VudGVyKHRoaXMuZ2FtZSwgdGhpcy53aW5kb3cuZ3JvdXAsIElURU1fQ09VTlRFUl9YLCBJVEVNX0NPVU5URVJfWSwgdGhpcy5vbl9jaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5jaG9zZW5fcXVhbnRpdHkgPSAxO1xuICAgICAgICB0aGlzLmJhc2VfcHJpY2UgPSAwO1xuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnF1YW50aXR5X3RleHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihTdHJpbmcodGhpcy5jaG9zZW5fcXVhbnRpdHkpLCBRVUFOVElUWV9URVhUX0VORF9YLCBRVUFOVElUWV9URVhUX1ksIHRydWUpO1xuICAgICAgICB0aGlzLmNvaW5zX3ZhbF90ZXh0ID0gdGhpcy53aW5kb3cuc2V0X3RleHRfaW5fcG9zaXRpb24oXCJcIiwgQ09JTlNfVkFMVUVfRU5EX1gsIENPSU5TX1ZBTFVFX1ksIHRydWUpO1xuICAgICAgICB0aGlzLmNvaW5zX2xhYmVsX3RleHQgPSB0aGlzLndpbmRvdy5zZXRfdGV4dF9pbl9wb3NpdGlvbihcIkNvaW5zXCIsIENPSU5TX0xBQkVMX1gsIENPSU5TX0xBQkVMX1kpO1xuXG4gICAgfVxuXG4gICAgb25fY2hhbmdlKHF1YW50aXR5Om51bWJlcikge1xuICAgICAgICB0aGlzLmNob3Nlbl9xdWFudGl0eSA9IHF1YW50aXR5O1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChTdHJpbmcodGhpcy5jaG9zZW5fcXVhbnRpdHkpLCB0aGlzLnF1YW50aXR5X3RleHQpO1xuICAgICAgICB0aGlzLndpbmRvdy51cGRhdGVfdGV4dChTdHJpbmcodGhpcy5iYXNlX3ByaWNlKnRoaXMuY2hvc2VuX3F1YW50aXR5KSwgdGhpcy5jb2luc192YWxfdGV4dCk7XG4gICAgfVxuXG4gICAgaW5jcmVhc2VfYW1vdW50KCl7XG4gICAgICAgIHRoaXMuaXRlbV9jb3VudGVyLmFkdmFuY2Vfc3RlcCgxKTtcbiAgICB9XG5cbiAgICBkZWNyZWFzZV9hbW91bnQoKXtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuYWR2YW5jZV9zdGVwKC0xKTtcbiAgICB9XG5cbiAgICBvcGVuKHNob3BfaXRlbV9vYmo6U2hvcEl0ZW0sIGNoYXJfaXRlbV9vYmo/Okl0ZW1TbG90LCB1c2VfY29pbnM6Ym9vbGVhbj1mYWxzZSxcbiAgICAgICAgY2xvc2VfY2FsbGJhY2s/OkZ1bmN0aW9uLCBvcGVuX2NhbGxiYWNrPzpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMuY3Vyc29yX21hbmFnZXIubW92ZV90byhDVVJTT1JfWCwgQ1VSU09SX1ksIFwid2lnZ2xlXCIpO1xuXG4gICAgICAgIHRoaXMuYmFzZV9wcmljZSA9IHRoaXMuZGF0YS5pbmZvLml0ZW1zX2xpc3Rbc2hvcF9pdGVtX29iai5rZXlfbmFtZV0ucHJpY2U7XG4gICAgICAgIHRoaXMud2luZG93LnVwZGF0ZV90ZXh0KFN0cmluZyh0aGlzLmJhc2VfcHJpY2UpLCB0aGlzLmNvaW5zX3ZhbF90ZXh0KTtcblxuICAgICAgICBsZXQgb3duZWQgPSAhY2hhcl9pdGVtX29iaiA/IDAgOiBjaGFyX2l0ZW1fb2JqLnF1YW50aXR5O1xuICAgICAgICBsZXQgYXZhaWxhYmxlX3F1YW50aXR5ID0gKHNob3BfaXRlbV9vYmoucXVhbnRpdHkgPT09IC0xID8gMzAgOiBzaG9wX2l0ZW1fb2JqLnF1YW50aXR5KTtcbiAgICAgICAgaWYoYXZhaWxhYmxlX3F1YW50aXR5ICsgb3duZWQgPiAzMCkgYXZhaWxhYmxlX3F1YW50aXR5ID0gMzAgLSBvd25lZDtcbiAgICAgICAgaWYodXNlX2NvaW5zICYmIHRoaXMuYmFzZV9wcmljZSphdmFpbGFibGVfcXVhbnRpdHkgPiB0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zKXtcbiAgICAgICAgICAgIGF2YWlsYWJsZV9xdWFudGl0eSA9ICh0aGlzLmRhdGEuaW5mby5wYXJ0eV9kYXRhLmNvaW5zL3RoaXMuYmFzZV9wcmljZSkgfCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuY29uZmlnKGF2YWlsYWJsZV9xdWFudGl0eSwgdGhpcy5jaG9zZW5fcXVhbnRpdHksIG93bmVkKTtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gY2xvc2VfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMud2luZG93LnNob3cob3Blbl9jYWxsYmFjaywgZmFsc2UpO1xuXG4gICAgfVxuXG4gICAgY2xvc2UoKXtcbiAgICAgICAgdGhpcy5pdGVtX2NvdW50ZXIuZGVhY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLml0ZW1fY291bnRlci5jbGVhcigpO1xuICAgICAgICB0aGlzLmN1cnNvcl9tYW5hZ2VyLmNsZWFyX3R3ZWVucygpO1xuXG4gICAgICAgIHRoaXMuY2hvc2VuX3F1YW50aXR5ID0gMTtcbiAgICAgICAgdGhpcy5iYXNlX3ByaWNlID0gMDtcblxuICAgICAgICB0aGlzLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59IiwiY29uc3QgR1JJRF9DT0xPUiA9IDB4MDAwMDAwO1xuY29uc3QgSU5BQ1RJVkVfQkFSX0NPTE9SID0gMHg5ODk4OTg7XG5jb25zdCBESVNBQkxFRF9CQVJfQ09MT1IgPSAweEZGMDAwMDtcbmNvbnN0IEFDVElWRV9CQVJfQ09MT1IgPSAweEY4QjA3MDtcbmNvbnN0IE1BWF9JVEVNUyA9IDMwO1xuY29uc3QgR1JJRF9XSURUSCA9IE1BWF9JVEVNUyAqIDIgKyAxO1xuY29uc3QgR1JJRF9IRUlHSFQgPSA4O1xuXG5leHBvcnQgY2xhc3MgU2hvcEl0ZW1Db3VudGVyIHtcbiAgICBwdWJsaWMgZ2FtZTpQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZ3JvdXA6UGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyB4Om51bWJlcjtcbiAgICBwdWJsaWMgeTpudW1iZXI7XG4gICAgcHVibGljIG9uX2NoYW5nZTpGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBhdmFpbGFibGVfaXRlbXNfY291bnQ6bnVtYmVyO1xuICAgIHB1YmxpYyBkaXNhYmxlZF9jb3VudDpudW1iZXI7XG4gICAgcHVibGljIGN1cnJlbnRfcXVhbnRpdHk6bnVtYmVyO1xuICAgIHB1YmxpYyBhY3RpdmU6Ym9vbGVhbjtcblxuICAgIHB1YmxpYyBpbnRlcm5hbF9ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIGdyYXBoaWNzOlBoYXNlci5HcmFwaGljcztcbiAgICBwdWJsaWMgYWN0aXZlX2Jhcl9ncmFwaGljczpQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIGluYWN0aXZlX2Jhcl9ncmFwaGljczpQaGFzZXIuR3JhcGhpY3M7XG4gICAgcHVibGljIGRpc2FibGVkX2Jhcl9ncmFwaGljczpQaGFzZXIuR3JhcGhpY3M7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lOlBoYXNlci5HYW1lLCBncm91cDpQaGFzZXIuR3JvdXAsIHg6bnVtYmVyLCB5Om51bWJlciwgb25fY2hhbmdlOkZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQgPSAwO1xuICAgICAgICB0aGlzLmRpc2FibGVkX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5vbl9jaGFuZ2UgPSBvbl9jaGFuZ2UgPT09IHVuZGVmaW5lZCA/ICgpID0+IHt9IDogb25fY2hhbmdlO1xuICAgICAgICB0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPSAxO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC54ID0gdGhpcy54O1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLnkgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MgPSB0aGlzLmdhbWUuYWRkLmdyYXBoaWNzKDAsIDApO1xuICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcyA9IHRoaXMuZ2FtZS5hZGQuZ3JhcGhpY3MoMCwgMCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWRfYmFyX2dyYXBoaWNzID0gdGhpcy5nYW1lLmFkZC5ncmFwaGljcygwLCAwKTtcblxuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmdyYXBoaWNzKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC5hZGQodGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzKTtcbiAgICAgICAgdGhpcy5pbnRlcm5hbF9ncm91cC5hZGQodGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MpO1xuICAgICAgICB0aGlzLmludGVybmFsX2dyb3VwLmFkZCh0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcyk7XG4gICAgICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMuaW50ZXJuYWxfZ3JvdXApO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlX2dyaWQoKTtcbiAgICB9XG5cbiAgICBhZHZhbmNlX3N0ZXAoc3RlcDpudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ICs9IHN0ZXA7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcXVhbnRpdHkgPiB0aGlzLmF2YWlsYWJsZV9pdGVtc19jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gMVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudF9xdWFudGl0eSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmRpc2FibGVkX2NvdW50OyBpIDwgdGhpcy5kaXNhYmxlZF9jb3VudCt0aGlzLmN1cnJlbnRfcXVhbnRpdHk7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmxpbmVTdHlsZSgxLCBBQ1RJVkVfQkFSX0NPTE9SKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpICogMiArIDE7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZV9iYXJfZ3JhcGhpY3MubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVfYmFyX2dyYXBoaWNzLmxpbmVUbyh4LCBHUklEX0hFSUdIVCAtIDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25fY2hhbmdlKHRoaXMuY3VycmVudF9xdWFudGl0eSk7XG4gICAgfVxuXG4gICAgY3JlYXRlX2dyaWQoKSB7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygwLCAwKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oR1JJRF9XSURUSCwgMCk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgR1JJRF9DT0xPUik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKEdSSURfV0lEVEggLSAxLCAwKTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lVG8oR1JJRF9XSURUSCAtIDEsIEdSSURfSEVJR0hUIC0gMSk7XG5cbiAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgR1JJRF9DT0xPUik7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubW92ZVRvKEdSSURfV0lEVEggLSAxLCBHUklEX0hFSUdIVCAtIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygwLCBHUklEX0hFSUdIVCAtIDEpO1xuXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVN0eWxlKDEsIEdSSURfQ09MT1IpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbygwLCBHUklEX0hFSUdIVCAtIDEpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVUbygwLCAwKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1BWF9JVEVNUyAtIDE7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lU3R5bGUoMSwgR1JJRF9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gMiArIChpICogMik7XG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLm1vdmVUbyh4LCAwKTtcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVRvKHgsIEdSSURfSEVJR0hUIC0gMik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVfaW5hY3RpdmVfYmFyKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGlzYWJsZWRfY291bnQ7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZF9iYXJfZ3JhcGhpY3MubGluZVN0eWxlKDEsIERJU0FCTEVEX0JBUl9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gaSAqIDIgKyAxO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZF9iYXJfZ3JhcGhpY3MubW92ZVRvKHgsIDApO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZF9iYXJfZ3JhcGhpY3MubGluZVRvKHgsIEdSSURfSEVJR0hUIC0gMik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gTUFYX0lURU1TOyBpID4gKHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50ICsgdGhpcy5kaXNhYmxlZF9jb3VudCk7IC0taSkge1xuICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZV9iYXJfZ3JhcGhpY3MubGluZVN0eWxlKDEsIElOQUNUSVZFX0JBUl9DT0xPUik7XG4gICAgICAgICAgICBjb25zdCB4ID0gKGkgKiAyKSAtIDE7XG4gICAgICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5tb3ZlVG8oeCwgMCk7XG4gICAgICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5saW5lVG8oeCwgR1JJRF9IRUlHSFQgLSAyKTtcbiAgICAgICAgfVxuICAgIH0gXG5cbiAgICBjb25maWcoYXZhaWxhYmxlX2l0ZW1zX2NvdW50Om51bWJlciwgaW5pdGlhbF9xdWFudGl0eTpudW1iZXIsIGRpc2FibGVkX2NvdW50Om51bWJlcikge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuY3VycmVudF9xdWFudGl0eSA9IGluaXRpYWxfcXVhbnRpdHk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlX2l0ZW1zX2NvdW50ID0gYXZhaWxhYmxlX2l0ZW1zX2NvdW50O1xuICAgICAgICB0aGlzLmRpc2FibGVkX2NvdW50ID0gZGlzYWJsZWRfY291bnRcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNyZWF0ZV9pbmFjdGl2ZV9iYXIoKTtcbiAgICAgICAgdGhpcy5hZHZhbmNlX3N0ZXAoMCk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlX2Jhcl9ncmFwaGljcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmluYWN0aXZlX2Jhcl9ncmFwaGljcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmRpc2FibGVkX2Jhcl9ncmFwaGljcy5jbGVhcigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jdXJyZW50X3F1YW50aXR5ID0gMTtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVfaXRlbXNfY291bnQgPSAwO1xuICAgICAgICB0aGlzLmRpc2FibGVkX2NvdW50ID0gMDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxufSIsImltcG9ydCB7IFdpbmRvdyB9IGZyb20gJy4uLy4uL1dpbmRvdyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBHb2xkZW5TdW4gfSBmcm9tICcuLi8uLi9Hb2xkZW5TdW4nO1xuaW1wb3J0IHsgU2hvcE1lbnUgfSBmcm9tICcuLi8uLi9tYWluX21lbnVzL1Nob3BNZW51JztcbmltcG9ydCB7IE1haW5DaGFyIH0gZnJvbSAnLi4vLi4vTWFpbkNoYXInO1xuXG5jb25zdCBNQVhfUEVSX0xJTkUgPSA0O1xuXG5jb25zdCBXSU5fWCA9IDA7XG5jb25zdCBXSU5fWSA9IDExMjtcbmNvbnN0IFdJTl9XSURUSCA9IDEwMDtcbmNvbnN0IFdJTl9IRUlHSFQgPSAyMDtcblxuY29uc3QgQ0hBUl9HUk9VUF9YID0gMTY7XG5jb25zdCBDSEFSX0dST1VQX1kgPSAxMjg7XG5cbmNvbnN0IEdBUF9TSVpFID0gMjQ7XG5jb25zdCBTSElGVF9YID0gMTY7XG5jb25zdCBTSElGVF9ZID0gMzI7XG5cbmNvbnN0IENVUlNPUl9YID0gMDtcbmNvbnN0IENVUlNPUl9ZID0gMTE4O1xuXG5jb25zdCBBUlJPV19HUk9VUF9YID0gOTY7XG5jb25zdCBBUlJPV19HUk9VUF9ZID0gMTAwO1xuY29uc3QgVVBfQVJST1dfWCA9IDE2O1xuY29uc3QgVVBfQVJST1dfWSA9IDIwO1xuY29uc3QgRE9XTl9BUlJPV19YID0gMDtcbmNvbnN0IERPV05fQVJST1dfWSA9IDI0O1xuY29uc3QgQVJST1dfWV9ESUZGID0gODtcblxuY29uc3QgQVJST1dfVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5cbmV4cG9ydCBjbGFzcyBTaG9wQ2hhckRpc3BsYXkge1xuICAgIHB1YmxpYyBnYW1lOlBoYXNlci5HYW1lO1xuICAgIHB1YmxpYyBkYXRhOkdvbGRlblN1bjtcbiAgICBwdWJsaWMgcGFyZW50OlNob3BNZW51O1xuICAgIHB1YmxpYyBvbl9jaGFuZ2U6RnVuY3Rpb247XG4gICAgcHVibGljIGNsb3NlX2NhbGxiYWNrOkZ1bmN0aW9uO1xuXG4gICAgcHVibGljIHdpbmRvdzpXaW5kb3c7XG4gICAgcHVibGljIGNoYXJfZ3JvdXA6UGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBhcnJvd19ncm91cDpQaGFzZXIuR3JvdXA7XG4gICAgcHVibGljIHVwX2Fycm93OlBoYXNlci5TcHJpdGU7XG4gICAgcHVibGljIGRvd25fYXJyb3c6UGhhc2VyLlNwcml0ZTtcblxuICAgIHB1YmxpYyBhcnJvd190d2VlbnM6UGhhc2VyLlR3ZWVuW107XG4gICAgcHVibGljIGxpbmVzOk1haW5DaGFyW11bXTtcbiAgICBwdWJsaWMgY3VycmVudF9saW5lOm51bWJlcjtcbiAgICBwdWJsaWMgc2VsZWN0ZWRfaW5kZXg6bnVtYmVyO1xuICAgIHB1YmxpYyBpc19hY3RpdmU6Ym9vbGVhbjtcbiAgICBwdWJsaWMgaXNfb3Blbjpib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGRhdGEsIHBhcmVudCwgb25fY2hhbmdlKXtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub25fY2hhbmdlID0gb25fY2hhbmdlO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICB0aGlzLndpbmRvdyA9IG5ldyBXaW5kb3codGhpcy5nYW1lLCBXSU5fWCwgV0lOX1ksIFdJTl9XSURUSCwgV0lOX0hFSUdIVCk7XG4gICAgICAgIHRoaXMuY2hhcl9ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5jaGFyX2dyb3VwLnggPSBDSEFSX0dST1VQX1ggLSBTSElGVF9YO1xuICAgICAgICB0aGlzLmNoYXJfZ3JvdXAueSA9IENIQVJfR1JPVVBfWSAtIFNISUZUX1k7XG4gICAgICAgIHRoaXMuY2hhcl9ncm91cC5hbHBoYSA9IDE7XG5cbiAgICAgICAgdGhpcy5hcnJvd19ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC54ID0gQVJST1dfR1JPVVBfWDtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC55ID0gQVJST1dfR1JPVVBfWTtcblxuICAgICAgICB0aGlzLnVwX2Fycm93ID0gdGhpcy5hcnJvd19ncm91cC5jcmVhdGUoVVBfQVJST1dfWCwgVVBfQVJST1dfWSwgXCJncmVlbl9hcnJvd1wiKTtcbiAgICAgICAgdGhpcy51cF9hcnJvdy5yb3RhdGlvbiA9IE1hdGguUEk7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdyA9IHRoaXMuYXJyb3dfZ3JvdXAuY3JlYXRlKERPV05fQVJST1dfWCwgRE9XTl9BUlJPV19ZLCBcImdyZWVuX2Fycm93XCIpO1xuICAgICAgICB0aGlzLnVwX2Fycm93LmFscGhhID0gMDtcbiAgICAgICAgdGhpcy5kb3duX2Fycm93LmFscGhhID0gMDtcblxuICAgICAgICB0aGlzLmFycm93X3R3ZWVucyA9IFtdO1xuXG4gICAgICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdXBkYXRlX2dyb3VwX3Bvcygpe1xuICAgICAgICB0aGlzLmNoYXJfZ3JvdXAueCA9IENIQVJfR1JPVVBfWCAtIFNISUZUX1ggKyB0aGlzLmdhbWUuY2FtZXJhLng7XG4gICAgICAgIHRoaXMuY2hhcl9ncm91cC55ID0gQ0hBUl9HUk9VUF9ZIC0gU0hJRlRfWSArIHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC54ID0gQVJST1dfR1JPVVBfWCArIHRoaXMuZ2FtZS5jYW1lcmEueDtcbiAgICAgICAgdGhpcy5hcnJvd19ncm91cC55ID0gQVJST1dfR1JPVVBfWSArIHRoaXMuZ2FtZS5jYW1lcmEueTtcbiAgICB9XG5cbiAgICAvKkhpZGVzIG9yIHNob3dzIHNwZWNpZmljIGFycm93c1xuICAgIFxuICAgIElucHV0OiB1cCwgZG93biBbYm9vbGVhbl0gLSBJZiB0cnVlLCBzaG93cyB1cC9kb3duIGFycm93Ki9cbiAgICBzZXRfYXJyb3dzKHVwOmJvb2xlYW49ZmFsc2UsIGRvd246Ym9vbGVhbj1mYWxzZSl7XG4gICAgICAgIHRoaXMudXBfYXJyb3cueCA9IFVQX0FSUk9XX1g7XG4gICAgICAgIHRoaXMudXBfYXJyb3cueSA9IFVQX0FSUk9XX1k7XG4gICAgICAgIHRoaXMuZG93bl9hcnJvdy54ID0gRE9XTl9BUlJPV19YO1xuICAgICAgICB0aGlzLmRvd25fYXJyb3cueSA9IERPV05fQVJST1dfWTtcbiAgICAgICAgaWYodXApIHRoaXMudXBfYXJyb3cuYWxwaGEgPSAxO1xuICAgICAgICBlbHNlIHRoaXMudXBfYXJyb3cuYWxwaGEgPSAwO1xuXG4gICAgICAgIGlmKGRvd24pIHRoaXMuZG93bl9hcnJvdy5hbHBoYSA9IDE7XG4gICAgICAgIGVsc2UgdGhpcy5kb3duX2Fycm93LmFscGhhID0gMDtcbiAgICB9XG5cbiAgICAvKkNoZWNrcyB3aGljaCBhcnJvd3MgdG8gc2hvdyBvciBoaWRlKi9cbiAgICBjaGVja19hcnJvd3MoKXtcbiAgICAgICAgbGV0IHVwID0gZmFsc2U7XG4gICAgICAgIGxldCBkb3duID0gZmFsc2U7XG5cbiAgICAgICAgaWYodGhpcy5jdXJyZW50X2xpbmUgPCB0aGlzLmxpbmVzLmxlbmd0aC0xKSBkb3duID0gdHJ1ZTtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50X2xpbmUgPiAwKSB1cCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5zZXRfYXJyb3dzKHVwLCBkb3duKTtcbiAgICAgICAgdGhpcy5pbml0X2Fycm93X3R3ZWVucygpO1xuICAgICAgICB0aGlzLmdhbWUud29ybGQuYnJpbmdUb1RvcCh0aGlzLmFycm93X2dyb3VwKTtcbiAgICB9XG5cbiAgICAvKlN0YXJ0cyB0aGUgYXJyb3cgYW5pbWF0aW9ucyovXG4gICAgaW5pdF9hcnJvd190d2VlbnMoKXtcbiAgICAgICAgbGV0IHVwX3R3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLnVwX2Fycm93KVxuICAgICAgICAgICAgICAgIC50byh7eTogVVBfQVJST1dfWSAtIEFSUk9XX1lfRElGRn0sIEFSUk9XX1RXRUVOX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpXG4gICAgICAgICAgICAgICAgLnRvKHt5OiBVUF9BUlJPV19ZfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSkubG9vcCgpO1xuICAgICAgICB0aGlzLmFycm93X3R3ZWVucy5wdXNoKHVwX3R3ZWVuKTtcblxuICAgICAgICBsZXQgZG93bl90d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5kb3duX2Fycm93KVxuICAgICAgICAgICAgICAgIC50byh7eTogRE9XTl9BUlJPV19ZICsgQVJST1dfWV9ESUZGfSwgQVJST1dfVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAudG8oe3k6IERPV05fQVJST1dfWX0sIEFSUk9XX1RXRUVOX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpLmxvb3AoKTtcbiAgICAgICAgdGhpcy5hcnJvd190d2VlbnMucHVzaChkb3duX3R3ZWVuKTtcblxuICAgICAgICB1cF90d2Vlbi5zdGFydCgpO1xuICAgICAgICBkb3duX3R3ZWVuLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLypDbGVhcnMgdGhlIGFycm93IGFuaW1hdGlvbnMqL1xuICAgIGNsZWFyX2Fycm93X3R3ZWVucygpe1xuICAgICAgICBmb3IobGV0IGk9MDsgaTx0aGlzLmFycm93X3R3ZWVucy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmdhbWUudHdlZW5zLnJlbW92ZSh0aGlzLmFycm93X3R3ZWVucy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfY2hhcnMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBjaGFyID0gdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV1baV07XG4gICAgICAgICAgICBsZXQgc3ByaXRlOlBoYXNlci5TcHJpdGUgPSBudWxsO1xuXG4gICAgICAgICAgICBsZXQgZGVhZF9pZGxlID0gdGhpcy5jaGFyX2dyb3VwLmNoaWxkcmVuLmZpbHRlcigoczpQaGFzZXIuU3ByaXRlKSA9PiB7IFxuICAgICAgICAgICAgICAgIHJldHVybiAocy5hbGl2ZSA9PT0gZmFsc2UgJiYgcy5rZXkgPT09IGNoYXIuc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KHV0aWxzLmJhc2VfYWN0aW9ucy5JRExFKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoZGVhZF9pZGxlLmxlbmd0aD4wKSBzcHJpdGUgPSAoZGVhZF9pZGxlWzBdIGFzIFBoYXNlci5TcHJpdGUpLnJlc2V0KGkqR0FQX1NJWkUsIDApO1xuICAgICAgICAgICAgZWxzZSBzcHJpdGUgPSB0aGlzLmNoYXJfZ3JvdXAuY3JlYXRlKGkqR0FQX1NJWkUsIDAsIGNoYXIuc3ByaXRlX2Jhc2UuZ2V0QWN0aW9uS2V5KHV0aWxzLmJhc2VfYWN0aW9ucy5JRExFKSk7XG5cbiAgICAgICAgICAgIGNoYXIuc3ByaXRlX2Jhc2Uuc2V0QW5pbWF0aW9uKHNwcml0ZSwgdXRpbHMuYmFzZV9hY3Rpb25zLklETEUpO1xuICAgICAgICAgICAgc3ByaXRlLmFuaW1hdGlvbnMucGxheShjaGFyLnNwcml0ZV9iYXNlLmdldEFuaW1hdGlvbktleSh1dGlscy5iYXNlX2FjdGlvbnMuSURMRSwgdXRpbHMucmV2ZXJzZV9kaXJlY3Rpb25zW3V0aWxzLmRpcmVjdGlvbnMuZG93bl0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1ha2VfbGluZXMoKXtcbiAgICAgICAgbGV0IHBhcnR5X2xlbmd0aCA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVycy5sZW5ndGg7XG4gICAgICAgIGxldCBsaW5lX251bWJlciA9IHBhcnR5X2xlbmd0aCVNQVhfUEVSX0xJTkU9PT0wID8gKHBhcnR5X2xlbmd0aC9NQVhfUEVSX0xJTkUpIHwgMCA6ICgocGFydHlfbGVuZ3RoL01BWF9QRVJfTElORSkgfCAwKSArIDE7XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaTxsaW5lX251bWJlcjsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjaGFycyA9IFtdO1xuICAgICAgICAgICAgZm9yKGxldCBuPWkqTUFYX1BFUl9MSU5FOyBuPChpKzEpKk1BWF9QRVJfTElORTsgbisrKXtcbiAgICAgICAgICAgICAgICBpZighdGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzW25dKSBicmVhaztcbiAgICAgICAgICAgICAgICBjaGFycy5wdXNoKHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1tuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxpbmVzW2ldID0gY2hhcnM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGFuZ2VfbGluZShsaW5lOm51bWJlciwgZm9yY2VfaW5kZXg/Om51bWJlcil7XG4gICAgICAgIHRoaXMuY2xlYXJfYXJyb3dfdHdlZW5zKCk7XG5cbiAgICAgICAgaWYodGhpcy5kYXRhLmluZm8ucGFydHlfZGF0YS5tZW1iZXJzLmxlbmd0aCA8IE1BWF9QRVJfTElORSpsaW5lKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSBsaW5lO1xuICAgICAgICBcbiAgICAgICAgaWYoZm9yY2VfaW5kZXggIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gZm9yY2VfaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZih0aGlzLnNlbGVjdGVkX2luZGV4ICE9PSBudWxsICYmIHRoaXMuc2VsZWN0ZWRfaW5kZXggPj0gdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHV0aWxzLmtpbGxfYWxsX3Nwcml0ZXModGhpcy5jaGFyX2dyb3VwKTtcbiAgICAgICAgLy91bnNldCBydW4gYW5pbWF0aW9uIGZvciBwcmV2aW91cyBjaGFyYWN0ZXJcbiAgICAgICAgdGhpcy5zZXRfY2hhcnMoKTtcbiAgICAgICAgdGhpcy5jaGVja19hcnJvd3MoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RfY2hhcih0aGlzLnNlbGVjdGVkX2luZGV4KTtcbiAgICB9XG5cbiAgICBuZXh0X2xpbmUoZm9yY2VfaW5kZXg/Om51bWJlcil7XG4gICAgICAgIGlmKHRoaXMubGluZXMubGVuZ3RoID09PSAxIHx8IHRoaXMuY3VycmVudF9saW5lICsgMSA9PT0gdGhpcy5saW5lcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgbGV0IGluZGV4ID0gIHRoaXMuY3VycmVudF9saW5lICsgMTtcblxuICAgICAgICB0aGlzLmNoYW5nZV9saW5lKGluZGV4LCBmb3JjZV9pbmRleCk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNfbGluZShmb3JjZV9pbmRleD86bnVtYmVyKXtcbiAgICAgICAgaWYodGhpcy5saW5lcy5sZW5ndGggPT09IDEgfHwgdGhpcy5jdXJyZW50X2xpbmUgLTEgPCAwKSByZXR1cm47XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuY3VycmVudF9saW5lIC0gMTtcblxuICAgICAgICB0aGlzLmNoYW5nZV9saW5lKGluZGV4LCBmb3JjZV9pbmRleCk7XG4gICAgfVxuXG4gICAgc2VsZWN0X2NoYXIoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgLy91bnNldCBydW4gYW5pbWF0aW9uIGZvciBwcmV2aW91cyBjaGFyYWN0ZXI7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaW5kZXggPSBpbmRleDtcbiAgICAgICAgLy9zZXQgcnVuIGFuaW1hdGlvbiBmb3IgbmV3IGNoYXJhY3RlcjtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oQ1VSU09SX1ggKyBpbmRleCpHQVBfU0laRSwgQ1VSU09SX1ksIFwid2lnZ2xlXCIpO1xuICAgICAgICBsZXQgYyA9IHRoaXMuZGF0YS5pbmZvLnBhcnR5X2RhdGEubWVtYmVyc1t0aGlzLmN1cnJlbnRfbGluZSpNQVhfUEVSX0xJTkUgKyB0aGlzLnNlbGVjdGVkX2luZGV4XTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMub25fY2hhbmdlKGMua2V5X25hbWUpO1xuICAgIH1cblxuICAgIG5leHRfY2hhcigpe1xuICAgICAgICBpZih0aGlzLmxpbmVzW3RoaXMuY3VycmVudF9saW5lXS5sZW5ndGggPT09IDEgJiYgdGhpcy5saW5lcy5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkX2luZGV4ICsgMSA9PT0gdGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZV0ubGVuZ3RoKXtcbiAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudF9saW5lICsgMSA9PT0gdGhpcy5saW5lcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMubGluZXMubGVuZ3RoID09PSAxKSB0aGlzLnNlbGVjdF9jaGFyKDApO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5jaGFuZ2VfbGluZSgwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGhpcy5uZXh0X2xpbmUoMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2NoYXIodGhpcy5zZWxlY3RlZF9pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldmlvdXNfY2hhcigpe1xuICAgICAgICBpZih0aGlzLmxpbmVzW3RoaXMuY3VycmVudF9saW5lXS5sZW5ndGggPT09IDEgJiYgdGhpcy5saW5lcy5sZW5ndGggPT09IDEpIHJldHVybjtcblxuICAgICAgICBpZih0aGlzLnNlbGVjdGVkX2luZGV4IC0xIDwgMCl7XG4gICAgICAgICAgICBpZih0aGlzLmN1cnJlbnRfbGluZSAtMSA8IDApe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMubGluZXMubGVuZ3RoID09PSAxKSB0aGlzLnNlbGVjdF9jaGFyKHRoaXMubGluZXNbdGhpcy5jdXJyZW50X2xpbmVdLmxlbmd0aC0xKTtcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuY2hhbmdlX2xpbmUodGhpcy5saW5lcy5sZW5ndGgtMSwgdGhpcy5saW5lc1t0aGlzLmxpbmVzLmxlbmd0aC0xXS5sZW5ndGgtMSk7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB0aGlzLnByZXZpb3VzX2xpbmUodGhpcy5saW5lc1t0aGlzLmN1cnJlbnRfbGluZSAtMV0ubGVuZ3RoLTEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdF9jaGFyKHRoaXMuc2VsZWN0ZWRfaW5kZXggLSAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFjdGl2YXRlKCl7XG4gICAgICAgIHRoaXMucGFyZW50LmN1cnNvcl9tYW5hZ2VyLm1vdmVfdG8oQ1VSU09SX1ggKyB0aGlzLnNlbGVjdGVkX2luZGV4KkdBUF9TSVpFLCBDVVJTT1JfWSwgXCJ3aWdnbGVcIik7XG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgZGVhY3RpdmF0ZSgpe1xuICAgICAgICB0aGlzLnBhcmVudC5jdXJzb3JfbWFuYWdlci5jbGVhcl90d2VlbnMoKTtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuKHNlbGVjdF9pbmRleDpudW1iZXI9MCwgY2xvc2VfY2FsbGJhY2s/OkZ1bmN0aW9uLCBvcGVuX2NhbGxiYWNrPzpGdW5jdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gc2VsZWN0X2luZGV4O1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IDA7XG5cbiAgICAgICAgdGhpcy5tYWtlX2xpbmVzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlX2dyb3VwX3BvcygpO1xuICAgICAgICB0aGlzLmNoZWNrX2Fycm93cygpO1xuICAgICAgICB0aGlzLnNldF9jaGFycygpO1xuICAgICAgICAvL3NldCBydW5uaW5nIGFuaW1hdGlvbiBmb3IgY2hhcmFjdGVyXG5cbiAgICAgICAgdGhpcy5jaGFyX2dyb3VwLmFscGhhID0gMTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jbG9zZV9jYWxsYmFjayA9IGNsb3NlX2NhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy53aW5kb3cuc2hvdyhvcGVuX2NhbGxiYWNrLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoZGVzdHJveTpib29sZWFuPWZhbHNlKSB7XG4gICAgICAgIHRoaXMuaXNfb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdXRpbHMua2lsbF9hbGxfc3ByaXRlcyh0aGlzLmNoYXJfZ3JvdXAsIGRlc3Ryb3kpO1xuXG4gICAgICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSAwO1xuICAgICAgICB0aGlzLnNlbGVjdGVkX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcl9ncm91cC5hbHBoYSA9IDA7XG5cbiAgICAgICAgdGhpcy5zZXRfYXJyb3dzKGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UodGhpcy5jbG9zZV9jYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB0aGlzLmNsb3NlX2NhbGxiYWNrID0gbnVsbDtcbiAgICB9XG5cbn0iLCJjb25zdCBXSUdHTEVfS0VZID0gXCJ3aWdnbGVcIlxuY29uc3QgV0lHR0xFX1gxID0gLTQ7XG5jb25zdCBXSUdHTEVfWTEgPSArNDtcbmNvbnN0IFdJR0dMRV9YMiA9IC04O1xuY29uc3QgV0lHR0xFX1kyID0gMDtcblxuY29uc3QgUE9JTlRfS0VZID0gXCJwb2ludFwiXG5jb25zdCBQT0lOVF9YID0gLTY7XG5jb25zdCBQT0lOVF9ZID0gNjtcblxuY29uc3QgVFdFRU5fVElNRSA9IFBoYXNlci5UaW1lci5RVUFSVEVSID4+IDE7XG5jb25zdCBNT1ZFX1RJTUUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxO1xuXG5leHBvcnQgY2xhc3MgQ3Vyc29yTWFuYWdlcntcbiAgICBwdWJsaWMgZ2FtZTpQaGFzZXIuR2FtZTtcbiAgICBwdWJsaWMgZ3JvdXA6UGhhc2VyLkdyb3VwO1xuICAgIHB1YmxpYyBjdXJzb3I6UGhhc2VyLlNwcml0ZTtcblxuICAgIHB1YmxpYyBhY3RpdmVfdHdlZW46UGhhc2VyLlR3ZWVuO1xuICAgIHB1YmxpYyBjdXJyZW50X3R3ZWVuOnN0cmluZztcbiAgICBwdWJsaWMgY3Vyc29yX2RlZmF1bHRfcG9zOnt4Om51bWJlciwgeTpudW1iZXJ9O1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSl7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG5cbiAgICAgICAgdGhpcy5ncm91cCA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5ncm91cC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ3JvdXAueCA9IDA7XG4gICAgICAgIHRoaXMuZ3JvdXAueSA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yID0gdGhpcy5ncm91cC5jcmVhdGUoMCwgMCwgXCJjdXJzb3JcIik7XG4gICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50X3R3ZWVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJzb3JfZGVmYXVsdF9wb3MgPSB7eDogMCwgeTogMH07XG4gICAgfVxuXG4gICAgY2xlYXJfdHdlZW5zKCl7XG4gICAgICAgIGlmKHRoaXMuYWN0aXZlX3R3ZWVuKSB0aGlzLmdhbWUudHdlZW5zLnJlbW92ZSh0aGlzLmFjdGl2ZV90d2Vlbik7XG4gICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gbnVsbDtcblxuICAgICAgICB0aGlzLmN1cnNvci54ID0gdGhpcy5jdXJzb3JfZGVmYXVsdF9wb3MueDtcbiAgICAgICAgdGhpcy5jdXJzb3IueSA9IHRoaXMuY3Vyc29yX2RlZmF1bHRfcG9zLnk7XG4gICAgfVxuXG4gICAgaW5pdF90d2Vlbih0eXBlOnN0cmluZyl7XG4gICAgICAgIHRoaXMuY2xlYXJfdHdlZW5zKCk7XG4gICAgICAgIGlmKCF0aGlzLmdyb3VwLnZpc2libGUpIHRoaXMuc2hvdygpO1xuXG4gICAgICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgICAgIGNhc2UgV0lHR0xFX0tFWTpcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZV90d2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5jdXJzb3IpXG4gICAgICAgICAgICAgICAgLnRvKHsgeDogdGhpcy5jdXJzb3IueCArIFdJR0dMRV9YMSwgeTogdGhpcy5jdXJzb3IueSArIFdJR0dMRV9ZMSB9LCBUV0VFTl9USU1FLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lKVxuICAgICAgICAgICAgICAgIC50byh7IHg6IHRoaXMuY3Vyc29yLnggKyBXSUdHTEVfWDIsIHk6IHRoaXMuY3Vyc29yLnkgKyBXSUdHTEVfWTIgfSwgVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAudG8oeyB4OiB0aGlzLmN1cnNvci54ICsgV0lHR0xFX1gxLCB5OiB0aGlzLmN1cnNvci55ICsgV0lHR0xFX1kxIH0sIFRXRUVOX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpXG4gICAgICAgICAgICAgICAgLnRvKHsgeDogdGhpcy5jdXJzb3IueCwgeTogdGhpcy5jdXJzb3IueX0sIFRXRUVOX1RJTUUsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpLmxvb3AoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUE9JTlRfS0VZOlxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlX3R3ZWVuID0gdGhpcy5nYW1lLmFkZC50d2Vlbih0aGlzLmN1cnNvcilcbiAgICAgICAgICAgICAgICAudG8oeyB4OiB0aGlzLmN1cnNvci54ICsgUE9JTlRfWCwgeTogdGhpcy5jdXJzb3IueSArIFBPSU5UX1kgfSwgVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSlcbiAgICAgICAgICAgICAgICAudG8oeyB4OiB0aGlzLmN1cnNvci54LCB5OiB0aGlzLmN1cnNvci55fSwgVFdFRU5fVElNRSwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSkubG9vcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50X3R3ZWVuID0gdHlwZTtcbiAgICAgICAgaWYodGhpcy5hY3RpdmVfdHdlZW4pIHRoaXMuYWN0aXZlX3R3ZWVuLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbW92ZV90byhuZXdfeDpudW1iZXIsIG5ld195Om51bWJlciwgdHdlZW5fdHlwZT86c3RyaW5nLCBhbmltYXRlOmJvb2xlYW49dHJ1ZSl7XG4gICAgICAgIGlmKCF0aGlzLmdyb3VwLnZpc2libGUpIHRoaXMuc2hvdygpO1xuXG4gICAgICAgIHRoaXMuY3Vyc29yX2RlZmF1bHRfcG9zID0ge3g6IG5ld194ICsgdGhpcy5nYW1lLmNhbWVyYS54LCB5OiBuZXdfeSArIHRoaXMuZ2FtZS5jYW1lcmEueX07XG4gICAgICAgIHRoaXMuZ2FtZS53b3JsZC5icmluZ1RvVG9wKHRoaXMuY3Vyc29yLnBhcmVudCk7XG5cbiAgICAgICAgaWYoYW5pbWF0ZSl7XG4gICAgICAgICAgICBsZXQgdCA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5jdXJzb3IpLnRvKFxuICAgICAgICAgICAgICAgIHt4OiBuZXdfeCArIHRoaXMuZ2FtZS5jYW1lcmEueCwgeTogbmV3X3kgKyB0aGlzLmdhbWUuY2FtZXJhLnl9LFxuICAgICAgICAgICAgICAgIE1PVkVfVElNRSxcbiAgICAgICAgICAgICAgICBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLFxuICAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmKHR3ZWVuX3R5cGUgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgdC5vbkNvbXBsZXRlLmFkZE9uY2UodGhpcy5pbml0X3R3ZWVuLmJpbmQodGhpcyx0d2Vlbl90eXBlKSx0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IueCA9IG5ld194ICsgdGhpcy5nYW1lLmNhbWVyYS54O1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IueSA9IG5ld195ICsgdGhpcy5nYW1lLmNhbWVyYS55O1xuXG4gICAgICAgICAgICBpZih0d2Vlbl90eXBlICE9PSB1bmRlZmluZWQpIHRoaXMuaW5pdF90d2Vlbih0d2Vlbl90eXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGUoKXtcbiAgICAgICAgdGhpcy5ncm91cC52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2hvdygpe1xuICAgICAgICB0aGlzLmdyb3VwLnZpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKXtcbiAgICAgICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcy5jdXJzb3IsIHRydWUpO1xuICAgICAgICB0aGlzLmdyb3VwID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmFjdGl2ZV90d2VlbiA9IG51bGw7XG4gICAgfVxuICAgIFxufSIsImltcG9ydCB7IGRpcmVjdGlvbnMsIHJldmVyc2VfZGlyZWN0aW9ucywgYWN0aW9uX2lucHV0cyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuY29uc3QgREVGQVVMVF9MT09QX1RJTUUgPSBQaGFzZXIuVGltZXIuUVVBUlRFUiA+PiAxO1xuXG5jb25zdCBkaXJlY3Rpb25fa2V5cyA9IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwXCIsIFwiZG93blwiXTtcbmNvbnN0IGFjdGlvbl9rZXlzID0gW1wic3BhY2ViYXJcIiwgXCJlc2NcIiwgXCJlbnRlclwiLCBcInNoaWZ0XCJdO1xuXG5leHBvcnQgdHlwZSBDb250cm9sU3RhdHVzID0ge1xuICAgIGtleTpzdHJpbmc7XG4gICAgcHJlc3NlZD86Ym9vbGVhbjtcbiAgICBjYWxsYmFjazpGdW5jdGlvbjtcbiAgICBsb29wPzpib29sZWFuO1xuICAgIHBoYXNlcl9rZXk6bnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udHJvbE1hbmFnZXJ7XG4gICAgcHVibGljIGdhbWU6UGhhc2VyLkdhbWU7XG4gICAgcHVibGljIGRpc2FibGVkOmJvb2xlYW47XG4gICAgcHVibGljIGluaXRpYWxpemVkOmJvb2xlYW47XG4gICAgcHVibGljIGxvb3BfdGltZTpudW1iZXI7XG5cbiAgICBwdWJsaWMgZGlyZWN0aW9uczp7W2tleTpzdHJpbmddIDogQ29udHJvbFN0YXR1c307XG4gICAgcHVibGljIGFjdGlvbnM6e1trZXk6c3RyaW5nXSA6IENvbnRyb2xTdGF0dXN9O1xuXG4gICAgcHVibGljIHNpZ25hbF9iaW5kaW5nczpQaGFzZXIuU2lnbmFsQmluZGluZ1tdO1xuICAgIHB1YmxpYyBsb29wX3N0YXJ0X3RpbWVyOlBoYXNlci5UaW1lcjtcbiAgICBwdWJsaWMgbG9vcF9yZXBlYXRfdGltZXI6UGhhc2VyLlRpbWVyO1xuICAgIGNvbnN0cnVjdG9yKGdhbWUpe1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb29wX3RpbWUgPSBERUZBVUxUX0xPT1BfVElNRTtcblxuICAgICAgICBsZXQgZGlycyA9IFt7a2V5OiByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5sZWZ0XSwgcHJlc3NlZDogZmFsc2UsIGNhbGxiYWNrOiBudWxsLCBsb29wOiB0cnVlLCBwaGFzZXJfa2V5OiBQaGFzZXIuS2V5Ym9hcmQuTEVGVH0sXG4gICAgICAgIHtrZXk6IHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnJpZ2h0XSwgcHJlc3NlZDogZmFsc2UsIGNhbGxiYWNrOiBudWxsLCBsb29wOiB0cnVlLCBwaGFzZXJfa2V5OiBQaGFzZXIuS2V5Ym9hcmQuUklHSFR9LFxuICAgICAgICB7a2V5OiByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy51cF0sIHByZXNzZWQ6IGZhbHNlLCBjYWxsYmFjazogbnVsbCwgbG9vcDogdHJ1ZSwgcGhhc2VyX2tleTogUGhhc2VyLktleWJvYXJkLlVQfSxcbiAgICAgICAge2tleTogcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl0sIHByZXNzZWQ6IGZhbHNlLCBjYWxsYmFjazogbnVsbCwgbG9vcDogdHJ1ZSwgcGhhc2VyX2tleTogUGhhc2VyLktleWJvYXJkLkRPV059XTtcblxuICAgICAgICBsZXQgYWN0cyA9IFt7a2V5OiBhY3Rpb25faW5wdXRzLlNQQUNFQkFSLCBjYWxsYmFjazogbnVsbCwgcGhhc2VyX2tleTogUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSfSxcbiAgICAgICAge2tleTogYWN0aW9uX2lucHV0cy5FU0MsIGNhbGxiYWNrOiBudWxsLCBwaGFzZXJfa2V5OiBQaGFzZXIuS2V5Ym9hcmQuRVNDfSxcbiAgICAgICAge2tleTogYWN0aW9uX2lucHV0cy5FTlRFUiwgY2FsbGJhY2s6IG51bGwsIHBoYXNlcl9rZXk6IFBoYXNlci5LZXlib2FyZC5FTlRFUn0sXG4gICAgICAgIHtrZXk6IGFjdGlvbl9pbnB1dHMuU0hJRlQsIGNhbGxiYWNrOiBudWxsLCBwaGFzZXJfa2V5OiBQaGFzZXIuS2V5Ym9hcmQuU0hJRlR9XTtcblxuICAgICAgICB0aGlzLmRpcmVjdGlvbnMgPSBfLm1hcEtleXMoZGlycywgZGlyID0+IGRpci5rZXkpIGFzIHtba2V5OnN0cmluZ10gOiBDb250cm9sU3RhdHVzfTtcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gXy5tYXBLZXlzKGFjdHMsIGFjdCA9PiBhY3Qua2V5KSBhcyB7W2tleTpzdHJpbmddIDogQ29udHJvbFN0YXR1c307XG5cbiAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyID0gdGhpcy5nYW1lLnRpbWUuY3JlYXRlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lciA9IHRoaXMuZ2FtZS50aW1lLmNyZWF0ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgZ2V0X29wcG9zaXRlX2RpcihkaXI6c3RyaW5nKXtcbiAgICAgICAgc3dpdGNoKGRpcil7XG4gICAgICAgICAgICBjYXNlIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnJpZ2h0XTpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMubGVmdF07XG4gICAgICAgICAgICBjYXNlIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmxlZnRdOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5yaWdodF07XG4gICAgICAgICAgICBjYXNlIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXTpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl07XG4gICAgICAgICAgICBjYXNlIHJldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLmRvd25dOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy51cF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRfY29udHJvbChob3Jpem9udGFsOmJvb2xlYW4sIHZlcnRpY2FsOmJvb2xlYW4sIGhvcml6b250YWxfbG9vcDpib29sZWFuPXRydWUsIHZlcnRpY2FsX2xvb3A6Ym9vbGVhbj1mYWxzZSxcbiAgICAgICAgY2FsbGJhY2tzOntcbiAgICAgICAgICAgIGxlZnQ/OkZ1bmN0aW9uLCByaWdodD86RnVuY3Rpb24sIHVwPzpGdW5jdGlvbiwgZG93bj86RnVuY3Rpb24sXG4gICAgICAgICAgICBlbnRlcj86RnVuY3Rpb24sIGVzYz86RnVuY3Rpb24sIHNoaWZ0PzpGdW5jdGlvbiwgc3BhY2ViYXI/OkZ1bmN0aW9uXG4gICAgICAgIH0sIGN1c3RvbV9sb29wX3RpbWU/Om51bWJlcil7XG4gICAgICAgIGlmKHRoaXMuaW5pdGlhbGl6ZWQpIHRoaXMucmVzZXQoKTtcblxuICAgICAgICBpZihob3Jpem9udGFsKXtcbiAgICAgICAgICAgIGlmKCFob3Jpem9udGFsX2xvb3Ape1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tyZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5sZWZ0XV0ubG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tyZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5yaWdodF1dLmxvb3AgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbnNbcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMubGVmdF1dLmNhbGxiYWNrID0gY2FsbGJhY2tzLmxlZnQ7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbnNbcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMucmlnaHRdXS5jYWxsYmFjayA9IGNhbGxiYWNrcy5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZih2ZXJ0aWNhbCl7XG4gICAgICAgICAgICBpZighdmVydGljYWxfbG9vcCl7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zW3JldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXV0ubG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tyZXZlcnNlX2RpcmVjdGlvbnNbZGlyZWN0aW9ucy5kb3duXV0ubG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zW3JldmVyc2VfZGlyZWN0aW9uc1tkaXJlY3Rpb25zLnVwXV0uY2FsbGJhY2sgPSBjYWxsYmFja3MudXA7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbnNbcmV2ZXJzZV9kaXJlY3Rpb25zW2RpcmVjdGlvbnMuZG93bl1dLmNhbGxiYWNrID0gY2FsbGJhY2tzLmRvd247IFxuICAgICAgICB9XG4gICAgICAgIGlmKGNhbGxiYWNrcy5lbnRlcikgdGhpcy5hY3Rpb25zW2FjdGlvbl9pbnB1dHMuRU5URVJdLmNhbGxiYWNrID0gY2FsbGJhY2tzLmVudGVyO1xuICAgICAgICBpZihjYWxsYmFja3MuZXNjKSB0aGlzLmFjdGlvbnNbYWN0aW9uX2lucHV0cy5FU0NdLmNhbGxiYWNrID0gY2FsbGJhY2tzLmVzYztcbiAgICAgICAgaWYoY2FsbGJhY2tzLnNoaWZ0KSB0aGlzLmFjdGlvbnNbYWN0aW9uX2lucHV0cy5TSElGVF0uY2FsbGJhY2sgPSBjYWxsYmFja3Muc2hpZnQ7XG4gICAgICAgIGlmKGNhbGxiYWNrcy5zcGFjZWJhcikgdGhpcy5hY3Rpb25zW2FjdGlvbl9pbnB1dHMuU1BBQ0VCQVJdLmNhbGxiYWNrID0gY2FsbGJhY2tzLnNwYWNlYmFyO1xuXG4gICAgICAgIGlmKGN1c3RvbV9sb29wX3RpbWUpIHRoaXMubG9vcF90aW1lID0gY3VzdG9tX2xvb3BfdGltZTtcbiAgICAgICAgdGhpcy5zZXRfZGlyZWN0aW9ucygpO1xuICAgICAgICB0aGlzLnNldF9hY3Rpb25zKCk7XG4gICAgfVxuXG4gICAgc2V0X2RpcmVjdGlvbnMoKXtcbiAgICAgICAgbGV0IGRpcmVjdGlvbnNfbGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5kaXJlY3Rpb25zKS5sZW5ndGg7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPGRpcmVjdGlvbnNfbGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5sb29wKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGIxID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleSh0aGlzLmRpcmVjdGlvbnNbZGlyZWN0aW9uX2tleXNbaV1dLnBoYXNlcl9rZXkpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbnNbdGhpcy5nZXRfb3Bwb3NpdGVfZGlyKGRpcmVjdGlvbl9rZXlzW2ldKV0ucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1t0aGlzLmdldF9vcHBvc2l0ZV9kaXIoZGlyZWN0aW9uX2tleXNbaV0pXS5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0X2xvb3BfdGltZXJzKGRpcmVjdGlvbl9rZXlzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiMiA9IHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkodGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5waGFzZXJfa2V5KS5vblVwLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BfdGltZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5wdXNoKGIxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaWduYWxfYmluZGluZ3MucHVzaChiMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleSh0aGlzLmRpcmVjdGlvbnNbZGlyZWN0aW9uX2tleXNbaV1dLnBoYXNlcl9rZXkpLm9uRG93bi5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tkaXJlY3Rpb25fa2V5c1tpXV0uY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLnB1c2goYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZighdGhpcy5pbml0aWFsaXplZCkgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgc2V0X2FjdGlvbnMoKXtcbiAgICAgICAgbGV0IGFjdGlvbnNfbGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5hY3Rpb25zKS5sZW5ndGg7XG4gICAgICAgIGZvcihsZXQgaT0wOyBpPGFjdGlvbnNfbGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5hY3Rpb25zW2FjdGlvbl9rZXlzW2ldXS5jYWxsYmFjayl7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuYWRkS2V5KHRoaXMuYWN0aW9uc1thY3Rpb25fa2V5c1tpXV0ucGhhc2VyX2tleSkub25Eb3duLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uc1thY3Rpb25fa2V5c1tpXV0uY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5wdXNoKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKCF0aGlzLmluaXRpYWxpemVkKSB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzZXRfbG9vcF90aW1lcnMoZGlyZWN0aW9uPzpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VfaW5kZXgoZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyLmFkZChQaGFzZXIuVGltZXIuUVVBUlRFUiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lci5sb29wKHRoaXMubG9vcF90aW1lLCB0aGlzLmNoYW5nZV9pbmRleC5iaW5kKHRoaXMsIGRpcmVjdGlvbikpO1xuICAgICAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lci5zdGFydCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgY2hhbmdlX2luZGV4KGRpcmVjdGlvbjpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl0uY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBzdG9wX3RpbWVycygpIHtcbiAgICAgICAgdGhpcy5sb29wX3N0YXJ0X3RpbWVyLnN0b3AoKTtcbiAgICAgICAgdGhpcy5sb29wX3JlcGVhdF90aW1lci5zdG9wKCk7XG4gICAgfVxuXG4gICAgZGlzYWJsZSgpe1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdG9wX3RpbWVycygpO1xuICAgIH1cbiAgICBcbiAgICBlbmFibGUoKXtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlc2V0KCl7XG4gICAgICAgIGxldCBkaXJlY3Rpb25zX2xlbmd0aCA9IE9iamVjdC5rZXlzKHRoaXMuZGlyZWN0aW9ucykubGVuZ3RoO1xuICAgICAgICBsZXQgYWN0aW9uc19sZW5ndGggPSBPYmplY3Qua2V5cyh0aGlzLmFjdGlvbnMpLmxlbmd0aDtcblxuICAgICAgICBmb3IobGV0IGk9MDsgaTxkaXJlY3Rpb25zX2xlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tkaXJlY3Rpb25fa2V5c1tpXV0ucHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25zW2RpcmVjdGlvbl9rZXlzW2ldXS5sb29wID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uc1tkaXJlY3Rpb25fa2V5c1tpXV0uY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpPTA7IGk8YWN0aW9uc19sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNbYWN0aW9uX2tleXNbaV1dLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2lnbmFsX2JpbmRpbmdzLmZvckVhY2goc2lnbmFsX2JpbmRpbmcgPT4ge1xuICAgICAgICAgICAgc2lnbmFsX2JpbmRpbmcuZGV0YWNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncyA9IFtdO1xuICAgICAgICBpZih0aGlzLmluaXRpYWxpemVkKSB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIGlmKHRoaXMubG9vcF90aW1lICE9PSBERUZBVUxUX0xPT1BfVElNRSkgdGhpcy5sb29wX3RpbWUgPSBERUZBVUxUX0xPT1BfVElNRTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmxvb3Bfc3RhcnRfdGltZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmxvb3BfcmVwZWF0X3RpbWVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLnNpZ25hbF9iaW5kaW5ncy5mb3JFYWNoKHNpZ25hbF9iaW5kaW5nID0+IHtcbiAgICAgICAgICAgIHNpZ25hbF9iaW5kaW5nLmRldGFjaCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBTaG9wIH0gZnJvbSAnLi4vU2hvcCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplX3Nob3BzKHNob3BzX2RiOlNob3BbXSkge1xuICAgIGxldCBzaG9wc19saXN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaG9wc19kYi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBzaG9wX2RhdGEgPSBzaG9wc19kYltpXTtcbiAgICAgICAgc2hvcHNfbGlzdFtzaG9wX2RhdGEua2V5X25hbWVdID0gbmV3IFNob3AoXG4gICAgICAgICAgICBzaG9wX2RhdGEua2V5X25hbWUsXG4gICAgICAgICAgICBzaG9wX2RhdGEuZGlhbG9nX2tleSxcbiAgICAgICAgICAgIHNob3BfZGF0YS5hdmF0YXJfa2V5LFxuICAgICAgICAgICAgc2hvcF9kYXRhLml0ZW1fbGlzdFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc2hvcHNfbGlzdDtcbn0iLCJleHBvcnQgdHlwZSBTaG9wSXRlbT17XG4gICAga2V5X25hbWU6c3RyaW5nO1xuICAgIHF1YW50aXR5Om51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNob3Age1xuICAgIHB1YmxpYyBrZXlfbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBkaWFsb2dfa2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGF2YXRhcl9rZXk6IHN0cmluZztcbiAgICBwdWJsaWMgaXRlbV9saXN0OlNob3BJdGVtW107XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGtleV9uYW1lOnN0cmluZyxcbiAgICAgICAgZGlhbG9nX2tleTpzdHJpbmcsXG4gICAgICAgIGF2YXRhcl9rZXk6c3RyaW5nLFxuICAgICAgICBpdGVtX2xpc3Q6U2hvcEl0ZW1bXSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5rZXlfbmFtZSA9IGtleV9uYW1lO1xuICAgICAgICB0aGlzLmRpYWxvZ19rZXkgPSBkaWFsb2dfa2V5O1xuICAgICAgICB0aGlzLmF2YXRhcl9rZXkgPSBhdmF0YXJfa2V5O1xuICAgICAgICB0aGlzLml0ZW1fbGlzdCA9IGl0ZW1fbGlzdDtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==